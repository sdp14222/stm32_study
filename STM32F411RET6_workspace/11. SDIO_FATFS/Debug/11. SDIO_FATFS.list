
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009404  08009404  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800940c  0800940c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000070  08009484  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08009484  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d26  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  00031dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c39  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148c5  00000000  00000000  0004f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d167  00000000  00000000  00063aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000f0c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e8c 	.word	0x08008e8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008e8c 	.word	0x08008e8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 fd8d 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 fda6 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f000 fd85 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f000 fd9e 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x68>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x68>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x68>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fbcf 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8ab 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffc1 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fb25 	bl	8000ca0 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000656:	f7ff ff95 	bl	8000584 <MX_DMA_Init>
  MX_FATFS_Init();
 800065a:	f005 f875 	bl	8005748 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800065e:	f000 f92d 	bl	80008bc <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	4941      	ldr	r1, [pc, #260]	; (800076c <main+0x12c>)
 8000666:	4842      	ldr	r0, [pc, #264]	; (8000770 <main+0x130>)
 8000668:	f003 fb62 	bl	8003d30 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BYTE buf[32] = "Hello world";	// file copy buffer
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <main+0x134>)
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	ca07      	ldmia	r2, {r0, r1, r2}
 8000674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  uint32_t bw, br;

  // 1. FS Initialization("0:/"drive allocation)
//  if((retSD = f_mount(&SDFatFS, "0:/", 1)) == FR_OK)
  if((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK)
 8000688:	2201      	movs	r2, #1
 800068a:	493b      	ldr	r1, [pc, #236]	; (8000778 <main+0x138>)
 800068c:	483b      	ldr	r0, [pc, #236]	; (800077c <main+0x13c>)
 800068e:	f007 faf7 	bl	8007c80 <f_mount>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <main+0x140>)
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <main+0x140>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10d      	bne.n	80006be <main+0x7e>
  {
	  sprintf(str, "f_mount OK %d\n", retSD);
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <main+0x140>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4936      	ldr	r1, [pc, #216]	; (8000784 <main+0x144>)
 80006aa:	4830      	ldr	r0, [pc, #192]	; (800076c <main+0x12c>)
 80006ac:	f007 ff80 	bl	80085b0 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006b0:	230a      	movs	r3, #10
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	492d      	ldr	r1, [pc, #180]	; (800076c <main+0x12c>)
 80006b6:	482e      	ldr	r0, [pc, #184]	; (8000770 <main+0x130>)
 80006b8:	f003 faa8 	bl	8003c0c <HAL_UART_Transmit>
 80006bc:	e00c      	b.n	80006d8 <main+0x98>
  }
  else
  {
	  sprintf(str, "f_mount failed %d\n", retSD);
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <main+0x140>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4930      	ldr	r1, [pc, #192]	; (8000788 <main+0x148>)
 80006c6:	4829      	ldr	r0, [pc, #164]	; (800076c <main+0x12c>)
 80006c8:	f007 ff72 	bl	80085b0 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006cc:	230a      	movs	r3, #10
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	4926      	ldr	r1, [pc, #152]	; (800076c <main+0x12c>)
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <main+0x130>)
 80006d4:	f003 fa9a 	bl	8003c0c <HAL_UART_Transmit>
  */

  // 3. File read
//  if((retSD = f_open(&SDFile, "0:/sdp.txt", FA_OPEN_EXISTING | FA_READ)) == FR_OK)
  // if file not exist
  if((retSD = f_open(&SDFile, "0:/sdp1234.txt", FA_OPEN_EXISTING | FA_READ)) == FR_OK)
 80006d8:	2201      	movs	r2, #1
 80006da:	492c      	ldr	r1, [pc, #176]	; (800078c <main+0x14c>)
 80006dc:	482c      	ldr	r0, [pc, #176]	; (8000790 <main+0x150>)
 80006de:	f007 fb15 	bl	8007d0c <f_open>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <main+0x140>)
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <main+0x140>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d120      	bne.n	8000734 <main+0xf4>
  {
	  f_read(&SDFile, buf, 32, &br);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	f107 0108 	add.w	r1, r7, #8
 80006f8:	2220      	movs	r2, #32
 80006fa:	4825      	ldr	r0, [pc, #148]	; (8000790 <main+0x150>)
 80006fc:	f007 fcc4 	bl	8008088 <f_read>
	  sprintf(str, "%s\n", buf);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	461a      	mov	r2, r3
 8000706:	4923      	ldr	r1, [pc, #140]	; (8000794 <main+0x154>)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <main+0x12c>)
 800070a:	f007 ff51 	bl	80085b0 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 800070e:	230a      	movs	r3, #10
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	4916      	ldr	r1, [pc, #88]	; (800076c <main+0x12c>)
 8000714:	4816      	ldr	r0, [pc, #88]	; (8000770 <main+0x130>)
 8000716:	f003 fa79 	bl	8003c0c <HAL_UART_Transmit>

	  sprintf(str, "%d bytes\n", br);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	461a      	mov	r2, r3
 800071e:	491e      	ldr	r1, [pc, #120]	; (8000798 <main+0x158>)
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <main+0x12c>)
 8000722:	f007 ff45 	bl	80085b0 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000726:	230a      	movs	r3, #10
 8000728:	2228      	movs	r2, #40	; 0x28
 800072a:	4910      	ldr	r1, [pc, #64]	; (800076c <main+0x12c>)
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <main+0x130>)
 800072e:	f003 fa6d 	bl	8003c0c <HAL_UART_Transmit>
 8000732:	e00c      	b.n	800074e <main+0x10e>
  }
  else
  {
	  sprintf(str, "error %d\n", retSD);
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <main+0x140>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4918      	ldr	r1, [pc, #96]	; (800079c <main+0x15c>)
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <main+0x12c>)
 800073e:	f007 ff37 	bl	80085b0 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000742:	230a      	movs	r3, #10
 8000744:	2228      	movs	r2, #40	; 0x28
 8000746:	4909      	ldr	r1, [pc, #36]	; (800076c <main+0x12c>)
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x130>)
 800074a:	f003 fa5f 	bl	8003c0c <HAL_UART_Transmit>
  }

  while (1)
  {

	  if(flag1)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0x160>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0fb      	beq.n	800074e <main+0x10e>
	  {
		  flag1 = 0;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <main+0x160>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 800075c:	230a      	movs	r3, #10
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	4902      	ldr	r1, [pc, #8]	; (800076c <main+0x12c>)
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <main+0x130>)
 8000764:	f003 fa52 	bl	8003c0c <HAL_UART_Transmit>
	  if(flag1)
 8000768:	e7f1      	b.n	800074e <main+0x10e>
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c
 8000770:	20000200 	.word	0x20000200
 8000774:	08008ef4 	.word	0x08008ef4
 8000778:	2000024c 	.word	0x2000024c
 800077c:	20000250 	.word	0x20000250
 8000780:	20000248 	.word	0x20000248
 8000784:	08008ea4 	.word	0x08008ea4
 8000788:	08008eb4 	.word	0x08008eb4
 800078c:	08008ec8 	.word	0x08008ec8
 8000790:	20000484 	.word	0x20000484
 8000794:	08008ed8 	.word	0x08008ed8
 8000798:	08008edc 	.word	0x08008edc
 800079c:	08008ee8 	.word	0x08008ee8
 80007a0:	200000b4 	.word	0x200000b4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fef4 	bl	80085a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xc8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <SystemClock_Config+0xc8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xc8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <SystemClock_Config+0xcc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <SystemClock_Config+0xcc>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemClock_Config+0xcc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000820:	2305      	movs	r3, #5
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fa17 	bl	8001c5c <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 f83c 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2103      	movs	r1, #3
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fc79 	bl	800214c <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000860:	f000 f826 	bl	80008b0 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_UART_RxCpltCallback+0x2c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d107      	bne.n	8000896 <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000886:	2228      	movs	r2, #40	; 0x28
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <HAL_UART_RxCpltCallback+0x30>)
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <HAL_UART_RxCpltCallback+0x34>)
 800088c:	f003 fa50 	bl	8003d30 <HAL_UART_Receive_IT>
		flag1 = 1;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_UART_RxCpltCallback+0x38>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
	}
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40011000 	.word	0x40011000
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	20000200 	.word	0x20000200
 80008ac:	200000b4 	.word	0x200000b4

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008c2:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <MX_SDIO_SD_Init+0x3c>)
 80008c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <MX_SDIO_SD_Init+0x38>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	200000b8 	.word	0x200000b8
 80008f8:	40012c00 	.word	0x40012c00

080008fc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a77      	ldr	r2, [pc, #476]	; (8000af8 <HAL_SD_MspInit+0x1fc>)
 800091a:	4293      	cmp	r3, r2
 800091c:	f040 80e8 	bne.w	8000af0 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	4b75      	ldr	r3, [pc, #468]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000928:	4a74      	ldr	r2, [pc, #464]	; (8000afc <HAL_SD_MspInit+0x200>)
 800092a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092e:	6453      	str	r3, [r2, #68]	; 0x44
 8000930:	4b72      	ldr	r3, [pc, #456]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a6d      	ldr	r2, [pc, #436]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <HAL_SD_MspInit+0x200>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	4b67      	ldr	r3, [pc, #412]	; (8000afc <HAL_SD_MspInit+0x200>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a66      	ldr	r2, [pc, #408]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b64      	ldr	r3, [pc, #400]	; (8000afc <HAL_SD_MspInit+0x200>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b60      	ldr	r3, [pc, #384]	; (8000afc <HAL_SD_MspInit+0x200>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a5f      	ldr	r2, [pc, #380]	; (8000afc <HAL_SD_MspInit+0x200>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <HAL_SD_MspInit+0x200>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a0:	230c      	movs	r3, #12
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4855      	ldr	r0, [pc, #340]	; (8000b00 <HAL_SD_MspInit+0x204>)
 80009ac:	f000 ffd2 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009c2:	230c      	movs	r3, #12
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	484d      	ldr	r0, [pc, #308]	; (8000b04 <HAL_SD_MspInit+0x208>)
 80009ce:	f000 ffc1 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009d2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009e4:	230c      	movs	r3, #12
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4846      	ldr	r0, [pc, #280]	; (8000b08 <HAL_SD_MspInit+0x20c>)
 80009f0:	f000 ffb0 	bl	8001954 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80009f4:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <HAL_SD_MspInit+0x210>)
 80009f6:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_SD_MspInit+0x214>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_SD_MspInit+0x210>)
 80009fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a02:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a24:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a28:	2220      	movs	r2, #32
 8000a2a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a4e:	482f      	ldr	r0, [pc, #188]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a50:	f000 fb72 	bl	8001138 <HAL_DMA_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8000a5a:	f7ff ff29 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <HAL_SD_MspInit+0x210>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a6c:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <HAL_SD_MspInit+0x21c>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a8a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a92:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000ab6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000abe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000ac6:	f000 fb37 	bl	8001138 <HAL_DMA_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8000ad0:	f7ff feee 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_SD_MspInit+0x218>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2031      	movs	r0, #49	; 0x31
 8000ae6:	f000 faf0 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000aea:	2031      	movs	r0, #49	; 0x31
 8000aec:	f000 fb09 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40012c00 	.word	0x40012c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	2000013c 	.word	0x2000013c
 8000b10:	40026458 	.word	0x40026458
 8000b14:	2000019c 	.word	0x2000019c
 8000b18:	400264a0 	.word	0x400264a0

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f968 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <USART1_IRQHandler+0x10>)
 8000bc6:	f003 f8e3 	bl	8003d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000200 	.word	0x20000200

08000bd4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <SDIO_IRQHandler+0x10>)
 8000bda:	f001 ff0f 	bl	80029fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000b8 	.word	0x200000b8

08000be8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <DMA2_Stream3_IRQHandler+0x10>)
 8000bee:	f000 fc3b 	bl	8001468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000013c 	.word	0x2000013c

08000bfc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <DMA2_Stream6_IRQHandler+0x10>)
 8000c02:	f000 fc31 	bl	8001468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000019c 	.word	0x2000019c

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f007 fc84 	bl	800854c <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	200001fc 	.word	0x200001fc
 8000c78:	20000900 	.word	0x20000900

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_USART1_UART_Init+0x50>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART1_UART_Init+0x4c>)
 8000cd8:	f002 ff4b 	bl	8003b72 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ce2:	f7ff fde5 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000200 	.word	0x20000200
 8000cf0:	40011000 	.word	0x40011000

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_UART_MspInit+0x94>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d134      	bne.n	8000d80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0x98>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <HAL_UART_MspInit+0x9c>)
 8000d6c:	f000 fdf2 	bl	8001954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2025      	movs	r0, #37	; 0x25
 8000d76:	f000 f9a8 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7a:	2025      	movs	r0, #37	; 0x25
 8000d7c:	f000 f9c1 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ff5d 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f007 fbc9 	bl	8008558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc3b 	bl	8000640 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd8:	08009414 	.word	0x08009414
  ldr r2, =_sbss
 8000ddc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de0:	20000900 	.word	0x20000900

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe7e 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000244 	.word	0x20000244

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000244 	.word	0x20000244

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff feb6 	bl	8000eb4 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e099      	b.n	8001288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001174:	e00f      	b.n	8001196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001176:	f7ff fe9d 	bl	8000eb4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b05      	cmp	r3, #5
 8001182:	d908      	bls.n	8001196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2220      	movs	r2, #32
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2203      	movs	r2, #3
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e078      	b.n	8001288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e8      	bne.n	8001176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_DMA_Init+0x158>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4313      	orrs	r3, r2
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2b04      	cmp	r3, #4
 8001228:	d117      	bne.n	800125a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00e      	beq.n	800125a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fb0d 	bl	800185c <DMA_CheckFifoParam>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001256:	2301      	movs	r3, #1
 8001258:	e016      	b.n	8001288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fac4 	bl	80017f0 <DMA_CalcBaseAndBitshift>
 8001268:	4603      	mov	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001270:	223f      	movs	r2, #63	; 0x3f
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	f010803f 	.word	0xf010803f

08001294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_DMA_Start_IT+0x26>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e040      	b.n	800133c <HAL_DMA_Start_IT+0xa8>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d12f      	bne.n	800132e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fa56 	bl	8001794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	223f      	movs	r2, #63	; 0x3f
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0216 	orr.w	r2, r2, #22
 8001302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0208 	orr.w	r2, r2, #8
 800131a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e005      	b.n	800133a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001336:	2302      	movs	r3, #2
 8001338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001352:	f7ff fdaf 	bl	8000eb4 <HAL_GetTick>
 8001356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e052      	b.n	800141c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0216 	bic.w	r2, r2, #22
 8001384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <HAL_DMA_Abort+0x62>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0208 	bic.w	r2, r2, #8
 80013b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	e013      	b.n	80013f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c8:	f7ff fd74 	bl	8000eb4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d90c      	bls.n	80013f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2220      	movs	r2, #32
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e015      	b.n	800141c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e4      	bne.n	80013c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	223f      	movs	r2, #63	; 0x3f
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d004      	beq.n	8001442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00c      	b.n	800145c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2205      	movs	r2, #5
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <HAL_DMA_IRQHandler+0x248>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a8e      	ldr	r2, [pc, #568]	; (80016b4 <HAL_DMA_IRQHandler+0x24c>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a9b      	lsrs	r3, r3, #10
 8001480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	2208      	movs	r2, #8
 8001494:	409a      	lsls	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	2208      	movs	r2, #8
 80014c2:	409a      	lsls	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d012      	beq.n	800150a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	2201      	movs	r2, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2204      	movs	r2, #4
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	2204      	movs	r2, #4
 800152e:	409a      	lsls	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2210      	movs	r2, #16
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d043      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03c      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	2210      	movs	r2, #16
 8001564:	409a      	lsls	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d018      	beq.n	80015aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d024      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
 8001596:	e01f      	b.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
 80015a8:	e016      	b.n	80015d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2220      	movs	r2, #32
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 808f 	beq.w	8001708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 8087 	beq.w	8001708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2220      	movs	r2, #32
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b05      	cmp	r3, #5
 8001610:	d136      	bne.n	8001680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0216 	bic.w	r2, r2, #22
 8001620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_DMA_IRQHandler+0x1da>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0208 	bic.w	r2, r2, #8
 8001650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	223f      	movs	r2, #63	; 0x3f
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	2b00      	cmp	r3, #0
 8001674:	d07e      	beq.n	8001774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
        }
        return;
 800167e:	e079      	b.n	8001774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01d      	beq.n	80016ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d031      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
 80016ac:	e02c      	b.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
 80016ae:	bf00      	nop
 80016b0:	20000000 	.word	0x20000000
 80016b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d023      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
 80016c8:	e01e      	b.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0210 	bic.w	r2, r2, #16
 80016e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	2b00      	cmp	r3, #0
 800170e:	d032      	beq.n	8001776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d022      	beq.n	8001762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2205      	movs	r2, #5
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d307      	bcc.n	8001750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <HAL_DMA_IRQHandler+0x2cc>
 800174e:	e000      	b.n	8001752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
 8001772:	e000      	b.n	8001776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001774:	bf00      	nop
    }
  }
}
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b40      	cmp	r3, #64	; 0x40
 80017c0:	d108      	bne.n	80017d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017d2:	e007      	b.n	80017e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3b10      	subs	r3, #16
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <DMA_CalcBaseAndBitshift+0x64>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <DMA_CalcBaseAndBitshift+0x68>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d909      	bls.n	8001832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001826:	f023 0303 	bic.w	r3, r3, #3
 800182a:	1d1a      	adds	r2, r3, #4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	; 0x58
 8001830:	e007      	b.n	8001842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	aaaaaaab 	.word	0xaaaaaaab
 8001858:	08008f74 	.word	0x08008f74

0800185c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d11f      	bne.n	80018b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d856      	bhi.n	800192a <DMA_CheckFifoParam+0xce>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <DMA_CheckFifoParam+0x28>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	08001895 	.word	0x08001895
 8001888:	080018a7 	.word	0x080018a7
 800188c:	08001895 	.word	0x08001895
 8001890:	0800192b 	.word	0x0800192b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d046      	beq.n	800192e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a4:	e043      	b.n	800192e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ae:	d140      	bne.n	8001932 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b4:	e03d      	b.n	8001932 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018be:	d121      	bne.n	8001904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d837      	bhi.n	8001936 <DMA_CheckFifoParam+0xda>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <DMA_CheckFifoParam+0x70>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	080018e3 	.word	0x080018e3
 80018d4:	080018dd 	.word	0x080018dd
 80018d8:	080018f5 	.word	0x080018f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      break;
 80018e0:	e030      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d025      	beq.n	800193a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018f2:	e022      	b.n	800193a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018fc:	d11f      	bne.n	800193e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001902:	e01c      	b.n	800193e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d903      	bls.n	8001912 <DMA_CheckFifoParam+0xb6>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d003      	beq.n	8001918 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001910:	e018      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
      break;
 8001916:	e015      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      break;
 8001928:	e00b      	b.n	8001942 <DMA_CheckFifoParam+0xe6>
      break;
 800192a:	bf00      	nop
 800192c:	e00a      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
 8001930:	e008      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;
 8001932:	bf00      	nop
 8001934:	e006      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;
 8001936:	bf00      	nop
 8001938:	e004      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;
 800193a:	bf00      	nop
 800193c:	e002      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;   
 800193e:	bf00      	nop
 8001940:	e000      	b.n	8001944 <DMA_CheckFifoParam+0xe8>
      break;
 8001942:	bf00      	nop
    }
  } 
  
  return status; 
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e159      	b.n	8001c24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8148 	bne.w	8001c1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a2 	beq.w	8001c1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a56      	ldr	r2, [pc, #344]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x202>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2f4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x1fe>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2f8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2fc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x1f6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x300>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x1f2>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f aea2 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e267      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d075      	beq.n	8001d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	4b88      	ldr	r3, [pc, #544]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d00c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b85      	ldr	r3, [pc, #532]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d112      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b82      	ldr	r3, [pc, #520]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b7e      	ldr	r3, [pc, #504]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x108>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e242      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x74>
 8001cc2:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a75      	ldr	r2, [pc, #468]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6f      	ldr	r2, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6c      	ldr	r2, [pc, #432]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cf4:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a68      	ldr	r2, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f8ce 	bl	8000eb4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f8ca 	bl	8000eb4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e207      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xc0>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f8ba 	bl	8000eb4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f8b6 	bl	8000eb4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1f3      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0xe8>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1c7      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4937      	ldr	r1, [pc, #220]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_RCC_OscConfig+0x244>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f86f 	bl	8000eb4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff f86b 	bl	8000eb4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e1a8      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4925      	ldr	r1, [pc, #148]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCC_OscConfig+0x244>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f84e 	bl	8000eb4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f84a 	bl	8000eb4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e187      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d036      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_RCC_OscConfig+0x248>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f82e 	bl	8000eb4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f82a 	bl	8000eb4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e167      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_OscConfig+0x240>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x200>
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_OscConfig+0x248>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff f817 	bl	8000eb4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	e00e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f813 	bl	8000eb4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d907      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e150      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	42470000 	.word	0x42470000
 8001ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ea      	bne.n	8001e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8097 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec6:	4b81      	ldr	r3, [pc, #516]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b7d      	ldr	r3, [pc, #500]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b77      	ldr	r3, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x474>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efe:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <HAL_RCC_OscConfig+0x474>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a73      	ldr	r2, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x474>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0a:	f7fe ffd3 	bl	8000eb4 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7fe ffcf 	bl	8000eb4 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e10c      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x474>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2ea>
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4a63      	ldr	r2, [pc, #396]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	e01c      	b.n	8001f80 <HAL_RCC_OscConfig+0x324>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x30c>
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a5e      	ldr	r2, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a5b      	ldr	r2, [pc, #364]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0x324>
 8001f68:	4b58      	ldr	r3, [pc, #352]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a57      	ldr	r2, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
 8001f74:	4b55      	ldr	r3, [pc, #340]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a54      	ldr	r2, [pc, #336]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d015      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff94 	bl	8000eb4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7fe ff90 	bl	8000eb4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0cb      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0ee      	beq.n	8001f90 <HAL_RCC_OscConfig+0x334>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe ff7e 	bl	8000eb4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7fe ff7a 	bl	8000eb4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0b5      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ee      	bne.n	8001fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a38      	ldr	r2, [pc, #224]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a1 	beq.w	800213c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b08      	cmp	r3, #8
 8002004:	d05c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d141      	bne.n	8002092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x478>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff4e 	bl	8000eb4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff4a 	bl	8000eb4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e087      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	019b      	lsls	r3, r3, #6
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	3b01      	subs	r3, #1
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	491b      	ldr	r1, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x478>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe ff23 	bl	8000eb4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe ff1f 	bl	8000eb4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e05c      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x416>
 8002090:	e054      	b.n	800213c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x478>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe ff0c 	bl	8000eb4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ff08 	bl	8000eb4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e045      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x470>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x444>
 80020be:	e03d      	b.n	800213c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e038      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4ec>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d028      	beq.n	8002138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d121      	bne.n	8002138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d11a      	bne.n	8002138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002110:	4293      	cmp	r3, r2
 8002112:	d111      	bne.n	8002138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800

0800214c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0cc      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d90c      	bls.n	8002188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0b8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	494d      	ldr	r1, [pc, #308]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d044      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e07f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d003      	beq.n	800220a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002206:	2b03      	cmp	r3, #3
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e067      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4934      	ldr	r1, [pc, #208]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7fe fe3a 	bl	8000eb4 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe fe36 	bl	8000eb4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e04f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d20c      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e032      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4916      	ldr	r1, [pc, #88]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d2:	f000 f821 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fd9a 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00
 8002308:	40023800 	.word	0x40023800
 800230c:	08008f5c 	.word	0x08008f5c
 8002310:	20000000 	.word	0x20000000
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800231c:	b090      	sub	sp, #64	; 0x40
 800231e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
 8002324:	2300      	movs	r3, #0
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d00d      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x40>
 800233c:	2b08      	cmp	r3, #8
 800233e:	f200 80a1 	bhi.w	8002484 <HAL_RCC_GetSysClockFreq+0x16c>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 8002346:	2b04      	cmp	r3, #4
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x3a>
 800234a:	e09b      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_GetSysClockFreq+0x184>)
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002350:	e09b      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002356:	e098      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002362:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d028      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	2200      	movs	r2, #0
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	627a      	str	r2, [r7, #36]	; 0x24
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002380:	2100      	movs	r1, #0
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002384:	fb03 f201 	mul.w	r2, r3, r1
 8002388:	2300      	movs	r3, #0
 800238a:	fb00 f303 	mul.w	r3, r0, r3
 800238e:	4413      	add	r3, r2
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002392:	fba0 1202 	umull	r1, r2, r0, r2
 8002396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002398:	460a      	mov	r2, r1
 800239a:	62ba      	str	r2, [r7, #40]	; 0x28
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239e:	4413      	add	r3, r2
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	2200      	movs	r2, #0
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	61fa      	str	r2, [r7, #28]
 80023aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023b2:	f7fd ff65 	bl	8000280 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4613      	mov	r3, r2
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023be:	e053      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	2200      	movs	r2, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	617a      	str	r2, [r7, #20]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023d2:	f04f 0b00 	mov.w	fp, #0
 80023d6:	4652      	mov	r2, sl
 80023d8:	465b      	mov	r3, fp
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e8:	0150      	lsls	r0, r2, #5
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ebb2 080a 	subs.w	r8, r2, sl
 80023f2:	eb63 090b 	sbc.w	r9, r3, fp
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002402:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002406:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800240a:	ebb2 0408 	subs.w	r4, r2, r8
 800240e:	eb63 0509 	sbc.w	r5, r3, r9
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	00eb      	lsls	r3, r5, #3
 800241c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002420:	00e2      	lsls	r2, r4, #3
 8002422:	4614      	mov	r4, r2
 8002424:	461d      	mov	r5, r3
 8002426:	eb14 030a 	adds.w	r3, r4, sl
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	eb45 030b 	adc.w	r3, r5, fp
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800243e:	4629      	mov	r1, r5
 8002440:	028b      	lsls	r3, r1, #10
 8002442:	4621      	mov	r1, r4
 8002444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002448:	4621      	mov	r1, r4
 800244a:	028a      	lsls	r2, r1, #10
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	2200      	movs	r2, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800245c:	f7fd ff10 	bl	8000280 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4613      	mov	r3, r2
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetSysClockFreq+0x184>)
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800248c:	4618      	mov	r0, r3
 800248e:	3740      	adds	r7, #64	; 0x40
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	017d7840 	.word	0x017d7840

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a9b      	lsrs	r3, r3, #10
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08008f6c 	.word	0x08008f6c

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024e8:	f7ff ffdc 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0b5b      	lsrs	r3, r3, #13
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08008f6c 	.word	0x08008f6c

0800250c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e022      	b.n	8002564 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe f9e3 	bl	80008fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f814 	bl	800256c <HAL_SD_InitCard>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00a      	b.n	8002564 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af04      	add	r7, sp, #16
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002588:	2376      	movs	r3, #118	; 0x76
 800258a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681d      	ldr	r5, [r3, #0]
 8002590:	466c      	mov	r4, sp
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800259a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	4628      	mov	r0, r5
 80025a6:	f002 fb5b 	bl	8004c60 <SDIO_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80025b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e04f      	b.n	800265c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_SD_InitCard+0xf8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 fb93 	bl	8004cf2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_SD_InitCard+0xf8>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7fe fc7a 	bl	8000ecc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f001 f805 	bl	80035e8 <SD_PowerON>
 80025de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e02e      	b.n	800265c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 ff24 	bl	800344c <SD_InitCard>
 8002604:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01b      	b.n	800265c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fbf2 	bl	8004e16 <SDMMC_CmdBlockLength>
 8002632:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00f      	beq.n	800265a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_SD_InitCard+0xfc>)
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	422580a0 	.word	0x422580a0
 8002668:	004005ff 	.word	0x004005ff

0800266c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0c0      	b.n	8002816 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 80b9 	bne.w	8002814 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	441a      	add	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d907      	bls.n	80026c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0a7      	b.n	8002816 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80026f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2200      	movs	r2, #0
 8002700:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3380      	adds	r3, #128	; 0x80
 8002730:	4619      	mov	r1, r3
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	f7fe fdab 	bl	8001294 <HAL_DMA_Start_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e050      	b.n	8002816 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	025b      	lsls	r3, r3, #9
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002794:	2390      	movs	r3, #144	; 0x90
 8002796:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002798:	2302      	movs	r3, #2
 800279a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f107 0210 	add.w	r2, r7, #16
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fb05 	bl	8004dbe <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d90a      	bls.n	80027d0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2282      	movs	r2, #130	; 0x82
 80027be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fb69 	bl	8004e9e <SDMMC_CmdReadMultiBlock>
 80027cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80027ce:	e009      	b.n	80027e4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2281      	movs	r2, #129	; 0x81
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fb3c 	bl	8004e5a <SDMMC_CmdReadSingleBlock>
 80027e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e002      	b.n	8002816 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3730      	adds	r7, #48	; 0x30
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800325b 	.word	0x0800325b
 8002824:	080032cd 	.word	0x080032cd
 8002828:	004005ff 	.word	0x004005ff
 800282c:	4225858c 	.word	0x4225858c

08002830 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0c5      	b.n	80029e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 80be 	bne.w	80029e2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800286c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	441a      	add	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	429a      	cmp	r2, r3
 8002878:	d907      	bls.n	800288a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0ac      	b.n	80029e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80028b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2200      	movs	r2, #0
 80028c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d90a      	bls.n	80028f0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22a0      	movs	r2, #160	; 0xa0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fb1d 	bl	8004f26 <SDMMC_CmdWriteMultiBlock>
 80028ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80028ee:	e009      	b.n	8002904 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2290      	movs	r2, #144	; 0x90
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 faf0 	bl	8004ee2 <SDMMC_CmdWriteSingleBlock>
 8002902:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a39      	ldr	r2, [pc, #228]	; (80029f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e059      	b.n	80029e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3380      	adds	r3, #128	; 0x80
 8002966:	461a      	mov	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	025b      	lsls	r3, r3, #9
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	f7fe fc91 	bl	8001294 <HAL_DMA_Start_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002986:	f023 0302 	bic.w	r3, r3, #2
 800298a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e018      	b.n	80029e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80029be:	2390      	movs	r3, #144	; 0x90
 80029c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f107 0210 	add.w	r2, r7, #16
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 f9f0 	bl	8004dbe <SDIO_ConfigData>

      return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3730      	adds	r7, #48	; 0x30
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	08003231 	.word	0x08003231
 80029f0:	080032cd 	.word	0x080032cd
 80029f4:	004005ff 	.word	0x004005ff
 80029f8:	4225858c 	.word	0x4225858c

080029fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_SD_IRQHandler+0x2e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 ffff 	bl	8003a26 <SD_Read_IT>
 8002a28:	e165      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 808f 	beq.w	8002b58 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002a52:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002a56:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d039      	beq.n	8002ae6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <HAL_SD_IRQHandler+0x8a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d011      	beq.n	8002aaa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fa6e 	bl	8004f6c <SDMMC_CmdStopTransfer>
 8002a90:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f92f 	bl	8002d08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <HAL_SD_IRQHandler+0xda>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f002 fedc 	bl	8005894 <HAL_SD_RxCpltCallback>
 8002adc:	e10b      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f002 fece 	bl	8005880 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ae4:	e107      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8102 	beq.w	8002cf6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d011      	beq.n	8002b20 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 fa33 	bl	8004f6c <SDMMC_CmdStopTransfer>
 8002b06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8f4 	bl	8002d08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80e5 	bne.w	8002cf6 <HAL_SD_IRQHandler+0x2fa>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80df 	bne.w	8002cf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0208 	bic.w	r2, r2, #8
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f002 fe95 	bl	8005880 <HAL_SD_TxCpltCallback>
}
 8002b56:	e0ce      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_SD_IRQHandler+0x17c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 ffa9 	bl	8003ac8 <SD_Write_IT>
 8002b76:	e0be      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7e:	f240 233a 	movw	r3, #570	; 0x23a
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80b6 	beq.w	8002cf6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	f043 0208 	orr.w	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	f043 0208 	orr.w	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f240 723a 	movw	r2, #1850	; 0x73a
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002c24:	f023 0302 	bic.w	r3, r3, #2
 8002c28:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 f99c 	bl	8004f6c <SDMMC_CmdStopTransfer>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f855 	bl	8002d08 <HAL_SD_ErrorCallback>
}
 8002c5e:	e04a      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d045      	beq.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <HAL_SD_IRQHandler+0x282>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_SD_IRQHandler+0x304>)
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fbca 	bl	8001424 <HAL_DMA_Abort_IT>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02f      	beq.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fb68 	bl	8003370 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002ca0:	e029      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_SD_IRQHandler+0x2ba>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d011      	beq.n	8002cda <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <HAL_SD_IRQHandler+0x308>)
 8002cbc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fbae 	bl	8001424 <HAL_DMA_Abort_IT>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fb83 	bl	80033de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002cd8:	e00d      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f002 fdbc 	bl	800586c <HAL_SD_AbortCallback>
}
 8002cf4:	e7ff      	b.n	8002cf6 <HAL_SD_IRQHandler+0x2fa>
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	08003371 	.word	0x08003371
 8002d04:	080033df 	.word	0x080033df

08002d08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2a:	0f9b      	lsrs	r3, r3, #30
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5a:	0c1b      	lsrs	r3, r3, #16
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7c:	0d1b      	lsrs	r3, r3, #20
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9a:	0bdb      	lsrs	r3, r3, #15
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dac:	0b9b      	lsrs	r3, r3, #14
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dbe:	0b5b      	lsrs	r3, r3, #13
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd0:	0b1b      	lsrs	r3, r3, #12
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d163      	bne.n	8002eb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002dfc:	0f92      	lsrs	r2, r2, #30
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e08:	0edb      	lsrs	r3, r3, #27
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	0c9b      	lsrs	r3, r3, #18
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e50:	0bdb      	lsrs	r3, r3, #15
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	7e1b      	ldrb	r3, [r3, #24]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	3302      	adds	r3, #2
 8002e74:	2201      	movs	r2, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7a1b      	ldrb	r3, [r3, #8]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ea0:	0a52      	lsrs	r2, r2, #9
 8002ea2:	fb03 f202 	mul.w	r2, r3, r2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60
 8002eb2:	e031      	b.n	8002f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d11d      	bne.n	8002ef8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	029a      	lsls	r2, r3, #10
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ef6:	e00f      	b.n	8002f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_SD_GetCardCSD+0x344>)
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e09d      	b.n	8003054 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1c:	0b9b      	lsrs	r3, r3, #14
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2e:	09db      	lsrs	r3, r3, #7
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	0fdb      	lsrs	r3, r3, #31
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	0f5b      	lsrs	r3, r3, #29
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	0d9b      	lsrs	r3, r3, #22
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	0bdb      	lsrs	r3, r3, #15
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	0b9b      	lsrs	r3, r3, #14
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	0b5b      	lsrs	r3, r3, #13
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	0b1b      	lsrs	r3, r3, #12
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	b2da      	uxtb	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	b2da      	uxtb	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	004005ff 	.word	0x004005ff

08003064 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80030bc:	b5b0      	push	{r4, r5, r7, lr}
 80030be:	b08e      	sub	sp, #56	; 0x38
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d02e      	beq.n	800313a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d106      	bne.n	80030f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
 80030f0:	e029      	b.n	8003146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f8:	d10a      	bne.n	8003110 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb2a 	bl	8003754 <SD_WideBus_Enable>
 8003100:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
 800310e:	e01a      	b.n	8003146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fb67 	bl	80037ea <SD_WideBus_Disable>
 800311c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
 800312a:	e00c      	b.n	8003146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
 8003138:	e005      	b.n	8003146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8003154:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003164:	e01f      	b.n	80031a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681d      	ldr	r5, [r3, #0]
 800318c:	466c      	mov	r4, sp
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	4628      	mov	r0, r5
 80031a2:	f001 fd5d 	bl	8004c60 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fe31 	bl	8004e16 <SDMMC_CmdBlockLength>
 80031b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80031de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	004005ff 	.word	0x004005ff

080031f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa7e 	bl	8003704 <SD_SendStatus>
 8003208:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	0a5b      	lsrs	r3, r3, #9
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b82      	cmp	r3, #130	; 0x82
 800326e:	d111      	bne.n	8003294 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f001 fe79 	bl	8004f6c <SDMMC_CmdStopTransfer>
 800327a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff fd3a 	bl	8002d08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f002 fae9 	bl	8005894 <HAL_SD_RxCpltCallback>
#endif
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe fa4e 	bl	800177c <HAL_DMA_GetError>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d03e      	beq.n	8003364 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d002      	beq.n	8003302 <SD_DMAError+0x36>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12d      	bne.n	800335e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <SD_DMAError+0xa0>)
 8003308:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff62 	bl	80031f0 <HAL_SD_GetCardState>
 800332c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d002      	beq.n	800333a <SD_DMAError+0x6e>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10a      	bne.n	8003350 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fe14 	bl	8004f6c <SDMMC_CmdStopTransfer>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	431a      	orrs	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff fcd2 	bl	8002d08 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	004005ff 	.word	0x004005ff

08003370 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f240 523a 	movw	r2, #1338	; 0x53a
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff ff31 	bl	80031f0 <HAL_SD_GetCardState>
 800338e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d002      	beq.n	80033aa <SD_DMATxAbort+0x3a>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10a      	bne.n	80033c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 fddc 	bl	8004f6c <SDMMC_CmdStopTransfer>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f002 fa4f 	bl	800586c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80033ce:	e002      	b.n	80033d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff fc99 	bl	8002d08 <HAL_SD_ErrorCallback>
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fefa 	bl	80031f0 <HAL_SD_GetCardState>
 80033fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d002      	beq.n	8003418 <SD_DMARxAbort+0x3a>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10a      	bne.n	800342e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fda5 	bl	8004f6c <SDMMC_CmdStopTransfer>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f002 fa18 	bl	800586c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800343c:	e002      	b.n	8003444 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff fc62 	bl	8002d08 <HAL_SD_ErrorCallback>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b094      	sub	sp, #80	; 0x50
 8003450:	af04      	add	r7, sp, #16
 8003452:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003454:	2301      	movs	r3, #1
 8003456:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fc56 	bl	8004d0e <SDIO_GetPowerState>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800346c:	e0b8      	b.n	80035e0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	2b03      	cmp	r3, #3
 8003474:	d02f      	beq.n	80034d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fe80 	bl	8005180 <SDMMC_CmdSendCID>
 8003480:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <SD_InitCard+0x40>
    {
      return errorstate;
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	e0a9      	b.n	80035e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fc80 	bl	8004d98 <SDIO_GetResponse>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2104      	movs	r1, #4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fc77 	bl	8004d98 <SDIO_GetResponse>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2108      	movs	r1, #8
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fc6e 	bl	8004d98 <SDIO_GetResponse>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	210c      	movs	r1, #12
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fc65 	bl	8004d98 <SDIO_GetResponse>
 80034ce:	4602      	mov	r2, r0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d00d      	beq.n	80034fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f107 020e 	add.w	r2, r7, #14
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fe86 	bl	80051fa <SDMMC_CmdSetRelAdd>
 80034ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <SD_InitCard+0xae>
    {
      return errorstate;
 80034f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f8:	e072      	b.n	80035e0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d036      	beq.n	8003570 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f001 fe50 	bl	80051bc <SDMMC_CmdSendCSD>
 800351c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	e05b      	b.n	80035e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f001 fc32 	bl	8004d98 <SDIO_GetResponse>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2104      	movs	r1, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fc29 	bl	8004d98 <SDIO_GetResponse>
 8003546:	4602      	mov	r2, r0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2108      	movs	r1, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fc20 	bl	8004d98 <SDIO_GetResponse>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	210c      	movs	r1, #12
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fc17 	bl	8004d98 <SDIO_GetResponse>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2104      	movs	r1, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fc0e 	bl	8004d98 <SDIO_GetResponse>
 800357c:	4603      	mov	r3, r0
 800357e:	0d1a      	lsrs	r2, r3, #20
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fbc6 	bl	8002d1c <HAL_SD_GetCardCSD>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003596:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800359a:	e021      	b.n	80035e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	2200      	movs	r2, #0
 80035a8:	461c      	mov	r4, r3
 80035aa:	4615      	mov	r5, r2
 80035ac:	4622      	mov	r2, r4
 80035ae:	462b      	mov	r3, r5
 80035b0:	4608      	mov	r0, r1
 80035b2:	f001 fcfd 	bl	8004fb0 <SDMMC_CmdSelDesel>
 80035b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <SD_InitCard+0x176>
  {
    return errorstate;
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	e00e      	b.n	80035e0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	466c      	mov	r4, sp
 80035ca:	f103 0210 	add.w	r2, r3, #16
 80035ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80035d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035d4:	3304      	adds	r3, #4
 80035d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d8:	4628      	mov	r0, r5
 80035da:	f001 fb41 	bl	8004c60 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bdb0      	pop	{r4, r5, r7, pc}

080035e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fcf8 	bl	8004ff6 <SDMMC_CmdGoIdleState>
 8003606:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SD_PowerON+0x2a>
  {
    return errorstate;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	e072      	b.n	80036f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fd0b 	bl	8005032 <SDMMC_CmdOperCond>
 800361c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fce1 	bl	8004ff6 <SDMMC_CmdGoIdleState>
 8003634:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <SD_PowerON+0x5e>
    {
      return errorstate;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	e05b      	b.n	80036f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2b01      	cmp	r3, #1
 800364c:	d137      	bne.n	80036be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fd0b 	bl	8005070 <SDMMC_CmdAppCommand>
 800365a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02d      	beq.n	80036be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003662:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003666:	e047      	b.n	80036f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f001 fcfe 	bl	8005070 <SDMMC_CmdAppCommand>
 8003674:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <SD_PowerON+0x98>
    {
      return errorstate;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	e03b      	b.n	80036f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	491e      	ldr	r1, [pc, #120]	; (8003700 <SD_PowerON+0x118>)
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fd14 	bl	80050b4 <SDMMC_CmdAppOperCommand>
 800368c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003694:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003698:	e02e      	b.n	80036f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fb79 	bl	8004d98 <SDIO_GetResponse>
 80036a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	0fdb      	lsrs	r3, r3, #31
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <SD_PowerON+0xcc>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <SD_PowerON+0xce>
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]

    count++;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d802      	bhi.n	80036ce <SD_PowerON+0xe6>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0cc      	beq.n	8003668 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d902      	bls.n	80036de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80036d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036dc:	e00c      	b.n	80036f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
 80036ee:	e002      	b.n	80036f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	c1100000 	.word	0xc1100000

08003704 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003718:	e018      	b.n	800374c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f001 fd88 	bl	800523c <SDMMC_CmdSendStatus>
 800372c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	e009      	b.n	800374c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fb2a 	bl	8004d98 <SDIO_GetResponse>
 8003744:	4602      	mov	r2, r0
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fb14 	bl	8004d98 <SDIO_GetResponse>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377a:	d102      	bne.n	8003782 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800377c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003780:	e02f      	b.n	80037e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003782:	f107 030c 	add.w	r3, r7, #12
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f879 	bl	8003880 <SD_FindSCR>
 800378e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	e023      	b.n	80037e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01c      	beq.n	80037de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f001 fc5d 	bl	8005070 <SDMMC_CmdAppCommand>
 80037b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	e00f      	b.n	80037e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fc96 	bl	80050fa <SDMMC_CmdBusWidth>
 80037ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	e003      	b.n	80037e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037da:	2300      	movs	r3, #0
 80037dc:	e001      	b.n	80037e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fac9 	bl	8004d98 <SDIO_GetResponse>
 8003806:	4603      	mov	r3, r0
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003810:	d102      	bne.n	8003818 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003816:	e02f      	b.n	8003878 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f82e 	bl	8003880 <SD_FindSCR>
 8003824:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e023      	b.n	8003878 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f001 fc12 	bl	8005070 <SDMMC_CmdAppCommand>
 800384c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	e00f      	b.n	8003878 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fc4b 	bl	80050fa <SDMMC_CmdBusWidth>
 8003864:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	e003      	b.n	8003878 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003870:	2300      	movs	r3, #0
 8003872:	e001      	b.n	8003878 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003874:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08f      	sub	sp, #60	; 0x3c
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800388a:	f7fd fb13 	bl	8000eb4 <HAL_GetTick>
 800388e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2108      	movs	r1, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fab5 	bl	8004e16 <SDMMC_CmdBlockLength>
 80038ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	e0b2      	b.n	8003a1e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f001 fbd3 	bl	8005070 <SDMMC_CmdAppCommand>
 80038ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	e0a3      	b.n	8003a1e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80038dc:	2308      	movs	r3, #8
 80038de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80038e0:	2330      	movs	r3, #48	; 0x30
 80038e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038e4:	2302      	movs	r3, #2
 80038e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f107 0210 	add.w	r2, r7, #16
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fa5f 	bl	8004dbe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f001 fc1a 	bl	800513e <SDMMC_CmdSendSCR>
 800390a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02a      	beq.n	8003968 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	e083      	b.n	8003a1e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00f      	beq.n	8003944 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	f107 0208 	add.w	r2, r7, #8
 8003930:	18d4      	adds	r4, r2, r3
 8003932:	4608      	mov	r0, r1
 8003934:	f001 f9bf 	bl	8004cb6 <SDIO_ReadFIFO>
 8003938:	4603      	mov	r3, r0
 800393a:	6023      	str	r3, [r4, #0]
      index++;
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	3301      	adds	r3, #1
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
 8003942:	e006      	b.n	8003952 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003952:	f7fd faaf 	bl	8000eb4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d102      	bne.n	8003968 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003962:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003966:	e05a      	b.n	8003a1e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0cf      	beq.n	8003916 <SD_FindSCR+0x96>
 8003976:	e000      	b.n	800397a <SD_FindSCR+0xfa>
      break;
 8003978:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003990:	2308      	movs	r3, #8
 8003992:	e044      	b.n	8003a1e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2202      	movs	r2, #2
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039aa:	2302      	movs	r3, #2
 80039ac:	e037      	b.n	8003a1e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2220      	movs	r2, #32
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039c4:	2320      	movs	r3, #32
 80039c6:	e02a      	b.n	8003a1e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	061a      	lsls	r2, r3, #24
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	0e1b      	lsrs	r3, r3, #24
 80039ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	601a      	str	r2, [r3, #0]
    scr++;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	3304      	adds	r3, #4
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	061a      	lsls	r2, r3, #24
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a10:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	0e1b      	lsrs	r3, r3, #24
 8003a16:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	373c      	adds	r7, #60	; 0x3c
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}

08003a26 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03f      	beq.n	8003ac0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e033      	b.n	8003aae <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f933 	bl	8004cb6 <SDIO_ReadFIFO>
 8003a50:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	d9c8      	bls.n	8003a46 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d043      	beq.n	8003b6a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e037      	b.n	8003b58 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	041a      	lsls	r2, r3, #16
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	061a      	lsls	r2, r3, #24
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f107 0208 	add.w	r2, r7, #8
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 f8bf 	bl	8004cd0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d9c4      	bls.n	8003ae8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e03f      	b.n	8003c04 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd f8ab 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2224      	movs	r2, #36	; 0x24
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fdde 	bl	8004778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d17c      	bne.n	8003d26 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Transmit+0x2c>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e075      	b.n	8003d28 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Transmit+0x3e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e06e      	b.n	8003d28 <HAL_UART_Transmit+0x11c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2221      	movs	r2, #33	; 0x21
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c60:	f7fd f928 	bl	8000eb4 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d108      	bne.n	8003c8e <HAL_UART_Transmit+0x82>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e003      	b.n	8003c96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c9e:	e02a      	b.n	8003cf6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb1e 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e036      	b.n	8003d28 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e007      	b.n	8003ce8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1cf      	bne.n	8003ca0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 faee 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e006      	b.n	8003d28 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d11d      	bne.n	8003d86 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_UART_Receive_IT+0x26>
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e016      	b.n	8003d88 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Receive_IT+0x38>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e00f      	b.n	8003d88 <HAL_UART_Receive_IT+0x58>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb23 	bl	80043c8 <UART_Start_Receive_IT>
 8003d82:	4603      	mov	r3, r0
 8003d84:	e000      	b.n	8003d88 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b0ba      	sub	sp, #232	; 0xe8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10f      	bne.n	8003df6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_UART_IRQHandler+0x66>
 8003de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fc07 	bl	8004602 <UART_Receive_IT>
      return;
 8003df4:	e256      	b.n	80042a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80de 	beq.w	8003fbc <HAL_UART_IRQHandler+0x22c>
 8003e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80d1 	beq.w	8003fbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_UART_IRQHandler+0xae>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_UART_IRQHandler+0xd2>
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0202 	orr.w	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_UART_IRQHandler+0xf6>
 8003e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0204 	orr.w	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x126>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 81ed 	beq.w	800429a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_UART_IRQHandler+0x14e>
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fb92 	bl	8004602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <HAL_UART_IRQHandler+0x17a>
 8003f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04f      	beq.n	8003faa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa9a 	bl	8004444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d141      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1d9      	bne.n	8003f1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d013      	beq.n	8003f9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	4a7d      	ldr	r2, [pc, #500]	; (800416c <HAL_UART_IRQHandler+0x3dc>)
 8003f78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fa50 	bl	8001424 <HAL_DMA_Abort_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00e      	b.n	8003fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f990 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00a      	b.n	8003fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f98c 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e006      	b.n	8003fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f988 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fb6:	e170      	b.n	800429a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	bf00      	nop
    return;
 8003fba:	e16e      	b.n	800429a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 814a 	bne.w	800425a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8143 	beq.w	800425a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 813c 	beq.w	800425a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	f040 80b4 	bne.w	8004170 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004014:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8140 	beq.w	800429e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004026:	429a      	cmp	r2, r3
 8004028:	f080 8139 	bcs.w	800429e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004032:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	f000 8088 	beq.w	8004152 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800405c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800406e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800407a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1d9      	bne.n	8004042 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3314      	adds	r3, #20
 8004094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800409e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e1      	bne.n	800408e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004134:	65ba      	str	r2, [r7, #88]	; 0x58
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800413a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e3      	bne.n	8004110 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd f8f9 	bl	8001344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415a:	b29b      	uxth	r3, r3
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8b6 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004168:	e099      	b.n	800429e <HAL_UART_IRQHandler+0x50e>
 800416a:	bf00      	nop
 800416c:	0800450b 	.word	0x0800450b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 808b 	beq.w	80042a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800418c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8086 	beq.w	80042a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041ba:	647a      	str	r2, [r7, #68]	; 0x44
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	623b      	str	r3, [r7, #32]
   return(result);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041f2:	633a      	str	r2, [r7, #48]	; 0x30
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	60fb      	str	r3, [r7, #12]
   return(result);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0310 	bic.w	r3, r3, #16
 800422a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004238:	61fa      	str	r2, [r7, #28]
 800423a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	617b      	str	r3, [r7, #20]
   return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f83e 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004258:	e023      	b.n	80042a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_UART_IRQHandler+0x4ea>
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f95d 	bl	8004532 <UART_Transmit_IT>
    return;
 8004278:	e014      	b.n	80042a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <HAL_UART_IRQHandler+0x514>
 8004286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f99d 	bl	80045d2 <UART_EndTransmit_IT>
    return;
 8004298:	e004      	b.n	80042a4 <HAL_UART_IRQHandler+0x514>
    return;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <HAL_UART_IRQHandler+0x514>
      return;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <HAL_UART_IRQHandler+0x514>
      return;
 80042a2:	bf00      	nop
  }
}
 80042a4:	37e8      	adds	r7, #232	; 0xe8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop

080042ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b090      	sub	sp, #64	; 0x40
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fc:	e050      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d04c      	beq.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <UART_WaitOnFlagUntilTimeout+0x30>
 800430c:	f7fc fdd2 	bl	8000eb4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004318:	429a      	cmp	r2, r3
 800431a:	d241      	bcs.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800433c:	637a      	str	r2, [r7, #52]	; 0x34
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	613b      	str	r3, [r7, #16]
   return(result);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004370:	623a      	str	r2, [r7, #32]
 8004372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	69f9      	ldr	r1, [r7, #28]
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	61bb      	str	r3, [r7, #24]
   return(result);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e00f      	b.n	80043c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d09f      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3740      	adds	r7, #64	; 0x40
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2222      	movs	r2, #34	; 0x22
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b095      	sub	sp, #84	; 0x54
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446c:	643a      	str	r2, [r7, #64]	; 0x40
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e5      	bne.n	800444c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d119      	bne.n	80044f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044dc:	61ba      	str	r2, [r7, #24]
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044fe:	bf00      	nop
 8004500:	3754      	adds	r7, #84	; 0x54
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fecb 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b21      	cmp	r3, #33	; 0x21
 8004544:	d13e      	bne.n	80045c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d114      	bne.n	800457a <UART_Transmit_IT+0x48>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d110      	bne.n	800457a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	1c9a      	adds	r2, r3, #2
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	e008      	b.n	800458c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6211      	str	r1, [r2, #32]
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4619      	mov	r1, r3
 800459a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fe5a 	bl	80042ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b08c      	sub	sp, #48	; 0x30
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b22      	cmp	r3, #34	; 0x22
 8004614:	f040 80ab 	bne.w	800476e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004620:	d117      	bne.n	8004652 <UART_Receive_IT+0x50>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d113      	bne.n	8004652 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	b29a      	uxth	r2, r3
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
 8004650:	e026      	b.n	80046a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d007      	beq.n	8004676 <UART_Receive_IT+0x74>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <UART_Receive_IT+0x82>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e008      	b.n	8004696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4619      	mov	r1, r3
 80046ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d15a      	bne.n	800476a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0220 	bic.w	r2, r2, #32
 80046c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d135      	bne.n	8004760 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	623a      	str	r2, [r7, #32]
 800471c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	61bb      	str	r3, [r7, #24]
   return(result);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d10a      	bne.n	8004752 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fdbb 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
 800475e:	e002      	b.n	8004766 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc f887 	bl	8000874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e002      	b.n	8004770 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477c:	b0c0      	sub	sp, #256	; 0x100
 800477e:	af00      	add	r7, sp, #0
 8004780:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	68d9      	ldr	r1, [r3, #12]
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	ea40 0301 	orr.w	r3, r0, r1
 80047a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047d0:	f021 010c 	bic.w	r1, r1, #12
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047de:	430b      	orrs	r3, r1
 80047e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	6999      	ldr	r1, [r3, #24]
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	ea40 0301 	orr.w	r3, r0, r1
 80047fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b8f      	ldr	r3, [pc, #572]	; (8004a44 <UART_SetConfig+0x2cc>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d005      	beq.n	8004818 <UART_SetConfig+0xa0>
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b8d      	ldr	r3, [pc, #564]	; (8004a48 <UART_SetConfig+0x2d0>)
 8004814:	429a      	cmp	r2, r3
 8004816:	d104      	bne.n	8004822 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fd fe64 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 800481c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004820:	e003      	b.n	800482a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004822:	f7fd fe4b 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8004826:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004834:	f040 810c 	bne.w	8004a50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004842:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004846:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	1891      	adds	r1, r2, r2
 8004850:	65b9      	str	r1, [r7, #88]	; 0x58
 8004852:	415b      	adcs	r3, r3
 8004854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004856:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800485a:	4621      	mov	r1, r4
 800485c:	eb12 0801 	adds.w	r8, r2, r1
 8004860:	4629      	mov	r1, r5
 8004862:	eb43 0901 	adc.w	r9, r3, r1
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487a:	4690      	mov	r8, r2
 800487c:	4699      	mov	r9, r3
 800487e:	4623      	mov	r3, r4
 8004880:	eb18 0303 	adds.w	r3, r8, r3
 8004884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004888:	462b      	mov	r3, r5
 800488a:	eb49 0303 	adc.w	r3, r9, r3
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800489e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048a6:	460b      	mov	r3, r1
 80048a8:	18db      	adds	r3, r3, r3
 80048aa:	653b      	str	r3, [r7, #80]	; 0x50
 80048ac:	4613      	mov	r3, r2
 80048ae:	eb42 0303 	adc.w	r3, r2, r3
 80048b2:	657b      	str	r3, [r7, #84]	; 0x54
 80048b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048bc:	f7fb fce0 	bl	8000280 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4b61      	ldr	r3, [pc, #388]	; (8004a4c <UART_SetConfig+0x2d4>)
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	011c      	lsls	r4, r3, #4
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	1891      	adds	r1, r2, r2
 80048e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048e8:	415b      	adcs	r3, r3
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048f0:	4641      	mov	r1, r8
 80048f2:	eb12 0a01 	adds.w	sl, r2, r1
 80048f6:	4649      	mov	r1, r9
 80048f8:	eb43 0b01 	adc.w	fp, r3, r1
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004908:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800490c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004910:	4692      	mov	sl, r2
 8004912:	469b      	mov	fp, r3
 8004914:	4643      	mov	r3, r8
 8004916:	eb1a 0303 	adds.w	r3, sl, r3
 800491a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800491e:	464b      	mov	r3, r9
 8004920:	eb4b 0303 	adc.w	r3, fp, r3
 8004924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004934:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004938:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800493c:	460b      	mov	r3, r1
 800493e:	18db      	adds	r3, r3, r3
 8004940:	643b      	str	r3, [r7, #64]	; 0x40
 8004942:	4613      	mov	r3, r2
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800494e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004952:	f7fb fc95 	bl	8000280 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4611      	mov	r1, r2
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <UART_SetConfig+0x2d4>)
 800495e:	fba3 2301 	umull	r2, r3, r3, r1
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2264      	movs	r2, #100	; 0x64
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	1acb      	subs	r3, r1, r3
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004972:	4b36      	ldr	r3, [pc, #216]	; (8004a4c <UART_SetConfig+0x2d4>)
 8004974:	fba3 2302 	umull	r2, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004980:	441c      	add	r4, r3
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800498c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004990:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	63b9      	str	r1, [r7, #56]	; 0x38
 800499c:	415b      	adcs	r3, r3
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a4:	4641      	mov	r1, r8
 80049a6:	1851      	adds	r1, r2, r1
 80049a8:	6339      	str	r1, [r7, #48]	; 0x30
 80049aa:	4649      	mov	r1, r9
 80049ac:	414b      	adcs	r3, r1
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049bc:	4659      	mov	r1, fp
 80049be:	00cb      	lsls	r3, r1, #3
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c6:	4651      	mov	r1, sl
 80049c8:	00ca      	lsls	r2, r1, #3
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	4642      	mov	r2, r8
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d8:	464b      	mov	r3, r9
 80049da:	460a      	mov	r2, r1
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049f8:	460b      	mov	r3, r1
 80049fa:	18db      	adds	r3, r3, r3
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fe:	4613      	mov	r3, r2
 8004a00:	eb42 0303 	adc.w	r3, r2, r3
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a0e:	f7fb fc37 	bl	8000280 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <UART_SetConfig+0x2d4>)
 8004a18:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <UART_SetConfig+0x2d4>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	f003 0207 	and.w	r2, r3, #7
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4422      	add	r2, r4
 8004a3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a40:	e105      	b.n	8004c4e <UART_SetConfig+0x4d6>
 8004a42:	bf00      	nop
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a62:	4642      	mov	r2, r8
 8004a64:	464b      	mov	r3, r9
 8004a66:	1891      	adds	r1, r2, r2
 8004a68:	6239      	str	r1, [r7, #32]
 8004a6a:	415b      	adcs	r3, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a72:	4641      	mov	r1, r8
 8004a74:	1854      	adds	r4, r2, r1
 8004a76:	4649      	mov	r1, r9
 8004a78:	eb43 0501 	adc.w	r5, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	00eb      	lsls	r3, r5, #3
 8004a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8a:	00e2      	lsls	r2, r4, #3
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	461d      	mov	r5, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	18e3      	adds	r3, r4, r3
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a98:	464b      	mov	r3, r9
 8004a9a:	eb45 0303 	adc.w	r3, r5, r3
 8004a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004abe:	4629      	mov	r1, r5
 8004ac0:	008b      	lsls	r3, r1, #2
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac8:	4621      	mov	r1, r4
 8004aca:	008a      	lsls	r2, r1, #2
 8004acc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ad0:	f7fb fbd6 	bl	8000280 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4b60      	ldr	r3, [pc, #384]	; (8004c5c <UART_SetConfig+0x4e4>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	011c      	lsls	r4, r3, #4
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004af0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	61b9      	str	r1, [r7, #24]
 8004afc:	415b      	adcs	r3, r3
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b04:	4641      	mov	r1, r8
 8004b06:	1851      	adds	r1, r2, r1
 8004b08:	6139      	str	r1, [r7, #16]
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4651      	mov	r1, sl
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4651      	mov	r1, sl
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4642      	mov	r2, r8
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b38:	464b      	mov	r3, r9
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	008b      	lsls	r3, r1, #2
 8004b60:	4641      	mov	r1, r8
 8004b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b66:	4641      	mov	r1, r8
 8004b68:	008a      	lsls	r2, r1, #2
 8004b6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b6e:	f7fb fb87 	bl	8000280 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <UART_SetConfig+0x4e4>)
 8004b78:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	2164      	movs	r1, #100	; 0x64
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	3332      	adds	r3, #50	; 0x32
 8004b8a:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <UART_SetConfig+0x4e4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b96:	441c      	add	r4, r3
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ba2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	464b      	mov	r3, r9
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	1851      	adds	r1, r2, r1
 8004bba:	6039      	str	r1, [r7, #0]
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	414b      	adcs	r3, r1
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bce:	4659      	mov	r1, fp
 8004bd0:	00cb      	lsls	r3, r1, #3
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd8:	4651      	mov	r1, sl
 8004bda:	00ca      	lsls	r2, r1, #3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	4603      	mov	r3, r0
 8004be2:	4642      	mov	r2, r8
 8004be4:	189b      	adds	r3, r3, r2
 8004be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be8:	464b      	mov	r3, r9
 8004bea:	460a      	mov	r2, r1
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8004bfc:	667a      	str	r2, [r7, #100]	; 0x64
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	008b      	lsls	r3, r1, #2
 8004c0e:	4641      	mov	r1, r8
 8004c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c14:	4641      	mov	r1, r8
 8004c16:	008a      	lsls	r2, r1, #2
 8004c18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c1c:	f7fb fb30 	bl	8000280 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <UART_SetConfig+0x4e4>)
 8004c26:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2164      	movs	r1, #100	; 0x64
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	3332      	adds	r3, #50	; 0x32
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <UART_SetConfig+0x4e4>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c54:	46bd      	mov	sp, r7
 8004c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5a:	bf00      	nop
 8004c5c:	51eb851f 	.word	0x51eb851f

08004c60 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004c60:	b084      	sub	sp, #16
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	f107 001c 	add.w	r0, r7, #28
 8004c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004c76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004c78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004c7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004c7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004c82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004c86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004c8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	b004      	add	sp, #16
 8004cb4:	4770      	bx	lr

08004cb6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d48:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004d4e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004d54:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	b2db      	uxtb	r3, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3314      	adds	r3, #20
 8004da6:	461a      	mov	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
}  
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004de4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004dea:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004df0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0

}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004e24:	2310      	movs	r3, #16
 8004e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff74 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	2110      	movs	r1, #16
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa19 	bl	8005280 <SDMMC_GetCmdResp1>
 8004e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004e68:	2311      	movs	r3, #17
 8004e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e6c:	2340      	movs	r3, #64	; 0x40
 8004e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e7a:	f107 0308 	add.w	r3, r7, #8
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff52 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8a:	2111      	movs	r1, #17
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9f7 	bl	8005280 <SDMMC_GetCmdResp1>
 8004e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e94:	69fb      	ldr	r3, [r7, #28]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004eac:	2312      	movs	r3, #18
 8004eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eb0:	2340      	movs	r3, #64	; 0x40
 8004eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff30 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	2112      	movs	r1, #18
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f9d5 	bl	8005280 <SDMMC_GetCmdResp1>
 8004ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004ef0:	2318      	movs	r3, #24
 8004ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff0e 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	2118      	movs	r1, #24
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f9b3 	bl	8005280 <SDMMC_GetCmdResp1>
 8004f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b088      	sub	sp, #32
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004f34:	2319      	movs	r3, #25
 8004f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff feec 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	2119      	movs	r1, #25
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f991 	bl	8005280 <SDMMC_GetCmdResp1>
 8004f5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f60:	69fb      	ldr	r3, [r7, #28]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004f78:	230c      	movs	r3, #12
 8004f7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f7c:	2340      	movs	r3, #64	; 0x40
 8004f7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff feca 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f96:	4a05      	ldr	r2, [pc, #20]	; (8004fac <SDMMC_CmdStopTransfer+0x40>)
 8004f98:	210c      	movs	r1, #12
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f970 	bl	8005280 <SDMMC_GetCmdResp1>
 8004fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	05f5e100 	.word	0x05f5e100

08004fb0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004fc0:	2307      	movs	r3, #7
 8004fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fea6 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	2107      	movs	r1, #7
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f94b 	bl	8005280 <SDMMC_GetCmdResp1>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3728      	adds	r7, #40	; 0x28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005012:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fe85 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb65 	bl	80056f0 <SDMMC_GetCmdError>
 8005026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005028:	69fb      	ldr	r3, [r7, #28]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800503a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800503e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005040:	2308      	movs	r3, #8
 8005042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800504c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005050:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fe66 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 faf8 	bl	8005654 <SDMMC_GetCmdResp7>
 8005064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005066:	69fb      	ldr	r3, [r7, #28]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800507e:	2337      	movs	r3, #55	; 0x37
 8005080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800508a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe47 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	2137      	movs	r1, #55	; 0x37
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8ec 	bl	8005280 <SDMMC_GetCmdResp1>
 80050a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050aa:	69fb      	ldr	r3, [r7, #28]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80050ca:	2329      	movs	r3, #41	; 0x29
 80050cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050ce:	2340      	movs	r3, #64	; 0x40
 80050d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050dc:	f107 0308 	add.w	r3, r7, #8
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fe21 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f9ff 	bl	80054ec <SDMMC_GetCmdResp3>
 80050ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050f0:	69fb      	ldr	r3, [r7, #28]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b088      	sub	sp, #32
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005108:	2306      	movs	r3, #6
 800510a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe02 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	2106      	movs	r1, #6
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8a7 	bl	8005280 <SDMMC_GetCmdResp1>
 8005132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005134:	69fb      	ldr	r3, [r7, #28]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800514a:	2333      	movs	r3, #51	; 0x33
 800514c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fde1 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	2133      	movs	r1, #51	; 0x33
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f886 	bl	8005280 <SDMMC_GetCmdResp1>
 8005174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005176:	69fb      	ldr	r3, [r7, #28]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800518c:	2302      	movs	r3, #2
 800518e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005190:	23c0      	movs	r3, #192	; 0xc0
 8005192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fdc0 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f956 	bl	800545c <SDMMC_GetCmdResp2>
 80051b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051b2:	69fb      	ldr	r3, [r7, #28]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80051ca:	2309      	movs	r3, #9
 80051cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80051ce:	23c0      	movs	r3, #192	; 0xc0
 80051d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fda1 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f937 	bl	800545c <SDMMC_GetCmdResp2>
 80051ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051f0:	69fb      	ldr	r3, [r7, #28]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b088      	sub	sp, #32
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005208:	2303      	movs	r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fd82 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	2103      	movs	r1, #3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f99c 	bl	8005568 <SDMMC_GetCmdResp6>
 8005230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005232:	69fb      	ldr	r3, [r7, #28]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800524a:	230d      	movs	r3, #13
 800524c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800525c:	f107 0308 	add.w	r3, r7, #8
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fd61 	bl	8004d2a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005268:	f241 3288 	movw	r2, #5000	; 0x1388
 800526c:	210d      	movs	r1, #13
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f806 	bl	8005280 <SDMMC_GetCmdResp1>
 8005274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005276:	69fb      	ldr	r3, [r7, #28]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	460b      	mov	r3, r1
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800528e:	4b70      	ldr	r3, [pc, #448]	; (8005450 <SDMMC_GetCmdResp1+0x1d0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a70      	ldr	r2, [pc, #448]	; (8005454 <SDMMC_GetCmdResp1+0x1d4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	0a5a      	lsrs	r2, r3, #9
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	61fa      	str	r2, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052b0:	e0c9      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ef      	beq.n	80052a2 <SDMMC_GetCmdResp1+0x22>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ea      	bne.n	80052a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2204      	movs	r2, #4
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052de:	2304      	movs	r3, #4
 80052e0:	e0b1      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0a6      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	22c5      	movs	r2, #197	; 0xc5
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff fd3d 	bl	8004d7e <SDIO_GetCommandResponse>
 8005304:	4603      	mov	r3, r0
 8005306:	461a      	mov	r2, r3
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	4293      	cmp	r3, r2
 800530c:	d001      	beq.n	8005312 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800530e:	2301      	movs	r3, #1
 8005310:	e099      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005312:	2100      	movs	r1, #0
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fd3f 	bl	8004d98 <SDIO_GetResponse>
 800531a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4b4e      	ldr	r3, [pc, #312]	; (8005458 <SDMMC_GetCmdResp1+0x1d8>)
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005326:	2300      	movs	r3, #0
 8005328:	e08d      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da02      	bge.n	8005336 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005334:	e087      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	e080      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	e079      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800535c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005360:	e071      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800536c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005370:	e069      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800537c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005380:	e061      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800538c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005390:	e059      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800539c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a0:	e051      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b0:	e049      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80053bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053c0:	e041      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80053cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d0:	e039      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80053dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053e0:	e031      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80053ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053f0:	e029      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80053fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005400:	e021      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800540c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005410:	e019      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800541c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005420:	e011      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800542c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005430:	e009      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800543c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005440:	e001      	b.n	8005446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000000 	.word	0x20000000
 8005454:	10624dd3 	.word	0x10624dd3
 8005458:	fdffe008 	.word	0xfdffe008

0800545c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <SDMMC_GetCmdResp2+0x88>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <SDMMC_GetCmdResp2+0x8c>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0a5b      	lsrs	r3, r3, #9
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	60fa      	str	r2, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005488:	e026      	b.n	80054d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ef      	beq.n	800547a <SDMMC_GetCmdResp2+0x1e>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1ea      	bne.n	800547a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2204      	movs	r2, #4
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054b6:	2304      	movs	r3, #4
 80054b8:	e00e      	b.n	80054d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e003      	b.n	80054d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	22c5      	movs	r2, #197	; 0xc5
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000000 	.word	0x20000000
 80054e8:	10624dd3 	.word	0x10624dd3

080054ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <SDMMC_GetCmdResp3+0x74>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <SDMMC_GetCmdResp3+0x78>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	0a5b      	lsrs	r3, r3, #9
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	60fa      	str	r2, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005518:	e01b      	b.n	8005552 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ef      	beq.n	800550a <SDMMC_GetCmdResp3+0x1e>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ea      	bne.n	800550a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2204      	movs	r2, #4
 8005544:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005546:	2304      	movs	r3, #4
 8005548:	e003      	b.n	8005552 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	22c5      	movs	r2, #197	; 0xc5
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20000000 	.word	0x20000000
 8005564:	10624dd3 	.word	0x10624dd3

08005568 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	460b      	mov	r3, r1
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <SDMMC_GetCmdResp6+0xe4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <SDMMC_GetCmdResp6+0xe8>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	0a5b      	lsrs	r3, r3, #9
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	1e5a      	subs	r2, r3, #1
 8005590:	61fa      	str	r2, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005596:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800559a:	e052      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ef      	beq.n	800558c <SDMMC_GetCmdResp6+0x24>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1ea      	bne.n	800558c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2204      	movs	r2, #4
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055c8:	2304      	movs	r3, #4
 80055ca:	e03a      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055de:	2301      	movs	r3, #1
 80055e0:	e02f      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fbcb 	bl	8004d7e <SDIO_GetCommandResponse>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d001      	beq.n	80055f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e025      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22c5      	movs	r2, #197	; 0xc5
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80055fc:	2100      	movs	r1, #0
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fbca 	bl	8004d98 <SDIO_GetResponse>
 8005604:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	e011      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800562c:	e009      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800563c:	e001      	b.n	8005642 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800563e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800565c:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <SDMMC_GetCmdResp7+0x94>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <SDMMC_GetCmdResp7+0x98>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	0a5b      	lsrs	r3, r3, #9
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	fb02 f303 	mul.w	r3, r2, r3
 8005670:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1e5a      	subs	r2, r3, #1
 8005676:	60fa      	str	r2, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800567c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005680:	e02c      	b.n	80056dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0ef      	beq.n	8005672 <SDMMC_GetCmdResp7+0x1e>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ea      	bne.n	8005672 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2204      	movs	r2, #4
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056ae:	2304      	movs	r3, #4
 80056b0:	e014      	b.n	80056dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e009      	b.n	80056dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2240      	movs	r2, #64	; 0x40
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056da:	2300      	movs	r3, #0
  
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000000 	.word	0x20000000
 80056ec:	10624dd3 	.word	0x10624dd3

080056f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056f8:	4b11      	ldr	r3, [pc, #68]	; (8005740 <SDMMC_GetCmdError+0x50>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a11      	ldr	r2, [pc, #68]	; (8005744 <SDMMC_GetCmdError+0x54>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0a5b      	lsrs	r3, r3, #9
 8005704:	f241 3288 	movw	r2, #5000	; 0x1388
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1e5a      	subs	r2, r3, #1
 8005712:	60fa      	str	r2, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800571c:	e009      	b.n	8005732 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f1      	beq.n	800570e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	22c5      	movs	r2, #197	; 0xc5
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20000000 	.word	0x20000000
 8005744:	10624dd3 	.word	0x10624dd3

08005748 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <MX_FATFS_Init+0x18>)
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <MX_FATFS_Init+0x1c>)
 8005750:	f002 fe26 	bl	80083a0 <FATFS_LinkDriver>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <MX_FATFS_Init+0x20>)
 800575a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800575c:	bf00      	nop
 800575e:	bd80      	pop	{r7, pc}
 8005760:	2000024c 	.word	0x2000024c
 8005764:	08008f7c 	.word	0x08008f7c
 8005768:	20000248 	.word	0x20000248

0800576c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005770:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005772:	4618      	mov	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005786:	f000 f896 	bl	80058b6 <BSP_SD_IsDetected>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e012      	b.n	80057ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005794:	480b      	ldr	r0, [pc, #44]	; (80057c4 <BSP_SD_Init+0x48>)
 8005796:	f7fc feb9 	bl	800250c <HAL_SD_Init>
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80057a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057a8:	4806      	ldr	r0, [pc, #24]	; (80057c4 <BSP_SD_Init+0x48>)
 80057aa:	f7fd fc87 	bl	80030bc <HAL_SD_ConfigWideBusOperation>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80057b8:	79fb      	ldrb	r3, [r7, #7]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200000b8 	.word	0x200000b8

080057c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	4806      	ldr	r0, [pc, #24]	; (80057f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80057e0:	f7fc ff44 	bl	800266c <HAL_SD_ReadBlocks_DMA>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200000b8 	.word	0x200000b8

080057fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	68f9      	ldr	r1, [r7, #12]
 8005812:	4806      	ldr	r0, [pc, #24]	; (800582c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005814:	f7fd f80c 	bl	8002830 <HAL_SD_WriteBlocks_DMA>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200000b8 	.word	0x200000b8

08005830 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005834:	4805      	ldr	r0, [pc, #20]	; (800584c <BSP_SD_GetCardState+0x1c>)
 8005836:	f7fd fcdb 	bl	80031f0 <HAL_SD_GetCardState>
 800583a:	4603      	mov	r3, r0
 800583c:	2b04      	cmp	r3, #4
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
}
 8005846:	4618      	mov	r0, r3
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200000b8 	.word	0x200000b8

08005850 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4803      	ldr	r0, [pc, #12]	; (8005868 <BSP_SD_GetCardInfo+0x18>)
 800585c:	f7fd fc02 	bl	8003064 <HAL_SD_GetCardInfo>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200000b8 	.word	0x200000b8

0800586c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005874:	f000 f818 	bl	80058a8 <BSP_SD_AbortCallback>
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005888:	f000 f98c 	bl	8005ba4 <BSP_SD_WriteCpltCallback>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800589c:	f000 f98e 	bl	8005bbc <BSP_SD_ReadCpltCallback>
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0

}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80058bc:	2301      	movs	r3, #1
 80058be:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	b2db      	uxtb	r3, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80058d8:	f7fb faec 	bl	8000eb4 <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80058de:	e006      	b.n	80058ee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80058e0:	f7ff ffa6 	bl	8005830 <BSP_SD_GetCardState>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e009      	b.n	8005902 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80058ee:	f7fb fae1 	bl	8000eb4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d8f0      	bhi.n	80058e0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <SD_CheckStatus+0x38>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800591c:	f7ff ff88 	bl	8005830 <BSP_SD_GetCardState>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <SD_CheckStatus+0x38>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	b2da      	uxtb	r2, r3
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <SD_CheckStatus+0x38>)
 8005934:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005936:	4b03      	ldr	r3, [pc, #12]	; (8005944 <SD_CheckStatus+0x38>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	b2db      	uxtb	r3, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20000009 	.word	0x20000009

08005948 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005952:	f7ff ff13 	bl	800577c <BSP_SD_Init>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ffd4 	bl	800590c <SD_CheckStatus>
 8005964:	4603      	mov	r3, r0
 8005966:	461a      	mov	r2, r3
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <SD_initialize+0x34>)
 800596a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <SD_initialize+0x34>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b2db      	uxtb	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000009 	.word	0x20000009

08005980 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ffbd 	bl	800590c <SD_CheckStatus>
 8005992:	4603      	mov	r3, r0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80059b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80059b4:	f7ff ff8c 	bl	80058d0 <SD_CheckStatusWithTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da01      	bge.n	80059c2 <SD_read+0x26>
  {
    return res;
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	e03b      	b.n	8005a3a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	68b8      	ldr	r0, [r7, #8]
 80059c8:	f7ff fefe 	bl	80057c8 <BSP_SD_ReadBlocks_DMA>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d132      	bne.n	8005a38 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <SD_read+0xa8>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80059d8:	f7fb fa6c 	bl	8000eb4 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80059de:	bf00      	nop
 80059e0:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <SD_read+0xa8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <SD_read+0x5e>
 80059e8:	f7fb fa64 	bl	8000eb4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d9f2      	bls.n	80059e0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <SD_read+0xa8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e017      	b.n	8005a38 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005a08:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <SD_read+0xa8>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005a0e:	f7fb fa51 	bl	8000eb4 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a14:	e007      	b.n	8005a26 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a16:	f7ff ff0b 	bl	8005830 <BSP_SD_GetCardState>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <SD_read+0x8a>
          {
            res = RES_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005a24:	e008      	b.n	8005a38 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a26:	f7fb fa45 	bl	8000eb4 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d9ee      	bls.n	8005a16 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200006b8 	.word	0x200006b8

08005a48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005a5c:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <SD_write+0xa8>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a62:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a66:	f7ff ff33 	bl	80058d0 <SD_CheckStatusWithTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da01      	bge.n	8005a74 <SD_write+0x2c>
  {
    return res;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	e038      	b.n	8005ae6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f7ff febf 	bl	80057fc <BSP_SD_WriteBlocks_DMA>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d12f      	bne.n	8005ae4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005a84:	f7fb fa16 	bl	8000eb4 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005a8a:	bf00      	nop
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <SD_write+0xa8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d108      	bne.n	8005aa6 <SD_write+0x5e>
 8005a94:	f7fb fa0e 	bl	8000eb4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d9f2      	bls.n	8005a8c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <SD_write+0xa8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
 8005ab2:	e017      	b.n	8005ae4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <SD_write+0xa8>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005aba:	f7fb f9fb 	bl	8000eb4 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005ac0:	e007      	b.n	8005ad2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ac2:	f7ff feb5 	bl	8005830 <BSP_SD_GetCardState>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <SD_write+0x8a>
          {
            res = RES_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
            break;
 8005ad0:	e008      	b.n	8005ae4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005ad2:	f7fb f9ef 	bl	8000eb4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d9ee      	bls.n	8005ac2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200006b4 	.word	0x200006b4

08005af4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	; 0x30
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	603a      	str	r2, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
 8005b00:	460b      	mov	r3, r1
 8005b02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b0a:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <SD_ioctl+0xac>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <SD_ioctl+0x28>
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e03c      	b.n	8005b96 <SD_ioctl+0xa2>

  switch (cmd)
 8005b1c:	79bb      	ldrb	r3, [r7, #6]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d834      	bhi.n	8005b8c <SD_ioctl+0x98>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <SD_ioctl+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b73 	.word	0x08005b73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b3e:	e028      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe83 	bl	8005850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b56:	e01c      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fe77 	bl	8005850 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b70:	e00f      	b.n	8005b92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b72:	f107 030c 	add.w	r3, r7, #12
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fe6a 	bl	8005850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	0a5a      	lsrs	r2, r3, #9
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b8a:	e002      	b.n	8005b92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000009 	.word	0x20000009

08005ba4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <BSP_SD_WriteCpltCallback+0x14>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	200006b4 	.word	0x200006b4

08005bbc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <BSP_SD_ReadCpltCallback+0x14>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	200006b8 	.word	0x200006b8

08005bd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <disk_status+0x30>)
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	79fa      	ldrb	r2, [r7, #7]
 8005bec:	4905      	ldr	r1, [pc, #20]	; (8005c04 <disk_status+0x30>)
 8005bee:	440a      	add	r2, r1
 8005bf0:	7a12      	ldrb	r2, [r2, #8]
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200008e4 	.word	0x200008e4

08005c08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <disk_initialize+0x48>)
 8005c1a:	5cd3      	ldrb	r3, [r2, r3]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <disk_initialize+0x48>)
 8005c24:	2101      	movs	r1, #1
 8005c26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <disk_initialize+0x48>)
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	79fa      	ldrb	r2, [r7, #7]
 8005c36:	4906      	ldr	r1, [pc, #24]	; (8005c50 <disk_initialize+0x48>)
 8005c38:	440a      	add	r2, r1
 8005c3a:	7a12      	ldrb	r2, [r2, #8]
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	4603      	mov	r3, r0
 8005c42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200008e4 	.word	0x200008e4

08005c54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <disk_read+0x3c>)
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	689c      	ldr	r4, [r3, #8]
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <disk_read+0x3c>)
 8005c74:	4413      	add	r3, r2
 8005c76:	7a18      	ldrb	r0, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	47a0      	blx	r4
 8005c80:	4603      	mov	r3, r0
 8005c82:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200008e4 	.word	0x200008e4

08005c94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <disk_write+0x3c>)
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68dc      	ldr	r4, [r3, #12]
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <disk_write+0x3c>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	7a18      	ldrb	r0, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	47a0      	blx	r4
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200008e4 	.word	0x200008e4

08005cd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	b21a      	sxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b21b      	sxth	r3, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b21b      	sxth	r3, r3
 8005cf4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3303      	adds	r3, #3
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	3202      	adds	r2, #2
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	3201      	adds	r2, #1
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	887a      	ldrh	r2, [r7, #2]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	887a      	ldrh	r2, [r7, #2]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	1c53      	adds	r3, r2, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1c59      	adds	r1, r3, #1
 8005dfc:	6179      	str	r1, [r7, #20]
 8005dfe:	7812      	ldrb	r2, [r2, #0]
 8005e00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f1      	bne.n	8005df2 <mem_cpy+0x1a>
	}
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e1a:	b480      	push	{r7}
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	617a      	str	r2, [r7, #20]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	607b      	str	r3, [r7, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f3      	bne.n	8005e2a <mem_set+0x10>
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	61fa      	str	r2, [r7, #28]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	61ba      	str	r2, [r7, #24]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	1acb      	subs	r3, r1, r3
 8005e7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <mem_cmp+0x40>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0eb      	beq.n	8005e68 <mem_cmp+0x18>

	return r;
 8005e90:	697b      	ldr	r3, [r7, #20]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ea8:	e002      	b.n	8005eb0 <chk_chr+0x12>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3301      	adds	r3, #1
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <chk_chr+0x26>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d1f2      	bne.n	8005eaa <chk_chr+0xc>
	return *str;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e029      	b.n	8005f3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <chk_lock+0xb4>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	4413      	add	r3, r2
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01d      	beq.n	8005f32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ef6:	4a24      	ldr	r2, [pc, #144]	; (8005f88 <chk_lock+0xb4>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4413      	add	r3, r2
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d116      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <chk_lock+0xb4>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d10c      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f1c:	4a1a      	ldr	r2, [pc, #104]	; (8005f88 <chk_lock+0xb4>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	3308      	adds	r3, #8
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d102      	bne.n	8005f36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f30:	e007      	b.n	8005f42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d9d2      	bls.n	8005ee8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d109      	bne.n	8005f5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <chk_lock+0x80>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d101      	bne.n	8005f58 <chk_lock+0x84>
 8005f54:	2300      	movs	r3, #0
 8005f56:	e010      	b.n	8005f7a <chk_lock+0xa6>
 8005f58:	2312      	movs	r3, #18
 8005f5a:	e00e      	b.n	8005f7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <chk_lock+0xa0>
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <chk_lock+0xb4>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	4413      	add	r3, r2
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d101      	bne.n	8005f78 <chk_lock+0xa4>
 8005f74:	2310      	movs	r3, #16
 8005f76:	e000      	b.n	8005f7a <chk_lock+0xa6>
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	200006c4 	.word	0x200006c4

08005f8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	e002      	b.n	8005f9e <enq_lock+0x12>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d806      	bhi.n	8005fb2 <enq_lock+0x26>
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <enq_lock+0x40>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4413      	add	r3, r2
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f2      	bne.n	8005f98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	bf14      	ite	ne
 8005fb8:	2301      	movne	r3, #1
 8005fba:	2300      	moveq	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	200006c4 	.word	0x200006c4

08005fd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e01f      	b.n	8006020 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005fe0:	4a41      	ldr	r2, [pc, #260]	; (80060e8 <inc_lock+0x118>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d113      	bne.n	800601a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <inc_lock+0x118>)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006002:	429a      	cmp	r2, r3
 8006004:	d109      	bne.n	800601a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006006:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <inc_lock+0x118>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	4413      	add	r3, r2
 800600e:	3308      	adds	r3, #8
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006016:	429a      	cmp	r2, r3
 8006018:	d006      	beq.n	8006028 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d9dc      	bls.n	8005fe0 <inc_lock+0x10>
 8006026:	e000      	b.n	800602a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006028:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d132      	bne.n	8006096 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e002      	b.n	800603c <inc_lock+0x6c>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3301      	adds	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d806      	bhi.n	8006050 <inc_lock+0x80>
 8006042:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <inc_lock+0x118>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	4413      	add	r3, r2
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f2      	bne.n	8006036 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d101      	bne.n	800605a <inc_lock+0x8a>
 8006056:	2300      	movs	r3, #0
 8006058:	e040      	b.n	80060dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4922      	ldr	r1, [pc, #136]	; (80060e8 <inc_lock+0x118>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	440b      	add	r3, r1
 8006066:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	491e      	ldr	r1, [pc, #120]	; (80060e8 <inc_lock+0x118>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	440b      	add	r3, r1
 8006074:	3304      	adds	r3, #4
 8006076:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	491a      	ldr	r1, [pc, #104]	; (80060e8 <inc_lock+0x118>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	440b      	add	r3, r1
 8006084:	3308      	adds	r3, #8
 8006086:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006088:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <inc_lock+0x118>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4413      	add	r3, r2
 8006090:	330c      	adds	r3, #12
 8006092:	2200      	movs	r2, #0
 8006094:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <inc_lock+0xe0>
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <inc_lock+0x118>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4413      	add	r3, r2
 80060a4:	330c      	adds	r3, #12
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <inc_lock+0xe0>
 80060ac:	2300      	movs	r3, #0
 80060ae:	e015      	b.n	80060dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <inc_lock+0xf8>
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <inc_lock+0x118>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	330c      	adds	r3, #12
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	e001      	b.n	80060cc <inc_lock+0xfc>
 80060c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060cc:	4906      	ldr	r1, [pc, #24]	; (80060e8 <inc_lock+0x118>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	440b      	add	r3, r1
 80060d4:	330c      	adds	r3, #12
 80060d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	200006c4 	.word	0x200006c4

080060ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e010      	b.n	800611c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060fa:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <clear_lock+0x44>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4413      	add	r3, r2
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d105      	bne.n	8006116 <clear_lock+0x2a>
 800610a:	4a09      	ldr	r2, [pc, #36]	; (8006130 <clear_lock+0x44>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	4413      	add	r3, r2
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d9eb      	bls.n	80060fa <clear_lock+0xe>
	}
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	200006c4 	.word	0x200006c4

08006134 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d034      	beq.n	80061b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7858      	ldrb	r0, [r3, #1]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006158:	2301      	movs	r3, #1
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	f7ff fd9a 	bl	8005c94 <disk_write>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e022      	b.n	80061b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	1ad2      	subs	r2, r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	429a      	cmp	r2, r3
 8006180:	d217      	bcs.n	80061b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	789b      	ldrb	r3, [r3, #2]
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e010      	b.n	80061ac <sync_window+0x78>
					wsect += fs->fsize;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	7858      	ldrb	r0, [r3, #1]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800619e:	2301      	movs	r3, #1
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	f7ff fd77 	bl	8005c94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d8eb      	bhi.n	800618a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d01b      	beq.n	800620c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ffad 	bl	8006134 <sync_window>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d113      	bne.n	800620c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7858      	ldrb	r0, [r3, #1]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061ee:	2301      	movs	r3, #1
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	f7ff fd2f 	bl	8005c54 <disk_read>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006200:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	3b02      	subs	r3, #2
 8006224:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	3b02      	subs	r3, #2
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d301      	bcc.n	8006236 <clust2sect+0x20>
 8006232:	2300      	movs	r3, #0
 8006234:	e008      	b.n	8006248 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	895b      	ldrh	r3, [r3, #10]
 800623a:	461a      	mov	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	fb03 f202 	mul.w	r2, r3, r2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	4413      	add	r3, r2
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d904      	bls.n	8006274 <get_fat+0x20>
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <get_fat+0x26>
		val = 1;	/* Internal error */
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e08f      	b.n	800639a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800627a:	f04f 33ff 	mov.w	r3, #4294967295
 800627e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d062      	beq.n	800634e <get_fat+0xfa>
 8006288:	2b03      	cmp	r3, #3
 800628a:	dc7c      	bgt.n	8006386 <get_fat+0x132>
 800628c:	2b01      	cmp	r3, #1
 800628e:	d002      	beq.n	8006296 <get_fat+0x42>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d042      	beq.n	800631a <get_fat+0xc6>
 8006294:	e077      	b.n	8006386 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0a5b      	lsrs	r3, r3, #9
 80062ac:	4413      	add	r3, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	6938      	ldr	r0, [r7, #16]
 80062b2:	f7ff ff83 	bl	80061bc <move_window>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d167      	bne.n	800638c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	60fa      	str	r2, [r7, #12]
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	0a5b      	lsrs	r3, r3, #9
 80062d8:	4413      	add	r3, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	6938      	ldr	r0, [r7, #16]
 80062de:	f7ff ff6d 	bl	80061bc <move_window>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d153      	bne.n	8006390 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <get_fat+0xbc>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	e002      	b.n	8006316 <get_fat+0xc2>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006316:	617b      	str	r3, [r7, #20]
			break;
 8006318:	e03f      	b.n	800639a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	4413      	add	r3, r2
 8006324:	4619      	mov	r1, r3
 8006326:	6938      	ldr	r0, [r7, #16]
 8006328:	f7ff ff48 	bl	80061bc <move_window>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d130      	bne.n	8006394 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006340:	4413      	add	r3, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fcc6 	bl	8005cd4 <ld_word>
 8006348:	4603      	mov	r3, r0
 800634a:	617b      	str	r3, [r7, #20]
			break;
 800634c:	e025      	b.n	800639a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	4413      	add	r3, r2
 8006358:	4619      	mov	r1, r3
 800635a:	6938      	ldr	r0, [r7, #16]
 800635c:	f7ff ff2e 	bl	80061bc <move_window>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d118      	bne.n	8006398 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006374:	4413      	add	r3, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fcc4 	bl	8005d04 <ld_dword>
 800637c:	4603      	mov	r3, r0
 800637e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006382:	617b      	str	r3, [r7, #20]
			break;
 8006384:	e009      	b.n	800639a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006386:	2301      	movs	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e006      	b.n	800639a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800638c:	bf00      	nop
 800638e:	e004      	b.n	800639a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006398:	bf00      	nop
		}
	}

	return val;
 800639a:	697b      	ldr	r3, [r7, #20]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b089      	sub	sp, #36	; 0x24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80063b0:	2302      	movs	r3, #2
 80063b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	f240 80d2 	bls.w	8006560 <put_fat+0x1bc>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f080 80cc 	bcs.w	8006560 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	f000 8096 	beq.w	80064fe <put_fat+0x15a>
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f300 80cd 	bgt.w	8006572 <put_fat+0x1ce>
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d002      	beq.n	80063e2 <put_fat+0x3e>
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d06e      	beq.n	80064be <put_fat+0x11a>
 80063e0:	e0c7      	b.n	8006572 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4413      	add	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	0a5b      	lsrs	r3, r3, #9
 80063f8:	4413      	add	r3, r2
 80063fa:	4619      	mov	r1, r3
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff fedd 	bl	80061bc <move_window>
 8006402:	4603      	mov	r3, r0
 8006404:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 80ab 	bne.w	8006564 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	61b9      	str	r1, [r7, #24]
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	4413      	add	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <put_fat+0xa4>
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b25b      	sxtb	r3, r3
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	b25a      	sxtb	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	b25b      	sxtb	r3, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	b25b      	sxtb	r3, r3
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e001      	b.n	800644c <put_fat+0xa8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	0a5b      	lsrs	r3, r3, #9
 800645e:	4413      	add	r3, r2
 8006460:	4619      	mov	r1, r3
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff feaa 	bl	80061bc <move_window>
 8006468:	4603      	mov	r3, r0
 800646a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800646c:	7ffb      	ldrb	r3, [r7, #31]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d17a      	bne.n	8006568 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	4413      	add	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <put_fat+0xf0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e00e      	b.n	80064b2 <put_fat+0x10e>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b25b      	sxtb	r3, r3
 800649a:	f023 030f 	bic.w	r3, r3, #15
 800649e:	b25a      	sxtb	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	b25b      	sxtb	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	70da      	strb	r2, [r3, #3]
			break;
 80064bc:	e059      	b.n	8006572 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	4413      	add	r3, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fe76 	bl	80061bc <move_window>
 80064d0:	4603      	mov	r3, r0
 80064d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064d4:	7ffb      	ldrb	r3, [r7, #31]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d148      	bne.n	800656c <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80064e8:	4413      	add	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	b292      	uxth	r2, r2
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fc2a 	bl	8005d4a <st_word>
			fs->wflag = 1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	70da      	strb	r2, [r3, #3]
			break;
 80064fc:	e039      	b.n	8006572 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	09db      	lsrs	r3, r3, #7
 8006506:	4413      	add	r3, r2
 8006508:	4619      	mov	r1, r3
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff fe56 	bl	80061bc <move_window>
 8006510:	4603      	mov	r3, r0
 8006512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006514:	7ffb      	ldrb	r3, [r7, #31]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d12a      	bne.n	8006570 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800652e:	4413      	add	r3, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fbe7 	bl	8005d04 <ld_dword>
 8006536:	4603      	mov	r3, r0
 8006538:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800653c:	4323      	orrs	r3, r4
 800653e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800654e:	4413      	add	r3, r2
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fc14 	bl	8005d80 <st_dword>
			fs->wflag = 1;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	70da      	strb	r2, [r3, #3]
			break;
 800655e:	e008      	b.n	8006572 <put_fat+0x1ce>
		}
	}
 8006560:	bf00      	nop
 8006562:	e006      	b.n	8006572 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006564:	bf00      	nop
 8006566:	e004      	b.n	8006572 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006570:	bf00      	nop
	return res;
 8006572:	7ffb      	ldrb	r3, [r7, #31]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3724      	adds	r7, #36	; 0x24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd90      	pop	{r4, r7, pc}

0800657c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d904      	bls.n	80065a2 <remove_chain+0x26>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d301      	bcc.n	80065a6 <remove_chain+0x2a>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e04b      	b.n	800663e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	69b8      	ldr	r0, [r7, #24]
 80065b4:	f7ff fef6 	bl	80063a4 <put_fat>
 80065b8:	4603      	mov	r3, r0
 80065ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80065bc:	7ffb      	ldrb	r3, [r7, #31]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <remove_chain+0x4a>
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	e03b      	b.n	800663e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fe43 	bl	8006254 <get_fat>
 80065ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d031      	beq.n	800663a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <remove_chain+0x64>
 80065dc:	2302      	movs	r3, #2
 80065de:	e02e      	b.n	800663e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d101      	bne.n	80065ec <remove_chain+0x70>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e028      	b.n	800663e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80065ec:	2200      	movs	r2, #0
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	69b8      	ldr	r0, [r7, #24]
 80065f2:	f7ff fed7 	bl	80063a4 <put_fat>
 80065f6:	4603      	mov	r3, r0
 80065f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80065fa:	7ffb      	ldrb	r3, [r7, #31]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <remove_chain+0x88>
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	e01c      	b.n	800663e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	3b02      	subs	r3, #2
 800660e:	429a      	cmp	r2, r3
 8006610:	d20b      	bcs.n	800662a <remove_chain+0xae>
			fs->free_clst++;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3c6      	bcc.n	80065c6 <remove_chain+0x4a>
 8006638:	e000      	b.n	800663c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800663a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <create_chain+0x2c>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	429a      	cmp	r2, r3
 8006670:	d31b      	bcc.n	80066aa <create_chain+0x64>
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e018      	b.n	80066aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fdea 	bl	8006254 <get_fat>
 8006680:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d801      	bhi.n	800668c <create_chain+0x46>
 8006688:	2301      	movs	r3, #1
 800668a:	e070      	b.n	800676e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d101      	bne.n	8006698 <create_chain+0x52>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e06a      	b.n	800676e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d201      	bcs.n	80066a6 <create_chain+0x60>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	e063      	b.n	800676e <create_chain+0x128>
		scl = clst;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d307      	bcc.n	80066ce <create_chain+0x88>
				ncl = 2;
 80066be:	2302      	movs	r3, #2
 80066c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d901      	bls.n	80066ce <create_chain+0x88>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e04f      	b.n	800676e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80066ce:	69f9      	ldr	r1, [r7, #28]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff fdbf 	bl	8006254 <get_fat>
 80066d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d003      	beq.n	80066ec <create_chain+0xa6>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d101      	bne.n	80066f0 <create_chain+0xaa>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	e03e      	b.n	800676e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d1da      	bne.n	80066ae <create_chain+0x68>
 80066f8:	2300      	movs	r3, #0
 80066fa:	e038      	b.n	800676e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80066fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	69f9      	ldr	r1, [r7, #28]
 8006704:	6938      	ldr	r0, [r7, #16]
 8006706:	f7ff fe4d 	bl	80063a4 <put_fat>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <create_chain+0xe2>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d006      	beq.n	8006728 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6938      	ldr	r0, [r7, #16]
 8006720:	f7ff fe40 	bl	80063a4 <put_fat>
 8006724:	4603      	mov	r3, r0
 8006726:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d116      	bne.n	800675c <create_chain+0x116>
		fs->last_clst = ncl;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	3b02      	subs	r3, #2
 800673e:	429a      	cmp	r2, r3
 8006740:	d804      	bhi.n	800674c <create_chain+0x106>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	791b      	ldrb	r3, [r3, #4]
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	711a      	strb	r2, [r3, #4]
 800675a:	e007      	b.n	800676c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d102      	bne.n	8006768 <create_chain+0x122>
 8006762:	f04f 33ff 	mov.w	r3, #4294967295
 8006766:	e000      	b.n	800676a <create_chain+0x124>
 8006768:	2301      	movs	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800676c:	69fb      	ldr	r3, [r7, #28]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	3304      	adds	r3, #4
 800678c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	8952      	ldrh	r2, [r2, #10]
 8006796:	fbb3 f3f2 	udiv	r3, r3, r2
 800679a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	613a      	str	r2, [r7, #16]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <clmt_clust+0x3a>
 80067ac:	2300      	movs	r3, #0
 80067ae:	e010      	b.n	80067d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d307      	bcc.n	80067c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3304      	adds	r3, #4
 80067c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80067c6:	e7e9      	b.n	800679c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80067c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	4413      	add	r3, r2
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f4:	d204      	bcs.n	8006800 <dir_sdi+0x22>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006800:	2302      	movs	r3, #2
 8006802:	e063      	b.n	80068cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <dir_sdi+0x46>
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d902      	bls.n	8006824 <dir_sdi+0x46>
		clst = fs->dirbase;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	8912      	ldrh	r2, [r2, #8]
 8006832:	4293      	cmp	r3, r2
 8006834:	d301      	bcc.n	800683a <dir_sdi+0x5c>
 8006836:	2302      	movs	r3, #2
 8006838:	e048      	b.n	80068cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	61da      	str	r2, [r3, #28]
 8006842:	e029      	b.n	8006898 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	895b      	ldrh	r3, [r3, #10]
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800684c:	e019      	b.n	8006882 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fcfe 	bl	8006254 <get_fat>
 8006858:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d101      	bne.n	8006866 <dir_sdi+0x88>
 8006862:	2301      	movs	r3, #1
 8006864:	e032      	b.n	80068cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d904      	bls.n	8006876 <dir_sdi+0x98>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	429a      	cmp	r2, r3
 8006874:	d301      	bcc.n	800687a <dir_sdi+0x9c>
 8006876:	2302      	movs	r3, #2
 8006878:	e028      	b.n	80068cc <dir_sdi+0xee>
			ofs -= csz;
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d2e1      	bcs.n	800684e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	6938      	ldr	r0, [r7, #16]
 800688e:	f7ff fcc2 	bl	8006216 <clust2sect>
 8006892:	4602      	mov	r2, r0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <dir_sdi+0xcc>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e010      	b.n	80068cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	0a5b      	lsrs	r3, r3, #9
 80068b2:	441a      	add	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	3320      	adds	r3, #32
 80068ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <dir_next+0x28>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d301      	bcc.n	8006900 <dir_next+0x2c>
 80068fc:	2304      	movs	r3, #4
 80068fe:	e0aa      	b.n	8006a56 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 8098 	bne.w	8006a3c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	8912      	ldrh	r2, [r2, #8]
 8006926:	4293      	cmp	r3, r2
 8006928:	f0c0 8088 	bcc.w	8006a3c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	61da      	str	r2, [r3, #28]
 8006932:	2304      	movs	r3, #4
 8006934:	e08f      	b.n	8006a56 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0a5b      	lsrs	r3, r3, #9
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	8952      	ldrh	r2, [r2, #10]
 800693e:	3a01      	subs	r2, #1
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d17a      	bne.n	8006a3c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7ff fc80 	bl	8006254 <get_fat>
 8006954:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d801      	bhi.n	8006960 <dir_next+0x8c>
 800695c:	2302      	movs	r3, #2
 800695e:	e07a      	b.n	8006a56 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d101      	bne.n	800696c <dir_next+0x98>
 8006968:	2301      	movs	r3, #1
 800696a:	e074      	b.n	8006a56 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d358      	bcc.n	8006a28 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	61da      	str	r2, [r3, #28]
 8006982:	2304      	movs	r3, #4
 8006984:	e067      	b.n	8006a56 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7ff fe59 	bl	8006646 <create_chain>
 8006994:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <dir_next+0xcc>
 800699c:	2307      	movs	r3, #7
 800699e:	e05a      	b.n	8006a56 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <dir_next+0xd6>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e055      	b.n	8006a56 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d101      	bne.n	80069b6 <dir_next+0xe2>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e04f      	b.n	8006a56 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fbbc 	bl	8006134 <sync_window>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <dir_next+0xf2>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e047      	b.n	8006a56 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3334      	adds	r3, #52	; 0x34
 80069ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fa22 	bl	8005e1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fc1a 	bl	8006216 <clust2sect>
 80069e2:	4602      	mov	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
 80069e8:	e012      	b.n	8006a10 <dir_next+0x13c>
						fs->wflag = 1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff fb9f 	bl	8006134 <sync_window>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <dir_next+0x12c>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e02a      	b.n	8006a56 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	895b      	ldrh	r3, [r3, #10]
 8006a14:	461a      	mov	r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d3e6      	bcc.n	80069ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006a2e:	6979      	ldr	r1, [r7, #20]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fbf0 	bl	8006216 <clust2sect>
 8006a36:	4602      	mov	r2, r0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	441a      	add	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff feb4 	bl	80067de <dir_sdi>
 8006a76:	4603      	mov	r3, r0
 8006a78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d12b      	bne.n	8006ad8 <dir_alloc+0x7a>
		n = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fb96 	bl	80061bc <move_window>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11d      	bne.n	8006ad6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2be5      	cmp	r3, #229	; 0xe5
 8006aa2:	d004      	beq.n	8006aae <dir_alloc+0x50>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d102      	bne.n	8006ac2 <dir_alloc+0x64>
 8006abc:	e00c      	b.n	8006ad8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ff05 	bl	80068d4 <dir_next>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0d7      	beq.n	8006a84 <dir_alloc+0x26>
 8006ad4:	e000      	b.n	8006ad8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006ad6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d101      	bne.n	8006ae2 <dir_alloc+0x84>
 8006ade:	2307      	movs	r3, #7
 8006ae0:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	331a      	adds	r3, #26
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff f8ea 	bl	8005cd4 <ld_word>
 8006b00:	4603      	mov	r3, r0
 8006b02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d109      	bne.n	8006b20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff f8df 	bl	8005cd4 <ld_word>
 8006b16:	4603      	mov	r3, r0
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	331a      	adds	r3, #26
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff f902 	bl	8005d4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d109      	bne.n	8006b62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f103 0214 	add.w	r2, r3, #20
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7ff f8f4 	bl	8005d4a <st_word>
	}
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	331a      	adds	r3, #26
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff f8aa 	bl	8005cd4 <ld_word>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <cmp_lfn+0x1e>
 8006b86:	2300      	movs	r3, #0
 8006b88:	e059      	b.n	8006c3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	4613      	mov	r3, r2
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	81fb      	strh	r3, [r7, #14]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	e033      	b.n	8006c12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006baa:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <cmp_lfn+0xdc>)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f88b 	bl	8005cd4 <ld_word>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006bc2:	89fb      	ldrh	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01a      	beq.n	8006bfe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2bfe      	cmp	r3, #254	; 0xfe
 8006bcc:	d812      	bhi.n	8006bf4 <cmp_lfn+0x88>
 8006bce:	89bb      	ldrh	r3, [r7, #12]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fc31 	bl	8008438 <ff_wtoupper>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461c      	mov	r4, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	617a      	str	r2, [r7, #20]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 fc25 	bl	8008438 <ff_wtoupper>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d001      	beq.n	8006bf8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e022      	b.n	8006c3e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006bf8:	89bb      	ldrh	r3, [r7, #12]
 8006bfa:	81fb      	strh	r3, [r7, #14]
 8006bfc:	e006      	b.n	8006c0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006bfe:	89bb      	ldrh	r3, [r7, #12]
 8006c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d001      	beq.n	8006c0c <cmp_lfn+0xa0>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e018      	b.n	8006c3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d9c8      	bls.n	8006baa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <cmp_lfn+0xd0>
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <cmp_lfn+0xd0>
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <cmp_lfn+0xd0>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006c3c:	2301      	movs	r3, #1
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd90      	pop	{r4, r7, pc}
 8006c46:	bf00      	nop
 8006c48:	08009010 	.word	0x08009010

08006c4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4611      	mov	r1, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	71fb      	strb	r3, [r7, #7]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	330d      	adds	r3, #13
 8006c66:	79ba      	ldrb	r2, [r7, #6]
 8006c68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	330b      	adds	r3, #11
 8006c6e:	220f      	movs	r2, #15
 8006c70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	330c      	adds	r3, #12
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	331a      	adds	r3, #26
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff f862 	bl	8005d4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	82fb      	strh	r3, [r7, #22]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006c9e:	8afb      	ldrh	r3, [r7, #22]
 8006ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <put_lfn+0x6c>
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	61fa      	str	r2, [r7, #28]
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006cb8:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <put_lfn+0xcc>)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	8afa      	ldrh	r2, [r7, #22]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff f83d 	bl	8005d4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <put_lfn+0x90>
 8006cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d9da      	bls.n	8006c9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ce8:	8afb      	ldrh	r3, [r7, #22]
 8006cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d006      	beq.n	8006d00 <put_lfn+0xb4>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <put_lfn+0xbc>
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	79fa      	ldrb	r2, [r7, #7]
 8006d0c:	701a      	strb	r2, [r3, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	08009010 	.word	0x08009010

08006d1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006d2a:	220b      	movs	r2, #11
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff f852 	bl	8005dd8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d92b      	bls.n	8006d92 <gen_numname+0x76>
		sr = seq;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006d3e:	e022      	b.n	8006d86 <gen_numname+0x6a>
			wc = *lfn++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4e:	e017      	b.n	8006d80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005a      	lsls	r2, r3, #1
 8006d54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006d5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <gen_numname+0x5e>
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006d74:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006d78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	2b0f      	cmp	r3, #15
 8006d84:	d9e4      	bls.n	8006d50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1d8      	bne.n	8006d40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006d92:	2307      	movs	r3, #7
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	3330      	adds	r3, #48	; 0x30
 8006da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006daa:	2b39      	cmp	r3, #57	; 0x39
 8006dac:	d904      	bls.n	8006db8 <gen_numname+0x9c>
 8006dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006db2:	3307      	adds	r3, #7
 8006db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dbe:	3330      	adds	r3, #48	; 0x30
 8006dc0:	443b      	add	r3, r7
 8006dc2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006dc6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	091b      	lsrs	r3, r3, #4
 8006dce:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1df      	bne.n	8006d96 <gen_numname+0x7a>
	ns[i] = '~';
 8006dd6:	f107 0214 	add.w	r2, r7, #20
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	4413      	add	r3, r2
 8006dde:	227e      	movs	r2, #126	; 0x7e
 8006de0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006de2:	2300      	movs	r3, #0
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	e002      	b.n	8006dee <gen_numname+0xd2>
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	3301      	adds	r3, #1
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d205      	bcs.n	8006e02 <gen_numname+0xe6>
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	4413      	add	r3, r2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d1f2      	bne.n	8006de8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	2b07      	cmp	r3, #7
 8006e06:	d807      	bhi.n	8006e18 <gen_numname+0xfc>
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e0e:	3330      	adds	r3, #48	; 0x30
 8006e10:	443b      	add	r3, r7
 8006e12:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006e16:	e000      	b.n	8006e1a <gen_numname+0xfe>
 8006e18:	2120      	movs	r1, #32
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	460a      	mov	r2, r1
 8006e26:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	2b07      	cmp	r3, #7
 8006e2c:	d9e9      	bls.n	8006e02 <gen_numname+0xe6>
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	3730      	adds	r7, #48	; 0x30
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006e44:	230b      	movs	r3, #11
 8006e46:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	0852      	lsrs	r2, r2, #1
 8006e4e:	01db      	lsls	r3, r3, #7
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	6079      	str	r1, [r7, #4]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1ed      	bne.n	8006e48 <sum_sfn+0x10>
	return sum;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fca7 	bl	80067de <dir_sdi>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <dir_find+0x24>
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	e0a9      	b.n	8006ff2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e9e:	23ff      	movs	r3, #255	; 0xff
 8006ea0:	753b      	strb	r3, [r7, #20]
 8006ea2:	7d3b      	ldrb	r3, [r7, #20]
 8006ea4:	757b      	strb	r3, [r7, #21]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6938      	ldr	r0, [r7, #16]
 8006eb6:	f7ff f981 	bl	80061bc <move_window>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 8090 	bne.w	8006fe6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ece:	7dbb      	ldrb	r3, [r7, #22]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <dir_find+0x60>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	75fb      	strb	r3, [r7, #23]
 8006ed8:	e08a      	b.n	8006ff0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	330b      	adds	r3, #11
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7bfa      	ldrb	r2, [r7, #15]
 8006eec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006eee:	7dbb      	ldrb	r3, [r7, #22]
 8006ef0:	2be5      	cmp	r3, #229	; 0xe5
 8006ef2:	d007      	beq.n	8006f04 <dir_find+0x8a>
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <dir_find+0x98>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d006      	beq.n	8006f12 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f04:	23ff      	movs	r3, #255	; 0xff
 8006f06:	757b      	strb	r3, [r7, #21]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f10:	e05e      	b.n	8006fd0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	2b0f      	cmp	r3, #15
 8006f16:	d136      	bne.n	8006f86 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d154      	bne.n	8006fd0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006f26:	7dbb      	ldrb	r3, [r7, #22]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00d      	beq.n	8006f4c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	7b5b      	ldrb	r3, [r3, #13]
 8006f36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006f38:	7dbb      	ldrb	r3, [r7, #22]
 8006f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3e:	75bb      	strb	r3, [r7, #22]
 8006f40:	7dbb      	ldrb	r3, [r7, #22]
 8006f42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006f4c:	7dba      	ldrb	r2, [r7, #22]
 8006f4e:	7d7b      	ldrb	r3, [r7, #21]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d115      	bne.n	8006f80 <dir_find+0x106>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	330d      	adds	r3, #13
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	7d3a      	ldrb	r2, [r7, #20]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d10e      	bne.n	8006f80 <dir_find+0x106>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7ff fdfd 	bl	8006b6c <cmp_lfn>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <dir_find+0x106>
 8006f78:	7d7b      	ldrb	r3, [r7, #21]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e000      	b.n	8006f82 <dir_find+0x108>
 8006f80:	23ff      	movs	r3, #255	; 0xff
 8006f82:	757b      	strb	r3, [r7, #21]
 8006f84:	e024      	b.n	8006fd0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f86:	7d7b      	ldrb	r3, [r7, #21]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <dir_find+0x126>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff51 	bl	8006e38 <sum_sfn>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	7d3b      	ldrb	r3, [r7, #20]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d024      	beq.n	8006fea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <dir_find+0x14a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a18      	ldr	r0, [r3, #32]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	220b      	movs	r2, #11
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f7fe ff49 	bl	8005e50 <mem_cmp>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d014      	beq.n	8006fee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006fc4:	23ff      	movs	r3, #255	; 0xff
 8006fc6:	757b      	strb	r3, [r7, #21]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fc7e 	bl	80068d4 <dir_next>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f43f af65 	beq.w	8006eae <dir_find+0x34>
 8006fe4:	e004      	b.n	8006ff0 <dir_find+0x176>
		if (res != FR_OK) break;
 8006fe6:	bf00      	nop
 8006fe8:	e002      	b.n	8006ff0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006fee:	bf00      	nop

	return res;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007010:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <dir_register+0x20>
 8007018:	2306      	movs	r3, #6
 800701a:	e0e0      	b.n	80071de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	e002      	b.n	8007028 <dir_register+0x2c>
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	3301      	adds	r3, #1
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f4      	bne.n	8007022 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	220c      	movs	r2, #12
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fec7 	bl	8005dd8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d032      	beq.n	80070ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2240      	movs	r2, #64	; 0x40
 8007058:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800705c:	2301      	movs	r3, #1
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007060:	e016      	b.n	8007090 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	f107 010c 	add.w	r1, r7, #12
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	f7ff fe53 	bl	8006d1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff feff 	bl	8006e7a <dir_find>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	3301      	adds	r3, #1
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2b63      	cmp	r3, #99	; 0x63
 8007094:	d9e5      	bls.n	8007062 <dir_register+0x66>
 8007096:	e000      	b.n	800709a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007098:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2b64      	cmp	r3, #100	; 0x64
 800709e:	d101      	bne.n	80070a4 <dir_register+0xa8>
 80070a0:	2307      	movs	r3, #7
 80070a2:	e09c      	b.n	80071de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80070a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d002      	beq.n	80070b2 <dir_register+0xb6>
 80070ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070b0:	e095      	b.n	80071de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80070b2:	7dfa      	ldrb	r2, [r7, #23]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <dir_register+0xd8>
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	330c      	adds	r3, #12
 80070c8:	4a47      	ldr	r2, [pc, #284]	; (80071e8 <dir_register+0x1ec>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	089b      	lsrs	r3, r3, #2
 80070d0:	3301      	adds	r3, #1
 80070d2:	e000      	b.n	80070d6 <dir_register+0xda>
 80070d4:	2301      	movs	r3, #1
 80070d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80070d8:	6a39      	ldr	r1, [r7, #32]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fcbf 	bl	8006a5e <dir_alloc>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80070e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d148      	bne.n	8007180 <dir_register+0x184>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	623b      	str	r3, [r7, #32]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d042      	beq.n	8007180 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	015b      	lsls	r3, r3, #5
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fb69 	bl	80067de <dir_sdi>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007116:	2b00      	cmp	r3, #0
 8007118:	d132      	bne.n	8007180 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fe8a 	bl	8006e38 <sum_sfn>
 8007124:	4603      	mov	r3, r0
 8007126:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4619      	mov	r1, r3
 800712e:	69f8      	ldr	r0, [r7, #28]
 8007130:	f7ff f844 	bl	80061bc <move_window>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800713a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11d      	bne.n	800717e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	68d8      	ldr	r0, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a19      	ldr	r1, [r3, #32]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	7efb      	ldrb	r3, [r7, #27]
 8007150:	f7ff fd7c 	bl	8006c4c <put_lfn>
				fs->wflag = 1;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2201      	movs	r2, #1
 8007158:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fbb9 	bl	80068d4 <dir_next>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <dir_register+0x184>
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	3b01      	subs	r3, #1
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1d5      	bne.n	8007128 <dir_register+0x12c>
 800717c:	e000      	b.n	8007180 <dir_register+0x184>
				if (res != FR_OK) break;
 800717e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007184:	2b00      	cmp	r3, #0
 8007186:	d128      	bne.n	80071da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4619      	mov	r1, r3
 800718e:	69f8      	ldr	r0, [r7, #28]
 8007190:	f7ff f814 	bl	80061bc <move_window>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800719a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11b      	bne.n	80071da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	2220      	movs	r2, #32
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fe35 	bl	8005e1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a18      	ldr	r0, [r3, #32]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	220b      	movs	r2, #11
 80071ba:	4619      	mov	r1, r3
 80071bc:	f7fe fe0c 	bl	8005dd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	330c      	adds	r3, #12
 80071cc:	f002 0218 	and.w	r2, r2, #24
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2201      	movs	r2, #1
 80071d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80071da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3730      	adds	r7, #48	; 0x30
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	4ec4ec4f 	.word	0x4ec4ec4f

080071ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	61ba      	str	r2, [r7, #24]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4413      	add	r3, r2
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800721a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721c:	2b1f      	cmp	r3, #31
 800721e:	d940      	bls.n	80072a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007222:	2b2f      	cmp	r3, #47	; 0x2f
 8007224:	d006      	beq.n	8007234 <create_name+0x48>
 8007226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007228:	2b5c      	cmp	r3, #92	; 0x5c
 800722a:	d110      	bne.n	800724e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800722c:	e002      	b.n	8007234 <create_name+0x48>
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3301      	adds	r3, #1
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	4413      	add	r3, r2
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b2f      	cmp	r3, #47	; 0x2f
 800723e:	d0f6      	beq.n	800722e <create_name+0x42>
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	4413      	add	r3, r2
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b5c      	cmp	r3, #92	; 0x5c
 800724a:	d0f0      	beq.n	800722e <create_name+0x42>
			break;
 800724c:	e02a      	b.n	80072a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2bfe      	cmp	r3, #254	; 0xfe
 8007252:	d901      	bls.n	8007258 <create_name+0x6c>
 8007254:	2306      	movs	r3, #6
 8007256:	e17d      	b.n	8007554 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725a:	b2db      	uxtb	r3, r3
 800725c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800725e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f8ac 	bl	80083c0 <ff_convert>
 8007268:	4603      	mov	r3, r0
 800726a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800726c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <create_name+0x8a>
 8007272:	2306      	movs	r3, #6
 8007274:	e16e      	b.n	8007554 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007278:	2b7f      	cmp	r3, #127	; 0x7f
 800727a:	d809      	bhi.n	8007290 <create_name+0xa4>
 800727c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800727e:	4619      	mov	r1, r3
 8007280:	488d      	ldr	r0, [pc, #564]	; (80074b8 <create_name+0x2cc>)
 8007282:	f7fe fe0c 	bl	8005e9e <chk_chr>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <create_name+0xa4>
 800728c:	2306      	movs	r3, #6
 800728e:	e161      	b.n	8007554 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	617a      	str	r2, [r7, #20]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800729e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80072a0:	e7b4      	b.n	800720c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80072a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	441a      	add	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80072ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b0:	2b1f      	cmp	r3, #31
 80072b2:	d801      	bhi.n	80072b8 <create_name+0xcc>
 80072b4:	2304      	movs	r3, #4
 80072b6:	e000      	b.n	80072ba <create_name+0xce>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80072be:	e011      	b.n	80072e4 <create_name+0xf8>
		w = lfn[di - 1];
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	3b01      	subs	r3, #1
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80072d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d002      	beq.n	80072de <create_name+0xf2>
 80072d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072da:	2b2e      	cmp	r3, #46	; 0x2e
 80072dc:	d106      	bne.n	80072ec <create_name+0x100>
		di--;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ea      	bne.n	80072c0 <create_name+0xd4>
 80072ea:	e000      	b.n	80072ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80072ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <create_name+0x118>
 8007300:	2306      	movs	r3, #6
 8007302:	e127      	b.n	8007554 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	220b      	movs	r2, #11
 800730a:	2120      	movs	r1, #32
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fd84 	bl	8005e1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	e002      	b.n	800731e <create_name+0x132>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	3301      	adds	r3, #1
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	2b20      	cmp	r3, #32
 800732a:	d0f5      	beq.n	8007318 <create_name+0x12c>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	2b2e      	cmp	r3, #46	; 0x2e
 8007338:	d0ee      	beq.n	8007318 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <create_name+0x168>
 8007340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007344:	f043 0303 	orr.w	r3, r3, #3
 8007348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800734c:	e002      	b.n	8007354 <create_name+0x168>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3b01      	subs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <create_name+0x182>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007360:	3b01      	subs	r3, #1
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	2b2e      	cmp	r3, #46	; 0x2e
 800736c:	d1ef      	bne.n	800734e <create_name+0x162>

	i = b = 0; ni = 8;
 800736e:	2300      	movs	r3, #0
 8007370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	2308      	movs	r3, #8
 800737a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800738c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8090 	beq.w	80074b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007396:	2b20      	cmp	r3, #32
 8007398:	d006      	beq.n	80073a8 <create_name+0x1bc>
 800739a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800739c:	2b2e      	cmp	r3, #46	; 0x2e
 800739e:	d10a      	bne.n	80073b6 <create_name+0x1ca>
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d006      	beq.n	80073b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ac:	f043 0303 	orr.w	r3, r3, #3
 80073b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073b4:	e07d      	b.n	80074b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d203      	bcs.n	80073c6 <create_name+0x1da>
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d123      	bne.n	800740e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2b0b      	cmp	r3, #11
 80073ca:	d106      	bne.n	80073da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80073cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d0:	f043 0303 	orr.w	r3, r3, #3
 80073d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073d8:	e075      	b.n	80074c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d005      	beq.n	80073ee <create_name+0x202>
 80073e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e6:	f043 0303 	orr.w	r3, r3, #3
 80073ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d866      	bhi.n	80074c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	2308      	movs	r3, #8
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	230b      	movs	r3, #11
 8007400:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800740c:	e051      	b.n	80074b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800740e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007410:	2b7f      	cmp	r3, #127	; 0x7f
 8007412:	d914      	bls.n	800743e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f000 ffd1 	bl	80083c0 <ff_convert>
 800741e:	4603      	mov	r3, r0
 8007420:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <create_name+0x246>
 8007428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800742a:	3b80      	subs	r3, #128	; 0x80
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <create_name+0x2d0>)
 800742e:	5cd3      	ldrb	r3, [r2, r3]
 8007430:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007436:	f043 0302 	orr.w	r3, r3, #2
 800743a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800743e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <create_name+0x268>
 8007444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007446:	4619      	mov	r1, r3
 8007448:	481d      	ldr	r0, [pc, #116]	; (80074c0 <create_name+0x2d4>)
 800744a:	f7fe fd28 	bl	8005e9e <chk_chr>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d008      	beq.n	8007466 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007454:	235f      	movs	r3, #95	; 0x5f
 8007456:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745c:	f043 0303 	orr.w	r3, r3, #3
 8007460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007464:	e01b      	b.n	800749e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d909      	bls.n	8007480 <create_name+0x294>
 800746c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800746e:	2b5a      	cmp	r3, #90	; 0x5a
 8007470:	d806      	bhi.n	8007480 <create_name+0x294>
					b |= 2;
 8007472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007476:	f043 0302 	orr.w	r3, r3, #2
 800747a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800747e:	e00e      	b.n	800749e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007482:	2b60      	cmp	r3, #96	; 0x60
 8007484:	d90b      	bls.n	800749e <create_name+0x2b2>
 8007486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007488:	2b7a      	cmp	r3, #122	; 0x7a
 800748a:	d808      	bhi.n	800749e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800748c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749a:	3b20      	subs	r3, #32
 800749c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	623a      	str	r2, [r7, #32]
 80074a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074a6:	b2d1      	uxtb	r1, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	460a      	mov	r2, r1
 80074ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80074b2:	e763      	b.n	800737c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80074b4:	bf00      	nop
 80074b6:	e006      	b.n	80074c6 <create_name+0x2da>
 80074b8:	08008f14 	.word	0x08008f14
 80074bc:	08008f90 	.word	0x08008f90
 80074c0:	08008f20 	.word	0x08008f20
			if (si > di) break;			/* No extension */
 80074c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074cc:	2be5      	cmp	r3, #229	; 0xe5
 80074ce:	d103      	bne.n	80074d8 <create_name+0x2ec>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2205      	movs	r2, #5
 80074d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d104      	bne.n	80074e8 <create_name+0x2fc>
 80074de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80074e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d005      	beq.n	8007500 <create_name+0x314>
 80074f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d105      	bne.n	800750c <create_name+0x320>
 8007500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007504:	f043 0302 	orr.w	r3, r3, #2
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d117      	bne.n	8007548 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d105      	bne.n	8007530 <create_name+0x344>
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007528:	f043 0310 	orr.w	r3, r3, #16
 800752c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b04      	cmp	r3, #4
 800753a:	d105      	bne.n	8007548 <create_name+0x35c>
 800753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800754e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007552:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007554:	4618      	mov	r0, r3
 8007556:	3728      	adds	r7, #40	; 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007570:	e002      	b.n	8007578 <follow_path+0x1c>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b2f      	cmp	r3, #47	; 0x2f
 800757e:	d0f8      	beq.n	8007572 <follow_path+0x16>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b5c      	cmp	r3, #92	; 0x5c
 8007586:	d0f4      	beq.n	8007572 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b1f      	cmp	r3, #31
 8007594:	d80a      	bhi.n	80075ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2280      	movs	r2, #128	; 0x80
 800759a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff f91c 	bl	80067de <dir_sdi>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]
 80075aa:	e043      	b.n	8007634 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075ac:	463b      	mov	r3, r7
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fe1b 	bl	80071ec <create_name>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d134      	bne.n	800762a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fc5a 	bl	8006e7a <dir_find>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d127      	bne.n	800762e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d122      	bne.n	800762e <follow_path+0xd2>
 80075e8:	2305      	movs	r3, #5
 80075ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80075ec:	e01f      	b.n	800762e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11c      	bne.n	8007632 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	799b      	ldrb	r3, [r3, #6]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007604:	2305      	movs	r3, #5
 8007606:	75fb      	strb	r3, [r7, #23]
 8007608:	e014      	b.n	8007634 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	4413      	add	r3, r2
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fa65 	bl	8006aec <ld_clust>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007628:	e7c0      	b.n	80075ac <follow_path+0x50>
			if (res != FR_OK) break;
 800762a:	bf00      	nop
 800762c:	e002      	b.n	8007634 <follow_path+0xd8>
				break;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007632:	bf00      	nop
			}
		}
	}

	return res;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d031      	beq.n	80076b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e002      	b.n	8007662 <get_ldnumber+0x24>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3301      	adds	r3, #1
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b1f      	cmp	r3, #31
 8007668:	d903      	bls.n	8007672 <get_ldnumber+0x34>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b3a      	cmp	r3, #58	; 0x3a
 8007670:	d1f4      	bne.n	800765c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b3a      	cmp	r3, #58	; 0x3a
 8007678:	d11c      	bne.n	80076b4 <get_ldnumber+0x76>
			tp = *path;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	60fa      	str	r2, [r7, #12]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	3b30      	subs	r3, #48	; 0x30
 800768a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d80e      	bhi.n	80076b0 <get_ldnumber+0x72>
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	429a      	cmp	r2, r3
 8007698:	d10a      	bne.n	80076b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d107      	bne.n	80076b0 <get_ldnumber+0x72>
					vol = (int)i;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	3301      	adds	r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	e002      	b.n	80076ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80076b4:	2300      	movs	r3, #0
 80076b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80076b8:	693b      	ldr	r3, [r7, #16]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	70da      	strb	r2, [r3, #3]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fe fd6a 	bl	80061bc <move_window>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <check_fs+0x2a>
 80076ee:	2304      	movs	r3, #4
 80076f0:	e038      	b.n	8007764 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3334      	adds	r3, #52	; 0x34
 80076f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe faea 	bl	8005cd4 <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007708:	429a      	cmp	r2, r3
 800770a:	d001      	beq.n	8007710 <check_fs+0x48>
 800770c:	2303      	movs	r3, #3
 800770e:	e029      	b.n	8007764 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007716:	2be9      	cmp	r3, #233	; 0xe9
 8007718:	d009      	beq.n	800772e <check_fs+0x66>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007720:	2beb      	cmp	r3, #235	; 0xeb
 8007722:	d11e      	bne.n	8007762 <check_fs+0x9a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800772a:	2b90      	cmp	r3, #144	; 0x90
 800772c:	d119      	bne.n	8007762 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3334      	adds	r3, #52	; 0x34
 8007732:	3336      	adds	r3, #54	; 0x36
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fae5 	bl	8005d04 <ld_dword>
 800773a:	4603      	mov	r3, r0
 800773c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <check_fs+0xa4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d101      	bne.n	800774a <check_fs+0x82>
 8007746:	2300      	movs	r3, #0
 8007748:	e00c      	b.n	8007764 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3334      	adds	r3, #52	; 0x34
 800774e:	3352      	adds	r3, #82	; 0x52
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fad7 	bl	8005d04 <ld_dword>
 8007756:	4603      	mov	r3, r0
 8007758:	4a05      	ldr	r2, [pc, #20]	; (8007770 <check_fs+0xa8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <check_fs+0x9a>
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007762:	2302      	movs	r3, #2
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	00544146 	.word	0x00544146
 8007770:	33544146 	.word	0x33544146

08007774 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b096      	sub	sp, #88	; 0x58
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff ff58 	bl	800763e <get_ldnumber>
 800778e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007792:	2b00      	cmp	r3, #0
 8007794:	da01      	bge.n	800779a <find_volume+0x26>
 8007796:	230b      	movs	r3, #11
 8007798:	e230      	b.n	8007bfc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800779a:	4aa1      	ldr	r2, [pc, #644]	; (8007a20 <find_volume+0x2ac>)
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <find_volume+0x3a>
 80077aa:	230c      	movs	r3, #12
 80077ac:	e226      	b.n	8007bfc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01a      	beq.n	80077fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fa03 	bl	8005bd4 <disk_status>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80077d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10c      	bne.n	80077fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <find_volume+0x82>
 80077e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80077f2:	230a      	movs	r3, #10
 80077f4:	e202      	b.n	8007bfc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80077f6:	2300      	movs	r3, #0
 80077f8:	e200      	b.n	8007bfc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	b2da      	uxtb	r2, r3
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe f9fb 	bl	8005c08 <disk_initialize>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007824:	2303      	movs	r3, #3
 8007826:	e1e9      	b.n	8007bfc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <find_volume+0xca>
 800782e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800783a:	230a      	movs	r3, #10
 800783c:	e1de      	b.n	8007bfc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007846:	f7ff ff3f 	bl	80076c8 <check_fs>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007854:	2b02      	cmp	r3, #2
 8007856:	d149      	bne.n	80078ec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007858:	2300      	movs	r3, #0
 800785a:	643b      	str	r3, [r7, #64]	; 0x40
 800785c:	e01e      	b.n	800789c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800786c:	4413      	add	r3, r2
 800786e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	3304      	adds	r3, #4
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d006      	beq.n	8007888 <find_volume+0x114>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	3308      	adds	r3, #8
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fa40 	bl	8005d04 <ld_dword>
 8007884:	4602      	mov	r2, r0
 8007886:	e000      	b.n	800788a <find_volume+0x116>
 8007888:	2200      	movs	r2, #0
 800788a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	3358      	adds	r3, #88	; 0x58
 8007890:	443b      	add	r3, r7
 8007892:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007898:	3301      	adds	r3, #1
 800789a:	643b      	str	r3, [r7, #64]	; 0x40
 800789c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d9dd      	bls.n	800785e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80078a2:	2300      	movs	r3, #0
 80078a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80078a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <find_volume+0x13e>
 80078ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ae:	3b01      	subs	r3, #1
 80078b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80078b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	3358      	adds	r3, #88	; 0x58
 80078b8:	443b      	add	r3, r7
 80078ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <find_volume+0x15e>
 80078c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ca:	f7ff fefd 	bl	80076c8 <check_fs>
 80078ce:	4603      	mov	r3, r0
 80078d0:	e000      	b.n	80078d4 <find_volume+0x160>
 80078d2:	2303      	movs	r3, #3
 80078d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80078d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d905      	bls.n	80078ec <find_volume+0x178>
 80078e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e2:	3301      	adds	r3, #1
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
 80078e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d9e2      	bls.n	80078b2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d101      	bne.n	80078f8 <find_volume+0x184>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e181      	b.n	8007bfc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80078f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d901      	bls.n	8007904 <find_volume+0x190>
 8007900:	230d      	movs	r3, #13
 8007902:	e17b      	b.n	8007bfc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	3334      	adds	r3, #52	; 0x34
 8007908:	330b      	adds	r3, #11
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe f9e2 	bl	8005cd4 <ld_word>
 8007910:	4603      	mov	r3, r0
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	d001      	beq.n	800791c <find_volume+0x1a8>
 8007918:	230d      	movs	r3, #13
 800791a:	e16f      	b.n	8007bfc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	3334      	adds	r3, #52	; 0x34
 8007920:	3316      	adds	r3, #22
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f9d6 	bl	8005cd4 <ld_word>
 8007928:	4603      	mov	r3, r0
 800792a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800792c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <find_volume+0x1cc>
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	3334      	adds	r3, #52	; 0x34
 8007936:	3324      	adds	r3, #36	; 0x24
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe f9e3 	bl	8005d04 <ld_dword>
 800793e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007944:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	789b      	ldrb	r3, [r3, #2]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d005      	beq.n	8007964 <find_volume+0x1f0>
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	789b      	ldrb	r3, [r3, #2]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d001      	beq.n	8007964 <find_volume+0x1f0>
 8007960:	230d      	movs	r3, #13
 8007962:	e14b      	b.n	8007bfc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	461a      	mov	r2, r3
 800796a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796c:	fb02 f303 	mul.w	r3, r2, r3
 8007970:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007978:	b29a      	uxth	r2, r3
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	895b      	ldrh	r3, [r3, #10]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <find_volume+0x224>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	895b      	ldrh	r3, [r3, #10]
 800798a:	461a      	mov	r2, r3
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	895b      	ldrh	r3, [r3, #10]
 8007990:	3b01      	subs	r3, #1
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <find_volume+0x228>
 8007998:	230d      	movs	r3, #13
 800799a:	e12f      	b.n	8007bfc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	3334      	adds	r3, #52	; 0x34
 80079a0:	3311      	adds	r3, #17
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe f996 	bl	8005cd4 <ld_word>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	891b      	ldrh	r3, [r3, #8]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <find_volume+0x24e>
 80079be:	230d      	movs	r3, #13
 80079c0:	e11c      	b.n	8007bfc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	3334      	adds	r3, #52	; 0x34
 80079c6:	3313      	adds	r3, #19
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe f983 	bl	8005cd4 <ld_word>
 80079ce:	4603      	mov	r3, r0
 80079d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80079d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <find_volume+0x272>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	3334      	adds	r3, #52	; 0x34
 80079dc:	3320      	adds	r3, #32
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe f990 	bl	8005d04 <ld_dword>
 80079e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	3334      	adds	r3, #52	; 0x34
 80079ea:	330e      	adds	r3, #14
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe f971 	bl	8005cd4 <ld_word>
 80079f2:	4603      	mov	r3, r0
 80079f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80079f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <find_volume+0x28c>
 80079fc:	230d      	movs	r3, #13
 80079fe:	e0fd      	b.n	8007bfc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	4413      	add	r3, r2
 8007a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a08:	8912      	ldrh	r2, [r2, #8]
 8007a0a:	0912      	lsrs	r2, r2, #4
 8007a0c:	b292      	uxth	r2, r2
 8007a0e:	4413      	add	r3, r2
 8007a10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d204      	bcs.n	8007a24 <find_volume+0x2b0>
 8007a1a:	230d      	movs	r3, #13
 8007a1c:	e0ee      	b.n	8007bfc <find_volume+0x488>
 8007a1e:	bf00      	nop
 8007a20:	200006bc 	.word	0x200006bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a2c:	8952      	ldrh	r2, [r2, #10]
 8007a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <find_volume+0x2ca>
 8007a3a:	230d      	movs	r3, #13
 8007a3c:	e0de      	b.n	8007bfc <find_volume+0x488>
		fmt = FS_FAT32;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d802      	bhi.n	8007a54 <find_volume+0x2e0>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d802      	bhi.n	8007a64 <find_volume+0x2f0>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a70:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	441a      	add	r2, r3
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007a7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	441a      	add	r2, r3
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d11e      	bne.n	8007acc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	3334      	adds	r3, #52	; 0x34
 8007a92:	332a      	adds	r3, #42	; 0x2a
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe f91d 	bl	8005cd4 <ld_word>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <find_volume+0x330>
 8007aa0:	230d      	movs	r3, #13
 8007aa2:	e0ab      	b.n	8007bfc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	891b      	ldrh	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <find_volume+0x33c>
 8007aac:	230d      	movs	r3, #13
 8007aae:	e0a5      	b.n	8007bfc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	3334      	adds	r3, #52	; 0x34
 8007ab4:	332c      	adds	r3, #44	; 0x2c
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe f924 	bl	8005d04 <ld_dword>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aca:	e01f      	b.n	8007b0c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	891b      	ldrh	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <find_volume+0x364>
 8007ad4:	230d      	movs	r3, #13
 8007ad6:	e091      	b.n	8007bfc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ade:	441a      	add	r2, r3
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d103      	bne.n	8007af4 <find_volume+0x380>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	e00a      	b.n	8007b0a <find_volume+0x396>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	4613      	mov	r3, r2
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	085a      	lsrs	r2, r3, #1
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b0a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	69da      	ldr	r2, [r3, #28]
 8007b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b16:	0a5b      	lsrs	r3, r3, #9
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d201      	bcs.n	8007b20 <find_volume+0x3ac>
 8007b1c:	230d      	movs	r3, #13
 8007b1e:	e06d      	b.n	8007bfc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295
 8007b26:	615a      	str	r2, [r3, #20]
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d149      	bne.n	8007bd2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	3334      	adds	r3, #52	; 0x34
 8007b42:	3330      	adds	r3, #48	; 0x30
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe f8c5 	bl	8005cd4 <ld_word>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d140      	bne.n	8007bd2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b52:	3301      	adds	r3, #1
 8007b54:	4619      	mov	r1, r3
 8007b56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b58:	f7fe fb30 	bl	80061bc <move_window>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d137      	bne.n	8007bd2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	2200      	movs	r2, #0
 8007b66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	3334      	adds	r3, #52	; 0x34
 8007b6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe f8af 	bl	8005cd4 <ld_word>
 8007b76:	4603      	mov	r3, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d127      	bne.n	8007bd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	3334      	adds	r3, #52	; 0x34
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe f8bc 	bl	8005d04 <ld_dword>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <find_volume+0x490>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d11e      	bne.n	8007bd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	3334      	adds	r3, #52	; 0x34
 8007b98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe f8b1 	bl	8005d04 <ld_dword>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <find_volume+0x494>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d113      	bne.n	8007bd2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	3334      	adds	r3, #52	; 0x34
 8007bae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe f8a6 	bl	8005d04 <ld_dword>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	3334      	adds	r3, #52	; 0x34
 8007bc2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe f89c 	bl	8005d04 <ld_dword>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007bd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <find_volume+0x498>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <find_volume+0x498>)
 8007be4:	801a      	strh	r2, [r3, #0]
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <find_volume+0x498>)
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	4a07      	ldr	r2, [pc, #28]	; (8007c10 <find_volume+0x49c>)
 8007bf2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bf6:	f7fe fa79 	bl	80060ec <clear_lock>
#endif
	return FR_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3758      	adds	r7, #88	; 0x58
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	41615252 	.word	0x41615252
 8007c08:	61417272 	.word	0x61417272
 8007c0c:	200006c0 	.word	0x200006c0
 8007c10:	200006e4 	.word	0x200006e4

08007c14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c1e:	2309      	movs	r3, #9
 8007c20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01c      	beq.n	8007c62 <validate+0x4e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d018      	beq.n	8007c62 <validate+0x4e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d013      	beq.n	8007c62 <validate+0x4e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	889a      	ldrh	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d10c      	bne.n	8007c62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd ffc0 	bl	8005bd4 <disk_status>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <validate+0x4e>
			res = FR_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <validate+0x5a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	e000      	b.n	8007c70 <validate+0x5c>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	6013      	str	r3, [r2, #0]
	return res;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c92:	f107 0310 	add.w	r3, r7, #16
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fcd1 	bl	800763e <get_ldnumber>
 8007c9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	da01      	bge.n	8007ca8 <f_mount+0x28>
 8007ca4:	230b      	movs	r3, #11
 8007ca6:	e02b      	b.n	8007d00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ca8:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <f_mount+0x88>)
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007cb8:	69b8      	ldr	r0, [r7, #24]
 8007cba:	f7fe fa17 	bl	80060ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	490d      	ldr	r1, [pc, #52]	; (8007d08 <f_mount+0x88>)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <f_mount+0x66>
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d001      	beq.n	8007cea <f_mount+0x6a>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e00a      	b.n	8007d00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007cea:	f107 010c 	add.w	r1, r7, #12
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fd3d 	bl	8007774 <find_volume>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	200006bc 	.word	0x200006bc

08007d0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b09a      	sub	sp, #104	; 0x68
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <f_open+0x18>
 8007d20:	2309      	movs	r3, #9
 8007d22:	e1ad      	b.n	8008080 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	f107 0114 	add.w	r1, r7, #20
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fd1c 	bl	8007774 <find_volume>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 8191 	bne.w	800806e <f_open+0x362>
		dj.obj.fs = fs;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fbff 	bl	800755c <follow_path>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007d64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d11a      	bne.n	8007da2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007d6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d70:	b25b      	sxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da03      	bge.n	8007d7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007d76:	2306      	movs	r3, #6
 8007d78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d7c:	e011      	b.n	8007da2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf14      	ite	ne
 8007d88:	2301      	movne	r3, #1
 8007d8a:	2300      	moveq	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f107 0318 	add.w	r3, r7, #24
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f89c 	bl	8005ed4 <chk_lock>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	f003 031c 	and.w	r3, r3, #28
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d07f      	beq.n	8007eac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007dac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d017      	beq.n	8007de4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007db4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d10e      	bne.n	8007dda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007dbc:	f7fe f8e6 	bl	8005f8c <enq_lock>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d006      	beq.n	8007dd4 <f_open+0xc8>
 8007dc6:	f107 0318 	add.w	r3, r7, #24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff f916 	bl	8006ffc <dir_register>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	e000      	b.n	8007dd6 <f_open+0xca>
 8007dd4:	2312      	movs	r3, #18
 8007dd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	f043 0308 	orr.w	r3, r3, #8
 8007de0:	71fb      	strb	r3, [r7, #7]
 8007de2:	e010      	b.n	8007e06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007de4:	7fbb      	ldrb	r3, [r7, #30]
 8007de6:	f003 0311 	and.w	r3, r3, #17
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <f_open+0xea>
					res = FR_DENIED;
 8007dee:	2307      	movs	r3, #7
 8007df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007df4:	e007      	b.n	8007e06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <f_open+0xfa>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d168      	bne.n	8007ee0 <f_open+0x1d4>
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d063      	beq.n	8007ee0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007e18:	f7fd fca8 	bl	800576c <get_fattime>
 8007e1c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	330e      	adds	r3, #14
 8007e22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fd ffab 	bl	8005d80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	3316      	adds	r3, #22
 8007e2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fd ffa5 	bl	8005d80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	330b      	adds	r3, #11
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fe51 	bl	8006aec <ld_clust>
 8007e4a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e50:	2200      	movs	r2, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fe69 	bl	8006b2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	331c      	adds	r3, #28
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fd ff8e 	bl	8005d80 <st_dword>
					fs->wflag = 1;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2201      	movs	r2, #1
 8007e68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d037      	beq.n	8007ee0 <f_open+0x1d4>
						dw = fs->winsect;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fb7c 	bl	800657c <remove_chain>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d126      	bne.n	8007ee0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe f990 	bl	80061bc <move_window>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ea6:	3a01      	subs	r2, #1
 8007ea8:	611a      	str	r2, [r3, #16]
 8007eaa:	e019      	b.n	8007ee0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007eac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d115      	bne.n	8007ee0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007eb4:	7fbb      	ldrb	r3, [r7, #30]
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ec4:	e00c      	b.n	8007ee0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <f_open+0x1d4>
 8007ed0:	7fbb      	ldrb	r3, [r7, #30]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <f_open+0x1d4>
						res = FR_DENIED;
 8007eda:	2307      	movs	r3, #7
 8007edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d128      	bne.n	8007f3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bf14      	ite	ne
 8007f12:	2301      	movne	r3, #1
 8007f14:	2300      	moveq	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f107 0318 	add.w	r3, r7, #24
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe f855 	bl	8005fd0 <inc_lock>
 8007f26:	4602      	mov	r2, r0
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <f_open+0x22e>
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007f3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f040 8095 	bne.w	800806e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fdce 	bl	8006aec <ld_clust>
 8007f50:	4602      	mov	r2, r0
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	331c      	adds	r3, #28
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fd fed2 	bl	8005d04 <ld_dword>
 8007f60:	4602      	mov	r2, r0
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	88da      	ldrh	r2, [r3, #6]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	79fa      	ldrb	r2, [r7, #7]
 8007f7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3330      	adds	r3, #48	; 0x30
 8007f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fd ff3c 	bl	8005e1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d060      	beq.n	800806e <f_open+0x362>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d05c      	beq.n	800806e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	025b      	lsls	r3, r3, #9
 8007fc2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fd0:	e016      	b.n	8008000 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe f93c 	bl	8006254 <get_fat>
 8007fdc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d802      	bhi.n	8007fea <f_open+0x2de>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d102      	bne.n	8007ff8 <f_open+0x2ec>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008000:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <f_open+0x304>
 8008008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800800a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800c:	429a      	cmp	r2, r3
 800800e:	d8e0      	bhi.n	8007fd2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008014:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008016:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800801a:	2b00      	cmp	r3, #0
 800801c:	d127      	bne.n	800806e <f_open+0x362>
 800801e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	2b00      	cmp	r3, #0
 8008026:	d022      	beq.n	800806e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe f8f2 	bl	8006216 <clust2sect>
 8008032:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <f_open+0x336>
						res = FR_INT_ERR;
 800803a:	2302      	movs	r3, #2
 800803c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008040:	e015      	b.n	800806e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008044:	0a5a      	lsrs	r2, r3, #9
 8008046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008048:	441a      	add	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	7858      	ldrb	r0, [r3, #1]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1a      	ldr	r2, [r3, #32]
 800805c:	2301      	movs	r3, #1
 800805e:	f7fd fdf9 	bl	8005c54 <disk_read>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <f_open+0x362>
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800806e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <f_open+0x370>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800807c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008080:	4618      	mov	r0, r3
 8008082:	3768      	adds	r7, #104	; 0x68
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f107 0214 	add.w	r2, r7, #20
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fdb3 	bl	8007c14 <validate>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80080b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d107      	bne.n	80080cc <f_read+0x44>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	7d5b      	ldrb	r3, [r3, #21]
 80080c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80080c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <f_read+0x4a>
 80080cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080d0:	e115      	b.n	80082fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	7d1b      	ldrb	r3, [r3, #20]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <f_read+0x5a>
 80080de:	2307      	movs	r3, #7
 80080e0:	e10d      	b.n	80082fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	f240 80fe 	bls.w	80082f4 <f_read+0x26c>
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80080fc:	e0fa      	b.n	80082f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	2b00      	cmp	r3, #0
 8008108:	f040 80c6 	bne.w	8008298 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	0a5b      	lsrs	r3, r3, #9
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	8952      	ldrh	r2, [r2, #10]
 8008116:	3a01      	subs	r2, #1
 8008118:	4013      	ands	r3, r2
 800811a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d12f      	bne.n	8008182 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	633b      	str	r3, [r7, #48]	; 0x30
 8008130:	e013      	b.n	800815a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	4619      	mov	r1, r3
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7fe fb18 	bl	8006776 <clmt_clust>
 8008146:	6338      	str	r0, [r7, #48]	; 0x30
 8008148:	e007      	b.n	800815a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7fe f87e 	bl	8006254 <get_fat>
 8008158:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	2b01      	cmp	r3, #1
 800815e:	d804      	bhi.n	800816a <f_read+0xe2>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2202      	movs	r2, #2
 8008164:	755a      	strb	r2, [r3, #21]
 8008166:	2302      	movs	r3, #2
 8008168:	e0c9      	b.n	80082fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d104      	bne.n	800817c <f_read+0xf4>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	755a      	strb	r2, [r3, #21]
 8008178:	2301      	movs	r3, #1
 800817a:	e0c0      	b.n	80082fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008180:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe f843 	bl	8006216 <clust2sect>
 8008190:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <f_read+0x11a>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2202      	movs	r2, #2
 800819c:	755a      	strb	r2, [r3, #21]
 800819e:	2302      	movs	r3, #2
 80081a0:	e0ad      	b.n	80082fe <f_read+0x276>
			sect += csect;
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	4413      	add	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	0a5b      	lsrs	r3, r3, #9
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d039      	beq.n	800822a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	4413      	add	r3, r2
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	8952      	ldrh	r2, [r2, #10]
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d905      	bls.n	80081d0 <f_read+0x148>
					cc = fs->csize - csect;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	895b      	ldrh	r3, [r3, #10]
 80081c8:	461a      	mov	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	7858      	ldrb	r0, [r3, #1]
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081da:	f7fd fd3b 	bl	8005c54 <disk_read>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <f_read+0x166>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	755a      	strb	r2, [r3, #21]
 80081ea:	2301      	movs	r3, #1
 80081ec:	e087      	b.n	80082fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	7d1b      	ldrb	r3, [r3, #20]
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da14      	bge.n	8008222 <f_read+0x19a>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008202:	429a      	cmp	r2, r3
 8008204:	d90d      	bls.n	8008222 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1a      	ldr	r2, [r3, #32]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	025b      	lsls	r3, r3, #9
 8008210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008212:	18d0      	adds	r0, r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3330      	adds	r3, #48	; 0x30
 8008218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821c:	4619      	mov	r1, r3
 800821e:	f7fd fddb 	bl	8005dd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	025b      	lsls	r3, r3, #9
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008228:	e050      	b.n	80082cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	429a      	cmp	r2, r3
 8008232:	d02e      	beq.n	8008292 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	b25b      	sxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	da18      	bge.n	8008270 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	7858      	ldrb	r0, [r3, #1]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	2301      	movs	r3, #1
 800824e:	f7fd fd21 	bl	8005c94 <disk_write>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <f_read+0x1da>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	755a      	strb	r2, [r3, #21]
 800825e:	2301      	movs	r3, #1
 8008260:	e04d      	b.n	80082fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	7d1b      	ldrb	r3, [r3, #20]
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	b2da      	uxtb	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	7858      	ldrb	r0, [r3, #1]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800827a:	2301      	movs	r3, #1
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	f7fd fce9 	bl	8005c54 <disk_read>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <f_read+0x20a>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	755a      	strb	r2, [r3, #21]
 800828e:	2301      	movs	r3, #1
 8008290:	e035      	b.n	80082fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80082a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d901      	bls.n	80082b2 <f_read+0x22a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	4413      	add	r3, r2
 80082c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c4:	4619      	mov	r1, r3
 80082c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082c8:	f7fd fd86 	bl	8005dd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	4413      	add	r3, r2
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	619a      	str	r2, [r3, #24]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	441a      	add	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f47f af01 	bne.w	80080fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3738      	adds	r7, #56	; 0x38
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800831e:	4b1f      	ldr	r3, [pc, #124]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008320:	7a5b      	ldrb	r3, [r3, #9]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d131      	bne.n	800838c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <FATFS_LinkDriverEx+0x94>)
 800832a:	7a5b      	ldrb	r3, [r3, #9]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	461a      	mov	r2, r3
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008336:	4b19      	ldr	r3, [pc, #100]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008338:	7a5b      	ldrb	r3, [r3, #9]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	4a17      	ldr	r2, [pc, #92]	; (800839c <FATFS_LinkDriverEx+0x94>)
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008348:	7a5b      	ldrb	r3, [r3, #9]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008350:	4413      	add	r3, r2
 8008352:	79fa      	ldrb	r2, [r7, #7]
 8008354:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008358:	7a5b      	ldrb	r3, [r3, #9]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	b2d1      	uxtb	r1, r2
 8008360:	4a0e      	ldr	r2, [pc, #56]	; (800839c <FATFS_LinkDriverEx+0x94>)
 8008362:	7251      	strb	r1, [r2, #9]
 8008364:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008366:	7dbb      	ldrb	r3, [r7, #22]
 8008368:	3330      	adds	r3, #48	; 0x30
 800836a:	b2da      	uxtb	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	3301      	adds	r3, #1
 8008374:	223a      	movs	r2, #58	; 0x3a
 8008376:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	3302      	adds	r3, #2
 800837c:	222f      	movs	r2, #47	; 0x2f
 800837e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3303      	adds	r3, #3
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	200008e4 	.word	0x200008e4

080083a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff ffaa 	bl	8008308 <FATFS_LinkDriverEx>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	2b7f      	cmp	r3, #127	; 0x7f
 80083d0:	d802      	bhi.n	80083d8 <ff_convert+0x18>
		c = chr;
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	81fb      	strh	r3, [r7, #14]
 80083d6:	e025      	b.n	8008424 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	2bff      	cmp	r3, #255	; 0xff
 80083e2:	d805      	bhi.n	80083f0 <ff_convert+0x30>
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	3b80      	subs	r3, #128	; 0x80
 80083e8:	4a12      	ldr	r2, [pc, #72]	; (8008434 <ff_convert+0x74>)
 80083ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ee:	e000      	b.n	80083f2 <ff_convert+0x32>
 80083f0:	2300      	movs	r3, #0
 80083f2:	81fb      	strh	r3, [r7, #14]
 80083f4:	e016      	b.n	8008424 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80083f6:	2300      	movs	r3, #0
 80083f8:	81fb      	strh	r3, [r7, #14]
 80083fa:	e009      	b.n	8008410 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <ff_convert+0x74>)
 8008400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008404:	88fa      	ldrh	r2, [r7, #6]
 8008406:	429a      	cmp	r2, r3
 8008408:	d006      	beq.n	8008418 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	3301      	adds	r3, #1
 800840e:	81fb      	strh	r3, [r7, #14]
 8008410:	89fb      	ldrh	r3, [r7, #14]
 8008412:	2b7f      	cmp	r3, #127	; 0x7f
 8008414:	d9f2      	bls.n	80083fc <ff_convert+0x3c>
 8008416:	e000      	b.n	800841a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008418:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	3380      	adds	r3, #128	; 0x80
 800841e:	b29b      	uxth	r3, r3
 8008420:	b2db      	uxtb	r3, r3
 8008422:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008424:	89fb      	ldrh	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	08009020 	.word	0x08009020

08008438 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008448:	d201      	bcs.n	800844e <ff_wtoupper+0x16>
 800844a:	4b3e      	ldr	r3, [pc, #248]	; (8008544 <ff_wtoupper+0x10c>)
 800844c:	e000      	b.n	8008450 <ff_wtoupper+0x18>
 800844e:	4b3e      	ldr	r3, [pc, #248]	; (8008548 <ff_wtoupper+0x110>)
 8008450:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	1c9a      	adds	r2, r3, #2
 8008456:	617a      	str	r2, [r7, #20]
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800845c:	8a7b      	ldrh	r3, [r7, #18]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d068      	beq.n	8008534 <ff_wtoupper+0xfc>
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	8a7b      	ldrh	r3, [r7, #18]
 8008466:	429a      	cmp	r2, r3
 8008468:	d364      	bcc.n	8008534 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	617a      	str	r2, [r7, #20]
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	823b      	strh	r3, [r7, #16]
 8008474:	8a3b      	ldrh	r3, [r7, #16]
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	81fb      	strh	r3, [r7, #14]
 800847a:	8a3b      	ldrh	r3, [r7, #16]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	8a79      	ldrh	r1, [r7, #18]
 8008484:	8a3b      	ldrh	r3, [r7, #16]
 8008486:	440b      	add	r3, r1
 8008488:	429a      	cmp	r2, r3
 800848a:	da49      	bge.n	8008520 <ff_wtoupper+0xe8>
			switch (cmd) {
 800848c:	89fb      	ldrh	r3, [r7, #14]
 800848e:	2b08      	cmp	r3, #8
 8008490:	d84f      	bhi.n	8008532 <ff_wtoupper+0xfa>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <ff_wtoupper+0x60>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084cf 	.word	0x080084cf
 80084a0:	080084e5 	.word	0x080084e5
 80084a4:	080084ed 	.word	0x080084ed
 80084a8:	080084f5 	.word	0x080084f5
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	08008505 	.word	0x08008505
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	08008515 	.word	0x08008515
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80084bc:	88fa      	ldrh	r2, [r7, #6]
 80084be:	8a7b      	ldrh	r3, [r7, #18]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4413      	add	r3, r2
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	80fb      	strh	r3, [r7, #6]
 80084cc:	e027      	b.n	800851e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80084ce:	88fa      	ldrh	r2, [r7, #6]
 80084d0:	8a7b      	ldrh	r3, [r7, #18]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	b29b      	uxth	r3, r3
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	80fb      	strh	r3, [r7, #6]
 80084e2:	e01c      	b.n	800851e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	3b10      	subs	r3, #16
 80084e8:	80fb      	strh	r3, [r7, #6]
 80084ea:	e018      	b.n	800851e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	3b20      	subs	r3, #32
 80084f0:	80fb      	strh	r3, [r7, #6]
 80084f2:	e014      	b.n	800851e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	3b30      	subs	r3, #48	; 0x30
 80084f8:	80fb      	strh	r3, [r7, #6]
 80084fa:	e010      	b.n	800851e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	3b1a      	subs	r3, #26
 8008500:	80fb      	strh	r3, [r7, #6]
 8008502:	e00c      	b.n	800851e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	3308      	adds	r3, #8
 8008508:	80fb      	strh	r3, [r7, #6]
 800850a:	e008      	b.n	800851e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	3b50      	subs	r3, #80	; 0x50
 8008510:	80fb      	strh	r3, [r7, #6]
 8008512:	e004      	b.n	800851e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008514:	88fb      	ldrh	r3, [r7, #6]
 8008516:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800851a:	80fb      	strh	r3, [r7, #6]
 800851c:	bf00      	nop
			}
			break;
 800851e:	e008      	b.n	8008532 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008520:	89fb      	ldrh	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d195      	bne.n	8008452 <ff_wtoupper+0x1a>
 8008526:	8a3b      	ldrh	r3, [r7, #16]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008530:	e78f      	b.n	8008452 <ff_wtoupper+0x1a>
			break;
 8008532:	bf00      	nop
	}

	return chr;
 8008534:	88fb      	ldrh	r3, [r7, #6]
}
 8008536:	4618      	mov	r0, r3
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	08009120 	.word	0x08009120
 8008548:	08009314 	.word	0x08009314

0800854c <__errno>:
 800854c:	4b01      	ldr	r3, [pc, #4]	; (8008554 <__errno+0x8>)
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	2000000c 	.word	0x2000000c

08008558 <__libc_init_array>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	4d0d      	ldr	r5, [pc, #52]	; (8008590 <__libc_init_array+0x38>)
 800855c:	4c0d      	ldr	r4, [pc, #52]	; (8008594 <__libc_init_array+0x3c>)
 800855e:	1b64      	subs	r4, r4, r5
 8008560:	10a4      	asrs	r4, r4, #2
 8008562:	2600      	movs	r6, #0
 8008564:	42a6      	cmp	r6, r4
 8008566:	d109      	bne.n	800857c <__libc_init_array+0x24>
 8008568:	4d0b      	ldr	r5, [pc, #44]	; (8008598 <__libc_init_array+0x40>)
 800856a:	4c0c      	ldr	r4, [pc, #48]	; (800859c <__libc_init_array+0x44>)
 800856c:	f000 fc8e 	bl	8008e8c <_init>
 8008570:	1b64      	subs	r4, r4, r5
 8008572:	10a4      	asrs	r4, r4, #2
 8008574:	2600      	movs	r6, #0
 8008576:	42a6      	cmp	r6, r4
 8008578:	d105      	bne.n	8008586 <__libc_init_array+0x2e>
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008580:	4798      	blx	r3
 8008582:	3601      	adds	r6, #1
 8008584:	e7ee      	b.n	8008564 <__libc_init_array+0xc>
 8008586:	f855 3b04 	ldr.w	r3, [r5], #4
 800858a:	4798      	blx	r3
 800858c:	3601      	adds	r6, #1
 800858e:	e7f2      	b.n	8008576 <__libc_init_array+0x1e>
 8008590:	0800940c 	.word	0x0800940c
 8008594:	0800940c 	.word	0x0800940c
 8008598:	0800940c 	.word	0x0800940c
 800859c:	08009410 	.word	0x08009410

080085a0 <memset>:
 80085a0:	4402      	add	r2, r0
 80085a2:	4603      	mov	r3, r0
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d100      	bne.n	80085aa <memset+0xa>
 80085a8:	4770      	bx	lr
 80085aa:	f803 1b01 	strb.w	r1, [r3], #1
 80085ae:	e7f9      	b.n	80085a4 <memset+0x4>

080085b0 <siprintf>:
 80085b0:	b40e      	push	{r1, r2, r3}
 80085b2:	b500      	push	{lr}
 80085b4:	b09c      	sub	sp, #112	; 0x70
 80085b6:	ab1d      	add	r3, sp, #116	; 0x74
 80085b8:	9002      	str	r0, [sp, #8]
 80085ba:	9006      	str	r0, [sp, #24]
 80085bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085c0:	4809      	ldr	r0, [pc, #36]	; (80085e8 <siprintf+0x38>)
 80085c2:	9107      	str	r1, [sp, #28]
 80085c4:	9104      	str	r1, [sp, #16]
 80085c6:	4909      	ldr	r1, [pc, #36]	; (80085ec <siprintf+0x3c>)
 80085c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085cc:	9105      	str	r1, [sp, #20]
 80085ce:	6800      	ldr	r0, [r0, #0]
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	a902      	add	r1, sp, #8
 80085d4:	f000 f868 	bl	80086a8 <_svfiprintf_r>
 80085d8:	9b02      	ldr	r3, [sp, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	b01c      	add	sp, #112	; 0x70
 80085e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e4:	b003      	add	sp, #12
 80085e6:	4770      	bx	lr
 80085e8:	2000000c 	.word	0x2000000c
 80085ec:	ffff0208 	.word	0xffff0208

080085f0 <__ssputs_r>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	688e      	ldr	r6, [r1, #8]
 80085f6:	429e      	cmp	r6, r3
 80085f8:	4682      	mov	sl, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4690      	mov	r8, r2
 80085fe:	461f      	mov	r7, r3
 8008600:	d838      	bhi.n	8008674 <__ssputs_r+0x84>
 8008602:	898a      	ldrh	r2, [r1, #12]
 8008604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008608:	d032      	beq.n	8008670 <__ssputs_r+0x80>
 800860a:	6825      	ldr	r5, [r4, #0]
 800860c:	6909      	ldr	r1, [r1, #16]
 800860e:	eba5 0901 	sub.w	r9, r5, r1
 8008612:	6965      	ldr	r5, [r4, #20]
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800861c:	3301      	adds	r3, #1
 800861e:	444b      	add	r3, r9
 8008620:	106d      	asrs	r5, r5, #1
 8008622:	429d      	cmp	r5, r3
 8008624:	bf38      	it	cc
 8008626:	461d      	movcc	r5, r3
 8008628:	0553      	lsls	r3, r2, #21
 800862a:	d531      	bpl.n	8008690 <__ssputs_r+0xa0>
 800862c:	4629      	mov	r1, r5
 800862e:	f000 fb63 	bl	8008cf8 <_malloc_r>
 8008632:	4606      	mov	r6, r0
 8008634:	b950      	cbnz	r0, 800864c <__ssputs_r+0x5c>
 8008636:	230c      	movs	r3, #12
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	464a      	mov	r2, r9
 8008650:	f000 fabe 	bl	8008bd0 <memcpy>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800865a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	6126      	str	r6, [r4, #16]
 8008662:	6165      	str	r5, [r4, #20]
 8008664:	444e      	add	r6, r9
 8008666:	eba5 0509 	sub.w	r5, r5, r9
 800866a:	6026      	str	r6, [r4, #0]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	463e      	mov	r6, r7
 8008670:	42be      	cmp	r6, r7
 8008672:	d900      	bls.n	8008676 <__ssputs_r+0x86>
 8008674:	463e      	mov	r6, r7
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	4632      	mov	r2, r6
 800867a:	4641      	mov	r1, r8
 800867c:	f000 fab6 	bl	8008bec <memmove>
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	1b9b      	subs	r3, r3, r6
 8008684:	60a3      	str	r3, [r4, #8]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	4433      	add	r3, r6
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	2000      	movs	r0, #0
 800868e:	e7db      	b.n	8008648 <__ssputs_r+0x58>
 8008690:	462a      	mov	r2, r5
 8008692:	f000 fba5 	bl	8008de0 <_realloc_r>
 8008696:	4606      	mov	r6, r0
 8008698:	2800      	cmp	r0, #0
 800869a:	d1e1      	bne.n	8008660 <__ssputs_r+0x70>
 800869c:	6921      	ldr	r1, [r4, #16]
 800869e:	4650      	mov	r0, sl
 80086a0:	f000 fabe 	bl	8008c20 <_free_r>
 80086a4:	e7c7      	b.n	8008636 <__ssputs_r+0x46>
	...

080086a8 <_svfiprintf_r>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4698      	mov	r8, r3
 80086ae:	898b      	ldrh	r3, [r1, #12]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	b09d      	sub	sp, #116	; 0x74
 80086b4:	4607      	mov	r7, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	d50e      	bpl.n	80086da <_svfiprintf_r+0x32>
 80086bc:	690b      	ldr	r3, [r1, #16]
 80086be:	b963      	cbnz	r3, 80086da <_svfiprintf_r+0x32>
 80086c0:	2140      	movs	r1, #64	; 0x40
 80086c2:	f000 fb19 	bl	8008cf8 <_malloc_r>
 80086c6:	6028      	str	r0, [r5, #0]
 80086c8:	6128      	str	r0, [r5, #16]
 80086ca:	b920      	cbnz	r0, 80086d6 <_svfiprintf_r+0x2e>
 80086cc:	230c      	movs	r3, #12
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e0d1      	b.n	800887a <_svfiprintf_r+0x1d2>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	616b      	str	r3, [r5, #20]
 80086da:	2300      	movs	r3, #0
 80086dc:	9309      	str	r3, [sp, #36]	; 0x24
 80086de:	2320      	movs	r3, #32
 80086e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008894 <_svfiprintf_r+0x1ec>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	4623      	mov	r3, r4
 80086f8:	469a      	mov	sl, r3
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	b10a      	cbz	r2, 8008704 <_svfiprintf_r+0x5c>
 8008700:	2a25      	cmp	r2, #37	; 0x25
 8008702:	d1f9      	bne.n	80086f8 <_svfiprintf_r+0x50>
 8008704:	ebba 0b04 	subs.w	fp, sl, r4
 8008708:	d00b      	beq.n	8008722 <_svfiprintf_r+0x7a>
 800870a:	465b      	mov	r3, fp
 800870c:	4622      	mov	r2, r4
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ff6d 	bl	80085f0 <__ssputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80aa 	beq.w	8008870 <_svfiprintf_r+0x1c8>
 800871c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871e:	445a      	add	r2, fp
 8008720:	9209      	str	r2, [sp, #36]	; 0x24
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80a2 	beq.w	8008870 <_svfiprintf_r+0x1c8>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	f10a 0a01 	add.w	sl, sl, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008742:	931a      	str	r3, [sp, #104]	; 0x68
 8008744:	4654      	mov	r4, sl
 8008746:	2205      	movs	r2, #5
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	4851      	ldr	r0, [pc, #324]	; (8008894 <_svfiprintf_r+0x1ec>)
 800874e:	f7f7 fd47 	bl	80001e0 <memchr>
 8008752:	9a04      	ldr	r2, [sp, #16]
 8008754:	b9d8      	cbnz	r0, 800878e <_svfiprintf_r+0xe6>
 8008756:	06d0      	lsls	r0, r2, #27
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008760:	0711      	lsls	r1, r2, #28
 8008762:	bf44      	itt	mi
 8008764:	232b      	movmi	r3, #43	; 0x2b
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b2a      	cmp	r3, #42	; 0x2a
 8008770:	d015      	beq.n	800879e <_svfiprintf_r+0xf6>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4654      	mov	r4, sl
 8008776:	2000      	movs	r0, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4621      	mov	r1, r4
 800877e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008782:	3b30      	subs	r3, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d94e      	bls.n	8008826 <_svfiprintf_r+0x17e>
 8008788:	b1b0      	cbz	r0, 80087b8 <_svfiprintf_r+0x110>
 800878a:	9207      	str	r2, [sp, #28]
 800878c:	e014      	b.n	80087b8 <_svfiprintf_r+0x110>
 800878e:	eba0 0308 	sub.w	r3, r0, r8
 8008792:	fa09 f303 	lsl.w	r3, r9, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	46a2      	mov	sl, r4
 800879c:	e7d2      	b.n	8008744 <_svfiprintf_r+0x9c>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfbb      	ittet	lt
 80087aa:	425b      	neglt	r3, r3
 80087ac:	f042 0202 	orrlt.w	r2, r2, #2
 80087b0:	9307      	strge	r3, [sp, #28]
 80087b2:	9307      	strlt	r3, [sp, #28]
 80087b4:	bfb8      	it	lt
 80087b6:	9204      	strlt	r2, [sp, #16]
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	2b2e      	cmp	r3, #46	; 0x2e
 80087bc:	d10c      	bne.n	80087d8 <_svfiprintf_r+0x130>
 80087be:	7863      	ldrb	r3, [r4, #1]
 80087c0:	2b2a      	cmp	r3, #42	; 0x2a
 80087c2:	d135      	bne.n	8008830 <_svfiprintf_r+0x188>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfb8      	it	lt
 80087d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087d4:	3402      	adds	r4, #2
 80087d6:	9305      	str	r3, [sp, #20]
 80087d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088a4 <_svfiprintf_r+0x1fc>
 80087dc:	7821      	ldrb	r1, [r4, #0]
 80087de:	2203      	movs	r2, #3
 80087e0:	4650      	mov	r0, sl
 80087e2:	f7f7 fcfd 	bl	80001e0 <memchr>
 80087e6:	b140      	cbz	r0, 80087fa <_svfiprintf_r+0x152>
 80087e8:	2340      	movs	r3, #64	; 0x40
 80087ea:	eba0 000a 	sub.w	r0, r0, sl
 80087ee:	fa03 f000 	lsl.w	r0, r3, r0
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	4303      	orrs	r3, r0
 80087f6:	3401      	adds	r4, #1
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	4826      	ldr	r0, [pc, #152]	; (8008898 <_svfiprintf_r+0x1f0>)
 8008800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008804:	2206      	movs	r2, #6
 8008806:	f7f7 fceb 	bl	80001e0 <memchr>
 800880a:	2800      	cmp	r0, #0
 800880c:	d038      	beq.n	8008880 <_svfiprintf_r+0x1d8>
 800880e:	4b23      	ldr	r3, [pc, #140]	; (800889c <_svfiprintf_r+0x1f4>)
 8008810:	bb1b      	cbnz	r3, 800885a <_svfiprintf_r+0x1b2>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	3307      	adds	r3, #7
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	3308      	adds	r3, #8
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	4433      	add	r3, r6
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	e767      	b.n	80086f6 <_svfiprintf_r+0x4e>
 8008826:	fb0c 3202 	mla	r2, ip, r2, r3
 800882a:	460c      	mov	r4, r1
 800882c:	2001      	movs	r0, #1
 800882e:	e7a5      	b.n	800877c <_svfiprintf_r+0xd4>
 8008830:	2300      	movs	r3, #0
 8008832:	3401      	adds	r4, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	4619      	mov	r1, r3
 8008838:	f04f 0c0a 	mov.w	ip, #10
 800883c:	4620      	mov	r0, r4
 800883e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008842:	3a30      	subs	r2, #48	; 0x30
 8008844:	2a09      	cmp	r2, #9
 8008846:	d903      	bls.n	8008850 <_svfiprintf_r+0x1a8>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0c5      	beq.n	80087d8 <_svfiprintf_r+0x130>
 800884c:	9105      	str	r1, [sp, #20]
 800884e:	e7c3      	b.n	80087d8 <_svfiprintf_r+0x130>
 8008850:	fb0c 2101 	mla	r1, ip, r1, r2
 8008854:	4604      	mov	r4, r0
 8008856:	2301      	movs	r3, #1
 8008858:	e7f0      	b.n	800883c <_svfiprintf_r+0x194>
 800885a:	ab03      	add	r3, sp, #12
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	462a      	mov	r2, r5
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <_svfiprintf_r+0x1f8>)
 8008862:	a904      	add	r1, sp, #16
 8008864:	4638      	mov	r0, r7
 8008866:	f3af 8000 	nop.w
 800886a:	1c42      	adds	r2, r0, #1
 800886c:	4606      	mov	r6, r0
 800886e:	d1d6      	bne.n	800881e <_svfiprintf_r+0x176>
 8008870:	89ab      	ldrh	r3, [r5, #12]
 8008872:	065b      	lsls	r3, r3, #25
 8008874:	f53f af2c 	bmi.w	80086d0 <_svfiprintf_r+0x28>
 8008878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800887a:	b01d      	add	sp, #116	; 0x74
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	462a      	mov	r2, r5
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <_svfiprintf_r+0x1f8>)
 8008888:	a904      	add	r1, sp, #16
 800888a:	4638      	mov	r0, r7
 800888c:	f000 f87a 	bl	8008984 <_printf_i>
 8008890:	e7eb      	b.n	800886a <_svfiprintf_r+0x1c2>
 8008892:	bf00      	nop
 8008894:	080093d0 	.word	0x080093d0
 8008898:	080093da 	.word	0x080093da
 800889c:	00000000 	.word	0x00000000
 80088a0:	080085f1 	.word	0x080085f1
 80088a4:	080093d6 	.word	0x080093d6

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4616      	mov	r6, r2
 80088ae:	4699      	mov	r9, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c4:	4607      	mov	r7, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b10a      	cbz	r2, 80088ce <_printf_common+0x26>
 80088ca:	3301      	adds	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	0699      	lsls	r1, r3, #26
 80088d2:	bf42      	ittt	mi
 80088d4:	6833      	ldrmi	r3, [r6, #0]
 80088d6:	3302      	addmi	r3, #2
 80088d8:	6033      	strmi	r3, [r6, #0]
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	f015 0506 	ands.w	r5, r5, #6
 80088e0:	d106      	bne.n	80088f0 <_printf_common+0x48>
 80088e2:	f104 0a19 	add.w	sl, r4, #25
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	6832      	ldr	r2, [r6, #0]
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc26      	bgt.n	800893e <_printf_common+0x96>
 80088f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f4:	1e13      	subs	r3, r2, #0
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	bf18      	it	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	0692      	lsls	r2, r2, #26
 80088fe:	d42b      	bmi.n	8008958 <_printf_common+0xb0>
 8008900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d01e      	beq.n	800894c <_printf_common+0xa4>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	68e5      	ldr	r5, [r4, #12]
 8008912:	6832      	ldr	r2, [r6, #0]
 8008914:	f003 0306 	and.w	r3, r3, #6
 8008918:	2b04      	cmp	r3, #4
 800891a:	bf08      	it	eq
 800891c:	1aad      	subeq	r5, r5, r2
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	bf0c      	ite	eq
 8008924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008928:	2500      	movne	r5, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	bfc4      	itt	gt
 800892e:	1a9b      	subgt	r3, r3, r2
 8008930:	18ed      	addgt	r5, r5, r3
 8008932:	2600      	movs	r6, #0
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xc8>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xa8>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4649      	mov	r1, r9
 8008944:	4638      	mov	r0, r7
 8008946:	47c0      	blx	r8
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xac>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c6      	b.n	80088e6 <_printf_common+0x3e>
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	2030      	movs	r0, #48	; 0x30
 800895e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008962:	4422      	add	r2, r4
 8008964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800896c:	3302      	adds	r3, #2
 800896e:	e7c7      	b.n	8008900 <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa4>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x8e>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800898c:	2f78      	cmp	r7, #120	; 0x78
 800898e:	4691      	mov	r9, r2
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	469a      	mov	sl, r3
 8008996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	; 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d8 	beq.w	8008b56 <_printf_i+0x1d2>
 80089a6:	2f58      	cmp	r7, #88	; 0x58
 80089a8:	f000 80a3 	beq.w	8008af2 <_printf_i+0x16e>
 80089ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	; (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b3d 	.word	0x08008b3d
 80089f4:	08008a61 	.word	0x08008a61
 80089f8:	08008b1f 	.word	0x08008b1f
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b5f 	.word	0x08008b5f
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008b27 	.word	0x08008b27
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	602a      	str	r2, [r5, #0]
 8008a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0a3      	b.n	8008b78 <_printf_i+0x1f4>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	6829      	ldr	r1, [r5, #0]
 8008a34:	0606      	lsls	r6, r0, #24
 8008a36:	f101 0304 	add.w	r3, r1, #4
 8008a3a:	d50a      	bpl.n	8008a52 <_printf_i+0xce>
 8008a3c:	680e      	ldr	r6, [r1, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	da03      	bge.n	8008a4c <_printf_i+0xc8>
 8008a44:	232d      	movs	r3, #45	; 0x2d
 8008a46:	4276      	negs	r6, r6
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4c:	485e      	ldr	r0, [pc, #376]	; (8008bc8 <_printf_i+0x244>)
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e019      	b.n	8008a86 <_printf_i+0x102>
 8008a52:	680e      	ldr	r6, [r1, #0]
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a5a:	bf18      	it	ne
 8008a5c:	b236      	sxthne	r6, r6
 8008a5e:	e7ef      	b.n	8008a40 <_printf_i+0xbc>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6029      	str	r1, [r5, #0]
 8008a68:	0601      	lsls	r1, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xec>
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	e002      	b.n	8008a76 <_printf_i+0xf2>
 8008a70:	0646      	lsls	r6, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xe8>
 8008a74:	881e      	ldrh	r6, [r3, #0]
 8008a76:	4854      	ldr	r0, [pc, #336]	; (8008bc8 <_printf_i+0x244>)
 8008a78:	2f6f      	cmp	r7, #111	; 0x6f
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2308      	moveq	r3, #8
 8008a7e:	230a      	movne	r3, #10
 8008a80:	2100      	movs	r1, #0
 8008a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a86:	6865      	ldr	r5, [r4, #4]
 8008a88:	60a5      	str	r5, [r4, #8]
 8008a8a:	2d00      	cmp	r5, #0
 8008a8c:	bfa2      	ittt	ge
 8008a8e:	6821      	ldrge	r1, [r4, #0]
 8008a90:	f021 0104 	bicge.w	r1, r1, #4
 8008a94:	6021      	strge	r1, [r4, #0]
 8008a96:	b90e      	cbnz	r6, 8008a9c <_printf_i+0x118>
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	d04d      	beq.n	8008b38 <_printf_i+0x1b4>
 8008a9c:	4615      	mov	r5, r2
 8008a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa6:	5dc7      	ldrb	r7, [r0, r7]
 8008aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aac:	4637      	mov	r7, r6
 8008aae:	42bb      	cmp	r3, r7
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	d9f4      	bls.n	8008a9e <_printf_i+0x11a>
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d10b      	bne.n	8008ad0 <_printf_i+0x14c>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	07de      	lsls	r6, r3, #31
 8008abc:	d508      	bpl.n	8008ad0 <_printf_i+0x14c>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6861      	ldr	r1, [r4, #4]
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	bfde      	ittt	le
 8008ac6:	2330      	movle	r3, #48	; 0x30
 8008ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ad0:	1b52      	subs	r2, r2, r5
 8008ad2:	6122      	str	r2, [r4, #16]
 8008ad4:	f8cd a000 	str.w	sl, [sp]
 8008ad8:	464b      	mov	r3, r9
 8008ada:	aa03      	add	r2, sp, #12
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff fee2 	bl	80088a8 <_printf_common>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d14c      	bne.n	8008b82 <_printf_i+0x1fe>
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	b004      	add	sp, #16
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	4835      	ldr	r0, [pc, #212]	; (8008bc8 <_printf_i+0x244>)
 8008af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008af8:	6829      	ldr	r1, [r5, #0]
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b00:	6029      	str	r1, [r5, #0]
 8008b02:	061d      	lsls	r5, r3, #24
 8008b04:	d514      	bpl.n	8008b30 <_printf_i+0x1ac>
 8008b06:	07df      	lsls	r7, r3, #31
 8008b08:	bf44      	itt	mi
 8008b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0e:	6023      	strmi	r3, [r4, #0]
 8008b10:	b91e      	cbnz	r6, 8008b1a <_printf_i+0x196>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	f023 0320 	bic.w	r3, r3, #32
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	2310      	movs	r3, #16
 8008b1c:	e7b0      	b.n	8008a80 <_printf_i+0xfc>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	f043 0320 	orr.w	r3, r3, #32
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	2378      	movs	r3, #120	; 0x78
 8008b28:	4828      	ldr	r0, [pc, #160]	; (8008bcc <_printf_i+0x248>)
 8008b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b2e:	e7e3      	b.n	8008af8 <_printf_i+0x174>
 8008b30:	0659      	lsls	r1, r3, #25
 8008b32:	bf48      	it	mi
 8008b34:	b2b6      	uxthmi	r6, r6
 8008b36:	e7e6      	b.n	8008b06 <_printf_i+0x182>
 8008b38:	4615      	mov	r5, r2
 8008b3a:	e7bb      	b.n	8008ab4 <_printf_i+0x130>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	6826      	ldr	r6, [r4, #0]
 8008b40:	6961      	ldr	r1, [r4, #20]
 8008b42:	1d18      	adds	r0, r3, #4
 8008b44:	6028      	str	r0, [r5, #0]
 8008b46:	0635      	lsls	r5, r6, #24
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	d501      	bpl.n	8008b50 <_printf_i+0x1cc>
 8008b4c:	6019      	str	r1, [r3, #0]
 8008b4e:	e002      	b.n	8008b56 <_printf_i+0x1d2>
 8008b50:	0670      	lsls	r0, r6, #25
 8008b52:	d5fb      	bpl.n	8008b4c <_printf_i+0x1c8>
 8008b54:	8019      	strh	r1, [r3, #0]
 8008b56:	2300      	movs	r3, #0
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	4615      	mov	r5, r2
 8008b5c:	e7ba      	b.n	8008ad4 <_printf_i+0x150>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	602a      	str	r2, [r5, #0]
 8008b64:	681d      	ldr	r5, [r3, #0]
 8008b66:	6862      	ldr	r2, [r4, #4]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7f7 fb38 	bl	80001e0 <memchr>
 8008b70:	b108      	cbz	r0, 8008b76 <_printf_i+0x1f2>
 8008b72:	1b40      	subs	r0, r0, r5
 8008b74:	6060      	str	r0, [r4, #4]
 8008b76:	6863      	ldr	r3, [r4, #4]
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b80:	e7a8      	b.n	8008ad4 <_printf_i+0x150>
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	462a      	mov	r2, r5
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	47d0      	blx	sl
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d0ab      	beq.n	8008ae8 <_printf_i+0x164>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	079b      	lsls	r3, r3, #30
 8008b94:	d413      	bmi.n	8008bbe <_printf_i+0x23a>
 8008b96:	68e0      	ldr	r0, [r4, #12]
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	4298      	cmp	r0, r3
 8008b9c:	bfb8      	it	lt
 8008b9e:	4618      	movlt	r0, r3
 8008ba0:	e7a4      	b.n	8008aec <_printf_i+0x168>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4640      	mov	r0, r8
 8008baa:	47d0      	blx	sl
 8008bac:	3001      	adds	r0, #1
 8008bae:	d09b      	beq.n	8008ae8 <_printf_i+0x164>
 8008bb0:	3501      	adds	r5, #1
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	9903      	ldr	r1, [sp, #12]
 8008bb6:	1a5b      	subs	r3, r3, r1
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dcf2      	bgt.n	8008ba2 <_printf_i+0x21e>
 8008bbc:	e7eb      	b.n	8008b96 <_printf_i+0x212>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	f104 0619 	add.w	r6, r4, #25
 8008bc4:	e7f5      	b.n	8008bb2 <_printf_i+0x22e>
 8008bc6:	bf00      	nop
 8008bc8:	080093e1 	.word	0x080093e1
 8008bcc:	080093f2 	.word	0x080093f2

08008bd0 <memcpy>:
 8008bd0:	440a      	add	r2, r1
 8008bd2:	4291      	cmp	r1, r2
 8008bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bd8:	d100      	bne.n	8008bdc <memcpy+0xc>
 8008bda:	4770      	bx	lr
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008be6:	4291      	cmp	r1, r2
 8008be8:	d1f9      	bne.n	8008bde <memcpy+0xe>
 8008bea:	bd10      	pop	{r4, pc}

08008bec <memmove>:
 8008bec:	4288      	cmp	r0, r1
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	eb01 0402 	add.w	r4, r1, r2
 8008bf4:	d902      	bls.n	8008bfc <memmove+0x10>
 8008bf6:	4284      	cmp	r4, r0
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	d807      	bhi.n	8008c0c <memmove+0x20>
 8008bfc:	1e43      	subs	r3, r0, #1
 8008bfe:	42a1      	cmp	r1, r4
 8008c00:	d008      	beq.n	8008c14 <memmove+0x28>
 8008c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c0a:	e7f8      	b.n	8008bfe <memmove+0x12>
 8008c0c:	4402      	add	r2, r0
 8008c0e:	4601      	mov	r1, r0
 8008c10:	428a      	cmp	r2, r1
 8008c12:	d100      	bne.n	8008c16 <memmove+0x2a>
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c1e:	e7f7      	b.n	8008c10 <memmove+0x24>

08008c20 <_free_r>:
 8008c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d044      	beq.n	8008cb0 <_free_r+0x90>
 8008c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c2a:	9001      	str	r0, [sp, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c32:	bfb8      	it	lt
 8008c34:	18e4      	addlt	r4, r4, r3
 8008c36:	f000 f913 	bl	8008e60 <__malloc_lock>
 8008c3a:	4a1e      	ldr	r2, [pc, #120]	; (8008cb4 <_free_r+0x94>)
 8008c3c:	9801      	ldr	r0, [sp, #4]
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	b933      	cbnz	r3, 8008c50 <_free_r+0x30>
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	6014      	str	r4, [r2, #0]
 8008c46:	b003      	add	sp, #12
 8008c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4c:	f000 b90e 	b.w	8008e6c <__malloc_unlock>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d908      	bls.n	8008c66 <_free_r+0x46>
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	1961      	adds	r1, r4, r5
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf01      	itttt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	1949      	addeq	r1, r1, r5
 8008c62:	6021      	streq	r1, [r4, #0]
 8008c64:	e7ed      	b.n	8008c42 <_free_r+0x22>
 8008c66:	461a      	mov	r2, r3
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	b10b      	cbz	r3, 8008c70 <_free_r+0x50>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d9fa      	bls.n	8008c66 <_free_r+0x46>
 8008c70:	6811      	ldr	r1, [r2, #0]
 8008c72:	1855      	adds	r5, r2, r1
 8008c74:	42a5      	cmp	r5, r4
 8008c76:	d10b      	bne.n	8008c90 <_free_r+0x70>
 8008c78:	6824      	ldr	r4, [r4, #0]
 8008c7a:	4421      	add	r1, r4
 8008c7c:	1854      	adds	r4, r2, r1
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	d1e0      	bne.n	8008c46 <_free_r+0x26>
 8008c84:	681c      	ldr	r4, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	6053      	str	r3, [r2, #4]
 8008c8a:	4421      	add	r1, r4
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	e7da      	b.n	8008c46 <_free_r+0x26>
 8008c90:	d902      	bls.n	8008c98 <_free_r+0x78>
 8008c92:	230c      	movs	r3, #12
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	e7d6      	b.n	8008c46 <_free_r+0x26>
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1961      	adds	r1, r4, r5
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf04      	itt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	bf04      	itt	eq
 8008ca8:	1949      	addeq	r1, r1, r5
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6054      	str	r4, [r2, #4]
 8008cae:	e7ca      	b.n	8008c46 <_free_r+0x26>
 8008cb0:	b003      	add	sp, #12
 8008cb2:	bd30      	pop	{r4, r5, pc}
 8008cb4:	200008f0 	.word	0x200008f0

08008cb8 <sbrk_aligned>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4e0e      	ldr	r6, [pc, #56]	; (8008cf4 <sbrk_aligned+0x3c>)
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6831      	ldr	r1, [r6, #0]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	b911      	cbnz	r1, 8008cca <sbrk_aligned+0x12>
 8008cc4:	f000 f8bc 	bl	8008e40 <_sbrk_r>
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f8b7 	bl	8008e40 <_sbrk_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d00a      	beq.n	8008cec <sbrk_aligned+0x34>
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d007      	beq.n	8008cf0 <sbrk_aligned+0x38>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f8ac 	bl	8008e40 <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d101      	bne.n	8008cf0 <sbrk_aligned+0x38>
 8008cec:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	200008f4 	.word	0x200008f4

08008cf8 <_malloc_r>:
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	f025 0503 	bic.w	r5, r5, #3
 8008d02:	3508      	adds	r5, #8
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	bf38      	it	cc
 8008d08:	250c      	movcc	r5, #12
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	db01      	blt.n	8008d14 <_malloc_r+0x1c>
 8008d10:	42a9      	cmp	r1, r5
 8008d12:	d905      	bls.n	8008d20 <_malloc_r+0x28>
 8008d14:	230c      	movs	r3, #12
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	2600      	movs	r6, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	4e2e      	ldr	r6, [pc, #184]	; (8008ddc <_malloc_r+0xe4>)
 8008d22:	f000 f89d 	bl	8008e60 <__malloc_lock>
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	461c      	mov	r4, r3
 8008d2a:	bb34      	cbnz	r4, 8008d7a <_malloc_r+0x82>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ffc2 	bl	8008cb8 <sbrk_aligned>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	d14d      	bne.n	8008dd6 <_malloc_r+0xde>
 8008d3a:	6834      	ldr	r4, [r6, #0]
 8008d3c:	4626      	mov	r6, r4
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	d140      	bne.n	8008dc4 <_malloc_r+0xcc>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	4631      	mov	r1, r6
 8008d46:	4638      	mov	r0, r7
 8008d48:	eb04 0803 	add.w	r8, r4, r3
 8008d4c:	f000 f878 	bl	8008e40 <_sbrk_r>
 8008d50:	4580      	cmp	r8, r0
 8008d52:	d13a      	bne.n	8008dca <_malloc_r+0xd2>
 8008d54:	6821      	ldr	r1, [r4, #0]
 8008d56:	3503      	adds	r5, #3
 8008d58:	1a6d      	subs	r5, r5, r1
 8008d5a:	f025 0503 	bic.w	r5, r5, #3
 8008d5e:	3508      	adds	r5, #8
 8008d60:	2d0c      	cmp	r5, #12
 8008d62:	bf38      	it	cc
 8008d64:	250c      	movcc	r5, #12
 8008d66:	4629      	mov	r1, r5
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ffa5 	bl	8008cb8 <sbrk_aligned>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d02b      	beq.n	8008dca <_malloc_r+0xd2>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	442b      	add	r3, r5
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	e00e      	b.n	8008d98 <_malloc_r+0xa0>
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	d41e      	bmi.n	8008dbe <_malloc_r+0xc6>
 8008d80:	2a0b      	cmp	r2, #11
 8008d82:	d916      	bls.n	8008db2 <_malloc_r+0xba>
 8008d84:	1961      	adds	r1, r4, r5
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	6025      	str	r5, [r4, #0]
 8008d8a:	bf18      	it	ne
 8008d8c:	6059      	strne	r1, [r3, #4]
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	bf08      	it	eq
 8008d92:	6031      	streq	r1, [r6, #0]
 8008d94:	5162      	str	r2, [r4, r5]
 8008d96:	604b      	str	r3, [r1, #4]
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f104 060b 	add.w	r6, r4, #11
 8008d9e:	f000 f865 	bl	8008e6c <__malloc_unlock>
 8008da2:	f026 0607 	bic.w	r6, r6, #7
 8008da6:	1d23      	adds	r3, r4, #4
 8008da8:	1af2      	subs	r2, r6, r3
 8008daa:	d0b6      	beq.n	8008d1a <_malloc_r+0x22>
 8008dac:	1b9b      	subs	r3, r3, r6
 8008dae:	50a3      	str	r3, [r4, r2]
 8008db0:	e7b3      	b.n	8008d1a <_malloc_r+0x22>
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	bf0c      	ite	eq
 8008db8:	6032      	streq	r2, [r6, #0]
 8008dba:	605a      	strne	r2, [r3, #4]
 8008dbc:	e7ec      	b.n	8008d98 <_malloc_r+0xa0>
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	6864      	ldr	r4, [r4, #4]
 8008dc2:	e7b2      	b.n	8008d2a <_malloc_r+0x32>
 8008dc4:	4634      	mov	r4, r6
 8008dc6:	6876      	ldr	r6, [r6, #4]
 8008dc8:	e7b9      	b.n	8008d3e <_malloc_r+0x46>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	603b      	str	r3, [r7, #0]
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f000 f84c 	bl	8008e6c <__malloc_unlock>
 8008dd4:	e7a1      	b.n	8008d1a <_malloc_r+0x22>
 8008dd6:	6025      	str	r5, [r4, #0]
 8008dd8:	e7de      	b.n	8008d98 <_malloc_r+0xa0>
 8008dda:	bf00      	nop
 8008ddc:	200008f0 	.word	0x200008f0

08008de0 <_realloc_r>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	4680      	mov	r8, r0
 8008de6:	4614      	mov	r4, r2
 8008de8:	460e      	mov	r6, r1
 8008dea:	b921      	cbnz	r1, 8008df6 <_realloc_r+0x16>
 8008dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df0:	4611      	mov	r1, r2
 8008df2:	f7ff bf81 	b.w	8008cf8 <_malloc_r>
 8008df6:	b92a      	cbnz	r2, 8008e04 <_realloc_r+0x24>
 8008df8:	f7ff ff12 	bl	8008c20 <_free_r>
 8008dfc:	4625      	mov	r5, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e04:	f000 f838 	bl	8008e78 <_malloc_usable_size_r>
 8008e08:	4284      	cmp	r4, r0
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	d802      	bhi.n	8008e14 <_realloc_r+0x34>
 8008e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e12:	d812      	bhi.n	8008e3a <_realloc_r+0x5a>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7ff ff6e 	bl	8008cf8 <_malloc_r>
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d0ed      	beq.n	8008dfe <_realloc_r+0x1e>
 8008e22:	42bc      	cmp	r4, r7
 8008e24:	4622      	mov	r2, r4
 8008e26:	4631      	mov	r1, r6
 8008e28:	bf28      	it	cs
 8008e2a:	463a      	movcs	r2, r7
 8008e2c:	f7ff fed0 	bl	8008bd0 <memcpy>
 8008e30:	4631      	mov	r1, r6
 8008e32:	4640      	mov	r0, r8
 8008e34:	f7ff fef4 	bl	8008c20 <_free_r>
 8008e38:	e7e1      	b.n	8008dfe <_realloc_r+0x1e>
 8008e3a:	4635      	mov	r5, r6
 8008e3c:	e7df      	b.n	8008dfe <_realloc_r+0x1e>
	...

08008e40 <_sbrk_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	; (8008e5c <_sbrk_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f7 fee0 	bl	8000c10 <_sbrk>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_sbrk_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_sbrk_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	200008f8 	.word	0x200008f8

08008e60 <__malloc_lock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__malloc_lock+0x8>)
 8008e62:	f000 b811 	b.w	8008e88 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	200008fc 	.word	0x200008fc

08008e6c <__malloc_unlock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_unlock+0x8>)
 8008e6e:	f000 b80c 	b.w	8008e8a <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	200008fc 	.word	0x200008fc

08008e78 <_malloc_usable_size_r>:
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f18      	subs	r0, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfbc      	itt	lt
 8008e82:	580b      	ldrlt	r3, [r1, r0]
 8008e84:	18c0      	addlt	r0, r0, r3
 8008e86:	4770      	bx	lr

08008e88 <__retarget_lock_acquire_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__retarget_lock_release_recursive>:
 8008e8a:	4770      	bx	lr

08008e8c <_init>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr

08008e98 <_fini>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr
