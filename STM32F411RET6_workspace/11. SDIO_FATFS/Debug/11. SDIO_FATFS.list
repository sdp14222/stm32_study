
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aac  08009aac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab4  08009ab4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000070  08009b2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08009b2c  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ed6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca3  00000000  00000000  00031f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c39  00000000  00000000  00036788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014920  00000000  00000000  0004f3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d189  00000000  00000000  00063ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d04  00000000  00000000  000f0ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094e0 	.word	0x080094e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080094e0 	.word	0x080094e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 fe1f 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 fe38 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f000 fe17 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f000 fe30 	bl	8001226 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x68>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x68>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x68>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0de      	sub	sp, #376	; 0x178
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc61 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f927 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffc1 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fbb7 	bl	8000dc4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000656:	f7ff ff95 	bl	8000584 <MX_DMA_Init>
  MX_FATFS_Init();
 800065a:	f005 f907 	bl	800586c <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800065e:	f000 f9bf 	bl	80009e0 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	497b      	ldr	r1, [pc, #492]	; (8000854 <main+0x214>)
 8000666:	487c      	ldr	r0, [pc, #496]	; (8000858 <main+0x218>)
 8000668:	f003 fbf4 	bl	8003e54 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BYTE buf[32] = "Hello world";	// file copy buffer
 800066c:	4a7b      	ldr	r2, [pc, #492]	; (800085c <main+0x21c>)
 800066e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000672:	ca07      	ldmia	r2, {r0, r1, r2}
 8000674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000678:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  uint32_t bw, br;

  // 1. FS Initialization("0:/"drive allocation)
//  if((retSD = f_mount(&SDFatFS, "0:/", 1)) == FR_OK)
  if((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK)
 8000688:	2201      	movs	r2, #1
 800068a:	4975      	ldr	r1, [pc, #468]	; (8000860 <main+0x220>)
 800068c:	4875      	ldr	r0, [pc, #468]	; (8000864 <main+0x224>)
 800068e:	f007 fd71 	bl	8008174 <f_mount>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b74      	ldr	r3, [pc, #464]	; (8000868 <main+0x228>)
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	4b73      	ldr	r3, [pc, #460]	; (8000868 <main+0x228>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10d      	bne.n	80006be <main+0x7e>
  {
	  sprintf(str, "f_mount OK %d\n", retSD);
 80006a2:	4b71      	ldr	r3, [pc, #452]	; (8000868 <main+0x228>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4970      	ldr	r1, [pc, #448]	; (800086c <main+0x22c>)
 80006aa:	486a      	ldr	r0, [pc, #424]	; (8000854 <main+0x214>)
 80006ac:	f008 faaa 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006b0:	230a      	movs	r3, #10
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	4967      	ldr	r1, [pc, #412]	; (8000854 <main+0x214>)
 80006b6:	4868      	ldr	r0, [pc, #416]	; (8000858 <main+0x218>)
 80006b8:	f003 fb3a 	bl	8003d30 <HAL_UART_Transmit>
 80006bc:	e00c      	b.n	80006d8 <main+0x98>
  }
  else
  {
	  sprintf(str, "f_mount failed %d\n", retSD);
 80006be:	4b6a      	ldr	r3, [pc, #424]	; (8000868 <main+0x228>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	496a      	ldr	r1, [pc, #424]	; (8000870 <main+0x230>)
 80006c6:	4863      	ldr	r0, [pc, #396]	; (8000854 <main+0x214>)
 80006c8:	f008 fa9c 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006cc:	230a      	movs	r3, #10
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	4960      	ldr	r1, [pc, #384]	; (8000854 <main+0x214>)
 80006d2:	4861      	ldr	r0, [pc, #388]	; (8000858 <main+0x218>)
 80006d4:	f003 fb2c 	bl	8003d30 <HAL_UART_Transmit>
  }
  uart_buffer_clean(str, STR_SIZE);
 80006d8:	2128      	movs	r1, #40	; 0x28
 80006da:	485e      	ldr	r0, [pc, #376]	; (8000854 <main+0x214>)
 80006dc:	f000 f964 	bl	80009a8 <uart_buffer_clean>
  */

  // 4. Read file info in folder
  DIR dir;
  FILINFO filinfo;
  uint16_t filecnt = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
  if((retSD = f_opendir(&dir, "0:/")) == FR_OK)
 80006e6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80006ea:	4962      	ldr	r1, [pc, #392]	; (8000874 <main+0x234>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 f884 	bl	80087fa <f_opendir>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b5c      	ldr	r3, [pc, #368]	; (8000868 <main+0x228>)
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <main+0x228>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d13f      	bne.n	8000782 <main+0x142>
  {
	  while(1)
	  {
		  retSD = f_readdir(&dir, &filinfo);
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f008 f8e8 	bl	80088e0 <f_readdir>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b54      	ldr	r3, [pc, #336]	; (8000868 <main+0x228>)
 8000716:	701a      	strb	r2, [r3, #0]
		  if(dir.sect == 0) break;
 8000718:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01d      	beq.n	800075c <main+0x11c>

		  sprintf(str, "%s\t 0x%x\n", filinfo.fname, filinfo.fattrib);
 8000720:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000724:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000728:	7a1b      	ldrb	r3, [r3, #8]
 800072a:	4619      	mov	r1, r3
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	f103 0216 	add.w	r2, r3, #22
 8000732:	460b      	mov	r3, r1
 8000734:	4950      	ldr	r1, [pc, #320]	; (8000878 <main+0x238>)
 8000736:	4847      	ldr	r0, [pc, #284]	; (8000854 <main+0x214>)
 8000738:	f008 fa64 	bl	8008c04 <siprintf>
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 800073c:	230a      	movs	r3, #10
 800073e:	2228      	movs	r2, #40	; 0x28
 8000740:	4944      	ldr	r1, [pc, #272]	; (8000854 <main+0x214>)
 8000742:	4845      	ldr	r0, [pc, #276]	; (8000858 <main+0x218>)
 8000744:	f003 faf4 	bl	8003d30 <HAL_UART_Transmit>
		  uart_buffer_clean(str, STR_SIZE);
 8000748:	2128      	movs	r1, #40	; 0x28
 800074a:	4842      	ldr	r0, [pc, #264]	; (8000854 <main+0x214>)
 800074c:	f000 f92c 	bl	80009a8 <uart_buffer_clean>
		  filecnt++;
 8000750:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 8000754:	3301      	adds	r3, #1
 8000756:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
		  retSD = f_readdir(&dir, &filinfo);
 800075a:	e7d2      	b.n	8000702 <main+0xc2>
		  if(dir.sect == 0) break;
 800075c:	bf00      	nop
	  }
	  uart_buffer_clean(str, STR_SIZE);
 800075e:	2128      	movs	r1, #40	; 0x28
 8000760:	483c      	ldr	r0, [pc, #240]	; (8000854 <main+0x214>)
 8000762:	f000 f921 	bl	80009a8 <uart_buffer_clean>
	  sprintf(str, "\nTotal %d file(s)..\n\n", filecnt);
 8000766:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 800076a:	461a      	mov	r2, r3
 800076c:	4943      	ldr	r1, [pc, #268]	; (800087c <main+0x23c>)
 800076e:	4839      	ldr	r0, [pc, #228]	; (8000854 <main+0x214>)
 8000770:	f008 fa48 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000774:	230a      	movs	r3, #10
 8000776:	2228      	movs	r2, #40	; 0x28
 8000778:	4936      	ldr	r1, [pc, #216]	; (8000854 <main+0x214>)
 800077a:	4837      	ldr	r0, [pc, #220]	; (8000858 <main+0x218>)
 800077c:	f003 fad8 	bl	8003d30 <HAL_UART_Transmit>
 8000780:	e00c      	b.n	800079c <main+0x15c>
  }
  else
  {
	  sprintf(str, "The file/directory object is invalid! %d\n", retSD);
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <main+0x228>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	493d      	ldr	r1, [pc, #244]	; (8000880 <main+0x240>)
 800078a:	4832      	ldr	r0, [pc, #200]	; (8000854 <main+0x214>)
 800078c:	f008 fa3a 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000790:	230a      	movs	r3, #10
 8000792:	2228      	movs	r2, #40	; 0x28
 8000794:	492f      	ldr	r1, [pc, #188]	; (8000854 <main+0x214>)
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <main+0x218>)
 8000798:	f003 faca 	bl	8003d30 <HAL_UART_Transmit>
  }
  uart_buffer_clean(str, STR_SIZE);
 800079c:	2128      	movs	r1, #40	; 0x28
 800079e:	482d      	ldr	r0, [pc, #180]	; (8000854 <main+0x214>)
 80007a0:	f000 f902 	bl	80009a8 <uart_buffer_clean>

  // 3. File read
//  if((retSD = f_open(&SDFile, "0:/sdp.txt", FA_OPEN_EXISTING | FA_READ)) == FR_OK)
  // if file not exist
  if((retSD = f_open(&SDFile, "0:/sdp1234.txt", FA_OPEN_EXISTING | FA_READ)) == FR_OK)
 80007a4:	2201      	movs	r2, #1
 80007a6:	4937      	ldr	r1, [pc, #220]	; (8000884 <main+0x244>)
 80007a8:	4837      	ldr	r0, [pc, #220]	; (8000888 <main+0x248>)
 80007aa:	f007 fd29 	bl	8008200 <f_open>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <main+0x228>)
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <main+0x228>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d12a      	bne.n	8000814 <main+0x1d4>
  {
	  f_read(&SDFile, buf, 32, &br);
 80007be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80007c2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80007c6:	2220      	movs	r2, #32
 80007c8:	482f      	ldr	r0, [pc, #188]	; (8000888 <main+0x248>)
 80007ca:	f007 fed7 	bl	800857c <f_read>
	  sprintf(str, "%s\n", buf);
 80007ce:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80007d2:	461a      	mov	r2, r3
 80007d4:	492d      	ldr	r1, [pc, #180]	; (800088c <main+0x24c>)
 80007d6:	481f      	ldr	r0, [pc, #124]	; (8000854 <main+0x214>)
 80007d8:	f008 fa14 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80007dc:	230a      	movs	r3, #10
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	491c      	ldr	r1, [pc, #112]	; (8000854 <main+0x214>)
 80007e2:	481d      	ldr	r0, [pc, #116]	; (8000858 <main+0x218>)
 80007e4:	f003 faa4 	bl	8003d30 <HAL_UART_Transmit>
	  uart_buffer_clean(str, STR_SIZE);
 80007e8:	2128      	movs	r1, #40	; 0x28
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <main+0x214>)
 80007ec:	f000 f8dc 	bl	80009a8 <uart_buffer_clean>

	  sprintf(str, "%d bytes\n", br);
 80007f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80007f4:	461a      	mov	r2, r3
 80007f6:	4926      	ldr	r1, [pc, #152]	; (8000890 <main+0x250>)
 80007f8:	4816      	ldr	r0, [pc, #88]	; (8000854 <main+0x214>)
 80007fa:	f008 fa03 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80007fe:	230a      	movs	r3, #10
 8000800:	2228      	movs	r2, #40	; 0x28
 8000802:	4914      	ldr	r1, [pc, #80]	; (8000854 <main+0x214>)
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <main+0x218>)
 8000806:	f003 fa93 	bl	8003d30 <HAL_UART_Transmit>
	  uart_buffer_clean(str, STR_SIZE);
 800080a:	2128      	movs	r1, #40	; 0x28
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <main+0x214>)
 800080e:	f000 f8cb 	bl	80009a8 <uart_buffer_clean>
 8000812:	e010      	b.n	8000836 <main+0x1f6>
  }
  else
  {
	  sprintf(str, "error %d\n", retSD);
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0x228>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	491e      	ldr	r1, [pc, #120]	; (8000894 <main+0x254>)
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <main+0x214>)
 800081e:	f008 f9f1 	bl	8008c04 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000822:	230a      	movs	r3, #10
 8000824:	2228      	movs	r2, #40	; 0x28
 8000826:	490b      	ldr	r1, [pc, #44]	; (8000854 <main+0x214>)
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <main+0x218>)
 800082a:	f003 fa81 	bl	8003d30 <HAL_UART_Transmit>
	  uart_buffer_clean(str, STR_SIZE);
 800082e:	2128      	movs	r1, #40	; 0x28
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <main+0x214>)
 8000832:	f000 f8b9 	bl	80009a8 <uart_buffer_clean>
  }

  while (1)
  {

	  if(flag1)
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <main+0x258>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0fb      	beq.n	8000836 <main+0x1f6>
	  {
		  flag1 = 0;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <main+0x258>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000844:	230a      	movs	r3, #10
 8000846:	2228      	movs	r2, #40	; 0x28
 8000848:	4902      	ldr	r1, [pc, #8]	; (8000854 <main+0x214>)
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <main+0x218>)
 800084c:	f003 fa70 	bl	8003d30 <HAL_UART_Transmit>
	  if(flag1)
 8000850:	e7f1      	b.n	8000836 <main+0x1f6>
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c
 8000858:	20000200 	.word	0x20000200
 800085c:	0800959c 	.word	0x0800959c
 8000860:	2000024c 	.word	0x2000024c
 8000864:	20000250 	.word	0x20000250
 8000868:	20000248 	.word	0x20000248
 800086c:	080094f8 	.word	0x080094f8
 8000870:	08009508 	.word	0x08009508
 8000874:	0800951c 	.word	0x0800951c
 8000878:	08009520 	.word	0x08009520
 800087c:	0800952c 	.word	0x0800952c
 8000880:	08009544 	.word	0x08009544
 8000884:	08009570 	.word	0x08009570
 8000888:	20000484 	.word	0x20000484
 800088c:	08009580 	.word	0x08009580
 8000890:	08009584 	.word	0x08009584
 8000894:	08009590 	.word	0x08009590
 8000898:	200000b4 	.word	0x200000b4

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 f9a2 	bl	8008bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xc8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <SystemClock_Config+0xc8>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xc8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <SystemClock_Config+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <SystemClock_Config+0xcc>)
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <SystemClock_Config+0xcc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800090c:	2308      	movs	r3, #8
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000918:	2305      	movs	r3, #5
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fa2d 	bl	8001d80 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800092c:	f000 f853 	bl	80009d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2103      	movs	r1, #3
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fc8f 	bl	8002270 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000958:	f000 f83d 	bl	80009d6 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_UART_RxCpltCallback+0x2c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d107      	bne.n	800098e <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 800097e:	2228      	movs	r2, #40	; 0x28
 8000980:	4906      	ldr	r1, [pc, #24]	; (800099c <HAL_UART_RxCpltCallback+0x30>)
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <HAL_UART_RxCpltCallback+0x34>)
 8000984:	f003 fa66 	bl	8003e54 <HAL_UART_Receive_IT>
		flag1 = 1;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_UART_RxCpltCallback+0x38>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	}
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40011000 	.word	0x40011000
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	20000200 	.word	0x20000200
 80009a4:	200000b4 	.word	0x200000b4

080009a8 <uart_buffer_clean>:

void uart_buffer_clean(char *str, uint32_t cnt)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	while(cnt--)
 80009b2:	e004      	b.n	80009be <uart_buffer_clean+0x16>
		*str++ = 0;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	while(cnt--)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	603a      	str	r2, [r7, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <uart_buffer_clean+0xc>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009da:	b672      	cpsid	i
}
 80009dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009de:	e7fe      	b.n	80009de <Error_Handler+0x8>

080009e0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <MX_SDIO_SD_Init+0x3c>)
 80009e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <MX_SDIO_SD_Init+0x38>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200000b8 	.word	0x200000b8
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a77      	ldr	r2, [pc, #476]	; (8000c1c <HAL_SD_MspInit+0x1fc>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	f040 80e8 	bne.w	8000c14 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	4b75      	ldr	r3, [pc, #468]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	4a74      	ldr	r2, [pc, #464]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a52:	6453      	str	r3, [r2, #68]	; 0x44
 8000a54:	4b72      	ldr	r3, [pc, #456]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a6d      	ldr	r2, [pc, #436]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a66      	ldr	r2, [pc, #408]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a5f      	ldr	r2, [pc, #380]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <HAL_SD_MspInit+0x200>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4855      	ldr	r0, [pc, #340]	; (8000c24 <HAL_SD_MspInit+0x204>)
 8000ad0:	f000 ffd2 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	484d      	ldr	r0, [pc, #308]	; (8000c28 <HAL_SD_MspInit+0x208>)
 8000af2:	f000 ffc1 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000af6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4846      	ldr	r0, [pc, #280]	; (8000c2c <HAL_SD_MspInit+0x20c>)
 8000b14:	f000 ffb0 	bl	8001a78 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b1a:	4a46      	ldr	r2, [pc, #280]	; (8000c34 <HAL_SD_MspInit+0x214>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b5e:	2203      	movs	r2, #3
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b72:	482f      	ldr	r0, [pc, #188]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b74:	f000 fb72 	bl	800125c <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8000b7e:	f7ff ff2a 	bl	80009d6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_SD_MspInit+0x210>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <HAL_SD_MspInit+0x21c>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bae:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000be2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bea:	f000 fb37 	bl	800125c <HAL_DMA_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8000bf4:	f7ff feef 	bl	80009d6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_SD_MspInit+0x218>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2031      	movs	r0, #49	; 0x31
 8000c0a:	f000 faf0 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000c0e:	2031      	movs	r0, #49	; 0x31
 8000c10:	f000 fb09 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000c14:	bf00      	nop
 8000c16:	3730      	adds	r7, #48	; 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	2000013c 	.word	0x2000013c
 8000c34:	40026458 	.word	0x40026458
 8000c38:	2000019c 	.word	0x2000019c
 8000c3c:	400264a0 	.word	0x400264a0

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f968 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART1_IRQHandler+0x10>)
 8000cea:	f003 f8e3 	bl	8003eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000200 	.word	0x20000200

08000cf8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <SDIO_IRQHandler+0x10>)
 8000cfe:	f001 ff0f 	bl	8002b20 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000b8 	.word	0x200000b8

08000d0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA2_Stream3_IRQHandler+0x10>)
 8000d12:	f000 fc3b 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000013c 	.word	0x2000013c

08000d20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <DMA2_Stream6_IRQHandler+0x10>)
 8000d26:	f000 fc31 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000019c 	.word	0x2000019c

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f007 ff1c 	bl	8008ba0 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200001fc 	.word	0x200001fc
 8000d9c:	20000900 	.word	0x20000900

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART1_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f002 ff4b 	bl	8003c96 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f7ff fde6 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000200 	.word	0x20000200
 8000e14:	40011000 	.word	0x40011000

08000e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_UART_MspInit+0x94>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d134      	bne.n	8000ea4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_UART_MspInit+0x9c>)
 8000e90:	f000 fdf2 	bl	8001a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2025      	movs	r0, #37	; 0x25
 8000e9a:	f000 f9a8 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e9e:	2025      	movs	r0, #37	; 0x25
 8000ea0:	f000 f9c1 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ff5d 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f007 fe61 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fba9 	bl	8000640 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000efc:	08009abc 	.word	0x08009abc
  ldr r2, =_sbss
 8000f00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f04:	20000900 	.word	0x20000900

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f94f 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe7e 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f967 	bl	8001242 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f92f 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000244 	.word	0x20000244

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000244 	.word	0x20000244

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff feb6 	bl	8000fd8 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e099      	b.n	80013ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001298:	e00f      	b.n	80012ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129a:	f7ff fe9d 	bl	8000fd8 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d908      	bls.n	80012ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2220      	movs	r2, #32
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e078      	b.n	80013ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e8      	bne.n	800129a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_DMA_Init+0x158>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2b04      	cmp	r3, #4
 8001312:	d107      	bne.n	8001324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4313      	orrs	r3, r2
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4313      	orrs	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f023 0307 	bic.w	r3, r3, #7
 800133a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4313      	orrs	r3, r2
 8001344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	2b04      	cmp	r3, #4
 800134c:	d117      	bne.n	800137e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00e      	beq.n	800137e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fb0d 	bl	8001980 <DMA_CheckFifoParam>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800137a:	2301      	movs	r3, #1
 800137c:	e016      	b.n	80013ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fac4 	bl	8001914 <DMA_CalcBaseAndBitshift>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	409a      	lsls	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	f010803f 	.word	0xf010803f

080013b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_DMA_Start_IT+0x26>
 80013da:	2302      	movs	r3, #2
 80013dc:	e040      	b.n	8001460 <HAL_DMA_Start_IT+0xa8>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d12f      	bne.n	8001452 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 fa56 	bl	80018b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	223f      	movs	r2, #63	; 0x3f
 8001412:	409a      	lsls	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0216 	orr.w	r2, r2, #22
 8001426:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0208 	orr.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e005      	b.n	800145e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800145a:	2302      	movs	r3, #2
 800145c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001476:	f7ff fdaf 	bl	8000fd8 <HAL_GetTick>
 800147a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d008      	beq.n	800149a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e052      	b.n	8001540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0216 	bic.w	r2, r2, #22
 80014a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_DMA_Abort+0x62>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0208 	bic.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ea:	e013      	b.n	8001514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ec:	f7ff fd74 	bl	8000fd8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d90c      	bls.n	8001514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e015      	b.n	8001540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1e4      	bne.n	80014ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	223f      	movs	r2, #63	; 0x3f
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d004      	beq.n	8001566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00c      	b.n	8001580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001598:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <HAL_DMA_IRQHandler+0x248>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a8e      	ldr	r2, [pc, #568]	; (80017d8 <HAL_DMA_IRQHandler+0x24c>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0a9b      	lsrs	r3, r3, #10
 80015a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2208      	movs	r2, #8
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01a      	beq.n	80015f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2208      	movs	r2, #8
 80015e6:	409a      	lsls	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d012      	beq.n	800162e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	2201      	movs	r2, #1
 800161c:	409a      	lsls	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f043 0202 	orr.w	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	2204      	movs	r2, #4
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d012      	beq.n	8001664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2204      	movs	r2, #4
 8001652:	409a      	lsls	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	f043 0204 	orr.w	r2, r3, #4
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2210      	movs	r2, #16
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d043      	beq.n	80016fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d03c      	beq.n	80016fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2210      	movs	r2, #16
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d018      	beq.n	80016ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d024      	beq.n	80016fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
 80016ba:	e01f      	b.n	80016fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01b      	beq.n	80016fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
 80016cc:	e016      	b.n	80016fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0208 	bic.w	r2, r2, #8
 80016ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	2220      	movs	r2, #32
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 808f 	beq.w	800182c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8087 	beq.w	800182c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2220      	movs	r2, #32
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b05      	cmp	r3, #5
 8001734:	d136      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0216 	bic.w	r2, r2, #22
 8001744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d103      	bne.n	8001766 <HAL_DMA_IRQHandler+0x1da>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0208 	bic.w	r2, r2, #8
 8001774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	223f      	movs	r2, #63	; 0x3f
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001796:	2b00      	cmp	r3, #0
 8001798:	d07e      	beq.n	8001898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	4798      	blx	r3
        }
        return;
 80017a2:	e079      	b.n	8001898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01d      	beq.n	80017ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10d      	bne.n	80017dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d031      	beq.n	800182c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
 80017d0:	e02c      	b.n	800182c <HAL_DMA_IRQHandler+0x2a0>
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000
 80017d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d023      	beq.n	800182c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
 80017ec:	e01e      	b.n	800182c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10f      	bne.n	800181c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0210 	bic.w	r2, r2, #16
 800180a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	2b00      	cmp	r3, #0
 8001832:	d032      	beq.n	800189a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d022      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2205      	movs	r2, #5
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3301      	adds	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	d307      	bcc.n	8001874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f2      	bne.n	8001858 <HAL_DMA_IRQHandler+0x2cc>
 8001872:	e000      	b.n	8001876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
 8001896:	e000      	b.n	800189a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001898:	bf00      	nop
    }
  }
}
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d108      	bne.n	80018f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018f6:	e007      	b.n	8001908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3b10      	subs	r3, #16
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <DMA_CalcBaseAndBitshift+0x64>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <DMA_CalcBaseAndBitshift+0x68>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d909      	bls.n	8001956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	1d1a      	adds	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	e007      	b.n	8001966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	aaaaaaab 	.word	0xaaaaaaab
 800197c:	0800961c 	.word	0x0800961c

08001980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11f      	bne.n	80019da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d856      	bhi.n	8001a4e <DMA_CheckFifoParam+0xce>
 80019a0:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <DMA_CheckFifoParam+0x28>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019cb 	.word	0x080019cb
 80019b0:	080019b9 	.word	0x080019b9
 80019b4:	08001a4f 	.word	0x08001a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d046      	beq.n	8001a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e043      	b.n	8001a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d2:	d140      	bne.n	8001a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d8:	e03d      	b.n	8001a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d121      	bne.n	8001a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d837      	bhi.n	8001a5a <DMA_CheckFifoParam+0xda>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <DMA_CheckFifoParam+0x70>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a07 	.word	0x08001a07
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a19 	.word	0x08001a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	e030      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d025      	beq.n	8001a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a16:	e022      	b.n	8001a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a20:	d11f      	bne.n	8001a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a26:	e01c      	b.n	8001a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d903      	bls.n	8001a36 <DMA_CheckFifoParam+0xb6>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d003      	beq.n	8001a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a34:	e018      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3a:	e015      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4c:	e00b      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e00a      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
 8001a54:	e008      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e006      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e004      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
    }
  } 
  
  return status; 
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e159      	b.n	8001d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8148 	bne.w	8001d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a2 	beq.w	8001d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x202>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x1fe>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a47      	ldr	r2, [pc, #284]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x1fa>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x1f6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a45      	ldr	r2, [pc, #276]	; (8001d78 <HAL_GPIO_Init+0x300>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x1f2>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f aea2 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e267      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d075      	beq.n	8001e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d00c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001daa:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d112      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x108>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d157      	bne.n	8001e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e242      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x74>
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x98>
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6f      	ldr	r2, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6c      	ldr	r2, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff f8ce 	bl	8000fd8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f8ca 	bl	8000fd8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e207      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xc0>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff f8ba 	bl	8000fd8 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f8b6 	bl	8000fd8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1f3      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0xe8>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d063      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d11c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x152>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1c7      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	e03a      	b.n	8001f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_OscConfig+0x244>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f86f 	bl	8000fd8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff f86b 	bl	8000fd8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1a8      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4925      	ldr	r1, [pc, #148]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x244>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f84e 	bl	8000fd8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f84a 	bl	8000fd8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e187      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d036      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d016      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x248>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f82e 	bl	8000fd8 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff f82a 	bl	8000fd8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e167      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x200>
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_OscConfig+0x248>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f817 	bl	8000fd8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	e00e      	b.n	8001fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff f813 	bl	8000fd8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d907      	bls.n	8001fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e150      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	42470000 	.word	0x42470000
 8001fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ea      	bne.n	8001fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8097 	beq.w	8002114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b7a      	ldr	r3, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b77      	ldr	r3, [pc, #476]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a73      	ldr	r2, [pc, #460]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7fe ffd3 	bl	8000fd8 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7fe ffcf 	bl	8000fd8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e10c      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x2ea>
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a63      	ldr	r2, [pc, #396]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x324>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x30c>
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6713      	str	r3, [r2, #112]	; 0x70
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0x324>
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 0304 	bic.w	r3, r3, #4
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7fe ff94 	bl	8000fd8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe ff90 	bl	8000fd8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0cb      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ee      	beq.n	80020b4 <HAL_RCC_OscConfig+0x334>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7fe ff7e 	bl	8000fd8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe ff7a 	bl	8000fd8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0b5      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ee      	bne.n	80020e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a1 	beq.w	8002260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d05c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d141      	bne.n	80021b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe ff4e 	bl	8000fd8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe ff4a 	bl	8000fd8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e087      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	491b      	ldr	r1, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe ff23 	bl	8000fd8 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe ff1f 	bl	8000fd8 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e05c      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x416>
 80021b4:	e054      	b.n	8002260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff0c 	bl	8000fd8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe ff08 	bl	8000fd8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e045      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x444>
 80021e2:	e03d      	b.n	8002260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e038      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40007000 	.word	0x40007000
 80021f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4ec>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d028      	beq.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d121      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d11a      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	3b01      	subs	r3, #1
 8002246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cc      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d90c      	bls.n	80022ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d044      	beq.n	8002390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d119      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e067      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4934      	ldr	r1, [pc, #208]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7fe fe3a 	bl	8000fd8 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe fe36 	bl	8000fd8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e04f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d20c      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f821 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fd9a 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00
 800242c:	40023800 	.word	0x40023800
 8002430:	08009604 	.word	0x08009604
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b090      	sub	sp, #64	; 0x40
 8002442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
 8002448:	2300      	movs	r3, #0
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d00d      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x40>
 8002460:	2b08      	cmp	r3, #8
 8002462:	f200 80a1 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x34>
 800246a:	2b04      	cmp	r3, #4
 800246c:	d003      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x3a>
 800246e:	e09b      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002474:	e09b      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002476:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800247a:	e098      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d028      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	2200      	movs	r2, #0
 800249a:	623b      	str	r3, [r7, #32]
 800249c:	627a      	str	r2, [r7, #36]	; 0x24
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024a4:	2100      	movs	r1, #0
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a8:	fb03 f201 	mul.w	r2, r3, r1
 80024ac:	2300      	movs	r3, #0
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	4a43      	ldr	r2, [pc, #268]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024bc:	460a      	mov	r2, r1
 80024be:	62ba      	str	r2, [r7, #40]	; 0x28
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c2:	4413      	add	r3, r2
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	2200      	movs	r2, #0
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	61fa      	str	r2, [r7, #28]
 80024ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024d6:	f7fd fed3 	bl	8000280 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4613      	mov	r3, r2
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e2:	e053      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	2200      	movs	r2, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	617a      	str	r2, [r7, #20]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024f6:	f04f 0b00 	mov.w	fp, #0
 80024fa:	4652      	mov	r2, sl
 80024fc:	465b      	mov	r3, fp
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250c:	0150      	lsls	r0, r2, #5
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ebb2 080a 	subs.w	r8, r2, sl
 8002516:	eb63 090b 	sbc.w	r9, r3, fp
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002526:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800252a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800252e:	ebb2 0408 	subs.w	r4, r2, r8
 8002532:	eb63 0509 	sbc.w	r5, r3, r9
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	00eb      	lsls	r3, r5, #3
 8002540:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002544:	00e2      	lsls	r2, r4, #3
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	eb14 030a 	adds.w	r3, r4, sl
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	eb45 030b 	adc.w	r3, r5, fp
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	2200      	movs	r2, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	60fa      	str	r2, [r7, #12]
 800257c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002580:	f7fd fe7e 	bl	8000280 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800259c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3740      	adds	r7, #64	; 0x40
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	017d7840 	.word	0x017d7840

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	08009614 	.word	0x08009614

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800260c:	f7ff ffdc 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0b5b      	lsrs	r3, r3, #13
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	08009614 	.word	0x08009614

08002630 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e022      	b.n	8002688 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe f9e3 	bl	8000a20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f814 	bl	8002690 <HAL_SD_InitCard>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00a      	b.n	8002688 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b08e      	sub	sp, #56	; 0x38
 8002694:	af04      	add	r7, sp, #16
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80026ac:	2376      	movs	r3, #118	; 0x76
 80026ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681d      	ldr	r5, [r3, #0]
 80026b4:	466c      	mov	r4, sp
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c8:	4628      	mov	r0, r5
 80026ca:	f002 fb5b 	bl	8004d84 <SDIO_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04f      	b.n	8002780 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_SD_InitCard+0xf8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fb93 	bl	8004e16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_SD_InitCard+0xf8>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7fe fc7a 	bl	8000ff0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f001 f805 	bl	800370c <SD_PowerON>
 8002702:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e02e      	b.n	8002780 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 ff24 	bl	8003570 <SD_InitCard>
 8002728:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01b      	b.n	8002780 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fbf2 	bl	8004f3a <SDMMC_CmdBlockLength>
 8002756:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00f      	beq.n	800277e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_SD_InitCard+0xfc>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bdb0      	pop	{r4, r5, r7, pc}
 8002788:	422580a0 	.word	0x422580a0
 800278c:	004005ff 	.word	0x004005ff

08002790 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0c0      	b.n	800293a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 80b9 	bne.w	8002938 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	441a      	add	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d907      	bls.n	80027ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a7      	b.n	800293a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800281c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2200      	movs	r2, #0
 8002824:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3380      	adds	r3, #128	; 0x80
 8002854:	4619      	mov	r1, r3
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	f7fe fdab 	bl	80013b8 <HAL_DMA_Start_IT>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e050      	b.n	800293a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	025b      	lsls	r3, r3, #9
 80028b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80028b8:	2390      	movs	r3, #144	; 0x90
 80028ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f107 0210 	add.w	r2, r7, #16
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 fb05 	bl	8004ee2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d90a      	bls.n	80028f4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2282      	movs	r2, #130	; 0x82
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fb69 	bl	8004fc2 <SDMMC_CmdReadMultiBlock>
 80028f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80028f2:	e009      	b.n	8002908 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2281      	movs	r2, #129	; 0x81
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fb3c 	bl	8004f7e <SDMMC_CmdReadSingleBlock>
 8002906:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e002      	b.n	800293a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800337f 	.word	0x0800337f
 8002948:	080033f1 	.word	0x080033f1
 800294c:	004005ff 	.word	0x004005ff
 8002950:	4225858c 	.word	0x4225858c

08002954 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0c5      	b.n	8002b08 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80be 	bne.w	8002b06 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	441a      	add	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	429a      	cmp	r2, r3
 800299c:	d907      	bls.n	80029ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0ac      	b.n	8002b08 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80029e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2200      	movs	r2, #0
 80029e8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d002      	beq.n	80029f8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d90a      	bls.n	8002a14 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22a0      	movs	r2, #160	; 0xa0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fb1d 	bl	800504a <SDMMC_CmdWriteMultiBlock>
 8002a10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002a12:	e009      	b.n	8002a28 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2290      	movs	r2, #144	; 0x90
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 faf0 	bl	8005006 <SDMMC_CmdWriteSingleBlock>
 8002a26:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a39      	ldr	r2, [pc, #228]	; (8002b18 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e059      	b.n	8002b08 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002a54:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3380      	adds	r3, #128	; 0x80
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	025b      	lsls	r3, r3, #9
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f7fe fc91 	bl	80013b8 <HAL_DMA_Start_IT>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002aaa:	f023 0302 	bic.w	r3, r3, #2
 8002aae:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e018      	b.n	8002b08 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ae2:	2390      	movs	r3, #144	; 0x90
 8002ae4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f107 0210 	add.w	r2, r7, #16
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 f9f0 	bl	8004ee2 <SDIO_ConfigData>

      return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3730      	adds	r7, #48	; 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	08003355 	.word	0x08003355
 8002b14:	080033f1 	.word	0x080033f1
 8002b18:	004005ff 	.word	0x004005ff
 8002b1c:	4225858c 	.word	0x4225858c

08002b20 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_SD_IRQHandler+0x2e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 ffff 	bl	8003b4a <SD_Read_IT>
 8002b4c:	e165      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808f 	beq.w	8002c7c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002b76:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002b7a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d039      	beq.n	8002c0a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <HAL_SD_IRQHandler+0x8a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d011      	beq.n	8002bce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fa6e 	bl	8005090 <SDMMC_CmdStopTransfer>
 8002bb4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f92f 	bl	8002e2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_SD_IRQHandler+0xda>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f002 fedc 	bl	80059b8 <HAL_SD_RxCpltCallback>
 8002c00:	e10b      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f002 fece 	bl	80059a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c08:	e107      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8102 	beq.w	8002e1a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fa33 	bl	8005090 <SDMMC_CmdStopTransfer>
 8002c2a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8f4 	bl	8002e2c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 80e5 	bne.w	8002e1a <HAL_SD_IRQHandler+0x2fa>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80df 	bne.w	8002e1a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0208 	bic.w	r2, r2, #8
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f002 fe95 	bl	80059a4 <HAL_SD_TxCpltCallback>
}
 8002c7a:	e0ce      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_SD_IRQHandler+0x17c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 ffa9 	bl	8003bec <SD_Write_IT>
 8002c9a:	e0be      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca2:	f240 233a 	movw	r3, #570	; 0x23a
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80b6 	beq.w	8002e1a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f043 0202 	orr.w	r2, r3, #2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	f043 0208 	orr.w	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f043 0208 	orr.w	r2, r3, #8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f240 723a 	movw	r2, #1850	; 0x73a
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002d48:	f023 0302 	bic.w	r3, r3, #2
 8002d4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 f99c 	bl	8005090 <SDMMC_CmdStopTransfer>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f855 	bl	8002e2c <HAL_SD_ErrorCallback>
}
 8002d82:	e04a      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d045      	beq.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_SD_IRQHandler+0x282>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <HAL_SD_IRQHandler+0x304>)
 8002da8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fbca 	bl	8001548 <HAL_DMA_Abort_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02f      	beq.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb68 	bl	8003494 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002dc4:	e029      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_SD_IRQHandler+0x2ba>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d011      	beq.n	8002dfe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_SD_IRQHandler+0x308>)
 8002de0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fbae 	bl	8001548 <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d013      	beq.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb83 	bl	8003502 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002dfc:	e00d      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f002 fdbc 	bl	8005990 <HAL_SD_AbortCallback>
}
 8002e18:	e7ff      	b.n	8002e1a <HAL_SD_IRQHandler+0x2fa>
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	08003495 	.word	0x08003495
 8002e28:	08003503 	.word	0x08003503

08002e2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4e:	0f9b      	lsrs	r3, r3, #30
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebe:	0bdb      	lsrs	r3, r3, #15
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed0:	0b9b      	lsrs	r3, r3, #14
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee2:	0b5b      	lsrs	r3, r3, #13
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef4:	0b1b      	lsrs	r3, r3, #12
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d163      	bne.n	8002fd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002f20:	0f92      	lsrs	r2, r2, #30
 8002f22:	431a      	orrs	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2c:	0edb      	lsrs	r3, r3, #27
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3e:	0e1b      	lsrs	r3, r3, #24
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f50:	0d5b      	lsrs	r3, r3, #21
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f62:	0c9b      	lsrs	r3, r3, #18
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f74:	0bdb      	lsrs	r3, r3, #15
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	3302      	adds	r3, #2
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fa2:	fb03 f202 	mul.w	r2, r3, r2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	7a1b      	ldrb	r3, [r3, #8]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002fc4:	0a52      	lsrs	r2, r2, #9
 8002fc6:	fb03 f202 	mul.w	r2, r3, r2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60
 8002fd6:	e031      	b.n	800303c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d11d      	bne.n	800301c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	029a      	lsls	r2, r3, #10
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	661a      	str	r2, [r3, #96]	; 0x60
 800301a:	e00f      	b.n	800303c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_SD_GetCardCSD+0x344>)
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e09d      	b.n	8003178 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003040:	0b9b      	lsrs	r3, r3, #14
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	09db      	lsrs	r3, r3, #7
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305a:	b2da      	uxtb	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800306a:	b2da      	uxtb	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	0fdb      	lsrs	r3, r3, #31
 8003076:	b2da      	uxtb	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	0f5b      	lsrs	r3, r3, #29
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	b2da      	uxtb	r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	b2da      	uxtb	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	0d9b      	lsrs	r3, r3, #22
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	0d5b      	lsrs	r3, r3, #21
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	0bdb      	lsrs	r3, r3, #15
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	0b9b      	lsrs	r3, r3, #14
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	b2da      	uxtb	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	0b5b      	lsrs	r3, r3, #13
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	0b1b      	lsrs	r3, r3, #12
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	b2da      	uxtb	r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	b2da      	uxtb	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003166:	b2da      	uxtb	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	004005ff 	.word	0x004005ff

08003188 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b08e      	sub	sp, #56	; 0x38
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d02e      	beq.n	800325e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	d106      	bne.n	8003216 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
 8003214:	e029      	b.n	800326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321c:	d10a      	bne.n	8003234 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fb2a 	bl	8003878 <SD_WideBus_Enable>
 8003224:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
 8003232:	e01a      	b.n	800326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fb67 	bl	800390e <SD_WideBus_Disable>
 8003240:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
 800324e:	e00c      	b.n	800326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
 800325c:	e005      	b.n	800326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a26      	ldr	r2, [pc, #152]	; (8003310 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003288:	e01f      	b.n	80032ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681d      	ldr	r5, [r3, #0]
 80032b0:	466c      	mov	r4, sp
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c4:	4628      	mov	r0, r5
 80032c6:	f001 fd5d 	bl	8004d84 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fe31 	bl	8004f3a <SDMMC_CmdBlockLength>
 80032d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_SD_ConfigWideBusOperation+0x130>)
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003306:	4618      	mov	r0, r3
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bdb0      	pop	{r4, r5, r7, pc}
 800330e:	bf00      	nop
 8003310:	004005ff 	.word	0x004005ff

08003314 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa7e 	bl	8003828 <SD_SendStatus>
 800332c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	0a5b      	lsrs	r3, r3, #9
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800334a:	693b      	ldr	r3, [r7, #16]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b82      	cmp	r3, #130	; 0x82
 8003392:	d111      	bne.n	80033b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f001 fe79 	bl	8005090 <SDMMC_CmdStopTransfer>
 800339e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fd3a 	bl	8002e2c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0208 	bic.w	r2, r2, #8
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f002 fae9 	bl	80059b8 <HAL_SD_RxCpltCallback>
#endif
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fa4e 	bl	80018a0 <HAL_DMA_GetError>
 8003404:	4603      	mov	r3, r0
 8003406:	2b02      	cmp	r3, #2
 8003408:	d03e      	beq.n	8003488 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <SD_DMAError+0x36>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d12d      	bne.n	8003482 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a19      	ldr	r2, [pc, #100]	; (8003490 <SD_DMAError+0xa0>)
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff62 	bl	8003314 <HAL_SD_GetCardState>
 8003450:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b06      	cmp	r3, #6
 8003456:	d002      	beq.n	800345e <SD_DMAError+0x6e>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d10a      	bne.n	8003474 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fe14 	bl	8005090 <SDMMC_CmdStopTransfer>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff fcd2 	bl	8002e2c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003488:	bf00      	nop
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	004005ff 	.word	0x004005ff

08003494 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ff31 	bl	8003314 <HAL_SD_GetCardState>
 80034b2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d002      	beq.n	80034ce <SD_DMATxAbort+0x3a>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d10a      	bne.n	80034e4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fddc 	bl	8005090 <SDMMC_CmdStopTransfer>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f002 fa4f 	bl	8005990 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80034f2:	e002      	b.n	80034fa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fc99 	bl	8002e2c <HAL_SD_ErrorCallback>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f240 523a 	movw	r2, #1338	; 0x53a
 8003518:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fefa 	bl	8003314 <HAL_SD_GetCardState>
 8003520:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d002      	beq.n	800353c <SD_DMARxAbort+0x3a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b05      	cmp	r3, #5
 800353a:	d10a      	bne.n	8003552 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fda5 	bl	8005090 <SDMMC_CmdStopTransfer>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f002 fa18 	bl	8005990 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003560:	e002      	b.n	8003568 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fc62 	bl	8002e2c <HAL_SD_ErrorCallback>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b094      	sub	sp, #80	; 0x50
 8003574:	af04      	add	r7, sp, #16
 8003576:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003578:	2301      	movs	r3, #1
 800357a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fc56 	bl	8004e32 <SDIO_GetPowerState>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800358c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003590:	e0b8      	b.n	8003704 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	2b03      	cmp	r3, #3
 8003598:	d02f      	beq.n	80035fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fe80 	bl	80052a4 <SDMMC_CmdSendCID>
 80035a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	e0a9      	b.n	8003704 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fc80 	bl	8004ebc <SDIO_GetResponse>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2104      	movs	r1, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fc77 	bl	8004ebc <SDIO_GetResponse>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2108      	movs	r1, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fc6e 	bl	8004ebc <SDIO_GetResponse>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	210c      	movs	r1, #12
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fc65 	bl	8004ebc <SDIO_GetResponse>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d00d      	beq.n	800361e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f107 020e 	add.w	r2, r7, #14
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fe86 	bl	800531e <SDMMC_CmdSetRelAdd>
 8003612:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SD_InitCard+0xae>
    {
      return errorstate;
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	e072      	b.n	8003704 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	2b03      	cmp	r3, #3
 8003624:	d036      	beq.n	8003694 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003626:	89fb      	ldrh	r3, [r7, #14]
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f001 fe50 	bl	80052e0 <SDMMC_CmdSendCSD>
 8003640:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364a:	e05b      	b.n	8003704 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fc32 	bl	8004ebc <SDIO_GetResponse>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2104      	movs	r1, #4
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fc29 	bl	8004ebc <SDIO_GetResponse>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2108      	movs	r1, #8
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fc20 	bl	8004ebc <SDIO_GetResponse>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	210c      	movs	r1, #12
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fc17 	bl	8004ebc <SDIO_GetResponse>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2104      	movs	r1, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fc0e 	bl	8004ebc <SDIO_GetResponse>
 80036a0:	4603      	mov	r3, r0
 80036a2:	0d1a      	lsrs	r2, r3, #20
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fbc6 	bl	8002e40 <HAL_SD_GetCardCSD>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036be:	e021      	b.n	8003704 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	2200      	movs	r2, #0
 80036cc:	461c      	mov	r4, r3
 80036ce:	4615      	mov	r5, r2
 80036d0:	4622      	mov	r2, r4
 80036d2:	462b      	mov	r3, r5
 80036d4:	4608      	mov	r0, r1
 80036d6:	f001 fcfd 	bl	80050d4 <SDMMC_CmdSelDesel>
 80036da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80036dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80036e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e4:	e00e      	b.n	8003704 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681d      	ldr	r5, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	466c      	mov	r4, sp
 80036ee:	f103 0210 	add.w	r2, r3, #16
 80036f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80036f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036f8:	3304      	adds	r3, #4
 80036fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036fc:	4628      	mov	r0, r5
 80036fe:	f001 fb41 	bl	8004d84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3740      	adds	r7, #64	; 0x40
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}

0800370c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fcf8 	bl	800511a <SDMMC_CmdGoIdleState>
 800372a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	e072      	b.n	800381c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fd0b 	bl	8005156 <SDMMC_CmdOperCond>
 8003740:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fce1 	bl	800511a <SDMMC_CmdGoIdleState>
 8003758:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e05b      	b.n	800381c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b01      	cmp	r3, #1
 8003770:	d137      	bne.n	80037e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fd0b 	bl	8005194 <SDMMC_CmdAppCommand>
 800377e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02d      	beq.n	80037e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800378a:	e047      	b.n	800381c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fcfe 	bl	8005194 <SDMMC_CmdAppCommand>
 8003798:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e03b      	b.n	800381c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	491e      	ldr	r1, [pc, #120]	; (8003824 <SD_PowerON+0x118>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fd14 	bl	80051d8 <SDMMC_CmdAppOperCommand>
 80037b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037bc:	e02e      	b.n	800381c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fb79 	bl	8004ebc <SDIO_GetResponse>
 80037ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	0fdb      	lsrs	r3, r3, #31
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <SD_PowerON+0xcc>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <SD_PowerON+0xce>
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]

    count++;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	3301      	adds	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d802      	bhi.n	80037f2 <SD_PowerON+0xe6>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0cc      	beq.n	800378c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d902      	bls.n	8003802 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003800:	e00c      	b.n	800381c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
 8003812:	e002      	b.n	800381a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	c1100000 	.word	0xc1100000

08003828 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800383c:	e018      	b.n	8003870 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f001 fd88 	bl	8005360 <SDMMC_CmdSendStatus>
 8003850:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	e009      	b.n	8003870 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fb2a 	bl	8004ebc <SDIO_GetResponse>
 8003868:	4602      	mov	r2, r0
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fb14 	bl	8004ebc <SDIO_GetResponse>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800389e:	d102      	bne.n	80038a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a4:	e02f      	b.n	8003906 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f879 	bl	80039a4 <SD_FindSCR>
 80038b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e023      	b.n	8003906 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f001 fc5d 	bl	8005194 <SDMMC_CmdAppCommand>
 80038da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	e00f      	b.n	8003906 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fc96 	bl	800521e <SDMMC_CmdBusWidth>
 80038f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	e003      	b.n	8003906 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038fe:	2300      	movs	r3, #0
 8003900:	e001      	b.n	8003906 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003902:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fac9 	bl	8004ebc <SDIO_GetResponse>
 800392a:	4603      	mov	r3, r0
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003934:	d102      	bne.n	800393c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800393a:	e02f      	b.n	800399c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f82e 	bl	80039a4 <SD_FindSCR>
 8003948:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	e023      	b.n	800399c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f001 fc12 	bl	8005194 <SDMMC_CmdAppCommand>
 8003970:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	e00f      	b.n	800399c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fc4b 	bl	800521e <SDMMC_CmdBusWidth>
 8003988:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	e003      	b.n	800399c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003994:	2300      	movs	r3, #0
 8003996:	e001      	b.n	800399c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b08f      	sub	sp, #60	; 0x3c
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7fd fb13 	bl	8000fd8 <HAL_GetTick>
 80039b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2108      	movs	r1, #8
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fab5 	bl	8004f3a <SDMMC_CmdBlockLength>
 80039d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	e0b2      	b.n	8003b42 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f001 fbd3 	bl	8005194 <SDMMC_CmdAppCommand>
 80039ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	e0a3      	b.n	8003b42 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003a00:	2308      	movs	r3, #8
 8003a02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003a04:	2330      	movs	r3, #48	; 0x30
 8003a06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f107 0210 	add.w	r2, r7, #16
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fa5f 	bl	8004ee2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 fc1a 	bl	8005262 <SDMMC_CmdSendSCR>
 8003a2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02a      	beq.n	8003a8c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	e083      	b.n	8003b42 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00f      	beq.n	8003a68 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f107 0208 	add.w	r2, r7, #8
 8003a54:	18d4      	adds	r4, r2, r3
 8003a56:	4608      	mov	r0, r1
 8003a58:	f001 f9bf 	bl	8004dda <SDIO_ReadFIFO>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	6023      	str	r3, [r4, #0]
      index++;
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	3301      	adds	r3, #1
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
 8003a66:	e006      	b.n	8003a76 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a76:	f7fd faaf 	bl	8000fd8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a8a:	e05a      	b.n	8003b42 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0cf      	beq.n	8003a3a <SD_FindSCR+0x96>
 8003a9a:	e000      	b.n	8003a9e <SD_FindSCR+0xfa>
      break;
 8003a9c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	e044      	b.n	8003b42 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2202      	movs	r2, #2
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e037      	b.n	8003b42 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	e02a      	b.n	8003b42 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	061a      	lsls	r2, r3, #24
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	0e1b      	lsrs	r3, r3, #24
 8003b12:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	601a      	str	r2, [r3, #0]
    scr++;
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	061a      	lsls	r2, r3, #24
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0e1b      	lsrs	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	373c      	adds	r7, #60	; 0x3c
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}

08003b4a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03f      	beq.n	8003be4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e033      	b.n	8003bd2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f933 	bl	8004dda <SDIO_ReadFIFO>
 8003b74:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	0e1b      	lsrs	r3, r3, #24
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b07      	cmp	r3, #7
 8003bd6:	d9c8      	bls.n	8003b6a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d043      	beq.n	8003c8e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e037      	b.n	8003c7c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	021a      	lsls	r2, r3, #8
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	041a      	lsls	r2, r3, #16
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	061a      	lsls	r2, r3, #24
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f107 0208 	add.w	r2, r7, #8
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f8bf 	bl	8004df4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b07      	cmp	r3, #7
 8003c80:	d9c4      	bls.n	8003c0c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e03f      	b.n	8003d28 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd f8ab 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fdde 	bl	800489c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d17c      	bne.n	8003e4a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Transmit+0x2c>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e075      	b.n	8003e4c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Transmit+0x3e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e06e      	b.n	8003e4c <HAL_UART_Transmit+0x11c>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d84:	f7fd f928 	bl	8000fd8 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d108      	bne.n	8003db2 <HAL_UART_Transmit+0x82>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e003      	b.n	8003dba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dc2:	e02a      	b.n	8003e1a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fb1e 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e036      	b.n	8003e4c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	3302      	adds	r3, #2
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e007      	b.n	8003e0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1cf      	bne.n	8003dc4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 faee 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e006      	b.n	8003e4c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d11d      	bne.n	8003eaa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_UART_Receive_IT+0x26>
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e016      	b.n	8003eac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Receive_IT+0x38>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e00f      	b.n	8003eac <HAL_UART_Receive_IT+0x58>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fb23 	bl	80044ec <UART_Start_Receive_IT>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	e000      	b.n	8003eac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0ba      	sub	sp, #232	; 0xe8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_UART_IRQHandler+0x66>
 8003f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fc07 	bl	8004726 <UART_Receive_IT>
      return;
 8003f18:	e256      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80de 	beq.w	80040e0 <HAL_UART_IRQHandler+0x22c>
 8003f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80d1 	beq.w	80040e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_UART_IRQHandler+0xae>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xd2>
 8003f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xf6>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0204 	orr.w	r2, r3, #4
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d011      	beq.n	8003fda <HAL_UART_IRQHandler+0x126>
 8003fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0208 	orr.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 81ed 	beq.w	80043be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_UART_IRQHandler+0x14e>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fb92 	bl	8004726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_UART_IRQHandler+0x17a>
 8004026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d04f      	beq.n	80040ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa9a 	bl	8004568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d141      	bne.n	80040c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800405c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800406e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800407a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1d9      	bne.n	8004042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	4a7d      	ldr	r2, [pc, #500]	; (8004290 <HAL_UART_IRQHandler+0x3dc>)
 800409c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fa50 	bl	8001548 <HAL_DMA_Abort_IT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b8:	4610      	mov	r0, r2
 80040ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e00e      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f990 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e00a      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f98c 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	e006      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f988 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040da:	e170      	b.n	80043be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	bf00      	nop
    return;
 80040de:	e16e      	b.n	80043be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 814a 	bne.w	800437e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8143 	beq.w	800437e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 813c 	beq.w	800437e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	f040 80b4 	bne.w	8004294 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8140 	beq.w	80043c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800414a:	429a      	cmp	r2, r3
 800414c:	f080 8139 	bcs.w	80043c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004156:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	f000 8088 	beq.w	8004276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800417c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800419e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d9      	bne.n	8004166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3314      	adds	r3, #20
 80041b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e1      	bne.n	80041b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e3      	bne.n	80041ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004246:	f023 0310 	bic.w	r3, r3, #16
 800424a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004258:	65ba      	str	r2, [r7, #88]	; 0x58
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800425e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e3      	bne.n	8004234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	4618      	mov	r0, r3
 8004272:	f7fd f8f9 	bl	8001468 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800427e:	b29b      	uxth	r3, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8b6 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800428c:	e099      	b.n	80043c2 <HAL_UART_IRQHandler+0x50e>
 800428e:	bf00      	nop
 8004290:	0800462f 	.word	0x0800462f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800429c:	b29b      	uxth	r3, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 808b 	beq.w	80043c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8086 	beq.w	80043c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042de:	647a      	str	r2, [r7, #68]	; 0x44
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e3      	bne.n	80042ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	623b      	str	r3, [r7, #32]
   return(result);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004316:	633a      	str	r2, [r7, #48]	; 0x30
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e3      	bne.n	80042f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	60fb      	str	r3, [r7, #12]
   return(result);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e3      	bne.n	8004338 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f83e 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800437c:	e023      	b.n	80043c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_UART_IRQHandler+0x4ea>
 800438a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f95d 	bl	8004656 <UART_Transmit_IT>
    return;
 800439c:	e014      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <HAL_UART_IRQHandler+0x514>
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f99d 	bl	80046f6 <UART_EndTransmit_IT>
    return;
 80043bc:	e004      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
    return;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
      return;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
      return;
 80043c6:	bf00      	nop
  }
}
 80043c8:	37e8      	adds	r7, #232	; 0xe8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop

080043d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b090      	sub	sp, #64	; 0x40
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	e050      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d04c      	beq.n	80044c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x30>
 8004430:	f7fc fdd2 	bl	8000fd8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800443c:	429a      	cmp	r2, r3
 800443e:	d241      	bcs.n	80044c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004460:	637a      	str	r2, [r7, #52]	; 0x34
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	613b      	str	r3, [r7, #16]
   return(result);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004494:	623a      	str	r2, [r7, #32]
 8004496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	6a3a      	ldr	r2, [r7, #32]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e00f      	b.n	80044e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d09f      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3740      	adds	r7, #64	; 0x40
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2222      	movs	r2, #34	; 0x22
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004538:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0220 	orr.w	r2, r2, #32
 8004558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b095      	sub	sp, #84	; 0x54
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004590:	643a      	str	r2, [r7, #64]	; 0x40
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3314      	adds	r3, #20
 80045c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e5      	bne.n	80045a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d119      	bne.n	8004614 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f023 0310 	bic.w	r3, r3, #16
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004600:	61ba      	str	r2, [r7, #24]
 8004602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6979      	ldr	r1, [r7, #20]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	613b      	str	r3, [r7, #16]
   return(result);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004622:	bf00      	nop
 8004624:	3754      	adds	r7, #84	; 0x54
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fecb 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b21      	cmp	r3, #33	; 0x21
 8004668:	d13e      	bne.n	80046e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004672:	d114      	bne.n	800469e <UART_Transmit_IT+0x48>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d110      	bne.n	800469e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	621a      	str	r2, [r3, #32]
 800469c:	e008      	b.n	80046b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	1c59      	adds	r1, r3, #1
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6211      	str	r1, [r2, #32]
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4619      	mov	r1, r3
 80046be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10f      	bne.n	80046e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fe5a 	bl	80043d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08c      	sub	sp, #48	; 0x30
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b22      	cmp	r3, #34	; 0x22
 8004738:	f040 80ab 	bne.w	8004892 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d117      	bne.n	8004776 <UART_Receive_IT+0x50>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004764:	b29a      	uxth	r2, r3
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
 8004774:	e026      	b.n	80047c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004788:	d007      	beq.n	800479a <UART_Receive_IT+0x74>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <UART_Receive_IT+0x82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e008      	b.n	80047ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4619      	mov	r1, r3
 80047d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d15a      	bne.n	800488e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0220 	bic.w	r2, r2, #32
 80047e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d135      	bne.n	8004884 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	613b      	str	r3, [r7, #16]
   return(result);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	623a      	str	r2, [r7, #32]
 8004840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	61bb      	str	r3, [r7, #24]
   return(result);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b10      	cmp	r3, #16
 800485e:	d10a      	bne.n	8004876 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fdbb 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
 8004882:	e002      	b.n	800488a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc f871 	bl	800096c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e002      	b.n	8004894 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3730      	adds	r7, #48	; 0x30
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b0c0      	sub	sp, #256	; 0x100
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	68d9      	ldr	r1, [r3, #12]
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	ea40 0301 	orr.w	r3, r0, r1
 80048c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	431a      	orrs	r2, r3
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048f4:	f021 010c 	bic.w	r1, r1, #12
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004902:	430b      	orrs	r3, r1
 8004904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	6999      	ldr	r1, [r3, #24]
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	ea40 0301 	orr.w	r3, r0, r1
 8004922:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b8f      	ldr	r3, [pc, #572]	; (8004b68 <UART_SetConfig+0x2cc>)
 800492c:	429a      	cmp	r2, r3
 800492e:	d005      	beq.n	800493c <UART_SetConfig+0xa0>
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <UART_SetConfig+0x2d0>)
 8004938:	429a      	cmp	r2, r3
 800493a:	d104      	bne.n	8004946 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7fd fe64 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8004940:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004944:	e003      	b.n	800494e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004946:	f7fd fe4b 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800494a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004958:	f040 810c 	bne.w	8004b74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800495c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004960:	2200      	movs	r2, #0
 8004962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004966:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800496a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800496e:	4622      	mov	r2, r4
 8004970:	462b      	mov	r3, r5
 8004972:	1891      	adds	r1, r2, r2
 8004974:	65b9      	str	r1, [r7, #88]	; 0x58
 8004976:	415b      	adcs	r3, r3
 8004978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800497e:	4621      	mov	r1, r4
 8004980:	eb12 0801 	adds.w	r8, r2, r1
 8004984:	4629      	mov	r1, r5
 8004986:	eb43 0901 	adc.w	r9, r3, r1
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800499a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800499e:	4690      	mov	r8, r2
 80049a0:	4699      	mov	r9, r3
 80049a2:	4623      	mov	r3, r4
 80049a4:	eb18 0303 	adds.w	r3, r8, r3
 80049a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049ac:	462b      	mov	r3, r5
 80049ae:	eb49 0303 	adc.w	r3, r9, r3
 80049b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ca:	460b      	mov	r3, r1
 80049cc:	18db      	adds	r3, r3, r3
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
 80049d0:	4613      	mov	r3, r2
 80049d2:	eb42 0303 	adc.w	r3, r2, r3
 80049d6:	657b      	str	r3, [r7, #84]	; 0x54
 80049d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049e0:	f7fb fc4e 	bl	8000280 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <UART_SetConfig+0x2d4>)
 80049ea:	fba3 2302 	umull	r2, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	011c      	lsls	r4, r3, #4
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a14:	4641      	mov	r1, r8
 8004a16:	eb12 0a01 	adds.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a34:	4692      	mov	sl, r2
 8004a36:	469b      	mov	fp, r3
 8004a38:	4643      	mov	r3, r8
 8004a3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a42:	464b      	mov	r3, r9
 8004a44:	eb4b 0303 	adc.w	r3, fp, r3
 8004a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a60:	460b      	mov	r3, r1
 8004a62:	18db      	adds	r3, r3, r3
 8004a64:	643b      	str	r3, [r7, #64]	; 0x40
 8004a66:	4613      	mov	r3, r2
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a76:	f7fb fc03 	bl	8000280 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <UART_SetConfig+0x2d4>)
 8004a82:	fba3 2301 	umull	r2, r3, r3, r1
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2264      	movs	r2, #100	; 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	1acb      	subs	r3, r1, r3
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a96:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <UART_SetConfig+0x2d4>)
 8004a98:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aa4:	441c      	add	r4, r3
 8004aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ab4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ac8:	4641      	mov	r1, r8
 8004aca:	1851      	adds	r1, r2, r1
 8004acc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ace:	4649      	mov	r1, r9
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	00cb      	lsls	r3, r1, #3
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aea:	4651      	mov	r1, sl
 8004aec:	00ca      	lsls	r2, r1, #3
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4642      	mov	r2, r8
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004afc:	464b      	mov	r3, r9
 8004afe:	460a      	mov	r2, r1
 8004b00:	eb42 0303 	adc.w	r3, r2, r3
 8004b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	18db      	adds	r3, r3, r3
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	4613      	mov	r3, r2
 8004b24:	eb42 0303 	adc.w	r3, r2, r3
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b32:	f7fb fba5 	bl	8000280 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <UART_SetConfig+0x2d4>)
 8004b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2164      	movs	r1, #100	; 0x64
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <UART_SetConfig+0x2d4>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4422      	add	r2, r4
 8004b62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b64:	e105      	b.n	8004d72 <UART_SetConfig+0x4d6>
 8004b66:	bf00      	nop
 8004b68:	40011000 	.word	0x40011000
 8004b6c:	40011400 	.word	0x40011400
 8004b70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b86:	4642      	mov	r2, r8
 8004b88:	464b      	mov	r3, r9
 8004b8a:	1891      	adds	r1, r2, r2
 8004b8c:	6239      	str	r1, [r7, #32]
 8004b8e:	415b      	adcs	r3, r3
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b96:	4641      	mov	r1, r8
 8004b98:	1854      	adds	r4, r2, r1
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	00eb      	lsls	r3, r5, #3
 8004baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bae:	00e2      	lsls	r2, r4, #3
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	4643      	mov	r3, r8
 8004bb6:	18e3      	adds	r3, r4, r3
 8004bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	eb45 0303 	adc.w	r3, r5, r3
 8004bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004be2:	4629      	mov	r1, r5
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	4621      	mov	r1, r4
 8004be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bec:	4621      	mov	r1, r4
 8004bee:	008a      	lsls	r2, r1, #2
 8004bf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bf4:	f7fb fb44 	bl	8000280 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	011c      	lsls	r4, r3, #4
 8004c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	61b9      	str	r1, [r7, #24]
 8004c20:	415b      	adcs	r3, r3
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c28:	4641      	mov	r1, r8
 8004c2a:	1851      	adds	r1, r2, r1
 8004c2c:	6139      	str	r1, [r7, #16]
 8004c2e:	4649      	mov	r1, r9
 8004c30:	414b      	adcs	r3, r1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c40:	4659      	mov	r1, fp
 8004c42:	00cb      	lsls	r3, r1, #3
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	00ca      	lsls	r2, r1, #3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	4642      	mov	r2, r8
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	460a      	mov	r2, r1
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c80:	4649      	mov	r1, r9
 8004c82:	008b      	lsls	r3, r1, #2
 8004c84:	4641      	mov	r1, r8
 8004c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	008a      	lsls	r2, r1, #2
 8004c8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c92:	f7fb faf5 	bl	8000280 <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cba:	441c      	add	r4, r3
 8004cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004cc4:	677a      	str	r2, [r7, #116]	; 0x74
 8004cc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cca:	4642      	mov	r2, r8
 8004ccc:	464b      	mov	r3, r9
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	415b      	adcs	r3, r3
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cda:	4641      	mov	r1, r8
 8004cdc:	1851      	adds	r1, r2, r1
 8004cde:	6039      	str	r1, [r7, #0]
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	414b      	adcs	r3, r1
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	00cb      	lsls	r3, r1, #3
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	00ca      	lsls	r2, r1, #3
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	4603      	mov	r3, r0
 8004d06:	4642      	mov	r2, r8
 8004d08:	189b      	adds	r3, r3, r2
 8004d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	460a      	mov	r2, r1
 8004d10:	eb42 0303 	adc.w	r3, r2, r3
 8004d14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d20:	667a      	str	r2, [r7, #100]	; 0x64
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d2e:	4649      	mov	r1, r9
 8004d30:	008b      	lsls	r3, r1, #2
 8004d32:	4641      	mov	r1, r8
 8004d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d38:	4641      	mov	r1, r8
 8004d3a:	008a      	lsls	r2, r1, #2
 8004d3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d40:	f7fb fa9e 	bl	8000280 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2164      	movs	r1, #100	; 0x64
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	; 0x32
 8004d5c:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4422      	add	r2, r4
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	bf00      	nop
 8004d74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	51eb851f 	.word	0x51eb851f

08004d84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d84:	b084      	sub	sp, #16
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	f107 001c 	add.w	r0, r7, #28
 8004d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004da2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004da6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004daa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004dae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	b004      	add	sp, #16
 8004dd8:	4770      	bx	lr

08004dda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2203      	movs	r2, #3
 8004e22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e88:	f023 030f 	bic.w	r3, r3, #15
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	b2db      	uxtb	r3, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	461a      	mov	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
}  
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0

}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f48:	2310      	movs	r3, #16
 8004f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff74 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	2110      	movs	r1, #16
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fa19 	bl	80053a4 <SDMMC_GetCmdResp1>
 8004f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f74:	69fb      	ldr	r3, [r7, #28]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f8c:	2311      	movs	r3, #17
 8004f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f9e:	f107 0308 	add.w	r3, r7, #8
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff52 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	2111      	movs	r1, #17
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9f7 	bl	80053a4 <SDMMC_GetCmdResp1>
 8004fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b088      	sub	sp, #32
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fd0:	2312      	movs	r3, #18
 8004fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff30 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	2112      	movs	r1, #18
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9d5 	bl	80053a4 <SDMMC_GetCmdResp1>
 8004ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b088      	sub	sp, #32
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005014:	2318      	movs	r3, #24
 8005016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff0e 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	2118      	movs	r1, #24
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9b3 	bl	80053a4 <SDMMC_GetCmdResp1>
 800503e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005040:	69fb      	ldr	r3, [r7, #28]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b088      	sub	sp, #32
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005058:	2319      	movs	r3, #25
 800505a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800505c:	2340      	movs	r3, #64	; 0x40
 800505e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005068:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff feec 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	2119      	movs	r1, #25
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f991 	bl	80053a4 <SDMMC_GetCmdResp1>
 8005082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005084:	69fb      	ldr	r3, [r7, #28]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800509c:	230c      	movs	r3, #12
 800509e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff feca 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <SDMMC_CmdStopTransfer+0x40>)
 80050bc:	210c      	movs	r1, #12
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f970 	bl	80053a4 <SDMMC_GetCmdResp1>
 80050c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	05f5e100 	.word	0x05f5e100

080050d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050e4:	2307      	movs	r3, #7
 80050e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	4619      	mov	r1, r3
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fea6 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	2107      	movs	r1, #7
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f94b 	bl	80053a4 <SDMMC_GetCmdResp1>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005112:	4618      	mov	r0, r3
 8005114:	3728      	adds	r7, #40	; 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005138:	f107 0308 	add.w	r3, r7, #8
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fe85 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb65 	bl	8005814 <SDMMC_GetCmdError>
 800514a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b088      	sub	sp, #32
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800515e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005164:	2308      	movs	r3, #8
 8005166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fe66 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 faf8 	bl	8005778 <SDMMC_GetCmdResp7>
 8005188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800518a:	69fb      	ldr	r3, [r7, #28]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051a2:	2337      	movs	r3, #55	; 0x37
 80051a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a6:	2340      	movs	r3, #64	; 0x40
 80051a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051b4:	f107 0308 	add.w	r3, r7, #8
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe47 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	2137      	movs	r1, #55	; 0x37
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8ec 	bl	80053a4 <SDMMC_GetCmdResp1>
 80051cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ce:	69fb      	ldr	r3, [r7, #28]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051ee:	2329      	movs	r3, #41	; 0x29
 80051f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f2:	2340      	movs	r3, #64	; 0x40
 80051f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe21 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f9ff 	bl	8005610 <SDMMC_GetCmdResp3>
 8005212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005214:	69fb      	ldr	r3, [r7, #28]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b088      	sub	sp, #32
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800522c:	2306      	movs	r3, #6
 800522e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fe02 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	2106      	movs	r1, #6
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8a7 	bl	80053a4 <SDMMC_GetCmdResp1>
 8005256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005258:	69fb      	ldr	r3, [r7, #28]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b088      	sub	sp, #32
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800526e:	2333      	movs	r3, #51	; 0x33
 8005270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800527a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fde1 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800528c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005290:	2133      	movs	r1, #51	; 0x33
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f886 	bl	80053a4 <SDMMC_GetCmdResp1>
 8005298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800529a:	69fb      	ldr	r3, [r7, #28]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80052b0:	2302      	movs	r3, #2
 80052b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80052b4:	23c0      	movs	r3, #192	; 0xc0
 80052b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fdc0 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f956 	bl	8005580 <SDMMC_GetCmdResp2>
 80052d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d6:	69fb      	ldr	r3, [r7, #28]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80052ee:	2309      	movs	r3, #9
 80052f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80052f2:	23c0      	movs	r3, #192	; 0xc0
 80052f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fda1 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f937 	bl	8005580 <SDMMC_GetCmdResp2>
 8005312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800532c:	2303      	movs	r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fd82 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	2103      	movs	r1, #3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f99c 	bl	800568c <SDMMC_GetCmdResp6>
 8005354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005356:	69fb      	ldr	r3, [r7, #28]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800536e:	230d      	movs	r3, #13
 8005370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fd61 	bl	8004e4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	210d      	movs	r1, #13
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f806 	bl	80053a4 <SDMMC_GetCmdResp1>
 8005398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	460b      	mov	r3, r1
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053b2:	4b70      	ldr	r3, [pc, #448]	; (8005574 <SDMMC_GetCmdResp1+0x1d0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a70      	ldr	r2, [pc, #448]	; (8005578 <SDMMC_GetCmdResp1+0x1d4>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	0a5a      	lsrs	r2, r3, #9
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	61fa      	str	r2, [r7, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053d4:	e0c9      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <SDMMC_GetCmdResp1+0x22>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ea      	bne.n	80053c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2204      	movs	r2, #4
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005402:	2304      	movs	r3, #4
 8005404:	e0b1      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005418:	2301      	movs	r3, #1
 800541a:	e0a6      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	22c5      	movs	r2, #197	; 0xc5
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff fd3d 	bl	8004ea2 <SDIO_GetCommandResponse>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	4293      	cmp	r3, r2
 8005430:	d001      	beq.n	8005436 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005432:	2301      	movs	r3, #1
 8005434:	e099      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005436:	2100      	movs	r1, #0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fd3f 	bl	8004ebc <SDIO_GetResponse>
 800543e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4b4e      	ldr	r3, [pc, #312]	; (800557c <SDMMC_GetCmdResp1+0x1d8>)
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	e08d      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da02      	bge.n	800545a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005458:	e087      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	e080      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	e079      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005484:	e071      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005494:	e069      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a4:	e061      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054b4:	e059      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c4:	e051      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d4:	e049      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054e4:	e041      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80054f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f4:	e039      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005504:	e031      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005510:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005514:	e029      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005520:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005524:	e021      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005534:	e019      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005544:	e011      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005554:	e009      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005560:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005564:	e001      	b.n	800556a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000000 	.word	0x20000000
 8005578:	10624dd3 	.word	0x10624dd3
 800557c:	fdffe008 	.word	0xfdffe008

08005580 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005588:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <SDMMC_GetCmdResp2+0x88>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <SDMMC_GetCmdResp2+0x8c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0a5b      	lsrs	r3, r3, #9
 8005594:	f241 3288 	movw	r2, #5000	; 0x1388
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	60fa      	str	r2, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ac:	e026      	b.n	80055fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <SDMMC_GetCmdResp2+0x1e>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2204      	movs	r2, #4
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055da:	2304      	movs	r3, #4
 80055dc:	e00e      	b.n	80055fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e003      	b.n	80055fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	22c5      	movs	r2, #197	; 0xc5
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	20000000 	.word	0x20000000
 800560c:	10624dd3 	.word	0x10624dd3

08005610 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <SDMMC_GetCmdResp3+0x74>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <SDMMC_GetCmdResp3+0x78>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0a5b      	lsrs	r3, r3, #9
 8005624:	f241 3288 	movw	r2, #5000	; 0x1388
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	60fa      	str	r2, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800563c:	e01b      	b.n	8005676 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0ef      	beq.n	800562e <SDMMC_GetCmdResp3+0x1e>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ea      	bne.n	800562e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800566a:	2304      	movs	r3, #4
 800566c:	e003      	b.n	8005676 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	22c5      	movs	r2, #197	; 0xc5
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000000 	.word	0x20000000
 8005688:	10624dd3 	.word	0x10624dd3

0800568c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	460b      	mov	r3, r1
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800569a:	4b35      	ldr	r3, [pc, #212]	; (8005770 <SDMMC_GetCmdResp6+0xe4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a35      	ldr	r2, [pc, #212]	; (8005774 <SDMMC_GetCmdResp6+0xe8>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	1e5a      	subs	r2, r3, #1
 80056b4:	61fa      	str	r2, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056be:	e052      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <SDMMC_GetCmdResp6+0x24>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ea      	bne.n	80056b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2204      	movs	r2, #4
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056ec:	2304      	movs	r3, #4
 80056ee:	e03a      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005702:	2301      	movs	r3, #1
 8005704:	e02f      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fbcb 	bl	8004ea2 <SDIO_GetCommandResponse>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	4293      	cmp	r3, r2
 8005714:	d001      	beq.n	800571a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005716:	2301      	movs	r3, #1
 8005718:	e025      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	22c5      	movs	r2, #197	; 0xc5
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005720:	2100      	movs	r1, #0
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fbca 	bl	8004ebc <SDIO_GetResponse>
 8005728:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	b29a      	uxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800573e:	2300      	movs	r3, #0
 8005740:	e011      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800574c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005750:	e009      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005760:	e001      	b.n	8005766 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000000 	.word	0x20000000
 8005774:	10624dd3 	.word	0x10624dd3

08005778 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005780:	4b22      	ldr	r3, [pc, #136]	; (800580c <SDMMC_GetCmdResp7+0x94>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <SDMMC_GetCmdResp7+0x98>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	0a5b      	lsrs	r3, r3, #9
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057a4:	e02c      	b.n	8005800 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0ef      	beq.n	8005796 <SDMMC_GetCmdResp7+0x1e>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ea      	bne.n	8005796 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2204      	movs	r2, #4
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057d2:	2304      	movs	r3, #4
 80057d4:	e014      	b.n	8005800 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e009      	b.n	8005800 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057fe:	2300      	movs	r3, #0
  
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000000 	.word	0x20000000
 8005810:	10624dd3 	.word	0x10624dd3

08005814 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <SDMMC_GetCmdError+0x50>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a11      	ldr	r2, [pc, #68]	; (8005868 <SDMMC_GetCmdError+0x54>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0a5b      	lsrs	r3, r3, #9
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	60fa      	str	r2, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800583c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005840:	e009      	b.n	8005856 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f1      	beq.n	8005832 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	22c5      	movs	r2, #197	; 0xc5
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000000 	.word	0x20000000
 8005868:	10624dd3 	.word	0x10624dd3

0800586c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005870:	4904      	ldr	r1, [pc, #16]	; (8005884 <MX_FATFS_Init+0x18>)
 8005872:	4805      	ldr	r0, [pc, #20]	; (8005888 <MX_FATFS_Init+0x1c>)
 8005874:	f003 f8be 	bl	80089f4 <FATFS_LinkDriver>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <MX_FATFS_Init+0x20>)
 800587e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}
 8005884:	2000024c 	.word	0x2000024c
 8005888:	08009624 	.word	0x08009624
 800588c:	20000248 	.word	0x20000248

08005890 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005894:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005896:	4618      	mov	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80058aa:	f000 f896 	bl	80059da <BSP_SD_IsDetected>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d001      	beq.n	80058b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e012      	b.n	80058de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80058b8:	480b      	ldr	r0, [pc, #44]	; (80058e8 <BSP_SD_Init+0x48>)
 80058ba:	f7fc feb9 	bl	8002630 <HAL_SD_Init>
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d109      	bne.n	80058dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80058c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058cc:	4806      	ldr	r0, [pc, #24]	; (80058e8 <BSP_SD_Init+0x48>)
 80058ce:	f7fd fc87 	bl	80031e0 <HAL_SD_ConfigWideBusOperation>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80058dc:	79fb      	ldrb	r3, [r7, #7]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200000b8 	.word	0x200000b8

080058ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	68f9      	ldr	r1, [r7, #12]
 8005902:	4806      	ldr	r0, [pc, #24]	; (800591c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005904:	f7fc ff44 	bl	8002790 <HAL_SD_ReadBlocks_DMA>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200000b8 	.word	0x200000b8

08005920 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	4806      	ldr	r0, [pc, #24]	; (8005950 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005938:	f7fd f80c 	bl	8002954 <HAL_SD_WriteBlocks_DMA>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200000b8 	.word	0x200000b8

08005954 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005958:	4805      	ldr	r0, [pc, #20]	; (8005970 <BSP_SD_GetCardState+0x1c>)
 800595a:	f7fd fcdb 	bl	8003314 <HAL_SD_GetCardState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b04      	cmp	r3, #4
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
}
 800596a:	4618      	mov	r0, r3
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200000b8 	.word	0x200000b8

08005974 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4803      	ldr	r0, [pc, #12]	; (800598c <BSP_SD_GetCardInfo+0x18>)
 8005980:	f7fd fc02 	bl	8003188 <HAL_SD_GetCardInfo>
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200000b8 	.word	0x200000b8

08005990 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005998:	f000 f818 	bl	80059cc <BSP_SD_AbortCallback>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80059ac:	f000 f98c 	bl	8005cc8 <BSP_SD_WriteCpltCallback>
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80059c0:	f000 f98e 	bl	8005ce0 <BSP_SD_ReadCpltCallback>
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0

}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80059e0:	2301      	movs	r3, #1
 80059e2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	b2db      	uxtb	r3, r3
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80059fc:	f7fb faec 	bl	8000fd8 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005a02:	e006      	b.n	8005a12 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a04:	f7ff ffa6 	bl	8005954 <BSP_SD_GetCardState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e009      	b.n	8005a26 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005a12:	f7fb fae1 	bl	8000fd8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d8f0      	bhi.n	8005a04 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <SD_CheckStatus+0x38>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005a40:	f7ff ff88 	bl	8005954 <BSP_SD_GetCardState>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <SD_CheckStatus+0x38>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <SD_CheckStatus+0x38>)
 8005a58:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005a5a:	4b03      	ldr	r3, [pc, #12]	; (8005a68 <SD_CheckStatus+0x38>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000009 	.word	0x20000009

08005a6c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005a76:	f7ff ff13 	bl	80058a0 <BSP_SD_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d107      	bne.n	8005a90 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ffd4 	bl	8005a30 <SD_CheckStatus>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <SD_initialize+0x34>)
 8005a8e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <SD_initialize+0x34>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b2db      	uxtb	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000009 	.word	0x20000009

08005aa4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ffbd 	bl	8005a30 <SD_CheckStatus>
 8005ab6:	4603      	mov	r3, r0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005ad4:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ad8:	f7ff ff8c 	bl	80059f4 <SD_CheckStatusWithTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da01      	bge.n	8005ae6 <SD_read+0x26>
  {
    return res;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	e03b      	b.n	8005b5e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	68b8      	ldr	r0, [r7, #8]
 8005aec:	f7ff fefe 	bl	80058ec <BSP_SD_ReadBlocks_DMA>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d132      	bne.n	8005b5c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005af6:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <SD_read+0xa8>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005afc:	f7fb fa6c 	bl	8000fd8 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005b02:	bf00      	nop
 8005b04:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <SD_read+0xa8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <SD_read+0x5e>
 8005b0c:	f7fb fa64 	bl	8000fd8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d9f2      	bls.n	8005b04 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <SD_read+0xa8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75fb      	strb	r3, [r7, #23]
 8005b2a:	e017      	b.n	8005b5c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <SD_read+0xa8>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005b32:	f7fb fa51 	bl	8000fd8 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005b38:	e007      	b.n	8005b4a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b3a:	f7ff ff0b 	bl	8005954 <BSP_SD_GetCardState>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <SD_read+0x8a>
          {
            res = RES_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005b48:	e008      	b.n	8005b5c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005b4a:	f7fb fa45 	bl	8000fd8 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d9ee      	bls.n	8005b3a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200006b8 	.word	0x200006b8

08005b6c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <SD_write+0xa8>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005b86:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b8a:	f7ff ff33 	bl	80059f4 <SD_CheckStatusWithTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da01      	bge.n	8005b98 <SD_write+0x2c>
  {
    return res;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	e038      	b.n	8005c0a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	68b8      	ldr	r0, [r7, #8]
 8005b9e:	f7ff febf 	bl	8005920 <BSP_SD_WriteBlocks_DMA>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d12f      	bne.n	8005c08 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005ba8:	f7fb fa16 	bl	8000fd8 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005bae:	bf00      	nop
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <SD_write+0xa8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <SD_write+0x5e>
 8005bb8:	f7fb fa0e 	bl	8000fd8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f247 522f 	movw	r2, #29999	; 0x752f
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d9f2      	bls.n	8005bb0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <SD_write+0xa8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
 8005bd6:	e017      	b.n	8005c08 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <SD_write+0xa8>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005bde:	f7fb f9fb 	bl	8000fd8 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005be4:	e007      	b.n	8005bf6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005be6:	f7ff feb5 	bl	8005954 <BSP_SD_GetCardState>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <SD_write+0x8a>
          {
            res = RES_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8005bf4:	e008      	b.n	8005c08 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005bf6:	f7fb f9ef 	bl	8000fd8 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	f247 522f 	movw	r2, #29999	; 0x752f
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d9ee      	bls.n	8005be6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200006b4 	.word	0x200006b4

08005c18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	; 0x30
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	603a      	str	r2, [r7, #0]
 8005c22:	71fb      	strb	r3, [r7, #7]
 8005c24:	460b      	mov	r3, r1
 8005c26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <SD_ioctl+0xac>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <SD_ioctl+0x28>
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e03c      	b.n	8005cba <SD_ioctl+0xa2>

  switch (cmd)
 8005c40:	79bb      	ldrb	r3, [r7, #6]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d834      	bhi.n	8005cb0 <SD_ioctl+0x98>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <SD_ioctl+0x34>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c65 	.word	0x08005c65
 8005c54:	08005c7d 	.word	0x08005c7d
 8005c58:	08005c97 	.word	0x08005c97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c62:	e028      	b.n	8005cb6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fe83 	bl	8005974 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c7a:	e01c      	b.n	8005cb6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c7c:	f107 030c 	add.w	r3, r7, #12
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fe77 	bl	8005974 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c94:	e00f      	b.n	8005cb6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c96:	f107 030c 	add.w	r3, r7, #12
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fe6a 	bl	8005974 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	0a5a      	lsrs	r2, r3, #9
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cae:	e002      	b.n	8005cb6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3730      	adds	r7, #48	; 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000009 	.word	0x20000009

08005cc8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <BSP_SD_WriteCpltCallback+0x14>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	200006b4 	.word	0x200006b4

08005ce0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <BSP_SD_ReadCpltCallback+0x14>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	200006b8 	.word	0x200006b8

08005cf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <disk_status+0x30>)
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	79fa      	ldrb	r2, [r7, #7]
 8005d10:	4905      	ldr	r1, [pc, #20]	; (8005d28 <disk_status+0x30>)
 8005d12:	440a      	add	r2, r1
 8005d14:	7a12      	ldrb	r2, [r2, #8]
 8005d16:	4610      	mov	r0, r2
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200008e4 	.word	0x200008e4

08005d2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <disk_initialize+0x48>)
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d111      	bne.n	8005d68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	4a0b      	ldr	r2, [pc, #44]	; (8005d74 <disk_initialize+0x48>)
 8005d48:	2101      	movs	r1, #1
 8005d4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <disk_initialize+0x48>)
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	79fa      	ldrb	r2, [r7, #7]
 8005d5a:	4906      	ldr	r1, [pc, #24]	; (8005d74 <disk_initialize+0x48>)
 8005d5c:	440a      	add	r2, r1
 8005d5e:	7a12      	ldrb	r2, [r2, #8]
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200008e4 	.word	0x200008e4

08005d78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <disk_read+0x3c>)
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	689c      	ldr	r4, [r3, #8]
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <disk_read+0x3c>)
 8005d98:	4413      	add	r3, r2
 8005d9a:	7a18      	ldrb	r0, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	47a0      	blx	r4
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd90      	pop	{r4, r7, pc}
 8005db2:	bf00      	nop
 8005db4:	200008e4 	.word	0x200008e4

08005db8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <disk_write+0x3c>)
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68dc      	ldr	r4, [r3, #12]
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <disk_write+0x3c>)
 8005dd8:	4413      	add	r3, r2
 8005dda:	7a18      	ldrb	r0, [r3, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	47a0      	blx	r4
 8005de4:	4603      	mov	r3, r0
 8005de6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200008e4 	.word	0x200008e4

08005df8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3301      	adds	r3, #1
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e08:	89fb      	ldrh	r3, [r7, #14]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	b21a      	sxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3303      	adds	r3, #3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	3202      	adds	r2, #2
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	3201      	adds	r2, #1
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	887a      	ldrh	r2, [r7, #2]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	887b      	ldrh	r3, [r7, #2]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	1c53      	adds	r3, r2, #1
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	6179      	str	r1, [r7, #20]
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f1      	bne.n	8005f16 <mem_cpy+0x1a>
	}
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	617a      	str	r2, [r7, #20]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f3      	bne.n	8005f4e <mem_set+0x10>
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	61fa      	str	r2, [r7, #28]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4619      	mov	r1, r3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	61ba      	str	r2, [r7, #24]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	1acb      	subs	r3, r1, r3
 8005fa0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <mem_cmp+0x40>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0eb      	beq.n	8005f8c <mem_cmp+0x18>

	return r;
 8005fb4:	697b      	ldr	r3, [r7, #20]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005fcc:	e002      	b.n	8005fd4 <chk_chr+0x12>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <chk_chr+0x26>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d1f2      	bne.n	8005fce <chk_chr+0xc>
	return *str;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	781b      	ldrb	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e029      	b.n	8006060 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800600c:	4a27      	ldr	r2, [pc, #156]	; (80060ac <chk_lock+0xb4>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	4413      	add	r3, r2
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01d      	beq.n	8006056 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800601a:	4a24      	ldr	r2, [pc, #144]	; (80060ac <chk_lock+0xb4>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	4413      	add	r3, r2
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d116      	bne.n	800605a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <chk_lock+0xb4>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	3304      	adds	r3, #4
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800603c:	429a      	cmp	r2, r3
 800603e:	d10c      	bne.n	800605a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006040:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <chk_lock+0xb4>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	3308      	adds	r3, #8
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006054:	e007      	b.n	8006066 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d9d2      	bls.n	800600c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d109      	bne.n	8006080 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <chk_lock+0x80>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d101      	bne.n	800607c <chk_lock+0x84>
 8006078:	2300      	movs	r3, #0
 800607a:	e010      	b.n	800609e <chk_lock+0xa6>
 800607c:	2312      	movs	r3, #18
 800607e:	e00e      	b.n	800609e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d108      	bne.n	8006098 <chk_lock+0xa0>
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <chk_lock+0xb4>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	330c      	adds	r3, #12
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006096:	d101      	bne.n	800609c <chk_lock+0xa4>
 8006098:	2310      	movs	r3, #16
 800609a:	e000      	b.n	800609e <chk_lock+0xa6>
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	200006c4 	.word	0x200006c4

080060b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	e002      	b.n	80060c2 <enq_lock+0x12>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3301      	adds	r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d806      	bhi.n	80060d6 <enq_lock+0x26>
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <enq_lock+0x40>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	4413      	add	r3, r2
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f2      	bne.n	80060bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200006c4 	.word	0x200006c4

080060f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e01f      	b.n	8006144 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006104:	4a41      	ldr	r2, [pc, #260]	; (800620c <inc_lock+0x118>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	4413      	add	r3, r2
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d113      	bne.n	800613e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006116:	4a3d      	ldr	r2, [pc, #244]	; (800620c <inc_lock+0x118>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	4413      	add	r3, r2
 800611e:	3304      	adds	r3, #4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006126:	429a      	cmp	r2, r3
 8006128:	d109      	bne.n	800613e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800612a:	4a38      	ldr	r2, [pc, #224]	; (800620c <inc_lock+0x118>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	3308      	adds	r3, #8
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800613a:	429a      	cmp	r2, r3
 800613c:	d006      	beq.n	800614c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d9dc      	bls.n	8006104 <inc_lock+0x10>
 800614a:	e000      	b.n	800614e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800614c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d132      	bne.n	80061ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e002      	b.n	8006160 <inc_lock+0x6c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d806      	bhi.n	8006174 <inc_lock+0x80>
 8006166:	4a29      	ldr	r2, [pc, #164]	; (800620c <inc_lock+0x118>)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	4413      	add	r3, r2
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f2      	bne.n	800615a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d101      	bne.n	800617e <inc_lock+0x8a>
 800617a:	2300      	movs	r3, #0
 800617c:	e040      	b.n	8006200 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4922      	ldr	r1, [pc, #136]	; (800620c <inc_lock+0x118>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	440b      	add	r3, r1
 800618a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	491e      	ldr	r1, [pc, #120]	; (800620c <inc_lock+0x118>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	440b      	add	r3, r1
 8006198:	3304      	adds	r3, #4
 800619a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	491a      	ldr	r1, [pc, #104]	; (800620c <inc_lock+0x118>)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	440b      	add	r3, r1
 80061a8:	3308      	adds	r3, #8
 80061aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80061ac:	4a17      	ldr	r2, [pc, #92]	; (800620c <inc_lock+0x118>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	4413      	add	r3, r2
 80061b4:	330c      	adds	r3, #12
 80061b6:	2200      	movs	r2, #0
 80061b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <inc_lock+0xe0>
 80061c0:	4a12      	ldr	r2, [pc, #72]	; (800620c <inc_lock+0x118>)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	330c      	adds	r3, #12
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <inc_lock+0xe0>
 80061d0:	2300      	movs	r3, #0
 80061d2:	e015      	b.n	8006200 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <inc_lock+0xf8>
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <inc_lock+0x118>)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	4413      	add	r3, r2
 80061e2:	330c      	adds	r3, #12
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	e001      	b.n	80061f0 <inc_lock+0xfc>
 80061ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061f0:	4906      	ldr	r1, [pc, #24]	; (800620c <inc_lock+0x118>)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	440b      	add	r3, r1
 80061f8:	330c      	adds	r3, #12
 80061fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	200006c4 	.word	0x200006c4

08006210 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e010      	b.n	8006240 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800621e:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <clear_lock+0x44>)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	4413      	add	r3, r2
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d105      	bne.n	800623a <clear_lock+0x2a>
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <clear_lock+0x44>)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	4413      	add	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d9eb      	bls.n	800621e <clear_lock+0xe>
	}
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	200006c4 	.word	0x200006c4

08006258 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	78db      	ldrb	r3, [r3, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7858      	ldrb	r0, [r3, #1]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800627c:	2301      	movs	r3, #1
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f7ff fd9a 	bl	8005db8 <disk_write>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <sync_window+0x38>
			res = FR_DISK_ERR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e022      	b.n	80062d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	1ad2      	subs	r2, r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d217      	bcs.n	80062d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	789b      	ldrb	r3, [r3, #2]
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	e010      	b.n	80062d0 <sync_window+0x78>
					wsect += fs->fsize;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7858      	ldrb	r0, [r3, #1]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062c2:	2301      	movs	r3, #1
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	f7ff fd77 	bl	8005db8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d8eb      	bhi.n	80062ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d01b      	beq.n	8006330 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ffad 	bl	8006258 <sync_window>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d113      	bne.n	8006330 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	7858      	ldrb	r0, [r3, #1]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006312:	2301      	movs	r3, #1
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	f7ff fd2f 	bl	8005d78 <disk_read>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006320:	f04f 33ff 	mov.w	r3, #4294967295
 8006324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	3b02      	subs	r3, #2
 8006348:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	3b02      	subs	r3, #2
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d301      	bcc.n	800635a <clust2sect+0x20>
 8006356:	2300      	movs	r3, #0
 8006358:	e008      	b.n	800636c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	461a      	mov	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	fb03 f202 	mul.w	r2, r3, r2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	4413      	add	r3, r2
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d904      	bls.n	8006398 <get_fat+0x20>
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d302      	bcc.n	800639e <get_fat+0x26>
		val = 1;	/* Internal error */
 8006398:	2301      	movs	r3, #1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e08f      	b.n	80064be <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d062      	beq.n	8006472 <get_fat+0xfa>
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	dc7c      	bgt.n	80064aa <get_fat+0x132>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d002      	beq.n	80063ba <get_fat+0x42>
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d042      	beq.n	800643e <get_fat+0xc6>
 80063b8:	e077      	b.n	80064aa <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	0a5b      	lsrs	r3, r3, #9
 80063d0:	4413      	add	r3, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	6938      	ldr	r0, [r7, #16]
 80063d6:	f7ff ff83 	bl	80062e0 <move_window>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d167      	bne.n	80064b0 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	60fa      	str	r2, [r7, #12]
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	0a5b      	lsrs	r3, r3, #9
 80063fc:	4413      	add	r3, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	6938      	ldr	r0, [r7, #16]
 8006402:	f7ff ff6d 	bl	80062e0 <move_window>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d153      	bne.n	80064b4 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	461a      	mov	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <get_fat+0xbc>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	e002      	b.n	800643a <get_fat+0xc2>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643a:	617b      	str	r3, [r7, #20]
			break;
 800643c:	e03f      	b.n	80064be <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	4413      	add	r3, r2
 8006448:	4619      	mov	r1, r3
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f7ff ff48 	bl	80062e0 <move_window>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d130      	bne.n	80064b8 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fcc6 	bl	8005df8 <ld_word>
 800646c:	4603      	mov	r3, r0
 800646e:	617b      	str	r3, [r7, #20]
			break;
 8006470:	e025      	b.n	80064be <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	09db      	lsrs	r3, r3, #7
 800647a:	4413      	add	r3, r2
 800647c:	4619      	mov	r1, r3
 800647e:	6938      	ldr	r0, [r7, #16]
 8006480:	f7ff ff2e 	bl	80062e0 <move_window>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d118      	bne.n	80064bc <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006498:	4413      	add	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fcc4 	bl	8005e28 <ld_dword>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064a6:	617b      	str	r3, [r7, #20]
			break;
 80064a8:	e009      	b.n	80064be <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80064aa:	2301      	movs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e006      	b.n	80064be <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b0:	bf00      	nop
 80064b2:	e004      	b.n	80064be <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b4:	bf00      	nop
 80064b6:	e002      	b.n	80064be <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064bc:	bf00      	nop
		}
	}

	return val;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80064d4:	2302      	movs	r3, #2
 80064d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f240 80d2 	bls.w	8006684 <put_fat+0x1bc>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 80cc 	bcs.w	8006684 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	f000 8096 	beq.w	8006622 <put_fat+0x15a>
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	f300 80cd 	bgt.w	8006696 <put_fat+0x1ce>
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d002      	beq.n	8006506 <put_fat+0x3e>
 8006500:	2b02      	cmp	r3, #2
 8006502:	d06e      	beq.n	80065e2 <put_fat+0x11a>
 8006504:	e0c7      	b.n	8006696 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	0a5b      	lsrs	r3, r3, #9
 800651c:	4413      	add	r3, r2
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fedd 	bl	80062e0 <move_window>
 8006526:	4603      	mov	r3, r0
 8006528:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 80ab 	bne.w	8006688 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	61b9      	str	r1, [r7, #24]
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	4413      	add	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <put_fat+0xa4>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b25b      	sxtb	r3, r3
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	b25a      	sxtb	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	b25b      	sxtb	r3, r3
 8006564:	4313      	orrs	r3, r2
 8006566:	b25b      	sxtb	r3, r3
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e001      	b.n	8006570 <put_fat+0xa8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	4413      	add	r3, r2
 8006584:	4619      	mov	r1, r3
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff feaa 	bl	80062e0 <move_window>
 800658c:	4603      	mov	r3, r0
 800658e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d17a      	bne.n	800668c <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	4413      	add	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <put_fat+0xf0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e00e      	b.n	80065d6 <put_fat+0x10e>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	f023 030f 	bic.w	r3, r3, #15
 80065c2:	b25a      	sxtb	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0a1b      	lsrs	r3, r3, #8
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b25b      	sxtb	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	70da      	strb	r2, [r3, #3]
			break;
 80065e0:	e059      	b.n	8006696 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	4413      	add	r3, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff fe76 	bl	80062e0 <move_window>
 80065f4:	4603      	mov	r3, r0
 80065f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065f8:	7ffb      	ldrb	r3, [r7, #31]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d148      	bne.n	8006690 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800660c:	4413      	add	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	b292      	uxth	r2, r2
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fc2a 	bl	8005e6e <st_word>
			fs->wflag = 1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	70da      	strb	r2, [r3, #3]
			break;
 8006620:	e039      	b.n	8006696 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	09db      	lsrs	r3, r3, #7
 800662a:	4413      	add	r3, r2
 800662c:	4619      	mov	r1, r3
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fe56 	bl	80062e0 <move_window>
 8006634:	4603      	mov	r3, r0
 8006636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006638:	7ffb      	ldrb	r3, [r7, #31]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d12a      	bne.n	8006694 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006652:	4413      	add	r3, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fbe7 	bl	8005e28 <ld_dword>
 800665a:	4603      	mov	r3, r0
 800665c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006660:	4323      	orrs	r3, r4
 8006662:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006672:	4413      	add	r3, r2
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fc14 	bl	8005ea4 <st_dword>
			fs->wflag = 1;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	70da      	strb	r2, [r3, #3]
			break;
 8006682:	e008      	b.n	8006696 <put_fat+0x1ce>
		}
	}
 8006684:	bf00      	nop
 8006686:	e006      	b.n	8006696 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006688:	bf00      	nop
 800668a:	e004      	b.n	8006696 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800668c:	bf00      	nop
 800668e:	e002      	b.n	8006696 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006694:	bf00      	nop
	return res;
 8006696:	7ffb      	ldrb	r3, [r7, #31]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3724      	adds	r7, #36	; 0x24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd90      	pop	{r4, r7, pc}

080066a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d904      	bls.n	80066c6 <remove_chain+0x26>
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d301      	bcc.n	80066ca <remove_chain+0x2a>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e04b      	b.n	8006762 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	69b8      	ldr	r0, [r7, #24]
 80066d8:	f7ff fef6 	bl	80064c8 <put_fat>
 80066dc:	4603      	mov	r3, r0
 80066de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80066e0:	7ffb      	ldrb	r3, [r7, #31]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <remove_chain+0x4a>
 80066e6:	7ffb      	ldrb	r3, [r7, #31]
 80066e8:	e03b      	b.n	8006762 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fe43 	bl	8006378 <get_fat>
 80066f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d031      	beq.n	800675e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <remove_chain+0x64>
 8006700:	2302      	movs	r3, #2
 8006702:	e02e      	b.n	8006762 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d101      	bne.n	8006710 <remove_chain+0x70>
 800670c:	2301      	movs	r3, #1
 800670e:	e028      	b.n	8006762 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006710:	2200      	movs	r2, #0
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	69b8      	ldr	r0, [r7, #24]
 8006716:	f7ff fed7 	bl	80064c8 <put_fat>
 800671a:	4603      	mov	r3, r0
 800671c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800671e:	7ffb      	ldrb	r3, [r7, #31]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <remove_chain+0x88>
 8006724:	7ffb      	ldrb	r3, [r7, #31]
 8006726:	e01c      	b.n	8006762 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	3b02      	subs	r3, #2
 8006732:	429a      	cmp	r2, r3
 8006734:	d20b      	bcs.n	800674e <remove_chain+0xae>
			fs->free_clst++;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	b2da      	uxtb	r2, r3
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d3c6      	bcc.n	80066ea <remove_chain+0x4a>
 800675c:	e000      	b.n	8006760 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800675e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <create_chain+0x2c>
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	429a      	cmp	r2, r3
 8006794:	d31b      	bcc.n	80067ce <create_chain+0x64>
 8006796:	2301      	movs	r3, #1
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e018      	b.n	80067ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fdea 	bl	8006378 <get_fat>
 80067a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d801      	bhi.n	80067b0 <create_chain+0x46>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e070      	b.n	8006892 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d101      	bne.n	80067bc <create_chain+0x52>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e06a      	b.n	8006892 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d201      	bcs.n	80067ca <create_chain+0x60>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	e063      	b.n	8006892 <create_chain+0x128>
		scl = clst;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d307      	bcc.n	80067f2 <create_chain+0x88>
				ncl = 2;
 80067e2:	2302      	movs	r3, #2
 80067e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d901      	bls.n	80067f2 <create_chain+0x88>
 80067ee:	2300      	movs	r3, #0
 80067f0:	e04f      	b.n	8006892 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80067f2:	69f9      	ldr	r1, [r7, #28]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fdbf 	bl	8006378 <get_fat>
 80067fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d003      	beq.n	8006810 <create_chain+0xa6>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d101      	bne.n	8006814 <create_chain+0xaa>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	e03e      	b.n	8006892 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	429a      	cmp	r2, r3
 800681a:	d1da      	bne.n	80067d2 <create_chain+0x68>
 800681c:	2300      	movs	r3, #0
 800681e:	e038      	b.n	8006892 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006820:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	69f9      	ldr	r1, [r7, #28]
 8006828:	6938      	ldr	r0, [r7, #16]
 800682a:	f7ff fe4d 	bl	80064c8 <put_fat>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <create_chain+0xe2>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d006      	beq.n	800684c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6938      	ldr	r0, [r7, #16]
 8006844:	f7ff fe40 	bl	80064c8 <put_fat>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d116      	bne.n	8006880 <create_chain+0x116>
		fs->last_clst = ncl;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	3b02      	subs	r3, #2
 8006862:	429a      	cmp	r2, r3
 8006864:	d804      	bhi.n	8006870 <create_chain+0x106>
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	791b      	ldrb	r3, [r3, #4]
 8006874:	f043 0301 	orr.w	r3, r3, #1
 8006878:	b2da      	uxtb	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	711a      	strb	r2, [r3, #4]
 800687e:	e007      	b.n	8006890 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d102      	bne.n	800688c <create_chain+0x122>
 8006886:	f04f 33ff 	mov.w	r3, #4294967295
 800688a:	e000      	b.n	800688e <create_chain+0x124>
 800688c:	2301      	movs	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006890:	69fb      	ldr	r3, [r7, #28]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	3304      	adds	r3, #4
 80068b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	8952      	ldrh	r2, [r2, #10]
 80068ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80068be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	613a      	str	r2, [r7, #16]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <clmt_clust+0x3a>
 80068d0:	2300      	movs	r3, #0
 80068d2:	e010      	b.n	80068f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d307      	bcc.n	80068ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3304      	adds	r3, #4
 80068e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068ea:	e7e9      	b.n	80068c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80068ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	4413      	add	r3, r2
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006918:	d204      	bcs.n	8006924 <dir_sdi+0x22>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006924:	2302      	movs	r3, #2
 8006926:	e063      	b.n	80069f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <dir_sdi+0x46>
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d902      	bls.n	8006948 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	8912      	ldrh	r2, [r2, #8]
 8006956:	4293      	cmp	r3, r2
 8006958:	d301      	bcc.n	800695e <dir_sdi+0x5c>
 800695a:	2302      	movs	r3, #2
 800695c:	e048      	b.n	80069f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	61da      	str	r2, [r3, #28]
 8006966:	e029      	b.n	80069bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	895b      	ldrh	r3, [r3, #10]
 800696c:	025b      	lsls	r3, r3, #9
 800696e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006970:	e019      	b.n	80069a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fcfe 	bl	8006378 <get_fat>
 800697c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d101      	bne.n	800698a <dir_sdi+0x88>
 8006986:	2301      	movs	r3, #1
 8006988:	e032      	b.n	80069f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d904      	bls.n	800699a <dir_sdi+0x98>
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	429a      	cmp	r2, r3
 8006998:	d301      	bcc.n	800699e <dir_sdi+0x9c>
 800699a:	2302      	movs	r3, #2
 800699c:	e028      	b.n	80069f0 <dir_sdi+0xee>
			ofs -= csz;
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d2e1      	bcs.n	8006972 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	6938      	ldr	r0, [r7, #16]
 80069b2:	f7ff fcc2 	bl	800633a <clust2sect>
 80069b6:	4602      	mov	r2, r0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <dir_sdi+0xcc>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e010      	b.n	80069f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	0a5b      	lsrs	r3, r3, #9
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	441a      	add	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	3320      	adds	r3, #32
 8006a0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <dir_next+0x28>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a1e:	d301      	bcc.n	8006a24 <dir_next+0x2c>
 8006a20:	2304      	movs	r3, #4
 8006a22:	e0aa      	b.n	8006b7a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 8098 	bne.w	8006b60 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	8912      	ldrh	r2, [r2, #8]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	f0c0 8088 	bcc.w	8006b60 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	61da      	str	r2, [r3, #28]
 8006a56:	2304      	movs	r3, #4
 8006a58:	e08f      	b.n	8006b7a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	0a5b      	lsrs	r3, r3, #9
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	8952      	ldrh	r2, [r2, #10]
 8006a62:	3a01      	subs	r2, #1
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d17a      	bne.n	8006b60 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7ff fc80 	bl	8006378 <get_fat>
 8006a78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d801      	bhi.n	8006a84 <dir_next+0x8c>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e07a      	b.n	8006b7a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d101      	bne.n	8006a90 <dir_next+0x98>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e074      	b.n	8006b7a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d358      	bcc.n	8006b4c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	61da      	str	r2, [r3, #28]
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	e067      	b.n	8006b7a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7ff fe59 	bl	800676a <create_chain>
 8006ab8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <dir_next+0xcc>
 8006ac0:	2307      	movs	r3, #7
 8006ac2:	e05a      	b.n	8006b7a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <dir_next+0xd6>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e055      	b.n	8006b7a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d101      	bne.n	8006ada <dir_next+0xe2>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e04f      	b.n	8006b7a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fbbc 	bl	8006258 <sync_window>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <dir_next+0xf2>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e047      	b.n	8006b7a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3334      	adds	r3, #52	; 0x34
 8006aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fa22 	bl	8005f3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fc1a 	bl	800633a <clust2sect>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b0c:	e012      	b.n	8006b34 <dir_next+0x13c>
						fs->wflag = 1;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fb9f 	bl	8006258 <sync_window>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <dir_next+0x12c>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e02a      	b.n	8006b7a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	3301      	adds	r3, #1
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	895b      	ldrh	r3, [r3, #10]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d3e6      	bcc.n	8006b0e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b52:	6979      	ldr	r1, [r7, #20]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff fbf0 	bl	800633a <clust2sect>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	441a      	add	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b92:	2100      	movs	r1, #0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff feb4 	bl	8006902 <dir_sdi>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d12b      	bne.n	8006bfc <dir_alloc+0x7a>
		n = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4619      	mov	r1, r3
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff fb96 	bl	80062e0 <move_window>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d11d      	bne.n	8006bfa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2be5      	cmp	r3, #229	; 0xe5
 8006bc6:	d004      	beq.n	8006bd2 <dir_alloc+0x50>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d102      	bne.n	8006be6 <dir_alloc+0x64>
 8006be0:	e00c      	b.n	8006bfc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006be6:	2101      	movs	r1, #1
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff05 	bl	80069f8 <dir_next>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0d7      	beq.n	8006ba8 <dir_alloc+0x26>
 8006bf8:	e000      	b.n	8006bfc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006bfa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d101      	bne.n	8006c06 <dir_alloc+0x84>
 8006c02:	2307      	movs	r3, #7
 8006c04:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	331a      	adds	r3, #26
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f8ea 	bl	8005df8 <ld_word>
 8006c24:	4603      	mov	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d109      	bne.n	8006c44 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff f8df 	bl	8005df8 <ld_word>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c44:	68fb      	ldr	r3, [r7, #12]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	331a      	adds	r3, #26
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	b292      	uxth	r2, r2
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff f902 	bl	8005e6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d109      	bne.n	8006c86 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f103 0214 	add.w	r2, r3, #20
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7ff f8f4 	bl	8005e6e <st_word>
	}
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	331a      	adds	r3, #26
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff f8aa 	bl	8005df8 <ld_word>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <cmp_lfn+0x1e>
 8006caa:	2300      	movs	r3, #0
 8006cac:	e059      	b.n	8006d62 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb6:	1e5a      	subs	r2, r3, #1
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	81fb      	strh	r3, [r7, #14]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	e033      	b.n	8006d36 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006cce:	4a27      	ldr	r2, [pc, #156]	; (8006d6c <cmp_lfn+0xdc>)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4413      	add	r3, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff f88b 	bl	8005df8 <ld_word>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006ce6:	89fb      	ldrh	r3, [r7, #14]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01a      	beq.n	8006d22 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2bfe      	cmp	r3, #254	; 0xfe
 8006cf0:	d812      	bhi.n	8006d18 <cmp_lfn+0x88>
 8006cf2:	89bb      	ldrh	r3, [r7, #12]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fec9 	bl	8008a8c <ff_wtoupper>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461c      	mov	r4, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	617a      	str	r2, [r7, #20]
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 febd 	bl	8008a8c <ff_wtoupper>
 8006d12:	4603      	mov	r3, r0
 8006d14:	429c      	cmp	r4, r3
 8006d16:	d001      	beq.n	8006d1c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e022      	b.n	8006d62 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006d1c:	89bb      	ldrh	r3, [r7, #12]
 8006d1e:	81fb      	strh	r3, [r7, #14]
 8006d20:	e006      	b.n	8006d30 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006d22:	89bb      	ldrh	r3, [r7, #12]
 8006d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d001      	beq.n	8006d30 <cmp_lfn+0xa0>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e018      	b.n	8006d62 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	3301      	adds	r3, #1
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d9c8      	bls.n	8006cce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <cmp_lfn+0xd0>
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <cmp_lfn+0xd0>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <cmp_lfn+0xd0>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006d60:	2301      	movs	r3, #1
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	080096b8 	.word	0x080096b8

08006d70 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	331a      	adds	r3, #26
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff f83a 	bl	8005df8 <ld_word>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <pick_lfn+0x1e>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e04d      	b.n	8006e2a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006da4:	2301      	movs	r3, #1
 8006da6:	81fb      	strh	r3, [r7, #14]
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	e028      	b.n	8006e00 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <pick_lfn+0xc4>)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4413      	add	r3, r2
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4413      	add	r3, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff f81b 	bl	8005df8 <ld_word>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006dc6:	89fb      	ldrh	r3, [r7, #14]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00f      	beq.n	8006dec <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2bfe      	cmp	r3, #254	; 0xfe
 8006dd0:	d901      	bls.n	8006dd6 <pick_lfn+0x66>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e029      	b.n	8006e2a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	81fb      	strh	r3, [r7, #14]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	617a      	str	r2, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	89fa      	ldrh	r2, [r7, #14]
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e006      	b.n	8006dfa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006dec:	89bb      	ldrh	r3, [r7, #12]
 8006dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d001      	beq.n	8006dfa <pick_lfn+0x8a>
 8006df6:	2300      	movs	r3, #0
 8006df8:	e017      	b.n	8006e2a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b0c      	cmp	r3, #12
 8006e04:	d9d3      	bls.n	8006dae <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2bfe      	cmp	r3, #254	; 0xfe
 8006e16:	d901      	bls.n	8006e1c <pick_lfn+0xac>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e006      	b.n	8006e2a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	2200      	movs	r2, #0
 8006e26:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006e28:	2301      	movs	r3, #1
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	080096b8 	.word	0x080096b8

08006e38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	460b      	mov	r3, r1
 8006e48:	71fb      	strb	r3, [r7, #7]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	330d      	adds	r3, #13
 8006e52:	79ba      	ldrb	r2, [r7, #6]
 8006e54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	330b      	adds	r3, #11
 8006e5a:	220f      	movs	r2, #15
 8006e5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	330c      	adds	r3, #12
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	331a      	adds	r3, #26
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fffe 	bl	8005e6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	82fb      	strh	r3, [r7, #22]
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006e8a:	8afb      	ldrh	r3, [r7, #22]
 8006e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <put_lfn+0x6c>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	61fa      	str	r2, [r7, #28]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006ea4:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <put_lfn+0xcc>)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	8afa      	ldrh	r2, [r7, #22]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ffd9 	bl	8005e6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ebc:	8afb      	ldrh	r3, [r7, #22]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <put_lfn+0x90>
 8006ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ec6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d9da      	bls.n	8006e8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ed4:	8afb      	ldrh	r3, [r7, #22]
 8006ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d006      	beq.n	8006eec <put_lfn+0xb4>
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <put_lfn+0xbc>
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	79fa      	ldrb	r2, [r7, #7]
 8006ef8:	701a      	strb	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	080096b8 	.word	0x080096b8

08006f08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	; 0x30
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006f16:	220b      	movs	r2, #11
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7fe ffee 	bl	8005efc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d92b      	bls.n	8006f7e <gen_numname+0x76>
		sr = seq;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f2a:	e022      	b.n	8006f72 <gen_numname+0x6a>
			wc = *lfn++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006f36:	2300      	movs	r3, #0
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3a:	e017      	b.n	8006f6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	005a      	lsls	r2, r3, #1
 8006f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	4413      	add	r3, r2
 8006f48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <gen_numname+0x5e>
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f60:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	3301      	adds	r3, #1
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2b0f      	cmp	r3, #15
 8006f70:	d9e4      	bls.n	8006f3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1d8      	bne.n	8006f2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f7e:	2307      	movs	r3, #7
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	3330      	adds	r3, #48	; 0x30
 8006f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f96:	2b39      	cmp	r3, #57	; 0x39
 8006f98:	d904      	bls.n	8006fa4 <gen_numname+0x9c>
 8006f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f9e:	3307      	adds	r3, #7
 8006fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	1e5a      	subs	r2, r3, #1
 8006fa8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006faa:	3330      	adds	r3, #48	; 0x30
 8006fac:	443b      	add	r3, r7
 8006fae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006fb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1df      	bne.n	8006f82 <gen_numname+0x7a>
	ns[i] = '~';
 8006fc2:	f107 0214 	add.w	r2, r7, #20
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	4413      	add	r3, r2
 8006fca:	227e      	movs	r2, #126	; 0x7e
 8006fcc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd2:	e002      	b.n	8006fda <gen_numname+0xd2>
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d205      	bcs.n	8006fee <gen_numname+0xe6>
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	4413      	add	r3, r2
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d1f2      	bne.n	8006fd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	d807      	bhi.n	8007004 <gen_numname+0xfc>
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ffa:	3330      	adds	r3, #48	; 0x30
 8006ffc:	443b      	add	r3, r7
 8006ffe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007002:	e000      	b.n	8007006 <gen_numname+0xfe>
 8007004:	2120      	movs	r1, #32
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	627a      	str	r2, [r7, #36]	; 0x24
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	460a      	mov	r2, r1
 8007012:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b07      	cmp	r3, #7
 8007018:	d9e9      	bls.n	8006fee <gen_numname+0xe6>
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	3730      	adds	r7, #48	; 0x30
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007030:	230b      	movs	r3, #11
 8007032:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	0852      	lsrs	r2, r2, #1
 800703a:	01db      	lsls	r3, r3, #7
 800703c:	4313      	orrs	r3, r2
 800703e:	b2da      	uxtb	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	6079      	str	r1, [r7, #4]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4413      	add	r3, r2
 800704a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3b01      	subs	r3, #1
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1ed      	bne.n	8007034 <sum_sfn+0x10>
	return sum;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b086      	sub	sp, #24
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007070:	2304      	movs	r3, #4
 8007072:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800707a:	23ff      	movs	r3, #255	; 0xff
 800707c:	757b      	strb	r3, [r7, #21]
 800707e:	23ff      	movs	r3, #255	; 0xff
 8007080:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007082:	e081      	b.n	8007188 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4619      	mov	r1, r3
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f7ff f928 	bl	80062e0 <move_window>
 8007090:	4603      	mov	r3, r0
 8007092:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d17c      	bne.n	8007194 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80070a2:	7dbb      	ldrb	r3, [r7, #22]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80070a8:	2304      	movs	r3, #4
 80070aa:	75fb      	strb	r3, [r7, #23]
 80070ac:	e077      	b.n	800719e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	330b      	adds	r3, #11
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ba:	73fb      	strb	r3, [r7, #15]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80070c2:	7dbb      	ldrb	r3, [r7, #22]
 80070c4:	2be5      	cmp	r3, #229	; 0xe5
 80070c6:	d00e      	beq.n	80070e6 <dir_read+0x80>
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	2b2e      	cmp	r3, #46	; 0x2e
 80070cc:	d00b      	beq.n	80070e6 <dir_read+0x80>
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	f023 0320 	bic.w	r3, r3, #32
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d002      	beq.n	80070ec <dir_read+0x86>
				ord = 0xFF;
 80070e6:	23ff      	movs	r3, #255	; 0xff
 80070e8:	757b      	strb	r3, [r7, #21]
 80070ea:	e044      	b.n	8007176 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d12f      	bne.n	8007152 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80070f2:	7dbb      	ldrb	r3, [r7, #22]
 80070f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	7b5b      	ldrb	r3, [r3, #13]
 8007102:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007104:	7dbb      	ldrb	r3, [r7, #22]
 8007106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710a:	75bb      	strb	r3, [r7, #22]
 800710c:	7dbb      	ldrb	r3, [r7, #22]
 800710e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007118:	7dba      	ldrb	r2, [r7, #22]
 800711a:	7d7b      	ldrb	r3, [r7, #21]
 800711c:	429a      	cmp	r2, r3
 800711e:	d115      	bne.n	800714c <dir_read+0xe6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	330d      	adds	r3, #13
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	7d3a      	ldrb	r2, [r7, #20]
 800712a:	429a      	cmp	r2, r3
 800712c:	d10e      	bne.n	800714c <dir_read+0xe6>
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7ff fe19 	bl	8006d70 <pick_lfn>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <dir_read+0xe6>
 8007144:	7d7b      	ldrb	r3, [r7, #21]
 8007146:	3b01      	subs	r3, #1
 8007148:	b2db      	uxtb	r3, r3
 800714a:	e000      	b.n	800714e <dir_read+0xe8>
 800714c:	23ff      	movs	r3, #255	; 0xff
 800714e:	757b      	strb	r3, [r7, #21]
 8007150:	e011      	b.n	8007176 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007152:	7d7b      	ldrb	r3, [r7, #21]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <dir_read+0x106>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff ff61 	bl	8007024 <sum_sfn>
 8007162:	4603      	mov	r3, r0
 8007164:	461a      	mov	r2, r3
 8007166:	7d3b      	ldrb	r3, [r7, #20]
 8007168:	4293      	cmp	r3, r2
 800716a:	d015      	beq.n	8007198 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8007174:	e010      	b.n	8007198 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fc3d 	bl	80069f8 <dir_next>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <dir_read+0x136>
	while (dp->sect) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f af79 	bne.w	8007084 <dir_read+0x1e>
 8007192:	e004      	b.n	800719e <dir_read+0x138>
		if (res != FR_OK) break;
 8007194:	bf00      	nop
 8007196:	e002      	b.n	800719e <dir_read+0x138>
					break;
 8007198:	bf00      	nop
 800719a:	e000      	b.n	800719e <dir_read+0x138>
		if (res != FR_OK) break;
 800719c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <dir_read+0x144>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	61da      	str	r2, [r3, #28]
	return res;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80071c2:	2100      	movs	r1, #0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fb9c 	bl	8006902 <dir_sdi>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <dir_find+0x24>
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	e0a9      	b.n	800732c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071d8:	23ff      	movs	r3, #255	; 0xff
 80071da:	753b      	strb	r3, [r7, #20]
 80071dc:	7d3b      	ldrb	r3, [r7, #20]
 80071de:	757b      	strb	r3, [r7, #21]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f7ff f876 	bl	80062e0 <move_window>
 80071f4:	4603      	mov	r3, r0
 80071f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 8090 	bne.w	8007320 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007208:	7dbb      	ldrb	r3, [r7, #22]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <dir_find+0x60>
 800720e:	2304      	movs	r3, #4
 8007210:	75fb      	strb	r3, [r7, #23]
 8007212:	e08a      	b.n	800732a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	330b      	adds	r3, #11
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007220:	73fb      	strb	r3, [r7, #15]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007228:	7dbb      	ldrb	r3, [r7, #22]
 800722a:	2be5      	cmp	r3, #229	; 0xe5
 800722c:	d007      	beq.n	800723e <dir_find+0x8a>
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <dir_find+0x98>
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b0f      	cmp	r3, #15
 800723c:	d006      	beq.n	800724c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800723e:	23ff      	movs	r3, #255	; 0xff
 8007240:	757b      	strb	r3, [r7, #21]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
 800724a:	e05e      	b.n	800730a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b0f      	cmp	r3, #15
 8007250:	d136      	bne.n	80072c0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d154      	bne.n	800730a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007260:	7dbb      	ldrb	r3, [r7, #22]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	7b5b      	ldrb	r3, [r3, #13]
 8007270:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007272:	7dbb      	ldrb	r3, [r7, #22]
 8007274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007278:	75bb      	strb	r3, [r7, #22]
 800727a:	7dbb      	ldrb	r3, [r7, #22]
 800727c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007286:	7dba      	ldrb	r2, [r7, #22]
 8007288:	7d7b      	ldrb	r3, [r7, #21]
 800728a:	429a      	cmp	r2, r3
 800728c:	d115      	bne.n	80072ba <dir_find+0x106>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	330d      	adds	r3, #13
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	7d3a      	ldrb	r2, [r7, #20]
 8007298:	429a      	cmp	r2, r3
 800729a:	d10e      	bne.n	80072ba <dir_find+0x106>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	4619      	mov	r1, r3
 80072a6:	4610      	mov	r0, r2
 80072a8:	f7ff fcf2 	bl	8006c90 <cmp_lfn>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <dir_find+0x106>
 80072b2:	7d7b      	ldrb	r3, [r7, #21]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	e000      	b.n	80072bc <dir_find+0x108>
 80072ba:	23ff      	movs	r3, #255	; 0xff
 80072bc:	757b      	strb	r3, [r7, #21]
 80072be:	e024      	b.n	800730a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072c0:	7d7b      	ldrb	r3, [r7, #21]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <dir_find+0x126>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff feaa 	bl	8007024 <sum_sfn>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	7d3b      	ldrb	r3, [r7, #20]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d024      	beq.n	8007324 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <dir_find+0x14a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a18      	ldr	r0, [r3, #32]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	220b      	movs	r2, #11
 80072f2:	4619      	mov	r1, r3
 80072f4:	f7fe fe3e 	bl	8005f74 <mem_cmp>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d014      	beq.n	8007328 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072fe:	23ff      	movs	r3, #255	; 0xff
 8007300:	757b      	strb	r3, [r7, #21]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800730a:	2100      	movs	r1, #0
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fb73 	bl	80069f8 <dir_next>
 8007312:	4603      	mov	r3, r0
 8007314:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f43f af65 	beq.w	80071e8 <dir_find+0x34>
 800731e:	e004      	b.n	800732a <dir_find+0x176>
		if (res != FR_OK) break;
 8007320:	bf00      	nop
 8007322:	e002      	b.n	800732a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007324:	bf00      	nop
 8007326:	e000      	b.n	800732a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007328:	bf00      	nop

	return res;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007348:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <dir_register+0x20>
 8007350:	2306      	movs	r3, #6
 8007352:	e0e0      	b.n	8007516 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	e002      	b.n	8007360 <dir_register+0x2c>
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	3301      	adds	r3, #1
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1f4      	bne.n	800735a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	220c      	movs	r2, #12
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fdbd 	bl	8005efc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d032      	beq.n	80073f2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007394:	2301      	movs	r3, #1
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
 8007398:	e016      	b.n	80073c8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	f107 010c 	add.w	r1, r7, #12
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f7ff fdad 	bl	8006f08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff ff00 	bl	80071b4 <dir_find>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80073ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	3301      	adds	r3, #1
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	2b63      	cmp	r3, #99	; 0x63
 80073cc:	d9e5      	bls.n	800739a <dir_register+0x66>
 80073ce:	e000      	b.n	80073d2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80073d0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2b64      	cmp	r3, #100	; 0x64
 80073d6:	d101      	bne.n	80073dc <dir_register+0xa8>
 80073d8:	2307      	movs	r3, #7
 80073da:	e09c      	b.n	8007516 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80073dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d002      	beq.n	80073ea <dir_register+0xb6>
 80073e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e8:	e095      	b.n	8007516 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80073ea:	7dfa      	ldrb	r2, [r7, #23]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <dir_register+0xd8>
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	330c      	adds	r3, #12
 8007400:	4a47      	ldr	r2, [pc, #284]	; (8007520 <dir_register+0x1ec>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	3301      	adds	r3, #1
 800740a:	e000      	b.n	800740e <dir_register+0xda>
 800740c:	2301      	movs	r3, #1
 800740e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007410:	6a39      	ldr	r1, [r7, #32]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fbb5 	bl	8006b82 <dir_alloc>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800741e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d148      	bne.n	80074b8 <dir_register+0x184>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	3b01      	subs	r3, #1
 800742a:	623b      	str	r3, [r7, #32]
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d042      	beq.n	80074b8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	015b      	lsls	r3, r3, #5
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fa5f 	bl	8006902 <dir_sdi>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800744a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800744e:	2b00      	cmp	r3, #0
 8007450:	d132      	bne.n	80074b8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fde4 	bl	8007024 <sum_sfn>
 800745c:	4603      	mov	r3, r0
 800745e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	4619      	mov	r1, r3
 8007466:	69f8      	ldr	r0, [r7, #28]
 8007468:	f7fe ff3a 	bl	80062e0 <move_window>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007476:	2b00      	cmp	r3, #0
 8007478:	d11d      	bne.n	80074b6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	68d8      	ldr	r0, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a19      	ldr	r1, [r3, #32]
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	b2da      	uxtb	r2, r3
 8007486:	7efb      	ldrb	r3, [r7, #27]
 8007488:	f7ff fcd6 	bl	8006e38 <put_lfn>
				fs->wflag = 1;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2201      	movs	r2, #1
 8007490:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff faaf 	bl	80069f8 <dir_next>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80074a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <dir_register+0x184>
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	623b      	str	r3, [r7, #32]
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1d5      	bne.n	8007460 <dir_register+0x12c>
 80074b4:	e000      	b.n	80074b8 <dir_register+0x184>
				if (res != FR_OK) break;
 80074b6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d128      	bne.n	8007512 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	4619      	mov	r1, r3
 80074c6:	69f8      	ldr	r0, [r7, #28]
 80074c8:	f7fe ff0a 	bl	80062e0 <move_window>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80074d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d11b      	bne.n	8007512 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	2220      	movs	r2, #32
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fd2b 	bl	8005f3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a18      	ldr	r0, [r3, #32]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3324      	adds	r3, #36	; 0x24
 80074f0:	220b      	movs	r2, #11
 80074f2:	4619      	mov	r1, r3
 80074f4:	f7fe fd02 	bl	8005efc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	330c      	adds	r3, #12
 8007504:	f002 0218 	and.w	r2, r2, #24
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2201      	movs	r2, #1
 8007510:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007516:	4618      	mov	r0, r3
 8007518:	3730      	adds	r7, #48	; 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	4ec4ec4f 	.word	0x4ec4ec4f

08007524 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80c9 	beq.w	80076d6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d032      	beq.n	80075b4 <get_fileinfo+0x90>
			i = j = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007556:	e01b      	b.n	8007590 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fa59 	bl	8008a14 <ff_convert>
 8007562:	4603      	mov	r3, r0
 8007564:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007566:	89fb      	ldrh	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d102      	bne.n	8007572 <get_fileinfo+0x4e>
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e01a      	b.n	80075a8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2bfe      	cmp	r3, #254	; 0xfe
 8007576:	d902      	bls.n	800757e <get_fileinfo+0x5a>
 8007578:	2300      	movs	r3, #0
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	e014      	b.n	80075a8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	61fa      	str	r2, [r7, #28]
 8007584:	89fa      	ldrh	r2, [r7, #14]
 8007586:	b2d1      	uxtb	r1, r2
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	4413      	add	r3, r2
 800758c:	460a      	mov	r2, r1
 800758e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	1c59      	adds	r1, r3, #1
 8007598:	61b9      	str	r1, [r7, #24]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	81fb      	strh	r3, [r7, #14]
 80075a2:	89fb      	ldrh	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1d7      	bne.n	8007558 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	3316      	adds	r3, #22
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	3316      	adds	r3, #22
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80075c8:	e04c      	b.n	8007664 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1a      	ldr	r2, [r3, #32]
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	1c59      	adds	r1, r3, #1
 80075d2:	61f9      	str	r1, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d100      	bne.n	80075e2 <get_fileinfo+0xbe>
 80075e0:	e040      	b.n	8007664 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b05      	cmp	r3, #5
 80075e6:	d101      	bne.n	80075ec <get_fileinfo+0xc8>
 80075e8:	23e5      	movs	r3, #229	; 0xe5
 80075ea:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d10f      	bne.n	8007612 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80075f2:	89bb      	ldrh	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <get_fileinfo+0xe0>
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4413      	add	r3, r2
 80075fe:	3316      	adds	r3, #22
 8007600:	222e      	movs	r2, #46	; 0x2e
 8007602:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	61ba      	str	r2, [r7, #24]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4413      	add	r3, r2
 800760e:	222e      	movs	r2, #46	; 0x2e
 8007610:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4413      	add	r3, r2
 8007618:	3309      	adds	r3, #9
 800761a:	7dfa      	ldrb	r2, [r7, #23]
 800761c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800761e:	89bb      	ldrh	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11c      	bne.n	800765e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d913      	bls.n	8007652 <get_fileinfo+0x12e>
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b5a      	cmp	r3, #90	; 0x5a
 800762e:	d810      	bhi.n	8007652 <get_fileinfo+0x12e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	330c      	adds	r3, #12
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b08      	cmp	r3, #8
 800763e:	d901      	bls.n	8007644 <get_fileinfo+0x120>
 8007640:	2310      	movs	r3, #16
 8007642:	e000      	b.n	8007646 <get_fileinfo+0x122>
 8007644:	2308      	movs	r3, #8
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	3320      	adds	r3, #32
 8007650:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	4413      	add	r3, r2
 8007658:	3316      	adds	r3, #22
 800765a:	7dfa      	ldrb	r2, [r7, #23]
 800765c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	3301      	adds	r3, #1
 8007662:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b0a      	cmp	r3, #10
 8007668:	d9af      	bls.n	80075ca <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800766a:	89bb      	ldrh	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10d      	bne.n	800768c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4413      	add	r3, r2
 8007676:	3316      	adds	r3, #22
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	330c      	adds	r3, #12
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <get_fileinfo+0x168>
 8007688:	2300      	movs	r3, #0
 800768a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	4413      	add	r3, r2
 8007692:	3309      	adds	r3, #9
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	7ada      	ldrb	r2, [r3, #11]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	331c      	adds	r3, #28
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe fbbd 	bl	8005e28 <ld_dword>
 80076ae:	4602      	mov	r2, r0
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	3316      	adds	r3, #22
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe fbb4 	bl	8005e28 <ld_dword>
 80076c0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	80da      	strh	r2, [r3, #6]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	809a      	strh	r2, [r3, #4]
 80076d4:	e000      	b.n	80076d8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076d6:	bf00      	nop
}
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	61ba      	str	r2, [r7, #24]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4413      	add	r3, r2
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800770e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007710:	2b1f      	cmp	r3, #31
 8007712:	d940      	bls.n	8007796 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007716:	2b2f      	cmp	r3, #47	; 0x2f
 8007718:	d006      	beq.n	8007728 <create_name+0x48>
 800771a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800771c:	2b5c      	cmp	r3, #92	; 0x5c
 800771e:	d110      	bne.n	8007742 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007720:	e002      	b.n	8007728 <create_name+0x48>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	3301      	adds	r3, #1
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b2f      	cmp	r3, #47	; 0x2f
 8007732:	d0f6      	beq.n	8007722 <create_name+0x42>
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	4413      	add	r3, r2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b5c      	cmp	r3, #92	; 0x5c
 800773e:	d0f0      	beq.n	8007722 <create_name+0x42>
			break;
 8007740:	e02a      	b.n	8007798 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2bfe      	cmp	r3, #254	; 0xfe
 8007746:	d901      	bls.n	800774c <create_name+0x6c>
 8007748:	2306      	movs	r3, #6
 800774a:	e17d      	b.n	8007a48 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800774c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800774e:	b2db      	uxtb	r3, r3
 8007750:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007754:	2101      	movs	r1, #1
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f95c 	bl	8008a14 <ff_convert>
 800775c:	4603      	mov	r3, r0
 800775e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <create_name+0x8a>
 8007766:	2306      	movs	r3, #6
 8007768:	e16e      	b.n	8007a48 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800776a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776c:	2b7f      	cmp	r3, #127	; 0x7f
 800776e:	d809      	bhi.n	8007784 <create_name+0xa4>
 8007770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007772:	4619      	mov	r1, r3
 8007774:	488d      	ldr	r0, [pc, #564]	; (80079ac <create_name+0x2cc>)
 8007776:	f7fe fc24 	bl	8005fc2 <chk_chr>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <create_name+0xa4>
 8007780:	2306      	movs	r3, #6
 8007782:	e161      	b.n	8007a48 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	617a      	str	r2, [r7, #20]
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007792:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007794:	e7b4      	b.n	8007700 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007796:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	441a      	add	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a4:	2b1f      	cmp	r3, #31
 80077a6:	d801      	bhi.n	80077ac <create_name+0xcc>
 80077a8:	2304      	movs	r3, #4
 80077aa:	e000      	b.n	80077ae <create_name+0xce>
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077b2:	e011      	b.n	80077d8 <create_name+0xf8>
		w = lfn[di - 1];
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077ba:	3b01      	subs	r3, #1
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80077c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d002      	beq.n	80077d2 <create_name+0xf2>
 80077cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ce:	2b2e      	cmp	r3, #46	; 0x2e
 80077d0:	d106      	bne.n	80077e0 <create_name+0x100>
		di--;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1ea      	bne.n	80077b4 <create_name+0xd4>
 80077de:	e000      	b.n	80077e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80077e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	2200      	movs	r2, #0
 80077ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <create_name+0x118>
 80077f4:	2306      	movs	r3, #6
 80077f6:	e127      	b.n	8007a48 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	220b      	movs	r2, #11
 80077fe:	2120      	movs	r1, #32
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fb9c 	bl	8005f3e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e002      	b.n	8007812 <create_name+0x132>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	3301      	adds	r3, #1
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	2b20      	cmp	r3, #32
 800781e:	d0f5      	beq.n	800780c <create_name+0x12c>
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	2b2e      	cmp	r3, #46	; 0x2e
 800782c:	d0ee      	beq.n	800780c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <create_name+0x168>
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007838:	f043 0303 	orr.w	r3, r3, #3
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007840:	e002      	b.n	8007848 <create_name+0x168>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3b01      	subs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <create_name+0x182>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007854:	3b01      	subs	r3, #1
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b2e      	cmp	r3, #46	; 0x2e
 8007860:	d1ef      	bne.n	8007842 <create_name+0x162>

	i = b = 0; ni = 8;
 8007862:	2300      	movs	r3, #0
 8007864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007868:	2300      	movs	r3, #0
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	2308      	movs	r3, #8
 800786e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	61ba      	str	r2, [r7, #24]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8090 	beq.w	80079a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800788a:	2b20      	cmp	r3, #32
 800788c:	d006      	beq.n	800789c <create_name+0x1bc>
 800788e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d10a      	bne.n	80078aa <create_name+0x1ca>
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	429a      	cmp	r2, r3
 800789a:	d006      	beq.n	80078aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800789c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a0:	f043 0303 	orr.w	r3, r3, #3
 80078a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078a8:	e07d      	b.n	80079a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d203      	bcs.n	80078ba <create_name+0x1da>
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d123      	bne.n	8007902 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2b0b      	cmp	r3, #11
 80078be:	d106      	bne.n	80078ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80078c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078c4:	f043 0303 	orr.w	r3, r3, #3
 80078c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078cc:	e075      	b.n	80079ba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d005      	beq.n	80078e2 <create_name+0x202>
 80078d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078da:	f043 0303 	orr.w	r3, r3, #3
 80078de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d866      	bhi.n	80079b8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	2308      	movs	r3, #8
 80078f0:	623b      	str	r3, [r7, #32]
 80078f2:	230b      	movs	r3, #11
 80078f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80078f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007900:	e051      	b.n	80079a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007904:	2b7f      	cmp	r3, #127	; 0x7f
 8007906:	d914      	bls.n	8007932 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800790a:	2100      	movs	r1, #0
 800790c:	4618      	mov	r0, r3
 800790e:	f001 f881 	bl	8008a14 <ff_convert>
 8007912:	4603      	mov	r3, r0
 8007914:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <create_name+0x246>
 800791c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800791e:	3b80      	subs	r3, #128	; 0x80
 8007920:	4a23      	ldr	r2, [pc, #140]	; (80079b0 <create_name+0x2d0>)
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800792a:	f043 0302 	orr.w	r3, r3, #2
 800792e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <create_name+0x268>
 8007938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800793a:	4619      	mov	r1, r3
 800793c:	481d      	ldr	r0, [pc, #116]	; (80079b4 <create_name+0x2d4>)
 800793e:	f7fe fb40 	bl	8005fc2 <chk_chr>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007948:	235f      	movs	r3, #95	; 0x5f
 800794a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800794c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007950:	f043 0303 	orr.w	r3, r3, #3
 8007954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007958:	e01b      	b.n	8007992 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800795a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d909      	bls.n	8007974 <create_name+0x294>
 8007960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007962:	2b5a      	cmp	r3, #90	; 0x5a
 8007964:	d806      	bhi.n	8007974 <create_name+0x294>
					b |= 2;
 8007966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800796a:	f043 0302 	orr.w	r3, r3, #2
 800796e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007972:	e00e      	b.n	8007992 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007976:	2b60      	cmp	r3, #96	; 0x60
 8007978:	d90b      	bls.n	8007992 <create_name+0x2b2>
 800797a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797c:	2b7a      	cmp	r3, #122	; 0x7a
 800797e:	d808      	bhi.n	8007992 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007984:	f043 0301 	orr.w	r3, r3, #1
 8007988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800798c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798e:	3b20      	subs	r3, #32
 8007990:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	623a      	str	r2, [r7, #32]
 8007998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800799a:	b2d1      	uxtb	r1, r2
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	460a      	mov	r2, r1
 80079a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80079a6:	e763      	b.n	8007870 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80079a8:	bf00      	nop
 80079aa:	e006      	b.n	80079ba <create_name+0x2da>
 80079ac:	080095bc 	.word	0x080095bc
 80079b0:	08009638 	.word	0x08009638
 80079b4:	080095c8 	.word	0x080095c8
			if (si > di) break;			/* No extension */
 80079b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079c0:	2be5      	cmp	r3, #229	; 0xe5
 80079c2:	d103      	bne.n	80079cc <create_name+0x2ec>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2205      	movs	r2, #5
 80079c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	d104      	bne.n	80079dc <create_name+0x2fc>
 80079d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80079dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079e0:	f003 030c 	and.w	r3, r3, #12
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d005      	beq.n	80079f4 <create_name+0x314>
 80079e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d105      	bne.n	8007a00 <create_name+0x320>
 80079f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f8:	f043 0302 	orr.w	r3, r3, #2
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d117      	bne.n	8007a3c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d105      	bne.n	8007a24 <create_name+0x344>
 8007a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a1c:	f043 0310 	orr.w	r3, r3, #16
 8007a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a28:	f003 030c 	and.w	r3, r3, #12
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d105      	bne.n	8007a3c <create_name+0x35c>
 8007a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a34:	f043 0308 	orr.w	r3, r3, #8
 8007a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007a46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3728      	adds	r7, #40	; 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a64:	e002      	b.n	8007a6c <follow_path+0x1c>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b2f      	cmp	r3, #47	; 0x2f
 8007a72:	d0f8      	beq.n	8007a66 <follow_path+0x16>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b5c      	cmp	r3, #92	; 0x5c
 8007a7a:	d0f4      	beq.n	8007a66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b1f      	cmp	r3, #31
 8007a88:	d80a      	bhi.n	8007aa0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2280      	movs	r2, #128	; 0x80
 8007a8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a92:	2100      	movs	r1, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7fe ff34 	bl	8006902 <dir_sdi>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]
 8007a9e:	e043      	b.n	8007b28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fe1b 	bl	80076e0 <create_name>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d134      	bne.n	8007b1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fb7d 	bl	80071b4 <dir_find>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ac4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d127      	bne.n	8007b22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d122      	bne.n	8007b22 <follow_path+0xd2>
 8007adc:	2305      	movs	r3, #5
 8007ade:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ae0:	e01f      	b.n	8007b22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11c      	bne.n	8007b26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	799b      	ldrb	r3, [r3, #6]
 8007af0:	f003 0310 	and.w	r3, r3, #16
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007af8:	2305      	movs	r3, #5
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	e014      	b.n	8007b28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff f87d 	bl	8006c10 <ld_clust>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b1c:	e7c0      	b.n	8007aa0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <follow_path+0xd8>
				break;
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b26:	bf00      	nop
			}
		}
	}

	return res;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b087      	sub	sp, #28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d031      	beq.n	8007bac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	e002      	b.n	8007b56 <get_ldnumber+0x24>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	3301      	adds	r3, #1
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b1f      	cmp	r3, #31
 8007b5c:	d903      	bls.n	8007b66 <get_ldnumber+0x34>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b3a      	cmp	r3, #58	; 0x3a
 8007b64:	d1f4      	bne.n	8007b50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b3a      	cmp	r3, #58	; 0x3a
 8007b6c:	d11c      	bne.n	8007ba8 <get_ldnumber+0x76>
			tp = *path;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	60fa      	str	r2, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	3b30      	subs	r3, #48	; 0x30
 8007b7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d80e      	bhi.n	8007ba4 <get_ldnumber+0x72>
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d10a      	bne.n	8007ba4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <get_ldnumber+0x72>
					vol = (int)i;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	e002      	b.n	8007bae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007bac:	693b      	ldr	r3, [r7, #16]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	70da      	strb	r2, [r3, #3]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fe fb82 	bl	80062e0 <move_window>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <check_fs+0x2a>
 8007be2:	2304      	movs	r3, #4
 8007be4:	e038      	b.n	8007c58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3334      	adds	r3, #52	; 0x34
 8007bea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe f902 	bl	8005df8 <ld_word>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d001      	beq.n	8007c04 <check_fs+0x48>
 8007c00:	2303      	movs	r3, #3
 8007c02:	e029      	b.n	8007c58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c0a:	2be9      	cmp	r3, #233	; 0xe9
 8007c0c:	d009      	beq.n	8007c22 <check_fs+0x66>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c14:	2beb      	cmp	r3, #235	; 0xeb
 8007c16:	d11e      	bne.n	8007c56 <check_fs+0x9a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c1e:	2b90      	cmp	r3, #144	; 0x90
 8007c20:	d119      	bne.n	8007c56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3334      	adds	r3, #52	; 0x34
 8007c26:	3336      	adds	r3, #54	; 0x36
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe f8fd 	bl	8005e28 <ld_dword>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <check_fs+0xa4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <check_fs+0x82>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e00c      	b.n	8007c58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3334      	adds	r3, #52	; 0x34
 8007c42:	3352      	adds	r3, #82	; 0x52
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe f8ef 	bl	8005e28 <ld_dword>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <check_fs+0xa8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d101      	bne.n	8007c56 <check_fs+0x9a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	e000      	b.n	8007c58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c56:	2302      	movs	r3, #2
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	00544146 	.word	0x00544146
 8007c64:	33544146 	.word	0x33544146

08007c68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b096      	sub	sp, #88	; 0x58
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff ff58 	bl	8007b32 <get_ldnumber>
 8007c82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da01      	bge.n	8007c8e <find_volume+0x26>
 8007c8a:	230b      	movs	r3, #11
 8007c8c:	e230      	b.n	80080f0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c8e:	4aa1      	ldr	r2, [pc, #644]	; (8007f14 <find_volume+0x2ac>)
 8007c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <find_volume+0x3a>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	e226      	b.n	80080f0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ca6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01a      	beq.n	8007cee <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe f81b 	bl	8005cf8 <disk_status>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007cc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10c      	bne.n	8007cee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <find_volume+0x82>
 8007cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ce6:	230a      	movs	r3, #10
 8007ce8:	e202      	b.n	80080f0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8007cea:	2300      	movs	r3, #0
 8007cec:	e200      	b.n	80080f0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe f813 	bl	8005d2c <disk_initialize>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e1e9      	b.n	80080f0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <find_volume+0xca>
 8007d22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d2e:	230a      	movs	r3, #10
 8007d30:	e1de      	b.n	80080f0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d3a:	f7ff ff3f 	bl	8007bbc <check_fs>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d149      	bne.n	8007de0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d50:	e01e      	b.n	8007d90 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d60:	4413      	add	r3, r2
 8007d62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	3304      	adds	r3, #4
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d006      	beq.n	8007d7c <find_volume+0x114>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	3308      	adds	r3, #8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe f858 	bl	8005e28 <ld_dword>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	e000      	b.n	8007d7e <find_volume+0x116>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	3358      	adds	r3, #88	; 0x58
 8007d84:	443b      	add	r3, r7
 8007d86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d9dd      	bls.n	8007d52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d96:	2300      	movs	r3, #0
 8007d98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <find_volume+0x13e>
 8007da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da2:	3b01      	subs	r3, #1
 8007da4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	3358      	adds	r3, #88	; 0x58
 8007dac:	443b      	add	r3, r7
 8007dae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007db2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <find_volume+0x15e>
 8007dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dbe:	f7ff fefd 	bl	8007bbc <check_fs>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	e000      	b.n	8007dc8 <find_volume+0x160>
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d905      	bls.n	8007de0 <find_volume+0x178>
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d9e2      	bls.n	8007da6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d101      	bne.n	8007dec <find_volume+0x184>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e181      	b.n	80080f0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d901      	bls.n	8007df8 <find_volume+0x190>
 8007df4:	230d      	movs	r3, #13
 8007df6:	e17b      	b.n	80080f0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	3334      	adds	r3, #52	; 0x34
 8007dfc:	330b      	adds	r3, #11
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd fffa 	bl	8005df8 <ld_word>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0a:	d001      	beq.n	8007e10 <find_volume+0x1a8>
 8007e0c:	230d      	movs	r3, #13
 8007e0e:	e16f      	b.n	80080f0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	3334      	adds	r3, #52	; 0x34
 8007e14:	3316      	adds	r3, #22
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fd ffee 	bl	8005df8 <ld_word>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <find_volume+0x1cc>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	3334      	adds	r3, #52	; 0x34
 8007e2a:	3324      	adds	r3, #36	; 0x24
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fd fffb 	bl	8005e28 <ld_dword>
 8007e32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e38:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	789b      	ldrb	r3, [r3, #2]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d005      	beq.n	8007e58 <find_volume+0x1f0>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d001      	beq.n	8007e58 <find_volume+0x1f0>
 8007e54:	230d      	movs	r3, #13
 8007e56:	e14b      	b.n	80080f0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	895b      	ldrh	r3, [r3, #10]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d008      	beq.n	8007e8c <find_volume+0x224>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	895b      	ldrh	r3, [r3, #10]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	895b      	ldrh	r3, [r3, #10]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	4013      	ands	r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <find_volume+0x228>
 8007e8c:	230d      	movs	r3, #13
 8007e8e:	e12f      	b.n	80080f0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	3334      	adds	r3, #52	; 0x34
 8007e94:	3311      	adds	r3, #17
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fd ffae 	bl	8005df8 <ld_word>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	891b      	ldrh	r3, [r3, #8]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <find_volume+0x24e>
 8007eb2:	230d      	movs	r3, #13
 8007eb4:	e11c      	b.n	80080f0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	3334      	adds	r3, #52	; 0x34
 8007eba:	3313      	adds	r3, #19
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fd ff9b 	bl	8005df8 <ld_word>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <find_volume+0x272>
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	3334      	adds	r3, #52	; 0x34
 8007ed0:	3320      	adds	r3, #32
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fd ffa8 	bl	8005e28 <ld_dword>
 8007ed8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	3334      	adds	r3, #52	; 0x34
 8007ede:	330e      	adds	r3, #14
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fd ff89 	bl	8005df8 <ld_word>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <find_volume+0x28c>
 8007ef0:	230d      	movs	r3, #13
 8007ef2:	e0fd      	b.n	80080f0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ef4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef8:	4413      	add	r3, r2
 8007efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efc:	8912      	ldrh	r2, [r2, #8]
 8007efe:	0912      	lsrs	r2, r2, #4
 8007f00:	b292      	uxth	r2, r2
 8007f02:	4413      	add	r3, r2
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d204      	bcs.n	8007f18 <find_volume+0x2b0>
 8007f0e:	230d      	movs	r3, #13
 8007f10:	e0ee      	b.n	80080f0 <find_volume+0x488>
 8007f12:	bf00      	nop
 8007f14:	200006bc 	.word	0x200006bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f20:	8952      	ldrh	r2, [r2, #10]
 8007f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <find_volume+0x2ca>
 8007f2e:	230d      	movs	r3, #13
 8007f30:	e0de      	b.n	80080f0 <find_volume+0x488>
		fmt = FS_FAT32;
 8007f32:	2303      	movs	r3, #3
 8007f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d802      	bhi.n	8007f48 <find_volume+0x2e0>
 8007f42:	2302      	movs	r3, #2
 8007f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d802      	bhi.n	8007f58 <find_volume+0x2f0>
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f64:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6a:	441a      	add	r2, r3
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007f70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	441a      	add	r2, r3
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d11e      	bne.n	8007fc0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	3334      	adds	r3, #52	; 0x34
 8007f86:	332a      	adds	r3, #42	; 0x2a
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fd ff35 	bl	8005df8 <ld_word>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <find_volume+0x330>
 8007f94:	230d      	movs	r3, #13
 8007f96:	e0ab      	b.n	80080f0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	891b      	ldrh	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <find_volume+0x33c>
 8007fa0:	230d      	movs	r3, #13
 8007fa2:	e0a5      	b.n	80080f0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	3334      	adds	r3, #52	; 0x34
 8007fa8:	332c      	adds	r3, #44	; 0x2c
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fd ff3c 	bl	8005e28 <ld_dword>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007fbe:	e01f      	b.n	8008000 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	891b      	ldrh	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <find_volume+0x364>
 8007fc8:	230d      	movs	r3, #13
 8007fca:	e091      	b.n	80080f0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd2:	441a      	add	r2, r3
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d103      	bne.n	8007fe8 <find_volume+0x380>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	e00a      	b.n	8007ffe <find_volume+0x396>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	4613      	mov	r3, r2
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	4413      	add	r3, r2
 8007ff2:	085a      	lsrs	r2, r3, #1
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008006:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	429a      	cmp	r2, r3
 800800e:	d201      	bcs.n	8008014 <find_volume+0x3ac>
 8008010:	230d      	movs	r3, #13
 8008012:	e06d      	b.n	80080f0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	615a      	str	r2, [r3, #20]
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800802a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800802e:	2b03      	cmp	r3, #3
 8008030:	d149      	bne.n	80080c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	3334      	adds	r3, #52	; 0x34
 8008036:	3330      	adds	r3, #48	; 0x30
 8008038:	4618      	mov	r0, r3
 800803a:	f7fd fedd 	bl	8005df8 <ld_word>
 800803e:	4603      	mov	r3, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	d140      	bne.n	80080c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008046:	3301      	adds	r3, #1
 8008048:	4619      	mov	r1, r3
 800804a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800804c:	f7fe f948 	bl	80062e0 <move_window>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d137      	bne.n	80080c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2200      	movs	r2, #0
 800805a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	3334      	adds	r3, #52	; 0x34
 8008060:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008064:	4618      	mov	r0, r3
 8008066:	f7fd fec7 	bl	8005df8 <ld_word>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008072:	429a      	cmp	r2, r3
 8008074:	d127      	bne.n	80080c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	3334      	adds	r3, #52	; 0x34
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd fed4 	bl	8005e28 <ld_dword>
 8008080:	4603      	mov	r3, r0
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <find_volume+0x490>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d11e      	bne.n	80080c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	3334      	adds	r3, #52	; 0x34
 800808c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd fec9 	bl	8005e28 <ld_dword>
 8008096:	4603      	mov	r3, r0
 8008098:	4a18      	ldr	r2, [pc, #96]	; (80080fc <find_volume+0x494>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d113      	bne.n	80080c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	3334      	adds	r3, #52	; 0x34
 80080a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd febe 	bl	8005e28 <ld_dword>
 80080ac:	4602      	mov	r2, r0
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	3334      	adds	r3, #52	; 0x34
 80080b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fd feb4 	bl	8005e28 <ld_dword>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80080cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <find_volume+0x498>)
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <find_volume+0x498>)
 80080d8:	801a      	strh	r2, [r3, #0]
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <find_volume+0x498>)
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	4a07      	ldr	r2, [pc, #28]	; (8008104 <find_volume+0x49c>)
 80080e6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ea:	f7fe f891 	bl	8006210 <clear_lock>
#endif
	return FR_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3758      	adds	r7, #88	; 0x58
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	41615252 	.word	0x41615252
 80080fc:	61417272 	.word	0x61417272
 8008100:	200006c0 	.word	0x200006c0
 8008104:	200006e4 	.word	0x200006e4

08008108 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008112:	2309      	movs	r3, #9
 8008114:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01c      	beq.n	8008156 <validate+0x4e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d018      	beq.n	8008156 <validate+0x4e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d013      	beq.n	8008156 <validate+0x4e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	889a      	ldrh	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	429a      	cmp	r2, r3
 800813a:	d10c      	bne.n	8008156 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd fdd8 	bl	8005cf8 <disk_status>
 8008148:	4603      	mov	r3, r0
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <validate+0x4e>
			res = FR_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <validate+0x5a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	e000      	b.n	8008164 <validate+0x5c>
 8008162:	2300      	movs	r3, #0
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	6013      	str	r3, [r2, #0]
	return res;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008186:	f107 0310 	add.w	r3, r7, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fcd1 	bl	8007b32 <get_ldnumber>
 8008190:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da01      	bge.n	800819c <f_mount+0x28>
 8008198:	230b      	movs	r3, #11
 800819a:	e02b      	b.n	80081f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800819c:	4a17      	ldr	r2, [pc, #92]	; (80081fc <f_mount+0x88>)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081ac:	69b8      	ldr	r0, [r7, #24]
 80081ae:	f7fe f82f 	bl	8006210 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2200      	movs	r2, #0
 80081b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	490d      	ldr	r1, [pc, #52]	; (80081fc <f_mount+0x88>)
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <f_mount+0x66>
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d001      	beq.n	80081de <f_mount+0x6a>
 80081da:	2300      	movs	r3, #0
 80081dc:	e00a      	b.n	80081f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081de:	f107 010c 	add.w	r1, r7, #12
 80081e2:	f107 0308 	add.w	r3, r7, #8
 80081e6:	2200      	movs	r2, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fd3d 	bl	8007c68 <find_volume>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200006bc 	.word	0x200006bc

08008200 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b09a      	sub	sp, #104	; 0x68
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <f_open+0x18>
 8008214:	2309      	movs	r3, #9
 8008216:	e1ad      	b.n	8008574 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800821e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008220:	79fa      	ldrb	r2, [r7, #7]
 8008222:	f107 0114 	add.w	r1, r7, #20
 8008226:	f107 0308 	add.w	r3, r7, #8
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fd1c 	bl	8007c68 <find_volume>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 8191 	bne.w	8008562 <f_open+0x362>
		dj.obj.fs = fs;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f107 0318 	add.w	r3, r7, #24
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff fbff 	bl	8007a50 <follow_path>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008258:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11a      	bne.n	8008296 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008260:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008264:	b25b      	sxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	da03      	bge.n	8008272 <f_open+0x72>
				res = FR_INVALID_NAME;
 800826a:	2306      	movs	r3, #6
 800826c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008270:	e011      	b.n	8008296 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf14      	ite	ne
 800827c:	2301      	movne	r3, #1
 800827e:	2300      	moveq	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	f107 0318 	add.w	r3, r7, #24
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7fd feb4 	bl	8005ff8 <chk_lock>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	f003 031c 	and.w	r3, r3, #28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d07f      	beq.n	80083a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80082a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d017      	beq.n	80082d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d10e      	bne.n	80082ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082b0:	f7fd fefe 	bl	80060b0 <enq_lock>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <f_open+0xc8>
 80082ba:	f107 0318 	add.w	r3, r7, #24
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff f838 	bl	8007334 <dir_register>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e000      	b.n	80082ca <f_open+0xca>
 80082c8:	2312      	movs	r3, #18
 80082ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	71fb      	strb	r3, [r7, #7]
 80082d6:	e010      	b.n	80082fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082d8:	7fbb      	ldrb	r3, [r7, #30]
 80082da:	f003 0311 	and.w	r3, r3, #17
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <f_open+0xea>
					res = FR_DENIED;
 80082e2:	2307      	movs	r3, #7
 80082e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80082e8:	e007      	b.n	80082fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <f_open+0xfa>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d168      	bne.n	80083d4 <f_open+0x1d4>
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d063      	beq.n	80083d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800830c:	f7fd fac0 	bl	8005890 <get_fattime>
 8008310:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	330e      	adds	r3, #14
 8008316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fdc3 	bl	8005ea4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	3316      	adds	r3, #22
 8008322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008324:	4618      	mov	r0, r3
 8008326:	f7fd fdbd 	bl	8005ea4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	330b      	adds	r3, #11
 800832e:	2220      	movs	r2, #32
 8008330:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fc69 	bl	8006c10 <ld_clust>
 800833e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008344:	2200      	movs	r2, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fc81 	bl	8006c4e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	331c      	adds	r3, #28
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fd fda6 	bl	8005ea4 <st_dword>
					fs->wflag = 1;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2201      	movs	r2, #1
 800835c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800835e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008360:	2b00      	cmp	r3, #0
 8008362:	d037      	beq.n	80083d4 <f_open+0x1d4>
						dw = fs->winsect;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800836a:	f107 0318 	add.w	r3, r7, #24
 800836e:	2200      	movs	r2, #0
 8008370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f994 	bl	80066a0 <remove_chain>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800837e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008382:	2b00      	cmp	r3, #0
 8008384:	d126      	bne.n	80083d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800838a:	4618      	mov	r0, r3
 800838c:	f7fd ffa8 	bl	80062e0 <move_window>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800839a:	3a01      	subs	r2, #1
 800839c:	611a      	str	r2, [r3, #16]
 800839e:	e019      	b.n	80083d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d115      	bne.n	80083d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083a8:	7fbb      	ldrb	r3, [r7, #30]
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80083b2:	2304      	movs	r3, #4
 80083b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083b8:	e00c      	b.n	80083d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <f_open+0x1d4>
 80083c4:	7fbb      	ldrb	r3, [r7, #30]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <f_open+0x1d4>
						res = FR_DENIED;
 80083ce:	2307      	movs	r3, #7
 80083d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80083d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d128      	bne.n	800842e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80083f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	f023 0301 	bic.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fd fe6d 	bl	80060f4 <inc_lock>
 800841a:	4602      	mov	r2, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <f_open+0x22e>
 8008428:	2302      	movs	r3, #2
 800842a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800842e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 8095 	bne.w	8008562 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fbe6 	bl	8006c10 <ld_clust>
 8008444:	4602      	mov	r2, r0
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	331c      	adds	r3, #28
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd fcea 	bl	8005e28 <ld_dword>
 8008454:	4602      	mov	r2, r0
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	88da      	ldrh	r2, [r3, #6]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3330      	adds	r3, #48	; 0x30
 800848a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd fd54 	bl	8005f3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d060      	beq.n	8008562 <f_open+0x362>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05c      	beq.n	8008562 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	025b      	lsls	r3, r3, #9
 80084b6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c4:	e016      	b.n	80084f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd ff54 	bl	8006378 <get_fat>
 80084d0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80084d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d802      	bhi.n	80084de <f_open+0x2de>
 80084d8:	2302      	movs	r3, #2
 80084da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d102      	bne.n	80084ec <f_open+0x2ec>
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <f_open+0x304>
 80084fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008500:	429a      	cmp	r2, r3
 8008502:	d8e0      	bhi.n	80084c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008508:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800850a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800850e:	2b00      	cmp	r3, #0
 8008510:	d127      	bne.n	8008562 <f_open+0x362>
 8008512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008518:	2b00      	cmp	r3, #0
 800851a:	d022      	beq.n	8008562 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd ff0a 	bl	800633a <clust2sect>
 8008526:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <f_open+0x336>
						res = FR_INT_ERR;
 800852e:	2302      	movs	r3, #2
 8008530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008534:	e015      	b.n	8008562 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008538:	0a5a      	lsrs	r2, r3, #9
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	7858      	ldrb	r0, [r3, #1]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	2301      	movs	r3, #1
 8008552:	f7fd fc11 	bl	8005d78 <disk_read>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <f_open+0x362>
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008562:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <f_open+0x370>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008570:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008574:	4618      	mov	r0, r3
 8008576:	3768      	adds	r7, #104	; 0x68
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f107 0214 	add.w	r2, r7, #20
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fdb3 	bl	8008108 <validate>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d107      	bne.n	80085c0 <f_read+0x44>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	7d5b      	ldrb	r3, [r3, #21]
 80085b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80085b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <f_read+0x4a>
 80085c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c4:	e115      	b.n	80087f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	7d1b      	ldrb	r3, [r3, #20]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <f_read+0x5a>
 80085d2:	2307      	movs	r3, #7
 80085d4:	e10d      	b.n	80087f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	f240 80fe 	bls.w	80087e8 <f_read+0x26c>
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80085f0:	e0fa      	b.n	80087e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 80c6 	bne.w	800878c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	0a5b      	lsrs	r3, r3, #9
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	8952      	ldrh	r2, [r2, #10]
 800860a:	3a01      	subs	r2, #1
 800860c:	4013      	ands	r3, r2
 800860e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d12f      	bne.n	8008676 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
 8008624:	e013      	b.n	800864e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7fe f930 	bl	800689a <clmt_clust>
 800863a:	6338      	str	r0, [r7, #48]	; 0x30
 800863c:	e007      	b.n	800864e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f7fd fe96 	bl	8006378 <get_fat>
 800864c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2b01      	cmp	r3, #1
 8008652:	d804      	bhi.n	800865e <f_read+0xe2>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2202      	movs	r2, #2
 8008658:	755a      	strb	r2, [r3, #21]
 800865a:	2302      	movs	r3, #2
 800865c:	e0c9      	b.n	80087f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d104      	bne.n	8008670 <f_read+0xf4>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	755a      	strb	r2, [r3, #21]
 800866c:	2301      	movs	r3, #1
 800866e:	e0c0      	b.n	80087f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008674:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f7fd fe5b 	bl	800633a <clust2sect>
 8008684:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <f_read+0x11a>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2202      	movs	r2, #2
 8008690:	755a      	strb	r2, [r3, #21]
 8008692:	2302      	movs	r3, #2
 8008694:	e0ad      	b.n	80087f2 <f_read+0x276>
			sect += csect;
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	0a5b      	lsrs	r3, r3, #9
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d039      	beq.n	800871e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	4413      	add	r3, r2
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	8952      	ldrh	r2, [r2, #10]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d905      	bls.n	80086c4 <f_read+0x148>
					cc = fs->csize - csect;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	895b      	ldrh	r3, [r3, #10]
 80086bc:	461a      	mov	r2, r3
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	7858      	ldrb	r0, [r3, #1]
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086ce:	f7fd fb53 	bl	8005d78 <disk_read>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <f_read+0x166>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	755a      	strb	r2, [r3, #21]
 80086de:	2301      	movs	r3, #1
 80086e0:	e087      	b.n	80087f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	7d1b      	ldrb	r3, [r3, #20]
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da14      	bge.n	8008716 <f_read+0x19a>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d90d      	bls.n	8008716 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1a      	ldr	r2, [r3, #32]
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	025b      	lsls	r3, r3, #9
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	18d0      	adds	r0, r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3330      	adds	r3, #48	; 0x30
 800870c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008710:	4619      	mov	r1, r3
 8008712:	f7fd fbf3 	bl	8005efc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	025b      	lsls	r3, r3, #9
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800871c:	e050      	b.n	80087c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	429a      	cmp	r2, r3
 8008726:	d02e      	beq.n	8008786 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7d1b      	ldrb	r3, [r3, #20]
 800872c:	b25b      	sxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	da18      	bge.n	8008764 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	7858      	ldrb	r0, [r3, #1]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1a      	ldr	r2, [r3, #32]
 8008740:	2301      	movs	r3, #1
 8008742:	f7fd fb39 	bl	8005db8 <disk_write>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <f_read+0x1da>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	755a      	strb	r2, [r3, #21]
 8008752:	2301      	movs	r3, #1
 8008754:	e04d      	b.n	80087f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	7d1b      	ldrb	r3, [r3, #20]
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	b2da      	uxtb	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	7858      	ldrb	r0, [r3, #1]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800876e:	2301      	movs	r3, #1
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	f7fd fb01 	bl	8005d78 <disk_read>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <f_read+0x20a>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	755a      	strb	r2, [r3, #21]
 8008782:	2301      	movs	r3, #1
 8008784:	e035      	b.n	80087f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800879a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d901      	bls.n	80087a6 <f_read+0x22a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	4413      	add	r3, r2
 80087b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b8:	4619      	mov	r1, r3
 80087ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087bc:	f7fd fb9e 	bl	8005efc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	4413      	add	r3, r2
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	699a      	ldr	r2, [r3, #24]
 80087cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ce:	441a      	add	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	619a      	str	r2, [r3, #24]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	441a      	add	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f47f af01 	bne.w	80085f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3738      	adds	r7, #56	; 0x38
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <f_opendir+0x14>
 800880a:	2309      	movs	r3, #9
 800880c:	e064      	b.n	80088d8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008812:	f107 010c 	add.w	r1, r7, #12
 8008816:	463b      	mov	r3, r7
 8008818:	2200      	movs	r2, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fa24 	bl	8007c68 <find_volume>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d14f      	bne.n	80088ca <f_opendir+0xd0>
		obj->fs = fs;
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff f90b 	bl	8007a50 <follow_path>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d13d      	bne.n	80088c0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800884a:	b25b      	sxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	db12      	blt.n	8008876 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	799b      	ldrb	r3, [r3, #6]
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7fe f9d3 	bl	8006c10 <ld_clust>
 800886a:	4602      	mov	r2, r0
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	e001      	b.n	8008876 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008872:	2305      	movs	r3, #5
 8008874:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d121      	bne.n	80088c0 <f_opendir+0xc6>
				obj->id = fs->id;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88da      	ldrh	r2, [r3, #6]
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008884:	2100      	movs	r1, #0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fe f83b 	bl	8006902 <dir_sdi>
 800888c:	4603      	mov	r3, r0
 800888e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d114      	bne.n	80088c0 <f_opendir+0xc6>
					if (obj->sclust) {
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00d      	beq.n	80088ba <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800889e:	2100      	movs	r1, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fd fc27 	bl	80060f4 <inc_lock>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <f_opendir+0xc6>
 80088b4:	2312      	movs	r3, #18
 80088b6:	75fb      	strb	r3, [r7, #23]
 80088b8:	e002      	b.n	80088c0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2200      	movs	r2, #0
 80088be:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d101      	bne.n	80088ca <f_opendir+0xd0>
 80088c6:	2305      	movs	r3, #5
 80088c8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <f_opendir+0xdc>
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f107 0208 	add.w	r2, r7, #8
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fc08 	bl	8008108 <validate>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d126      	bne.n	8008950 <f_readdir+0x70>
		if (!fno) {
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd fff9 	bl	8006902 <dir_sdi>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e01c      	b.n	8008950 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008916:	2100      	movs	r1, #0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7fe fba4 	bl	8007066 <dir_read>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b04      	cmp	r3, #4
 8008926:	d101      	bne.n	800892c <f_readdir+0x4c>
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10e      	bne.n	8008950 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7fe fdf5 	bl	8007524 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800893a:	2100      	movs	r1, #0
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe f85b 	bl	80069f8 <dir_next>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b04      	cmp	r3, #4
 800894a:	d101      	bne.n	8008950 <f_readdir+0x70>
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008950:	7bfb      	ldrb	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008972:	4b1f      	ldr	r3, [pc, #124]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008974:	7a5b      	ldrb	r3, [r3, #9]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d131      	bne.n	80089e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800897c:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800897e:	7a5b      	ldrb	r3, [r3, #9]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008986:	2100      	movs	r1, #0
 8008988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800898c:	7a5b      	ldrb	r3, [r3, #9]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800899c:	7a5b      	ldrb	r3, [r3, #9]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089a4:	4413      	add	r3, r2
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089ac:	7a5b      	ldrb	r3, [r3, #9]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	b2d1      	uxtb	r1, r2
 80089b4:	4a0e      	ldr	r2, [pc, #56]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089b6:	7251      	strb	r1, [r2, #9]
 80089b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089ba:	7dbb      	ldrb	r3, [r7, #22]
 80089bc:	3330      	adds	r3, #48	; 0x30
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3301      	adds	r3, #1
 80089c8:	223a      	movs	r2, #58	; 0x3a
 80089ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3302      	adds	r3, #2
 80089d0:	222f      	movs	r2, #47	; 0x2f
 80089d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3303      	adds	r3, #3
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	200008e4 	.word	0x200008e4

080089f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089fe:	2200      	movs	r2, #0
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff ffaa 	bl	800895c <FATFS_LinkDriverEx>
 8008a08:	4603      	mov	r3, r0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	2b7f      	cmp	r3, #127	; 0x7f
 8008a24:	d802      	bhi.n	8008a2c <ff_convert+0x18>
		c = chr;
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	81fb      	strh	r3, [r7, #14]
 8008a2a:	e025      	b.n	8008a78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00b      	beq.n	8008a4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	2bff      	cmp	r3, #255	; 0xff
 8008a36:	d805      	bhi.n	8008a44 <ff_convert+0x30>
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	3b80      	subs	r3, #128	; 0x80
 8008a3c:	4a12      	ldr	r2, [pc, #72]	; (8008a88 <ff_convert+0x74>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	e000      	b.n	8008a46 <ff_convert+0x32>
 8008a44:	2300      	movs	r3, #0
 8008a46:	81fb      	strh	r3, [r7, #14]
 8008a48:	e016      	b.n	8008a78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	81fb      	strh	r3, [r7, #14]
 8008a4e:	e009      	b.n	8008a64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	4a0d      	ldr	r2, [pc, #52]	; (8008a88 <ff_convert+0x74>)
 8008a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d006      	beq.n	8008a6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008a5e:	89fb      	ldrh	r3, [r7, #14]
 8008a60:	3301      	adds	r3, #1
 8008a62:	81fb      	strh	r3, [r7, #14]
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	2b7f      	cmp	r3, #127	; 0x7f
 8008a68:	d9f2      	bls.n	8008a50 <ff_convert+0x3c>
 8008a6a:	e000      	b.n	8008a6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008a6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008a6e:	89fb      	ldrh	r3, [r7, #14]
 8008a70:	3380      	adds	r3, #128	; 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008a78:	89fb      	ldrh	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	080096c8 	.word	0x080096c8

08008a8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9c:	d201      	bcs.n	8008aa2 <ff_wtoupper+0x16>
 8008a9e:	4b3e      	ldr	r3, [pc, #248]	; (8008b98 <ff_wtoupper+0x10c>)
 8008aa0:	e000      	b.n	8008aa4 <ff_wtoupper+0x18>
 8008aa2:	4b3e      	ldr	r3, [pc, #248]	; (8008b9c <ff_wtoupper+0x110>)
 8008aa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	1c9a      	adds	r2, r3, #2
 8008aaa:	617a      	str	r2, [r7, #20]
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008ab0:	8a7b      	ldrh	r3, [r7, #18]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d068      	beq.n	8008b88 <ff_wtoupper+0xfc>
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d364      	bcc.n	8008b88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	1c9a      	adds	r2, r3, #2
 8008ac2:	617a      	str	r2, [r7, #20]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	823b      	strh	r3, [r7, #16]
 8008ac8:	8a3b      	ldrh	r3, [r7, #16]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	81fb      	strh	r3, [r7, #14]
 8008ace:	8a3b      	ldrh	r3, [r7, #16]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008ad4:	88fa      	ldrh	r2, [r7, #6]
 8008ad6:	8a79      	ldrh	r1, [r7, #18]
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	440b      	add	r3, r1
 8008adc:	429a      	cmp	r2, r3
 8008ade:	da49      	bge.n	8008b74 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d84f      	bhi.n	8008b86 <ff_wtoupper+0xfa>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <ff_wtoupper+0x60>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b39 	.word	0x08008b39
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b49 	.word	0x08008b49
 8008b00:	08008b51 	.word	0x08008b51
 8008b04:	08008b59 	.word	0x08008b59
 8008b08:	08008b61 	.word	0x08008b61
 8008b0c:	08008b69 	.word	0x08008b69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	8a7b      	ldrh	r3, [r7, #18]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	80fb      	strh	r3, [r7, #6]
 8008b20:	e027      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	8a7b      	ldrh	r3, [r7, #18]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	88fa      	ldrh	r2, [r7, #6]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	80fb      	strh	r3, [r7, #6]
 8008b36:	e01c      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	3b10      	subs	r3, #16
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	e018      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	3b20      	subs	r3, #32
 8008b44:	80fb      	strh	r3, [r7, #6]
 8008b46:	e014      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	3b30      	subs	r3, #48	; 0x30
 8008b4c:	80fb      	strh	r3, [r7, #6]
 8008b4e:	e010      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	3b1a      	subs	r3, #26
 8008b54:	80fb      	strh	r3, [r7, #6]
 8008b56:	e00c      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	e008      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	3b50      	subs	r3, #80	; 0x50
 8008b64:	80fb      	strh	r3, [r7, #6]
 8008b66:	e004      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008b6e:	80fb      	strh	r3, [r7, #6]
 8008b70:	bf00      	nop
			}
			break;
 8008b72:	e008      	b.n	8008b86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008b74:	89fb      	ldrh	r3, [r7, #14]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d195      	bne.n	8008aa6 <ff_wtoupper+0x1a>
 8008b7a:	8a3b      	ldrh	r3, [r7, #16]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008b84:	e78f      	b.n	8008aa6 <ff_wtoupper+0x1a>
			break;
 8008b86:	bf00      	nop
	}

	return chr;
 8008b88:	88fb      	ldrh	r3, [r7, #6]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	080097c8 	.word	0x080097c8
 8008b9c:	080099bc 	.word	0x080099bc

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	2000000c 	.word	0x2000000c

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4d0d      	ldr	r5, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1b64      	subs	r4, r4, r5
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4d0b      	ldr	r5, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 fc8e 	bl	80094e0 <_init>
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2600      	movs	r6, #0
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009ab4 	.word	0x08009ab4
 8008be8:	08009ab4 	.word	0x08009ab4
 8008bec:	08009ab4 	.word	0x08009ab4
 8008bf0:	08009ab8 	.word	0x08009ab8

08008bf4 <memset>:
 8008bf4:	4402      	add	r2, r0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <memset+0xa>
 8008bfc:	4770      	bx	lr
 8008bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008c02:	e7f9      	b.n	8008bf8 <memset+0x4>

08008c04 <siprintf>:
 8008c04:	b40e      	push	{r1, r2, r3}
 8008c06:	b500      	push	{lr}
 8008c08:	b09c      	sub	sp, #112	; 0x70
 8008c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c0c:	9002      	str	r0, [sp, #8]
 8008c0e:	9006      	str	r0, [sp, #24]
 8008c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c14:	4809      	ldr	r0, [pc, #36]	; (8008c3c <siprintf+0x38>)
 8008c16:	9107      	str	r1, [sp, #28]
 8008c18:	9104      	str	r1, [sp, #16]
 8008c1a:	4909      	ldr	r1, [pc, #36]	; (8008c40 <siprintf+0x3c>)
 8008c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c20:	9105      	str	r1, [sp, #20]
 8008c22:	6800      	ldr	r0, [r0, #0]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	a902      	add	r1, sp, #8
 8008c28:	f000 f868 	bl	8008cfc <_svfiprintf_r>
 8008c2c:	9b02      	ldr	r3, [sp, #8]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	b01c      	add	sp, #112	; 0x70
 8008c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c38:	b003      	add	sp, #12
 8008c3a:	4770      	bx	lr
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	ffff0208 	.word	0xffff0208

08008c44 <__ssputs_r>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	688e      	ldr	r6, [r1, #8]
 8008c4a:	429e      	cmp	r6, r3
 8008c4c:	4682      	mov	sl, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	4690      	mov	r8, r2
 8008c52:	461f      	mov	r7, r3
 8008c54:	d838      	bhi.n	8008cc8 <__ssputs_r+0x84>
 8008c56:	898a      	ldrh	r2, [r1, #12]
 8008c58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c5c:	d032      	beq.n	8008cc4 <__ssputs_r+0x80>
 8008c5e:	6825      	ldr	r5, [r4, #0]
 8008c60:	6909      	ldr	r1, [r1, #16]
 8008c62:	eba5 0901 	sub.w	r9, r5, r1
 8008c66:	6965      	ldr	r5, [r4, #20]
 8008c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c70:	3301      	adds	r3, #1
 8008c72:	444b      	add	r3, r9
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	429d      	cmp	r5, r3
 8008c78:	bf38      	it	cc
 8008c7a:	461d      	movcc	r5, r3
 8008c7c:	0553      	lsls	r3, r2, #21
 8008c7e:	d531      	bpl.n	8008ce4 <__ssputs_r+0xa0>
 8008c80:	4629      	mov	r1, r5
 8008c82:	f000 fb63 	bl	800934c <_malloc_r>
 8008c86:	4606      	mov	r6, r0
 8008c88:	b950      	cbnz	r0, 8008ca0 <__ssputs_r+0x5c>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	f8ca 3000 	str.w	r3, [sl]
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca0:	6921      	ldr	r1, [r4, #16]
 8008ca2:	464a      	mov	r2, r9
 8008ca4:	f000 fabe 	bl	8009224 <memcpy>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	6126      	str	r6, [r4, #16]
 8008cb6:	6165      	str	r5, [r4, #20]
 8008cb8:	444e      	add	r6, r9
 8008cba:	eba5 0509 	sub.w	r5, r5, r9
 8008cbe:	6026      	str	r6, [r4, #0]
 8008cc0:	60a5      	str	r5, [r4, #8]
 8008cc2:	463e      	mov	r6, r7
 8008cc4:	42be      	cmp	r6, r7
 8008cc6:	d900      	bls.n	8008cca <__ssputs_r+0x86>
 8008cc8:	463e      	mov	r6, r7
 8008cca:	6820      	ldr	r0, [r4, #0]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4641      	mov	r1, r8
 8008cd0:	f000 fab6 	bl	8009240 <memmove>
 8008cd4:	68a3      	ldr	r3, [r4, #8]
 8008cd6:	1b9b      	subs	r3, r3, r6
 8008cd8:	60a3      	str	r3, [r4, #8]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	4433      	add	r3, r6
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e7db      	b.n	8008c9c <__ssputs_r+0x58>
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	f000 fba5 	bl	8009434 <_realloc_r>
 8008cea:	4606      	mov	r6, r0
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d1e1      	bne.n	8008cb4 <__ssputs_r+0x70>
 8008cf0:	6921      	ldr	r1, [r4, #16]
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	f000 fabe 	bl	8009274 <_free_r>
 8008cf8:	e7c7      	b.n	8008c8a <__ssputs_r+0x46>
	...

08008cfc <_svfiprintf_r>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	4698      	mov	r8, r3
 8008d02:	898b      	ldrh	r3, [r1, #12]
 8008d04:	061b      	lsls	r3, r3, #24
 8008d06:	b09d      	sub	sp, #116	; 0x74
 8008d08:	4607      	mov	r7, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	d50e      	bpl.n	8008d2e <_svfiprintf_r+0x32>
 8008d10:	690b      	ldr	r3, [r1, #16]
 8008d12:	b963      	cbnz	r3, 8008d2e <_svfiprintf_r+0x32>
 8008d14:	2140      	movs	r1, #64	; 0x40
 8008d16:	f000 fb19 	bl	800934c <_malloc_r>
 8008d1a:	6028      	str	r0, [r5, #0]
 8008d1c:	6128      	str	r0, [r5, #16]
 8008d1e:	b920      	cbnz	r0, 8008d2a <_svfiprintf_r+0x2e>
 8008d20:	230c      	movs	r3, #12
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e0d1      	b.n	8008ece <_svfiprintf_r+0x1d2>
 8008d2a:	2340      	movs	r3, #64	; 0x40
 8008d2c:	616b      	str	r3, [r5, #20]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9309      	str	r3, [sp, #36]	; 0x24
 8008d32:	2320      	movs	r3, #32
 8008d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d3c:	2330      	movs	r3, #48	; 0x30
 8008d3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ee8 <_svfiprintf_r+0x1ec>
 8008d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d46:	f04f 0901 	mov.w	r9, #1
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	469a      	mov	sl, r3
 8008d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d52:	b10a      	cbz	r2, 8008d58 <_svfiprintf_r+0x5c>
 8008d54:	2a25      	cmp	r2, #37	; 0x25
 8008d56:	d1f9      	bne.n	8008d4c <_svfiprintf_r+0x50>
 8008d58:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5c:	d00b      	beq.n	8008d76 <_svfiprintf_r+0x7a>
 8008d5e:	465b      	mov	r3, fp
 8008d60:	4622      	mov	r2, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff ff6d 	bl	8008c44 <__ssputs_r>
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f000 80aa 	beq.w	8008ec4 <_svfiprintf_r+0x1c8>
 8008d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d72:	445a      	add	r2, fp
 8008d74:	9209      	str	r2, [sp, #36]	; 0x24
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80a2 	beq.w	8008ec4 <_svfiprintf_r+0x1c8>
 8008d80:	2300      	movs	r3, #0
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8a:	f10a 0a01 	add.w	sl, sl, #1
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d96:	931a      	str	r3, [sp, #104]	; 0x68
 8008d98:	4654      	mov	r4, sl
 8008d9a:	2205      	movs	r2, #5
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	4851      	ldr	r0, [pc, #324]	; (8008ee8 <_svfiprintf_r+0x1ec>)
 8008da2:	f7f7 fa1d 	bl	80001e0 <memchr>
 8008da6:	9a04      	ldr	r2, [sp, #16]
 8008da8:	b9d8      	cbnz	r0, 8008de2 <_svfiprintf_r+0xe6>
 8008daa:	06d0      	lsls	r0, r2, #27
 8008dac:	bf44      	itt	mi
 8008dae:	2320      	movmi	r3, #32
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db4:	0711      	lsls	r1, r2, #28
 8008db6:	bf44      	itt	mi
 8008db8:	232b      	movmi	r3, #43	; 0x2b
 8008dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc4:	d015      	beq.n	8008df2 <_svfiprintf_r+0xf6>
 8008dc6:	9a07      	ldr	r2, [sp, #28]
 8008dc8:	4654      	mov	r4, sl
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f04f 0c0a 	mov.w	ip, #10
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd6:	3b30      	subs	r3, #48	; 0x30
 8008dd8:	2b09      	cmp	r3, #9
 8008dda:	d94e      	bls.n	8008e7a <_svfiprintf_r+0x17e>
 8008ddc:	b1b0      	cbz	r0, 8008e0c <_svfiprintf_r+0x110>
 8008dde:	9207      	str	r2, [sp, #28]
 8008de0:	e014      	b.n	8008e0c <_svfiprintf_r+0x110>
 8008de2:	eba0 0308 	sub.w	r3, r0, r8
 8008de6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dea:	4313      	orrs	r3, r2
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	46a2      	mov	sl, r4
 8008df0:	e7d2      	b.n	8008d98 <_svfiprintf_r+0x9c>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	1d19      	adds	r1, r3, #4
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	9103      	str	r1, [sp, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfbb      	ittet	lt
 8008dfe:	425b      	neglt	r3, r3
 8008e00:	f042 0202 	orrlt.w	r2, r2, #2
 8008e04:	9307      	strge	r3, [sp, #28]
 8008e06:	9307      	strlt	r3, [sp, #28]
 8008e08:	bfb8      	it	lt
 8008e0a:	9204      	strlt	r2, [sp, #16]
 8008e0c:	7823      	ldrb	r3, [r4, #0]
 8008e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e10:	d10c      	bne.n	8008e2c <_svfiprintf_r+0x130>
 8008e12:	7863      	ldrb	r3, [r4, #1]
 8008e14:	2b2a      	cmp	r3, #42	; 0x2a
 8008e16:	d135      	bne.n	8008e84 <_svfiprintf_r+0x188>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	1d1a      	adds	r2, r3, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	9203      	str	r2, [sp, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bfb8      	it	lt
 8008e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e28:	3402      	adds	r4, #2
 8008e2a:	9305      	str	r3, [sp, #20]
 8008e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ef8 <_svfiprintf_r+0x1fc>
 8008e30:	7821      	ldrb	r1, [r4, #0]
 8008e32:	2203      	movs	r2, #3
 8008e34:	4650      	mov	r0, sl
 8008e36:	f7f7 f9d3 	bl	80001e0 <memchr>
 8008e3a:	b140      	cbz	r0, 8008e4e <_svfiprintf_r+0x152>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	eba0 000a 	sub.w	r0, r0, sl
 8008e42:	fa03 f000 	lsl.w	r0, r3, r0
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	4303      	orrs	r3, r0
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e52:	4826      	ldr	r0, [pc, #152]	; (8008eec <_svfiprintf_r+0x1f0>)
 8008e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e58:	2206      	movs	r2, #6
 8008e5a:	f7f7 f9c1 	bl	80001e0 <memchr>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d038      	beq.n	8008ed4 <_svfiprintf_r+0x1d8>
 8008e62:	4b23      	ldr	r3, [pc, #140]	; (8008ef0 <_svfiprintf_r+0x1f4>)
 8008e64:	bb1b      	cbnz	r3, 8008eae <_svfiprintf_r+0x1b2>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	3307      	adds	r3, #7
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	3308      	adds	r3, #8
 8008e70:	9303      	str	r3, [sp, #12]
 8008e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e74:	4433      	add	r3, r6
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	e767      	b.n	8008d4a <_svfiprintf_r+0x4e>
 8008e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7e:	460c      	mov	r4, r1
 8008e80:	2001      	movs	r0, #1
 8008e82:	e7a5      	b.n	8008dd0 <_svfiprintf_r+0xd4>
 8008e84:	2300      	movs	r3, #0
 8008e86:	3401      	adds	r4, #1
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f04f 0c0a 	mov.w	ip, #10
 8008e90:	4620      	mov	r0, r4
 8008e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e96:	3a30      	subs	r2, #48	; 0x30
 8008e98:	2a09      	cmp	r2, #9
 8008e9a:	d903      	bls.n	8008ea4 <_svfiprintf_r+0x1a8>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0c5      	beq.n	8008e2c <_svfiprintf_r+0x130>
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	e7c3      	b.n	8008e2c <_svfiprintf_r+0x130>
 8008ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e7f0      	b.n	8008e90 <_svfiprintf_r+0x194>
 8008eae:	ab03      	add	r3, sp, #12
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <_svfiprintf_r+0x1f8>)
 8008eb6:	a904      	add	r1, sp, #16
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f3af 8000 	nop.w
 8008ebe:	1c42      	adds	r2, r0, #1
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	d1d6      	bne.n	8008e72 <_svfiprintf_r+0x176>
 8008ec4:	89ab      	ldrh	r3, [r5, #12]
 8008ec6:	065b      	lsls	r3, r3, #25
 8008ec8:	f53f af2c 	bmi.w	8008d24 <_svfiprintf_r+0x28>
 8008ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ece:	b01d      	add	sp, #116	; 0x74
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	ab03      	add	r3, sp, #12
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	462a      	mov	r2, r5
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <_svfiprintf_r+0x1f8>)
 8008edc:	a904      	add	r1, sp, #16
 8008ede:	4638      	mov	r0, r7
 8008ee0:	f000 f87a 	bl	8008fd8 <_printf_i>
 8008ee4:	e7eb      	b.n	8008ebe <_svfiprintf_r+0x1c2>
 8008ee6:	bf00      	nop
 8008ee8:	08009a78 	.word	0x08009a78
 8008eec:	08009a82 	.word	0x08009a82
 8008ef0:	00000000 	.word	0x00000000
 8008ef4:	08008c45 	.word	0x08008c45
 8008ef8:	08009a7e 	.word	0x08009a7e

08008efc <_printf_common>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	4616      	mov	r6, r2
 8008f02:	4699      	mov	r9, r3
 8008f04:	688a      	ldr	r2, [r1, #8]
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bfb8      	it	lt
 8008f10:	4613      	movlt	r3, r2
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_printf_common+0x26>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	0699      	lsls	r1, r3, #26
 8008f26:	bf42      	ittt	mi
 8008f28:	6833      	ldrmi	r3, [r6, #0]
 8008f2a:	3302      	addmi	r3, #2
 8008f2c:	6033      	strmi	r3, [r6, #0]
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	f015 0506 	ands.w	r5, r5, #6
 8008f34:	d106      	bne.n	8008f44 <_printf_common+0x48>
 8008f36:	f104 0a19 	add.w	sl, r4, #25
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	6832      	ldr	r2, [r6, #0]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dc26      	bgt.n	8008f92 <_printf_common+0x96>
 8008f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f48:	1e13      	subs	r3, r2, #0
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	0692      	lsls	r2, r2, #26
 8008f52:	d42b      	bmi.n	8008fac <_printf_common+0xb0>
 8008f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d01e      	beq.n	8008fa0 <_printf_common+0xa4>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	68e5      	ldr	r5, [r4, #12]
 8008f66:	6832      	ldr	r2, [r6, #0]
 8008f68:	f003 0306 	and.w	r3, r3, #6
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	bf08      	it	eq
 8008f70:	1aad      	subeq	r5, r5, r2
 8008f72:	68a3      	ldr	r3, [r4, #8]
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	bf0c      	ite	eq
 8008f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f7c:	2500      	movne	r5, #0
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	bfc4      	itt	gt
 8008f82:	1a9b      	subgt	r3, r3, r2
 8008f84:	18ed      	addgt	r5, r5, r3
 8008f86:	2600      	movs	r6, #0
 8008f88:	341a      	adds	r4, #26
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	d11a      	bne.n	8008fc4 <_printf_common+0xc8>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e008      	b.n	8008fa4 <_printf_common+0xa8>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4649      	mov	r1, r9
 8008f98:	4638      	mov	r0, r7
 8008f9a:	47c0      	blx	r8
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d103      	bne.n	8008fa8 <_printf_common+0xac>
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7c6      	b.n	8008f3a <_printf_common+0x3e>
 8008fac:	18e1      	adds	r1, r4, r3
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	2030      	movs	r0, #48	; 0x30
 8008fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fb6:	4422      	add	r2, r4
 8008fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	e7c7      	b.n	8008f54 <_printf_common+0x58>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0e6      	beq.n	8008fa0 <_printf_common+0xa4>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7d9      	b.n	8008f8a <_printf_common+0x8e>
	...

08008fd8 <_printf_i>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	7e0f      	ldrb	r7, [r1, #24]
 8008fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fe0:	2f78      	cmp	r7, #120	; 0x78
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fee:	d807      	bhi.n	8009000 <_printf_i+0x28>
 8008ff0:	2f62      	cmp	r7, #98	; 0x62
 8008ff2:	d80a      	bhi.n	800900a <_printf_i+0x32>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	f000 80d8 	beq.w	80091aa <_printf_i+0x1d2>
 8008ffa:	2f58      	cmp	r7, #88	; 0x58
 8008ffc:	f000 80a3 	beq.w	8009146 <_printf_i+0x16e>
 8009000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009008:	e03a      	b.n	8009080 <_printf_i+0xa8>
 800900a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800900e:	2b15      	cmp	r3, #21
 8009010:	d8f6      	bhi.n	8009000 <_printf_i+0x28>
 8009012:	a101      	add	r1, pc, #4	; (adr r1, 8009018 <_printf_i+0x40>)
 8009014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009018:	08009071 	.word	0x08009071
 800901c:	08009085 	.word	0x08009085
 8009020:	08009001 	.word	0x08009001
 8009024:	08009001 	.word	0x08009001
 8009028:	08009001 	.word	0x08009001
 800902c:	08009001 	.word	0x08009001
 8009030:	08009085 	.word	0x08009085
 8009034:	08009001 	.word	0x08009001
 8009038:	08009001 	.word	0x08009001
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009191 	.word	0x08009191
 8009048:	080090b5 	.word	0x080090b5
 800904c:	08009173 	.word	0x08009173
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	080091b3 	.word	0x080091b3
 800905c:	08009001 	.word	0x08009001
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	0800917b 	.word	0x0800917b
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	602a      	str	r2, [r5, #0]
 8009078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009080:	2301      	movs	r3, #1
 8009082:	e0a3      	b.n	80091cc <_printf_i+0x1f4>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	6829      	ldr	r1, [r5, #0]
 8009088:	0606      	lsls	r6, r0, #24
 800908a:	f101 0304 	add.w	r3, r1, #4
 800908e:	d50a      	bpl.n	80090a6 <_printf_i+0xce>
 8009090:	680e      	ldr	r6, [r1, #0]
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	2e00      	cmp	r6, #0
 8009096:	da03      	bge.n	80090a0 <_printf_i+0xc8>
 8009098:	232d      	movs	r3, #45	; 0x2d
 800909a:	4276      	negs	r6, r6
 800909c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a0:	485e      	ldr	r0, [pc, #376]	; (800921c <_printf_i+0x244>)
 80090a2:	230a      	movs	r3, #10
 80090a4:	e019      	b.n	80090da <_printf_i+0x102>
 80090a6:	680e      	ldr	r6, [r1, #0]
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090ae:	bf18      	it	ne
 80090b0:	b236      	sxthne	r6, r6
 80090b2:	e7ef      	b.n	8009094 <_printf_i+0xbc>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	1d19      	adds	r1, r3, #4
 80090ba:	6029      	str	r1, [r5, #0]
 80090bc:	0601      	lsls	r1, r0, #24
 80090be:	d501      	bpl.n	80090c4 <_printf_i+0xec>
 80090c0:	681e      	ldr	r6, [r3, #0]
 80090c2:	e002      	b.n	80090ca <_printf_i+0xf2>
 80090c4:	0646      	lsls	r6, r0, #25
 80090c6:	d5fb      	bpl.n	80090c0 <_printf_i+0xe8>
 80090c8:	881e      	ldrh	r6, [r3, #0]
 80090ca:	4854      	ldr	r0, [pc, #336]	; (800921c <_printf_i+0x244>)
 80090cc:	2f6f      	cmp	r7, #111	; 0x6f
 80090ce:	bf0c      	ite	eq
 80090d0:	2308      	moveq	r3, #8
 80090d2:	230a      	movne	r3, #10
 80090d4:	2100      	movs	r1, #0
 80090d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090da:	6865      	ldr	r5, [r4, #4]
 80090dc:	60a5      	str	r5, [r4, #8]
 80090de:	2d00      	cmp	r5, #0
 80090e0:	bfa2      	ittt	ge
 80090e2:	6821      	ldrge	r1, [r4, #0]
 80090e4:	f021 0104 	bicge.w	r1, r1, #4
 80090e8:	6021      	strge	r1, [r4, #0]
 80090ea:	b90e      	cbnz	r6, 80090f0 <_printf_i+0x118>
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d04d      	beq.n	800918c <_printf_i+0x1b4>
 80090f0:	4615      	mov	r5, r2
 80090f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80090f6:	fb03 6711 	mls	r7, r3, r1, r6
 80090fa:	5dc7      	ldrb	r7, [r0, r7]
 80090fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009100:	4637      	mov	r7, r6
 8009102:	42bb      	cmp	r3, r7
 8009104:	460e      	mov	r6, r1
 8009106:	d9f4      	bls.n	80090f2 <_printf_i+0x11a>
 8009108:	2b08      	cmp	r3, #8
 800910a:	d10b      	bne.n	8009124 <_printf_i+0x14c>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	07de      	lsls	r6, r3, #31
 8009110:	d508      	bpl.n	8009124 <_printf_i+0x14c>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6861      	ldr	r1, [r4, #4]
 8009116:	4299      	cmp	r1, r3
 8009118:	bfde      	ittt	le
 800911a:	2330      	movle	r3, #48	; 0x30
 800911c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009120:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009124:	1b52      	subs	r2, r2, r5
 8009126:	6122      	str	r2, [r4, #16]
 8009128:	f8cd a000 	str.w	sl, [sp]
 800912c:	464b      	mov	r3, r9
 800912e:	aa03      	add	r2, sp, #12
 8009130:	4621      	mov	r1, r4
 8009132:	4640      	mov	r0, r8
 8009134:	f7ff fee2 	bl	8008efc <_printf_common>
 8009138:	3001      	adds	r0, #1
 800913a:	d14c      	bne.n	80091d6 <_printf_i+0x1fe>
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	b004      	add	sp, #16
 8009142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009146:	4835      	ldr	r0, [pc, #212]	; (800921c <_printf_i+0x244>)
 8009148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800914c:	6829      	ldr	r1, [r5, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f851 6b04 	ldr.w	r6, [r1], #4
 8009154:	6029      	str	r1, [r5, #0]
 8009156:	061d      	lsls	r5, r3, #24
 8009158:	d514      	bpl.n	8009184 <_printf_i+0x1ac>
 800915a:	07df      	lsls	r7, r3, #31
 800915c:	bf44      	itt	mi
 800915e:	f043 0320 	orrmi.w	r3, r3, #32
 8009162:	6023      	strmi	r3, [r4, #0]
 8009164:	b91e      	cbnz	r6, 800916e <_printf_i+0x196>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	f023 0320 	bic.w	r3, r3, #32
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	2310      	movs	r3, #16
 8009170:	e7b0      	b.n	80090d4 <_printf_i+0xfc>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	2378      	movs	r3, #120	; 0x78
 800917c:	4828      	ldr	r0, [pc, #160]	; (8009220 <_printf_i+0x248>)
 800917e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009182:	e7e3      	b.n	800914c <_printf_i+0x174>
 8009184:	0659      	lsls	r1, r3, #25
 8009186:	bf48      	it	mi
 8009188:	b2b6      	uxthmi	r6, r6
 800918a:	e7e6      	b.n	800915a <_printf_i+0x182>
 800918c:	4615      	mov	r5, r2
 800918e:	e7bb      	b.n	8009108 <_printf_i+0x130>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	6826      	ldr	r6, [r4, #0]
 8009194:	6961      	ldr	r1, [r4, #20]
 8009196:	1d18      	adds	r0, r3, #4
 8009198:	6028      	str	r0, [r5, #0]
 800919a:	0635      	lsls	r5, r6, #24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	d501      	bpl.n	80091a4 <_printf_i+0x1cc>
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	e002      	b.n	80091aa <_printf_i+0x1d2>
 80091a4:	0670      	lsls	r0, r6, #25
 80091a6:	d5fb      	bpl.n	80091a0 <_printf_i+0x1c8>
 80091a8:	8019      	strh	r1, [r3, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	4615      	mov	r5, r2
 80091b0:	e7ba      	b.n	8009128 <_printf_i+0x150>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	602a      	str	r2, [r5, #0]
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	2100      	movs	r1, #0
 80091be:	4628      	mov	r0, r5
 80091c0:	f7f7 f80e 	bl	80001e0 <memchr>
 80091c4:	b108      	cbz	r0, 80091ca <_printf_i+0x1f2>
 80091c6:	1b40      	subs	r0, r0, r5
 80091c8:	6060      	str	r0, [r4, #4]
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	2300      	movs	r3, #0
 80091d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091d4:	e7a8      	b.n	8009128 <_printf_i+0x150>
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	462a      	mov	r2, r5
 80091da:	4649      	mov	r1, r9
 80091dc:	4640      	mov	r0, r8
 80091de:	47d0      	blx	sl
 80091e0:	3001      	adds	r0, #1
 80091e2:	d0ab      	beq.n	800913c <_printf_i+0x164>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	079b      	lsls	r3, r3, #30
 80091e8:	d413      	bmi.n	8009212 <_printf_i+0x23a>
 80091ea:	68e0      	ldr	r0, [r4, #12]
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	4298      	cmp	r0, r3
 80091f0:	bfb8      	it	lt
 80091f2:	4618      	movlt	r0, r3
 80091f4:	e7a4      	b.n	8009140 <_printf_i+0x168>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4632      	mov	r2, r6
 80091fa:	4649      	mov	r1, r9
 80091fc:	4640      	mov	r0, r8
 80091fe:	47d0      	blx	sl
 8009200:	3001      	adds	r0, #1
 8009202:	d09b      	beq.n	800913c <_printf_i+0x164>
 8009204:	3501      	adds	r5, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	9903      	ldr	r1, [sp, #12]
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	42ab      	cmp	r3, r5
 800920e:	dcf2      	bgt.n	80091f6 <_printf_i+0x21e>
 8009210:	e7eb      	b.n	80091ea <_printf_i+0x212>
 8009212:	2500      	movs	r5, #0
 8009214:	f104 0619 	add.w	r6, r4, #25
 8009218:	e7f5      	b.n	8009206 <_printf_i+0x22e>
 800921a:	bf00      	nop
 800921c:	08009a89 	.word	0x08009a89
 8009220:	08009a9a 	.word	0x08009a9a

08009224 <memcpy>:
 8009224:	440a      	add	r2, r1
 8009226:	4291      	cmp	r1, r2
 8009228:	f100 33ff 	add.w	r3, r0, #4294967295
 800922c:	d100      	bne.n	8009230 <memcpy+0xc>
 800922e:	4770      	bx	lr
 8009230:	b510      	push	{r4, lr}
 8009232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800923a:	4291      	cmp	r1, r2
 800923c:	d1f9      	bne.n	8009232 <memcpy+0xe>
 800923e:	bd10      	pop	{r4, pc}

08009240 <memmove>:
 8009240:	4288      	cmp	r0, r1
 8009242:	b510      	push	{r4, lr}
 8009244:	eb01 0402 	add.w	r4, r1, r2
 8009248:	d902      	bls.n	8009250 <memmove+0x10>
 800924a:	4284      	cmp	r4, r0
 800924c:	4623      	mov	r3, r4
 800924e:	d807      	bhi.n	8009260 <memmove+0x20>
 8009250:	1e43      	subs	r3, r0, #1
 8009252:	42a1      	cmp	r1, r4
 8009254:	d008      	beq.n	8009268 <memmove+0x28>
 8009256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800925a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800925e:	e7f8      	b.n	8009252 <memmove+0x12>
 8009260:	4402      	add	r2, r0
 8009262:	4601      	mov	r1, r0
 8009264:	428a      	cmp	r2, r1
 8009266:	d100      	bne.n	800926a <memmove+0x2a>
 8009268:	bd10      	pop	{r4, pc}
 800926a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009272:	e7f7      	b.n	8009264 <memmove+0x24>

08009274 <_free_r>:
 8009274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009276:	2900      	cmp	r1, #0
 8009278:	d044      	beq.n	8009304 <_free_r+0x90>
 800927a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927e:	9001      	str	r0, [sp, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f1a1 0404 	sub.w	r4, r1, #4
 8009286:	bfb8      	it	lt
 8009288:	18e4      	addlt	r4, r4, r3
 800928a:	f000 f913 	bl	80094b4 <__malloc_lock>
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <_free_r+0x94>)
 8009290:	9801      	ldr	r0, [sp, #4]
 8009292:	6813      	ldr	r3, [r2, #0]
 8009294:	b933      	cbnz	r3, 80092a4 <_free_r+0x30>
 8009296:	6063      	str	r3, [r4, #4]
 8009298:	6014      	str	r4, [r2, #0]
 800929a:	b003      	add	sp, #12
 800929c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092a0:	f000 b90e 	b.w	80094c0 <__malloc_unlock>
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	d908      	bls.n	80092ba <_free_r+0x46>
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	1961      	adds	r1, r4, r5
 80092ac:	428b      	cmp	r3, r1
 80092ae:	bf01      	itttt	eq
 80092b0:	6819      	ldreq	r1, [r3, #0]
 80092b2:	685b      	ldreq	r3, [r3, #4]
 80092b4:	1949      	addeq	r1, r1, r5
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	e7ed      	b.n	8009296 <_free_r+0x22>
 80092ba:	461a      	mov	r2, r3
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	b10b      	cbz	r3, 80092c4 <_free_r+0x50>
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	d9fa      	bls.n	80092ba <_free_r+0x46>
 80092c4:	6811      	ldr	r1, [r2, #0]
 80092c6:	1855      	adds	r5, r2, r1
 80092c8:	42a5      	cmp	r5, r4
 80092ca:	d10b      	bne.n	80092e4 <_free_r+0x70>
 80092cc:	6824      	ldr	r4, [r4, #0]
 80092ce:	4421      	add	r1, r4
 80092d0:	1854      	adds	r4, r2, r1
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	6011      	str	r1, [r2, #0]
 80092d6:	d1e0      	bne.n	800929a <_free_r+0x26>
 80092d8:	681c      	ldr	r4, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	6053      	str	r3, [r2, #4]
 80092de:	4421      	add	r1, r4
 80092e0:	6011      	str	r1, [r2, #0]
 80092e2:	e7da      	b.n	800929a <_free_r+0x26>
 80092e4:	d902      	bls.n	80092ec <_free_r+0x78>
 80092e6:	230c      	movs	r3, #12
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	e7d6      	b.n	800929a <_free_r+0x26>
 80092ec:	6825      	ldr	r5, [r4, #0]
 80092ee:	1961      	adds	r1, r4, r5
 80092f0:	428b      	cmp	r3, r1
 80092f2:	bf04      	itt	eq
 80092f4:	6819      	ldreq	r1, [r3, #0]
 80092f6:	685b      	ldreq	r3, [r3, #4]
 80092f8:	6063      	str	r3, [r4, #4]
 80092fa:	bf04      	itt	eq
 80092fc:	1949      	addeq	r1, r1, r5
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	6054      	str	r4, [r2, #4]
 8009302:	e7ca      	b.n	800929a <_free_r+0x26>
 8009304:	b003      	add	sp, #12
 8009306:	bd30      	pop	{r4, r5, pc}
 8009308:	200008f0 	.word	0x200008f0

0800930c <sbrk_aligned>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	4e0e      	ldr	r6, [pc, #56]	; (8009348 <sbrk_aligned+0x3c>)
 8009310:	460c      	mov	r4, r1
 8009312:	6831      	ldr	r1, [r6, #0]
 8009314:	4605      	mov	r5, r0
 8009316:	b911      	cbnz	r1, 800931e <sbrk_aligned+0x12>
 8009318:	f000 f8bc 	bl	8009494 <_sbrk_r>
 800931c:	6030      	str	r0, [r6, #0]
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f8b7 	bl	8009494 <_sbrk_r>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d00a      	beq.n	8009340 <sbrk_aligned+0x34>
 800932a:	1cc4      	adds	r4, r0, #3
 800932c:	f024 0403 	bic.w	r4, r4, #3
 8009330:	42a0      	cmp	r0, r4
 8009332:	d007      	beq.n	8009344 <sbrk_aligned+0x38>
 8009334:	1a21      	subs	r1, r4, r0
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f8ac 	bl	8009494 <_sbrk_r>
 800933c:	3001      	adds	r0, #1
 800933e:	d101      	bne.n	8009344 <sbrk_aligned+0x38>
 8009340:	f04f 34ff 	mov.w	r4, #4294967295
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	200008f4 	.word	0x200008f4

0800934c <_malloc_r>:
 800934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009350:	1ccd      	adds	r5, r1, #3
 8009352:	f025 0503 	bic.w	r5, r5, #3
 8009356:	3508      	adds	r5, #8
 8009358:	2d0c      	cmp	r5, #12
 800935a:	bf38      	it	cc
 800935c:	250c      	movcc	r5, #12
 800935e:	2d00      	cmp	r5, #0
 8009360:	4607      	mov	r7, r0
 8009362:	db01      	blt.n	8009368 <_malloc_r+0x1c>
 8009364:	42a9      	cmp	r1, r5
 8009366:	d905      	bls.n	8009374 <_malloc_r+0x28>
 8009368:	230c      	movs	r3, #12
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	2600      	movs	r6, #0
 800936e:	4630      	mov	r0, r6
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	4e2e      	ldr	r6, [pc, #184]	; (8009430 <_malloc_r+0xe4>)
 8009376:	f000 f89d 	bl	80094b4 <__malloc_lock>
 800937a:	6833      	ldr	r3, [r6, #0]
 800937c:	461c      	mov	r4, r3
 800937e:	bb34      	cbnz	r4, 80093ce <_malloc_r+0x82>
 8009380:	4629      	mov	r1, r5
 8009382:	4638      	mov	r0, r7
 8009384:	f7ff ffc2 	bl	800930c <sbrk_aligned>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	4604      	mov	r4, r0
 800938c:	d14d      	bne.n	800942a <_malloc_r+0xde>
 800938e:	6834      	ldr	r4, [r6, #0]
 8009390:	4626      	mov	r6, r4
 8009392:	2e00      	cmp	r6, #0
 8009394:	d140      	bne.n	8009418 <_malloc_r+0xcc>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	4631      	mov	r1, r6
 800939a:	4638      	mov	r0, r7
 800939c:	eb04 0803 	add.w	r8, r4, r3
 80093a0:	f000 f878 	bl	8009494 <_sbrk_r>
 80093a4:	4580      	cmp	r8, r0
 80093a6:	d13a      	bne.n	800941e <_malloc_r+0xd2>
 80093a8:	6821      	ldr	r1, [r4, #0]
 80093aa:	3503      	adds	r5, #3
 80093ac:	1a6d      	subs	r5, r5, r1
 80093ae:	f025 0503 	bic.w	r5, r5, #3
 80093b2:	3508      	adds	r5, #8
 80093b4:	2d0c      	cmp	r5, #12
 80093b6:	bf38      	it	cc
 80093b8:	250c      	movcc	r5, #12
 80093ba:	4629      	mov	r1, r5
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ffa5 	bl	800930c <sbrk_aligned>
 80093c2:	3001      	adds	r0, #1
 80093c4:	d02b      	beq.n	800941e <_malloc_r+0xd2>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	442b      	add	r3, r5
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	e00e      	b.n	80093ec <_malloc_r+0xa0>
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	1b52      	subs	r2, r2, r5
 80093d2:	d41e      	bmi.n	8009412 <_malloc_r+0xc6>
 80093d4:	2a0b      	cmp	r2, #11
 80093d6:	d916      	bls.n	8009406 <_malloc_r+0xba>
 80093d8:	1961      	adds	r1, r4, r5
 80093da:	42a3      	cmp	r3, r4
 80093dc:	6025      	str	r5, [r4, #0]
 80093de:	bf18      	it	ne
 80093e0:	6059      	strne	r1, [r3, #4]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	bf08      	it	eq
 80093e6:	6031      	streq	r1, [r6, #0]
 80093e8:	5162      	str	r2, [r4, r5]
 80093ea:	604b      	str	r3, [r1, #4]
 80093ec:	4638      	mov	r0, r7
 80093ee:	f104 060b 	add.w	r6, r4, #11
 80093f2:	f000 f865 	bl	80094c0 <__malloc_unlock>
 80093f6:	f026 0607 	bic.w	r6, r6, #7
 80093fa:	1d23      	adds	r3, r4, #4
 80093fc:	1af2      	subs	r2, r6, r3
 80093fe:	d0b6      	beq.n	800936e <_malloc_r+0x22>
 8009400:	1b9b      	subs	r3, r3, r6
 8009402:	50a3      	str	r3, [r4, r2]
 8009404:	e7b3      	b.n	800936e <_malloc_r+0x22>
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	42a3      	cmp	r3, r4
 800940a:	bf0c      	ite	eq
 800940c:	6032      	streq	r2, [r6, #0]
 800940e:	605a      	strne	r2, [r3, #4]
 8009410:	e7ec      	b.n	80093ec <_malloc_r+0xa0>
 8009412:	4623      	mov	r3, r4
 8009414:	6864      	ldr	r4, [r4, #4]
 8009416:	e7b2      	b.n	800937e <_malloc_r+0x32>
 8009418:	4634      	mov	r4, r6
 800941a:	6876      	ldr	r6, [r6, #4]
 800941c:	e7b9      	b.n	8009392 <_malloc_r+0x46>
 800941e:	230c      	movs	r3, #12
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4638      	mov	r0, r7
 8009424:	f000 f84c 	bl	80094c0 <__malloc_unlock>
 8009428:	e7a1      	b.n	800936e <_malloc_r+0x22>
 800942a:	6025      	str	r5, [r4, #0]
 800942c:	e7de      	b.n	80093ec <_malloc_r+0xa0>
 800942e:	bf00      	nop
 8009430:	200008f0 	.word	0x200008f0

08009434 <_realloc_r>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	4680      	mov	r8, r0
 800943a:	4614      	mov	r4, r2
 800943c:	460e      	mov	r6, r1
 800943e:	b921      	cbnz	r1, 800944a <_realloc_r+0x16>
 8009440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009444:	4611      	mov	r1, r2
 8009446:	f7ff bf81 	b.w	800934c <_malloc_r>
 800944a:	b92a      	cbnz	r2, 8009458 <_realloc_r+0x24>
 800944c:	f7ff ff12 	bl	8009274 <_free_r>
 8009450:	4625      	mov	r5, r4
 8009452:	4628      	mov	r0, r5
 8009454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009458:	f000 f838 	bl	80094cc <_malloc_usable_size_r>
 800945c:	4284      	cmp	r4, r0
 800945e:	4607      	mov	r7, r0
 8009460:	d802      	bhi.n	8009468 <_realloc_r+0x34>
 8009462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009466:	d812      	bhi.n	800948e <_realloc_r+0x5a>
 8009468:	4621      	mov	r1, r4
 800946a:	4640      	mov	r0, r8
 800946c:	f7ff ff6e 	bl	800934c <_malloc_r>
 8009470:	4605      	mov	r5, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	d0ed      	beq.n	8009452 <_realloc_r+0x1e>
 8009476:	42bc      	cmp	r4, r7
 8009478:	4622      	mov	r2, r4
 800947a:	4631      	mov	r1, r6
 800947c:	bf28      	it	cs
 800947e:	463a      	movcs	r2, r7
 8009480:	f7ff fed0 	bl	8009224 <memcpy>
 8009484:	4631      	mov	r1, r6
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fef4 	bl	8009274 <_free_r>
 800948c:	e7e1      	b.n	8009452 <_realloc_r+0x1e>
 800948e:	4635      	mov	r5, r6
 8009490:	e7df      	b.n	8009452 <_realloc_r+0x1e>
	...

08009494 <_sbrk_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_sbrk_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f7 fc48 	bl	8000d34 <_sbrk>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_sbrk_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_sbrk_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	200008f8 	.word	0x200008f8

080094b4 <__malloc_lock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__malloc_lock+0x8>)
 80094b6:	f000 b811 	b.w	80094dc <__retarget_lock_acquire_recursive>
 80094ba:	bf00      	nop
 80094bc:	200008fc 	.word	0x200008fc

080094c0 <__malloc_unlock>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__malloc_unlock+0x8>)
 80094c2:	f000 b80c 	b.w	80094de <__retarget_lock_release_recursive>
 80094c6:	bf00      	nop
 80094c8:	200008fc 	.word	0x200008fc

080094cc <_malloc_usable_size_r>:
 80094cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d0:	1f18      	subs	r0, r3, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfbc      	itt	lt
 80094d6:	580b      	ldrlt	r3, [r1, r0]
 80094d8:	18c0      	addlt	r0, r0, r3
 80094da:	4770      	bx	lr

080094dc <__retarget_lock_acquire_recursive>:
 80094dc:	4770      	bx	lr

080094de <__retarget_lock_release_recursive>:
 80094de:	4770      	bx	lr

080094e0 <_init>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	bf00      	nop
 80094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e6:	bc08      	pop	{r3}
 80094e8:	469e      	mov	lr, r3
 80094ea:	4770      	bx	lr

080094ec <_fini>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	bf00      	nop
 80094f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f2:	bc08      	pop	{r3}
 80094f4:	469e      	mov	lr, r3
 80094f6:	4770      	bx	lr
