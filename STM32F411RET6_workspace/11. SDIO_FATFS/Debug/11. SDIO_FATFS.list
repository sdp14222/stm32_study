
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009048  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009758  08009758  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009760  08009760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000070  080097d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  080097d8  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d43  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c97  00000000  00000000  00031de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c39  00000000  00000000  000365d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148c3  00000000  00000000  0004f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d167  00000000  00000000  00063ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000f0c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091d0 	.word	0x080091d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080091d0 	.word	0x080091d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 fd89 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 fda2 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f000 fd81 	bl	80010c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f000 fd9a 	bl	80010fa <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x68>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x68>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x68>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fbcb 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8a7 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffc1 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fb21 	bl	8000c98 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000656:	f7ff ff95 	bl	8000584 <MX_DMA_Init>
  MX_FATFS_Init();
 800065a:	f005 f871 	bl	8005740 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800065e:	f000 f929 	bl	80008b4 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	493f      	ldr	r1, [pc, #252]	; (8000764 <main+0x124>)
 8000666:	4840      	ldr	r0, [pc, #256]	; (8000768 <main+0x128>)
 8000668:	f003 fb5e 	bl	8003d28 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BYTE buf[32] = "Hello world";	// file copy buffer
 800066c:	4a3f      	ldr	r2, [pc, #252]	; (800076c <main+0x12c>)
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	ca07      	ldmia	r2, {r0, r1, r2}
 8000674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  uint32_t bw, br;

  // 1. FS Initialization("0:/"drive allocation)
//  if((retSD = f_mount(&SDFatFS, "0:/", 1)) == FR_OK)
  if((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK)
 8000688:	2201      	movs	r2, #1
 800068a:	4939      	ldr	r1, [pc, #228]	; (8000770 <main+0x130>)
 800068c:	4839      	ldr	r0, [pc, #228]	; (8000774 <main+0x134>)
 800068e:	f007 fbbb 	bl	8007e08 <f_mount>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <main+0x138>)
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <main+0x138>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10d      	bne.n	80006be <main+0x7e>
  {
	  sprintf(str, "f_mount OK %d\n", retSD);
 80006a2:	4b35      	ldr	r3, [pc, #212]	; (8000778 <main+0x138>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4934      	ldr	r1, [pc, #208]	; (800077c <main+0x13c>)
 80006aa:	482e      	ldr	r0, [pc, #184]	; (8000764 <main+0x124>)
 80006ac:	f008 f922 	bl	80088f4 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006b0:	230a      	movs	r3, #10
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	492b      	ldr	r1, [pc, #172]	; (8000764 <main+0x124>)
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <main+0x128>)
 80006b8:	f003 faa4 	bl	8003c04 <HAL_UART_Transmit>
 80006bc:	e00c      	b.n	80006d8 <main+0x98>
  }
  else
  {
	  sprintf(str, "f_mount failed %d\n", retSD);
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <main+0x138>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	492e      	ldr	r1, [pc, #184]	; (8000780 <main+0x140>)
 80006c6:	4827      	ldr	r0, [pc, #156]	; (8000764 <main+0x124>)
 80006c8:	f008 f914 	bl	80088f4 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006cc:	230a      	movs	r3, #10
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	4924      	ldr	r1, [pc, #144]	; (8000764 <main+0x124>)
 80006d2:	4825      	ldr	r0, [pc, #148]	; (8000768 <main+0x128>)
 80006d4:	f003 fa96 	bl	8003c04 <HAL_UART_Transmit>
  }

  // 2. File create & write
  if((retSD = f_open(&SDFile, "0:/Hello_world.txt", FA_CREATE_NEW | FA_WRITE)) == FR_OK)
 80006d8:	2206      	movs	r2, #6
 80006da:	492a      	ldr	r1, [pc, #168]	; (8000784 <main+0x144>)
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <main+0x148>)
 80006de:	f007 fbd9 	bl	8007e94 <f_open>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <main+0x138>)
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <main+0x138>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11c      	bne.n	800072c <main+0xec>
  {
	  sprintf(buf, "Hello world~!");
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4925      	ldr	r1, [pc, #148]	; (800078c <main+0x14c>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f008 f8fb 	bl	80088f4 <siprintf>
	  f_write(&SDFile, buf, sizeof(buf),  &bw);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	2220      	movs	r2, #32
 8000706:	4820      	ldr	r0, [pc, #128]	; (8000788 <main+0x148>)
 8000708:	f007 fd82 	bl	8008210 <f_write>

	  sprintf(str, "%d bytes\n", bw);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	461a      	mov	r2, r3
 8000710:	491f      	ldr	r1, [pc, #124]	; (8000790 <main+0x150>)
 8000712:	4814      	ldr	r0, [pc, #80]	; (8000764 <main+0x124>)
 8000714:	f008 f8ee 	bl	80088f4 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000718:	230a      	movs	r3, #10
 800071a:	2228      	movs	r2, #40	; 0x28
 800071c:	4911      	ldr	r1, [pc, #68]	; (8000764 <main+0x124>)
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0x128>)
 8000720:	f003 fa70 	bl	8003c04 <HAL_UART_Transmit>

	  f_close(&SDFile);
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <main+0x148>)
 8000726:	f007 ff66 	bl	80085f6 <f_close>
 800072a:	e00c      	b.n	8000746 <main+0x106>
  }
  else
  {
	  sprintf(str, "error %d\n", retSD);
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0x138>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4918      	ldr	r1, [pc, #96]	; (8000794 <main+0x154>)
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <main+0x124>)
 8000736:	f008 f8dd 	bl	80088f4 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 800073a:	230a      	movs	r3, #10
 800073c:	2228      	movs	r2, #40	; 0x28
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <main+0x124>)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <main+0x128>)
 8000742:	f003 fa5f 	bl	8003c04 <HAL_UART_Transmit>
  }

  while (1)
  {

	  if(flag1)
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <main+0x158>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0fb      	beq.n	8000746 <main+0x106>
	  {
		  flag1 = 0;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <main+0x158>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 8000754:	230a      	movs	r3, #10
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	4902      	ldr	r1, [pc, #8]	; (8000764 <main+0x124>)
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <main+0x128>)
 800075c:	f003 fa52 	bl	8003c04 <HAL_UART_Transmit>
	  if(flag1)
 8000760:	e7f1      	b.n	8000746 <main+0x106>
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c
 8000768:	20000200 	.word	0x20000200
 800076c:	08009248 	.word	0x08009248
 8000770:	2000024c 	.word	0x2000024c
 8000774:	20000250 	.word	0x20000250
 8000778:	20000248 	.word	0x20000248
 800077c:	080091e8 	.word	0x080091e8
 8000780:	080091f8 	.word	0x080091f8
 8000784:	0800920c 	.word	0x0800920c
 8000788:	20000484 	.word	0x20000484
 800078c:	08009220 	.word	0x08009220
 8000790:	08009230 	.word	0x08009230
 8000794:	0800923c 	.word	0x0800923c
 8000798:	200000b4 	.word	0x200000b4

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f008 f89a 	bl	80088e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <SystemClock_Config+0xc8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a26      	ldr	r2, [pc, #152]	; (8000864 <SystemClock_Config+0xc8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0xc8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <SystemClock_Config+0xcc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <SystemClock_Config+0xcc>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <SystemClock_Config+0xcc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000818:	2305      	movs	r3, #5
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fa17 	bl	8001c54 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800082c:	f000 f83c 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2103      	movs	r1, #3
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fc79 	bl	8002144 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000858:	f000 f826 	bl	80008a8 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_UART_RxCpltCallback+0x2c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d107      	bne.n	800088e <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <HAL_UART_RxCpltCallback+0x30>)
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <HAL_UART_RxCpltCallback+0x34>)
 8000884:	f003 fa50 	bl	8003d28 <HAL_UART_Receive_IT>
		flag1 = 1;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_UART_RxCpltCallback+0x38>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
	}
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40011000 	.word	0x40011000
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	20000200 	.word	0x20000200
 80008a4:	200000b4 	.word	0x200000b4

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <MX_SDIO_SD_Init+0x3c>)
 80008bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200000b8 	.word	0x200000b8
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a77      	ldr	r2, [pc, #476]	; (8000af0 <HAL_SD_MspInit+0x1fc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	f040 80e8 	bne.w	8000ae8 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	4b75      	ldr	r3, [pc, #468]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	4a74      	ldr	r2, [pc, #464]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000926:	6453      	str	r3, [r2, #68]	; 0x44
 8000928:	4b72      	ldr	r3, [pc, #456]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a6d      	ldr	r2, [pc, #436]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a66      	ldr	r2, [pc, #408]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a5f      	ldr	r2, [pc, #380]	; (8000af4 <HAL_SD_MspInit+0x200>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b5d      	ldr	r3, [pc, #372]	; (8000af4 <HAL_SD_MspInit+0x200>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000998:	230c      	movs	r3, #12
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4855      	ldr	r0, [pc, #340]	; (8000af8 <HAL_SD_MspInit+0x204>)
 80009a4:	f000 ffd2 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009ba:	230c      	movs	r3, #12
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	484d      	ldr	r0, [pc, #308]	; (8000afc <HAL_SD_MspInit+0x208>)
 80009c6:	f000 ffc1 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009dc:	230c      	movs	r3, #12
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4846      	ldr	r0, [pc, #280]	; (8000b00 <HAL_SD_MspInit+0x20c>)
 80009e8:	f000 ffb0 	bl	800194c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <HAL_SD_MspInit+0x210>)
 80009ee:	4a46      	ldr	r2, [pc, #280]	; (8000b08 <HAL_SD_MspInit+0x214>)
 80009f0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <HAL_SD_MspInit+0x210>)
 80009f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <HAL_SD_MspInit+0x210>)
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a14:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a20:	2220      	movs	r2, #32
 8000a22:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a30:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a46:	482f      	ldr	r0, [pc, #188]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a48:	f000 fb72 	bl	8001130 <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8000a52:	f7ff ff29 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <HAL_SD_MspInit+0x210>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a64:	4a2a      	ldr	r2, [pc, #168]	; (8000b10 <HAL_SD_MspInit+0x21c>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000aae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000ab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000abe:	f000 fb37 	bl	8001130 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8000ac8:	f7ff feee 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_SD_MspInit+0x218>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2031      	movs	r0, #49	; 0x31
 8000ade:	f000 faf0 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ae2:	2031      	movs	r0, #49	; 0x31
 8000ae4:	f000 fb09 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3730      	adds	r7, #48	; 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40012c00 	.word	0x40012c00
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	2000013c 	.word	0x2000013c
 8000b08:	40026458 	.word	0x40026458
 8000b0c:	2000019c 	.word	0x2000019c
 8000b10:	400264a0 	.word	0x400264a0

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f968 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART1_IRQHandler+0x10>)
 8000bbe:	f003 f8e3 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000200 	.word	0x20000200

08000bcc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <SDIO_IRQHandler+0x10>)
 8000bd2:	f001 ff0f 	bl	80029f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000b8 	.word	0x200000b8

08000be0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DMA2_Stream3_IRQHandler+0x10>)
 8000be6:	f000 fc3b 	bl	8001460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000013c 	.word	0x2000013c

08000bf4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA2_Stream6_IRQHandler+0x10>)
 8000bfa:	f000 fc31 	bl	8001460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000019c 	.word	0x2000019c

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f007 fe2a 	bl	8008890 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200001fc 	.word	0x200001fc
 8000c70:	20000900 	.word	0x20000900

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f002 ff4b 	bl	8003b6a <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f7ff fde5 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000200 	.word	0x20000200
 8000ce8:	40011000 	.word	0x40011000

08000cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <HAL_UART_MspInit+0x94>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d134      	bne.n	8000d78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_UART_MspInit+0x98>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <HAL_UART_MspInit+0x9c>)
 8000d64:	f000 fdf2 	bl	800194c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2025      	movs	r0, #37	; 0x25
 8000d6e:	f000 f9a8 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d72:	2025      	movs	r0, #37	; 0x25
 8000d74:	f000 f9c1 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ff5d 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f007 fd6f 	bl	800889c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc3f 	bl	8000640 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd0:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 8000dd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd8:	20000900 	.word	0x20000900

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94f 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe7e 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000244 	.word	0x20000244

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000244 	.word	0x20000244

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff feb6 	bl	8000eac <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e099      	b.n	8001280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116c:	e00f      	b.n	800118e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116e:	f7ff fe9d 	bl	8000eac <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b05      	cmp	r3, #5
 800117a:	d908      	bls.n	800118e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2220      	movs	r2, #32
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e078      	b.n	8001280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e8      	bne.n	800116e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_DMA_Init+0x158>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d107      	bne.n	80011f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4313      	orrs	r3, r2
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f023 0307 	bic.w	r3, r3, #7
 800120e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2b04      	cmp	r3, #4
 8001220:	d117      	bne.n	8001252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00e      	beq.n	8001252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fb0d 	bl	8001854 <DMA_CheckFifoParam>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800124e:	2301      	movs	r3, #1
 8001250:	e016      	b.n	8001280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fac4 	bl	80017e8 <DMA_CalcBaseAndBitshift>
 8001260:	4603      	mov	r3, r0
 8001262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	223f      	movs	r2, #63	; 0x3f
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	f010803f 	.word	0xf010803f

0800128c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Start_IT+0x26>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e040      	b.n	8001334 <HAL_DMA_Start_IT+0xa8>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d12f      	bne.n	8001326 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2202      	movs	r2, #2
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fa56 	bl	800178c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	223f      	movs	r2, #63	; 0x3f
 80012e6:	409a      	lsls	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0216 	orr.w	r2, r2, #22
 80012fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0208 	orr.w	r2, r2, #8
 8001312:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e005      	b.n	8001332 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800132e:	2302      	movs	r3, #2
 8001330:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800134a:	f7ff fdaf 	bl	8000eac <HAL_GetTick>
 800134e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d008      	beq.n	800136e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e052      	b.n	8001414 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0216 	bic.w	r2, r2, #22
 800137c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <HAL_DMA_Abort+0x62>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0208 	bic.w	r2, r2, #8
 80013ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013be:	e013      	b.n	80013e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c0:	f7ff fd74 	bl	8000eac <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d90c      	bls.n	80013e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e015      	b.n	8001414 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1e4      	bne.n	80013c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	223f      	movs	r2, #63	; 0x3f
 80013fc:	409a      	lsls	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d004      	beq.n	800143a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00c      	b.n	8001454 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2205      	movs	r2, #5
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <HAL_DMA_IRQHandler+0x248>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a8e      	ldr	r2, [pc, #568]	; (80016ac <HAL_DMA_IRQHandler+0x24c>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2208      	movs	r2, #8
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01a      	beq.n	80014cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0204 	bic.w	r2, r2, #4
 80014b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2208      	movs	r2, #8
 80014ba:	409a      	lsls	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2201      	movs	r2, #1
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d012      	beq.n	8001502 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2201      	movs	r2, #1
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2204      	movs	r2, #4
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d012      	beq.n	8001538 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2204      	movs	r2, #4
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	f043 0204 	orr.w	r2, r3, #4
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2210      	movs	r2, #16
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d043      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03c      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2210      	movs	r2, #16
 800155c:	409a      	lsls	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d018      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d024      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
 800158e:	e01f      	b.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01b      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e016      	b.n	80015d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2220      	movs	r2, #32
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 808f 	beq.w	8001700 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8087 	beq.w	8001700 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2220      	movs	r2, #32
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b05      	cmp	r3, #5
 8001608:	d136      	bne.n	8001678 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001628:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_IRQHandler+0x1da>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	409a      	lsls	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07e      	beq.n	800176c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
        }
        return;
 8001676:	e079      	b.n	800176c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d01d      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	2b00      	cmp	r3, #0
 800169a:	d031      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	e02c      	b.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000
 80016ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
 80016c0:	e01e      	b.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10f      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0210 	bic.w	r2, r2, #16
 80016de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	2b00      	cmp	r3, #0
 8001706:	d032      	beq.n	800176e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d022      	beq.n	800175a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2205      	movs	r2, #5
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3301      	adds	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	d307      	bcc.n	8001748 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f2      	bne.n	800172c <HAL_DMA_IRQHandler+0x2cc>
 8001746:	e000      	b.n	800174a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001748:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
 800176a:	e000      	b.n	800176e <HAL_DMA_IRQHandler+0x30e>
        return;
 800176c:	bf00      	nop
    }
  }
}
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d108      	bne.n	80017cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017ca:	e007      	b.n	80017dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3b10      	subs	r3, #16
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <DMA_CalcBaseAndBitshift+0x64>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <DMA_CalcBaseAndBitshift+0x68>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d909      	bls.n	800182a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	1d1a      	adds	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	659a      	str	r2, [r3, #88]	; 0x58
 8001828:	e007      	b.n	800183a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	aaaaaaab 	.word	0xaaaaaaab
 8001850:	080092c8 	.word	0x080092c8

08001854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11f      	bne.n	80018ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d856      	bhi.n	8001922 <DMA_CheckFifoParam+0xce>
 8001874:	a201      	add	r2, pc, #4	; (adr r2, 800187c <DMA_CheckFifoParam+0x28>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	0800188d 	.word	0x0800188d
 8001880:	0800189f 	.word	0x0800189f
 8001884:	0800188d 	.word	0x0800188d
 8001888:	08001923 	.word	0x08001923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d046      	beq.n	8001926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800189c:	e043      	b.n	8001926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a6:	d140      	bne.n	800192a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ac:	e03d      	b.n	800192a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b6:	d121      	bne.n	80018fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d837      	bhi.n	800192e <DMA_CheckFifoParam+0xda>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <DMA_CheckFifoParam+0x70>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	080018d5 	.word	0x080018d5
 80018c8:	080018db 	.word	0x080018db
 80018cc:	080018d5 	.word	0x080018d5
 80018d0:	080018ed 	.word	0x080018ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      break;
 80018d8:	e030      	b.n	800193c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d025      	beq.n	8001932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ea:	e022      	b.n	8001932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018f4:	d11f      	bne.n	8001936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018fa:	e01c      	b.n	8001936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d903      	bls.n	800190a <DMA_CheckFifoParam+0xb6>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d003      	beq.n	8001910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001908:	e018      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
      break;
 800190e:	e015      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00e      	beq.n	800193a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      break;
 8001920:	e00b      	b.n	800193a <DMA_CheckFifoParam+0xe6>
      break;
 8001922:	bf00      	nop
 8001924:	e00a      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 8001926:	bf00      	nop
 8001928:	e008      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
 800192c:	e006      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
 8001930:	e004      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 8001932:	bf00      	nop
 8001934:	e002      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;   
 8001936:	bf00      	nop
 8001938:	e000      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800193a:	bf00      	nop
    }
  } 
  
  return status; 
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e159      	b.n	8001c1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8148 	bne.w	8001c16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a2 	beq.w	8001c16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x202>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2f4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x1fe>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_GPIO_Init+0x2f8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x1fa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a46      	ldr	r2, [pc, #280]	; (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	; (8001c4c <HAL_GPIO_Init+0x300>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x1f2>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be6:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f aea2 	bls.w	8001968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e267      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e242      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f8ce 	bl	8000eac <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f8ca 	bl	8000eac <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e207      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f8ba 	bl	8000eac <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f8b6 	bl	8000eac <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1f3      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1c7      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4937      	ldr	r1, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f86f 	bl	8000eac <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f86b 	bl	8000eac <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1a8      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4925      	ldr	r1, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f84e 	bl	8000eac <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f84a 	bl	8000eac <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e187      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d036      	beq.n	8001eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f82e 	bl	8000eac <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f82a 	bl	8000eac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e167      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f817 	bl	8000eac <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e00e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f813 	bl	8000eac <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d907      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e150      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ea      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8097 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a7c      	ldr	r2, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b7a      	ldr	r3, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b77      	ldr	r3, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b74      	ldr	r3, [pc, #464]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a73      	ldr	r2, [pc, #460]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe ffd3 	bl	8000eac <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe ffcf 	bl	8000eac <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e10c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2ea>
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x30c>
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5b      	ldr	r2, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f60:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe ff94 	bl	8000eac <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe ff90 	bl	8000eac <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0cb      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ee      	beq.n	8001f88 <HAL_RCC_OscConfig+0x334>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe ff7e 	bl	8000eac <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff7a 	bl	8000eac <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0b5      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a1 	beq.w	8002134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d05c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d141      	bne.n	800208a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff4e 	bl	8000eac <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff4a 	bl	8000eac <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e087      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	491b      	ldr	r1, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe ff23 	bl	8000eac <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206a:	f7fe ff1f 	bl	8000eac <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e05c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x416>
 8002088:	e054      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff0c 	bl	8000eac <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ff08 	bl	8000eac <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e045      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x444>
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e038      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d028      	beq.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11a      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	3b01      	subs	r3, #1
 800211a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fe3a 	bl	8000eac <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fe36 	bl	8000eac <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd9a 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	080092b0 	.word	0x080092b0
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b090      	sub	sp, #64	; 0x40
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d00d      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 8002334:	2b08      	cmp	r3, #8
 8002336:	f200 80a1 	bhi.w	800247c <HAL_RCC_GetSysClockFreq+0x16c>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3a>
 8002342:	e09b      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002348:	e09b      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800234e:	e098      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235a:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	2200      	movs	r2, #0
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	627a      	str	r2, [r7, #36]	; 0x24
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002378:	2100      	movs	r1, #0
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800237c:	fb03 f201 	mul.w	r2, r3, r1
 8002380:	2300      	movs	r3, #0
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	4413      	add	r3, r2
 8002388:	4a43      	ldr	r2, [pc, #268]	; (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800238a:	fba0 1202 	umull	r1, r2, r0, r2
 800238e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002390:	460a      	mov	r2, r1
 8002392:	62ba      	str	r2, [r7, #40]	; 0x28
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002396:	4413      	add	r3, r2
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	2200      	movs	r2, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	61fa      	str	r2, [r7, #28]
 80023a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023aa:	f7fd ff69 	bl	8000280 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4613      	mov	r3, r2
 80023b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b6:	e053      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	2200      	movs	r2, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	617a      	str	r2, [r7, #20]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ca:	f04f 0b00 	mov.w	fp, #0
 80023ce:	4652      	mov	r2, sl
 80023d0:	465b      	mov	r3, fp
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ebb2 080a 	subs.w	r8, r2, sl
 80023ea:	eb63 090b 	sbc.w	r9, r3, fp
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002402:	ebb2 0408 	subs.w	r4, r2, r8
 8002406:	eb63 0509 	sbc.w	r5, r3, r9
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	00eb      	lsls	r3, r5, #3
 8002414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002418:	00e2      	lsls	r2, r4, #3
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	eb14 030a 	adds.w	r3, r4, sl
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	eb45 030b 	adc.w	r3, r5, fp
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002436:	4629      	mov	r1, r5
 8002438:	028b      	lsls	r3, r1, #10
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002440:	4621      	mov	r1, r4
 8002442:	028a      	lsls	r2, r1, #10
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	2200      	movs	r2, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	f7fd ff14 	bl	8000280 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002484:	4618      	mov	r0, r3
 8002486:	3740      	adds	r7, #64	; 0x40
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	00f42400 	.word	0x00f42400
 8002498:	017d7840 	.word	0x017d7840

0800249c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a9b      	lsrs	r3, r3, #10
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	080092c0 	.word	0x080092c0

080024dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024e0:	f7ff ffdc 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0b5b      	lsrs	r3, r3, #13
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	080092c0 	.word	0x080092c0

08002504 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e022      	b.n	800255c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe f9e3 	bl	80008f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f814 	bl	8002564 <HAL_SD_InitCard>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00a      	b.n	800255c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af04      	add	r7, sp, #16
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002580:	2376      	movs	r3, #118	; 0x76
 8002582:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681d      	ldr	r5, [r3, #0]
 8002588:	466c      	mov	r4, sp
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259c:	4628      	mov	r0, r5
 800259e:	f002 fb5b 	bl	8004c58 <SDIO_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80025a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e04f      	b.n	8002654 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_SD_InitCard+0xf8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fb93 	bl	8004cea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_SD_InitCard+0xf8>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025ca:	2002      	movs	r0, #2
 80025cc:	f7fe fc7a 	bl	8000ec4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f001 f805 	bl	80035e0 <SD_PowerON>
 80025d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e02e      	b.n	8002654 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 ff24 	bl	8003444 <SD_InitCard>
 80025fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e01b      	b.n	8002654 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fbf2 	bl	8004e0e <SDMMC_CmdBlockLength>
 800262a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00f      	beq.n	8002652 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_SD_InitCard+0xfc>)
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bdb0      	pop	{r4, r5, r7, pc}
 800265c:	422580a0 	.word	0x422580a0
 8002660:	004005ff 	.word	0x004005ff

08002664 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0c0      	b.n	800280e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 80b9 	bne.w	800280c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	441a      	add	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d907      	bls.n	80026be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0a7      	b.n	800280e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a4b      	ldr	r2, [pc, #300]	; (800281c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2200      	movs	r2, #0
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3380      	adds	r3, #128	; 0x80
 8002728:	4619      	mov	r1, r3
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	025b      	lsls	r3, r3, #9
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	f7fe fdab 	bl	800128c <HAL_DMA_Start_IT>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e050      	b.n	800280e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800278c:	2390      	movs	r3, #144	; 0x90
 800278e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002790:	2302      	movs	r3, #2
 8002792:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f107 0210 	add.w	r2, r7, #16
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fb05 	bl	8004db6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d90a      	bls.n	80027c8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2282      	movs	r2, #130	; 0x82
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fb69 	bl	8004e96 <SDMMC_CmdReadMultiBlock>
 80027c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80027c6:	e009      	b.n	80027dc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2281      	movs	r2, #129	; 0x81
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 fb3c 	bl	8004e52 <SDMMC_CmdReadSingleBlock>
 80027da:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e002      	b.n	800280e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	08003253 	.word	0x08003253
 800281c:	080032c5 	.word	0x080032c5
 8002820:	004005ff 	.word	0x004005ff
 8002824:	4225858c 	.word	0x4225858c

08002828 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0c5      	b.n	80029dc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 80be 	bne.w	80029da <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	441a      	add	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	429a      	cmp	r2, r3
 8002870:	d907      	bls.n	8002882 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0ac      	b.n	80029dc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2200      	movs	r2, #0
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d002      	beq.n	80028cc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d90a      	bls.n	80028e8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	22a0      	movs	r2, #160	; 0xa0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fb1d 	bl	8004f1e <SDMMC_CmdWriteMultiBlock>
 80028e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80028e6:	e009      	b.n	80028fc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2290      	movs	r2, #144	; 0x90
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 faf0 	bl	8004eda <SDMMC_CmdWriteSingleBlock>
 80028fa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a39      	ldr	r2, [pc, #228]	; (80029ec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e059      	b.n	80029dc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3380      	adds	r3, #128	; 0x80
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	f7fe fc91 	bl	800128c <HAL_DMA_Start_IT>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01c      	beq.n	80029aa <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e018      	b.n	80029dc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	025b      	lsls	r3, r3, #9
 80029b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80029b6:	2390      	movs	r3, #144	; 0x90
 80029b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f107 0210 	add.w	r2, r7, #16
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 f9f0 	bl	8004db6 <SDIO_ConfigData>

      return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08003229 	.word	0x08003229
 80029e8:	080032c5 	.word	0x080032c5
 80029ec:	004005ff 	.word	0x004005ff
 80029f0:	4225858c 	.word	0x4225858c

080029f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_SD_IRQHandler+0x2e>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 ffff 	bl	8003a1e <SD_Read_IT>
 8002a20:	e165      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 808f 	beq.w	8002b50 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002a4a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002a4e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d039      	beq.n	8002ade <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_SD_IRQHandler+0x8a>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d011      	beq.n	8002aa2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fa6e 	bl	8004f64 <SDMMC_CmdStopTransfer>
 8002a88:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f92f 	bl	8002d00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f240 523a 	movw	r2, #1338	; 0x53a
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_SD_IRQHandler+0xda>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f002 fedc 	bl	800588c <HAL_SD_RxCpltCallback>
 8002ad4:	e10b      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f002 fece 	bl	8005878 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002adc:	e107      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8102 	beq.w	8002cee <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d011      	beq.n	8002b18 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fa33 	bl	8004f64 <SDMMC_CmdStopTransfer>
 8002afe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8f4 	bl	8002d00 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 80e5 	bne.w	8002cee <HAL_SD_IRQHandler+0x2fa>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80df 	bne.w	8002cee <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0208 	bic.w	r2, r2, #8
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f002 fe95 	bl	8005878 <HAL_SD_TxCpltCallback>
}
 8002b4e:	e0ce      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_SD_IRQHandler+0x17c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 ffa9 	bl	8003ac0 <SD_Write_IT>
 8002b6e:	e0be      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	f240 233a 	movw	r3, #570	; 0x23a
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80b6 	beq.w	8002cee <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f043 0202 	orr.w	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f043 0208 	orr.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	f043 0208 	orr.w	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f240 723a 	movw	r2, #1850	; 0x73a
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002c1c:	f023 0302 	bic.w	r3, r3, #2
 8002c20:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 f99c 	bl	8004f64 <SDMMC_CmdStopTransfer>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f855 	bl	8002d00 <HAL_SD_ErrorCallback>
}
 8002c56:	e04a      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d045      	beq.n	8002cee <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_SD_IRQHandler+0x282>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_SD_IRQHandler+0x304>)
 8002c7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fbca 	bl	800141c <HAL_DMA_Abort_IT>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02f      	beq.n	8002cee <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb68 	bl	8003368 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c98:	e029      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_SD_IRQHandler+0x2ba>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d011      	beq.n	8002cd2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <HAL_SD_IRQHandler+0x308>)
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fbae 	bl	800141c <HAL_DMA_Abort_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d013      	beq.n	8002cee <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fb83 	bl	80033d6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002cd0:	e00d      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f002 fdbc 	bl	8005864 <HAL_SD_AbortCallback>
}
 8002cec:	e7ff      	b.n	8002cee <HAL_SD_IRQHandler+0x2fa>
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	08003369 	.word	0x08003369
 8002cfc:	080033d7 	.word	0x080033d7

08002d00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	0f9b      	lsrs	r3, r3, #30
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d40:	0e1b      	lsrs	r3, r3, #24
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d92:	0bdb      	lsrs	r3, r3, #15
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da4:	0b9b      	lsrs	r3, r3, #14
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc8:	0b1b      	lsrs	r3, r3, #12
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d163      	bne.n	8002eac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002df4:	0f92      	lsrs	r2, r2, #30
 8002df6:	431a      	orrs	r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e00:	0edb      	lsrs	r3, r3, #27
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e12:	0e1b      	lsrs	r3, r3, #24
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e24:	0d5b      	lsrs	r3, r3, #21
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e48:	0bdb      	lsrs	r3, r3, #15
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7e1b      	ldrb	r3, [r3, #24]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7a1b      	ldrb	r3, [r3, #8]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e98:	0a52      	lsrs	r2, r2, #9
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8002eaa:	e031      	b.n	8002f10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d11d      	bne.n	8002ef0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	029a      	lsls	r2, r3, #10
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	661a      	str	r2, [r3, #96]	; 0x60
 8002eee:	e00f      	b.n	8002f10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_SD_GetCardCSD+0x344>)
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e09d      	b.n	800304c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f14:	0b9b      	lsrs	r3, r3, #14
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	09db      	lsrs	r3, r3, #7
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	0fdb      	lsrs	r3, r3, #31
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	0f5b      	lsrs	r3, r3, #29
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	0d9b      	lsrs	r3, r3, #22
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	0d5b      	lsrs	r3, r3, #21
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	0bdb      	lsrs	r3, r3, #15
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	0b9b      	lsrs	r3, r3, #14
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	0b5b      	lsrs	r3, r3, #13
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	0b1b      	lsrs	r3, r3, #12
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	0a9b      	lsrs	r3, r3, #10
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	004005ff 	.word	0x004005ff

0800305c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80030b4:	b5b0      	push	{r4, r5, r7, lr}
 80030b6:	b08e      	sub	sp, #56	; 0x38
 80030b8:	af04      	add	r7, sp, #16
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d02e      	beq.n	8003132 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d106      	bne.n	80030ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
 80030e8:	e029      	b.n	800313e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f0:	d10a      	bne.n	8003108 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fb2a 	bl	800374c <SD_WideBus_Enable>
 80030f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
 8003106:	e01a      	b.n	800313e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fb67 	bl	80037e2 <SD_WideBus_Disable>
 8003114:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
 8003122:	e00c      	b.n	800313e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
 8003130:	e005      	b.n	800313e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800315c:	e01f      	b.n	800319e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681d      	ldr	r5, [r3, #0]
 8003184:	466c      	mov	r4, sp
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800318e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003198:	4628      	mov	r0, r5
 800319a:	f001 fd5d 	bl	8004c58 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fe31 	bl	8004e0e <SDMMC_CmdBlockLength>
 80031ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00c      	beq.n	80031ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdb0      	pop	{r4, r5, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	004005ff 	.word	0x004005ff

080031e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fa7e 	bl	80036fc <SD_SendStatus>
 8003200:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0a5b      	lsrs	r3, r3, #9
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800321e:	693b      	ldr	r3, [r7, #16]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003244:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b82      	cmp	r3, #130	; 0x82
 8003266:	d111      	bne.n	800328c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fe79 	bl	8004f64 <SDMMC_CmdStopTransfer>
 8003272:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fd3a 	bl	8002d00 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0208 	bic.w	r2, r2, #8
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f002 fae9 	bl	800588c <HAL_SD_RxCpltCallback>
#endif
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe fa4e 	bl	8001774 <HAL_DMA_GetError>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d03e      	beq.n	800335c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d002      	beq.n	80032fa <SD_DMAError+0x36>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d12d      	bne.n	8003356 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a19      	ldr	r2, [pc, #100]	; (8003364 <SD_DMAError+0xa0>)
 8003300:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff62 	bl	80031e8 <HAL_SD_GetCardState>
 8003324:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d002      	beq.n	8003332 <SD_DMAError+0x6e>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10a      	bne.n	8003348 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fe14 	bl	8004f64 <SDMMC_CmdStopTransfer>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff fcd2 	bl	8002d00 <HAL_SD_ErrorCallback>
#endif
  }
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	004005ff 	.word	0x004005ff

08003368 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f240 523a 	movw	r2, #1338	; 0x53a
 800337e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff ff31 	bl	80031e8 <HAL_SD_GetCardState>
 8003386:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d002      	beq.n	80033a2 <SD_DMATxAbort+0x3a>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10a      	bne.n	80033b8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fddc 	bl	8004f64 <SDMMC_CmdStopTransfer>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f002 fa4f 	bl	8005864 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80033c6:	e002      	b.n	80033ce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff fc99 	bl	8002d00 <HAL_SD_ErrorCallback>
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fefa 	bl	80031e8 <HAL_SD_GetCardState>
 80033f4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d002      	beq.n	8003410 <SD_DMARxAbort+0x3a>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d10a      	bne.n	8003426 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fda5 	bl	8004f64 <SDMMC_CmdStopTransfer>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f002 fa18 	bl	8005864 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003434:	e002      	b.n	800343c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fc62 	bl	8002d00 <HAL_SD_ErrorCallback>
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	b094      	sub	sp, #80	; 0x50
 8003448:	af04      	add	r7, sp, #16
 800344a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f001 fc56 	bl	8004d06 <SDIO_GetPowerState>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003460:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003464:	e0b8      	b.n	80035d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	2b03      	cmp	r3, #3
 800346c:	d02f      	beq.n	80034ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f001 fe80 	bl	8005178 <SDMMC_CmdSendCID>
 8003478:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <SD_InitCard+0x40>
    {
      return errorstate;
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	e0a9      	b.n	80035d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f001 fc80 	bl	8004d90 <SDIO_GetResponse>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2104      	movs	r1, #4
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fc77 	bl	8004d90 <SDIO_GetResponse>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2108      	movs	r1, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fc6e 	bl	8004d90 <SDIO_GetResponse>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	210c      	movs	r1, #12
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fc65 	bl	8004d90 <SDIO_GetResponse>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d00d      	beq.n	80034f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f107 020e 	add.w	r2, r7, #14
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fe86 	bl	80051f2 <SDMMC_CmdSetRelAdd>
 80034e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	e072      	b.n	80035d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d036      	beq.n	8003568 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f001 fe50 	bl	80051b4 <SDMMC_CmdSendCSD>
 8003514:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <SD_InitCard+0xdc>
    {
      return errorstate;
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	e05b      	b.n	80035d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fc32 	bl	8004d90 <SDIO_GetResponse>
 800352c:	4602      	mov	r2, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2104      	movs	r1, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fc29 	bl	8004d90 <SDIO_GetResponse>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2108      	movs	r1, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fc20 	bl	8004d90 <SDIO_GetResponse>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	210c      	movs	r1, #12
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc17 	bl	8004d90 <SDIO_GetResponse>
 8003562:	4602      	mov	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2104      	movs	r1, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fc0e 	bl	8004d90 <SDIO_GetResponse>
 8003574:	4603      	mov	r3, r0
 8003576:	0d1a      	lsrs	r2, r3, #20
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fbc6 	bl	8002d14 <HAL_SD_GetCardCSD>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800358e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003592:	e021      	b.n	80035d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	2200      	movs	r2, #0
 80035a0:	461c      	mov	r4, r3
 80035a2:	4615      	mov	r5, r2
 80035a4:	4622      	mov	r2, r4
 80035a6:	462b      	mov	r3, r5
 80035a8:	4608      	mov	r0, r1
 80035aa:	f001 fcfd 	bl	8004fa8 <SDMMC_CmdSelDesel>
 80035ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <SD_InitCard+0x176>
  {
    return errorstate;
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	e00e      	b.n	80035d8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	466c      	mov	r4, sp
 80035c2:	f103 0210 	add.w	r2, r3, #16
 80035c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035cc:	3304      	adds	r3, #4
 80035ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d0:	4628      	mov	r0, r5
 80035d2:	f001 fb41 	bl	8004c58 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3740      	adds	r7, #64	; 0x40
 80035dc:	46bd      	mov	sp, r7
 80035de:	bdb0      	pop	{r4, r5, r7, pc}

080035e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 fcf8 	bl	8004fee <SDMMC_CmdGoIdleState>
 80035fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	e072      	b.n	80036f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fd0b 	bl	800502a <SDMMC_CmdOperCond>
 8003614:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fce1 	bl	8004fee <SDMMC_CmdGoIdleState>
 800362c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e05b      	b.n	80036f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2b01      	cmp	r3, #1
 8003644:	d137      	bne.n	80036b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fd0b 	bl	8005068 <SDMMC_CmdAppCommand>
 8003652:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02d      	beq.n	80036b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800365a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800365e:	e047      	b.n	80036f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fcfe 	bl	8005068 <SDMMC_CmdAppCommand>
 800366c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <SD_PowerON+0x98>
    {
      return errorstate;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e03b      	b.n	80036f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	491e      	ldr	r1, [pc, #120]	; (80036f8 <SD_PowerON+0x118>)
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fd14 	bl	80050ac <SDMMC_CmdAppOperCommand>
 8003684:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800368c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003690:	e02e      	b.n	80036f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fb79 	bl	8004d90 <SDIO_GetResponse>
 800369e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	0fdb      	lsrs	r3, r3, #31
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <SD_PowerON+0xcc>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <SD_PowerON+0xce>
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]

    count++;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036bc:	4293      	cmp	r3, r2
 80036be:	d802      	bhi.n	80036c6 <SD_PowerON+0xe6>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0cc      	beq.n	8003660 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d902      	bls.n	80036d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80036d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d4:	e00c      	b.n	80036f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
 80036e6:	e002      	b.n	80036ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	c1100000 	.word	0xc1100000

080036fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800370c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003710:	e018      	b.n	8003744 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f001 fd88 	bl	8005234 <SDMMC_CmdSendStatus>
 8003724:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <SD_SendStatus+0x34>
  {
    return errorstate;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	e009      	b.n	8003744 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fb2a 	bl	8004d90 <SDIO_GetResponse>
 800373c:	4602      	mov	r2, r0
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fb14 	bl	8004d90 <SDIO_GetResponse>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003772:	d102      	bne.n	800377a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003778:	e02f      	b.n	80037da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f879 	bl	8003878 <SD_FindSCR>
 8003786:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	e023      	b.n	80037da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01c      	beq.n	80037d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f001 fc5d 	bl	8005068 <SDMMC_CmdAppCommand>
 80037ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	e00f      	b.n	80037da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fc96 	bl	80050f2 <SDMMC_CmdBusWidth>
 80037c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	e003      	b.n	80037da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e001      	b.n	80037da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fac9 	bl	8004d90 <SDIO_GetResponse>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003808:	d102      	bne.n	8003810 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800380a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800380e:	e02f      	b.n	8003870 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f82e 	bl	8003878 <SD_FindSCR>
 800381c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	e023      	b.n	8003870 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f001 fc12 	bl	8005068 <SDMMC_CmdAppCommand>
 8003844:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	e00f      	b.n	8003870 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fc4b 	bl	80050f2 <SDMMC_CmdBusWidth>
 800385c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	e003      	b.n	8003870 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	e001      	b.n	8003870 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800386c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b08f      	sub	sp, #60	; 0x3c
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003882:	f7fd fb13 	bl	8000eac <HAL_GetTick>
 8003886:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2108      	movs	r1, #8
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fab5 	bl	8004e0e <SDMMC_CmdBlockLength>
 80038a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	e0b2      	b.n	8003a16 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f001 fbd3 	bl	8005068 <SDMMC_CmdAppCommand>
 80038c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	e0a3      	b.n	8003a16 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80038d4:	2308      	movs	r3, #8
 80038d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80038d8:	2330      	movs	r3, #48	; 0x30
 80038da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038dc:	2302      	movs	r3, #2
 80038de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f107 0210 	add.w	r2, r7, #16
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fa5f 	bl	8004db6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fc1a 	bl	8005136 <SDMMC_CmdSendSCR>
 8003902:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02a      	beq.n	8003960 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	e083      	b.n	8003a16 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00f      	beq.n	800393c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	18d4      	adds	r4, r2, r3
 800392a:	4608      	mov	r0, r1
 800392c:	f001 f9bf 	bl	8004cae <SDIO_ReadFIFO>
 8003930:	4603      	mov	r3, r0
 8003932:	6023      	str	r3, [r4, #0]
      index++;
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003936:	3301      	adds	r3, #1
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
 800393a:	e006      	b.n	800394a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800394a:	f7fd faaf 	bl	8000eac <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d102      	bne.n	8003960 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800395a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800395e:	e05a      	b.n	8003a16 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0cf      	beq.n	800390e <SD_FindSCR+0x96>
 800396e:	e000      	b.n	8003972 <SD_FindSCR+0xfa>
      break;
 8003970:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003988:	2308      	movs	r3, #8
 800398a:	e044      	b.n	8003a16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2202      	movs	r2, #2
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039a2:	2302      	movs	r3, #2
 80039a4:	e037      	b.n	8003a16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2220      	movs	r2, #32
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039bc:	2320      	movs	r3, #32
 80039be:	e02a      	b.n	8003a16 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	061a      	lsls	r2, r3, #24
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	601a      	str	r2, [r3, #0]
    scr++;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	3304      	adds	r3, #4
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	061a      	lsls	r2, r3, #24
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	0e1b      	lsrs	r3, r3, #24
 8003a0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	373c      	adds	r7, #60	; 0x3c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}

08003a1e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03f      	beq.n	8003ab8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e033      	b.n	8003aa6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f933 	bl	8004cae <SDIO_ReadFIFO>
 8003a48:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3301      	adds	r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0e1b      	lsrs	r3, r3, #24
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d9c8      	bls.n	8003a3e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d043      	beq.n	8003b62 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e037      	b.n	8003b50 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	041a      	lsls	r2, r3, #16
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	061a      	lsls	r2, r3, #24
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f107 0208 	add.w	r2, r7, #8
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f8bf 	bl	8004cc8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b07      	cmp	r3, #7
 8003b54:	d9c4      	bls.n	8003ae0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e03f      	b.n	8003bfc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd f8ab 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2224      	movs	r2, #36	; 0x24
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fdde 	bl	8004770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d17c      	bne.n	8003d1e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit+0x2c>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e075      	b.n	8003d20 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Transmit+0x3e>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e06e      	b.n	8003d20 <HAL_UART_Transmit+0x11c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2221      	movs	r2, #33	; 0x21
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c58:	f7fd f928 	bl	8000eac <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d108      	bne.n	8003c86 <HAL_UART_Transmit+0x82>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e003      	b.n	8003c8e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c96:	e02a      	b.n	8003cee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fb1e 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e036      	b.n	8003d20 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e007      	b.n	8003ce0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1cf      	bne.n	8003c98 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 faee 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e006      	b.n	8003d20 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d11d      	bne.n	8003d7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_Receive_IT+0x26>
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e016      	b.n	8003d80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Receive_IT+0x38>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e00f      	b.n	8003d80 <HAL_UART_Receive_IT+0x58>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	461a      	mov	r2, r3
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fb23 	bl	80043c0 <UART_Start_Receive_IT>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	e000      	b.n	8003d80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0ba      	sub	sp, #232	; 0xe8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fc07 	bl	80045fa <UART_Receive_IT>
      return;
 8003dec:	e256      	b.n	800429c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80de 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
 8003df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80d1 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
 8003e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 81ed 	beq.w	8004292 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fb92 	bl	80045fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_UART_IRQHandler+0x17a>
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04f      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa9a 	bl	800443c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d141      	bne.n	8003f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1d9      	bne.n	8003f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d013      	beq.n	8003f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_UART_IRQHandler+0x3dc>)
 8003f70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd fa50 	bl	800141c <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00e      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f990 	bl	80042b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00a      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f98c 	bl	80042b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f988 	bl	80042b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fae:	e170      	b.n	8004292 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	bf00      	nop
    return;
 8003fb2:	e16e      	b.n	8004292 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 814a 	bne.w	8004252 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8143 	beq.w	8004252 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 813c 	beq.w	8004252 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	f040 80b4 	bne.w	8004168 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800400c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8140 	beq.w	8004296 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800401e:	429a      	cmp	r2, r3
 8004020:	f080 8139 	bcs.w	8004296 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004036:	f000 8088 	beq.w	800414a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d9      	bne.n	800403a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e1      	bne.n	8004086 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e3      	bne.n	80040c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800412c:	65ba      	str	r2, [r7, #88]	; 0x58
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e3      	bne.n	8004108 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd f8f9 	bl	800133c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004152:	b29b      	uxth	r3, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8b6 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004160:	e099      	b.n	8004296 <HAL_UART_IRQHandler+0x50e>
 8004162:	bf00      	nop
 8004164:	08004503 	.word	0x08004503
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808b 	beq.w	800429a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8086 	beq.w	800429a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041b2:	647a      	str	r2, [r7, #68]	; 0x44
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f83e 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004250:	e023      	b.n	800429a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_UART_IRQHandler+0x4ea>
 800425e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f95d 	bl	800452a <UART_Transmit_IT>
    return;
 8004270:	e014      	b.n	800429c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <HAL_UART_IRQHandler+0x514>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f99d 	bl	80045ca <UART_EndTransmit_IT>
    return;
 8004290:	e004      	b.n	800429c <HAL_UART_IRQHandler+0x514>
    return;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_UART_IRQHandler+0x514>
      return;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_UART_IRQHandler+0x514>
      return;
 800429a:	bf00      	nop
  }
}
 800429c:	37e8      	adds	r7, #232	; 0xe8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop

080042a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b090      	sub	sp, #64	; 0x40
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	e050      	b.n	8004398 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d04c      	beq.n	8004398 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0x30>
 8004304:	f7fc fdd2 	bl	8000eac <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004310:	429a      	cmp	r2, r3
 8004312:	d241      	bcs.n	8004398 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004334:	637a      	str	r2, [r7, #52]	; 0x34
 8004336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3314      	adds	r3, #20
 8004366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	61bb      	str	r3, [r7, #24]
   return(result);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e00f      	b.n	80043b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d09f      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3740      	adds	r7, #64	; 0x40
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2222      	movs	r2, #34	; 0x22
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0220 	orr.w	r2, r2, #32
 800442c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b095      	sub	sp, #84	; 0x54
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004464:	643a      	str	r2, [r7, #64]	; 0x40
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800446a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	61fb      	str	r3, [r7, #28]
   return(result);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d119      	bne.n	80044e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	647b      	str	r3, [r7, #68]	; 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d4:	61ba      	str	r2, [r7, #24]
 80044d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6979      	ldr	r1, [r7, #20]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	613b      	str	r3, [r7, #16]
   return(result);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044f6:	bf00      	nop
 80044f8:	3754      	adds	r7, #84	; 0x54
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff fecb 	bl	80042b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b21      	cmp	r3, #33	; 0x21
 800453c:	d13e      	bne.n	80045bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d114      	bne.n	8004572 <UART_Transmit_IT+0x48>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d110      	bne.n	8004572 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]
 8004570:	e008      	b.n	8004584 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6211      	str	r1, [r2, #32]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4619      	mov	r1, r3
 8004592:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10f      	bne.n	80045b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fe5a 	bl	80042a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08c      	sub	sp, #48	; 0x30
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b22      	cmp	r3, #34	; 0x22
 800460c:	f040 80ab 	bne.w	8004766 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d117      	bne.n	800464a <UART_Receive_IT+0x50>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d113      	bne.n	800464a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004638:	b29a      	uxth	r2, r3
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
 8004648:	e026      	b.n	8004698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d007      	beq.n	800466e <UART_Receive_IT+0x74>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <UART_Receive_IT+0x82>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e008      	b.n	800468e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d15a      	bne.n	8004762 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0220 	bic.w	r2, r2, #32
 80046ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d135      	bne.n	8004758 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	613b      	str	r3, [r7, #16]
   return(result);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	623a      	str	r2, [r7, #32]
 8004714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	69f9      	ldr	r1, [r7, #28]
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b10      	cmp	r3, #16
 8004732:	d10a      	bne.n	800474a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fdbb 	bl	80042cc <HAL_UARTEx_RxEventCallback>
 8004756:	e002      	b.n	800475e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fc f887 	bl	800086c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e002      	b.n	8004768 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3730      	adds	r7, #48	; 0x30
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004774:	b0c0      	sub	sp, #256	; 0x100
 8004776:	af00      	add	r7, sp, #0
 8004778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	68d9      	ldr	r1, [r3, #12]
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	ea40 0301 	orr.w	r3, r0, r1
 8004798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047c8:	f021 010c 	bic.w	r1, r1, #12
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047d6:	430b      	orrs	r3, r1
 80047d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	6999      	ldr	r1, [r3, #24]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	ea40 0301 	orr.w	r3, r0, r1
 80047f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <UART_SetConfig+0x2cc>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d005      	beq.n	8004810 <UART_SetConfig+0xa0>
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <UART_SetConfig+0x2d0>)
 800480c:	429a      	cmp	r2, r3
 800480e:	d104      	bne.n	800481a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7fd fe64 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 8004814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004818:	e003      	b.n	8004822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800481a:	f7fd fe4b 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800481e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	f040 810c 	bne.w	8004a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800483a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800483e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	1891      	adds	r1, r2, r2
 8004848:	65b9      	str	r1, [r7, #88]	; 0x58
 800484a:	415b      	adcs	r3, r3
 800484c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800484e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004852:	4621      	mov	r1, r4
 8004854:	eb12 0801 	adds.w	r8, r2, r1
 8004858:	4629      	mov	r1, r5
 800485a:	eb43 0901 	adc.w	r9, r3, r1
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800486e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004872:	4690      	mov	r8, r2
 8004874:	4699      	mov	r9, r3
 8004876:	4623      	mov	r3, r4
 8004878:	eb18 0303 	adds.w	r3, r8, r3
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004880:	462b      	mov	r3, r5
 8004882:	eb49 0303 	adc.w	r3, r9, r3
 8004886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800489a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800489e:	460b      	mov	r3, r1
 80048a0:	18db      	adds	r3, r3, r3
 80048a2:	653b      	str	r3, [r7, #80]	; 0x50
 80048a4:	4613      	mov	r3, r2
 80048a6:	eb42 0303 	adc.w	r3, r2, r3
 80048aa:	657b      	str	r3, [r7, #84]	; 0x54
 80048ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048b4:	f7fb fce4 	bl	8000280 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <UART_SetConfig+0x2d4>)
 80048be:	fba3 2302 	umull	r2, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	011c      	lsls	r4, r3, #4
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	64b9      	str	r1, [r7, #72]	; 0x48
 80048e0:	415b      	adcs	r3, r3
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e8:	4641      	mov	r1, r8
 80048ea:	eb12 0a01 	adds.w	sl, r2, r1
 80048ee:	4649      	mov	r1, r9
 80048f0:	eb43 0b01 	adc.w	fp, r3, r1
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004908:	4692      	mov	sl, r2
 800490a:	469b      	mov	fp, r3
 800490c:	4643      	mov	r3, r8
 800490e:	eb1a 0303 	adds.w	r3, sl, r3
 8004912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004916:	464b      	mov	r3, r9
 8004918:	eb4b 0303 	adc.w	r3, fp, r3
 800491c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004934:	460b      	mov	r3, r1
 8004936:	18db      	adds	r3, r3, r3
 8004938:	643b      	str	r3, [r7, #64]	; 0x40
 800493a:	4613      	mov	r3, r2
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
 8004942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800494a:	f7fb fc99 	bl	8000280 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4611      	mov	r1, r2
 8004954:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004956:	fba3 2301 	umull	r2, r3, r3, r1
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2264      	movs	r2, #100	; 0x64
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	1acb      	subs	r3, r1, r3
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800496a:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <UART_SetConfig+0x2d4>)
 800496c:	fba3 2302 	umull	r2, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004978:	441c      	add	r4, r3
 800497a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497e:	2200      	movs	r2, #0
 8004980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	1891      	adds	r1, r2, r2
 8004992:	63b9      	str	r1, [r7, #56]	; 0x38
 8004994:	415b      	adcs	r3, r3
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800499c:	4641      	mov	r1, r8
 800499e:	1851      	adds	r1, r2, r1
 80049a0:	6339      	str	r1, [r7, #48]	; 0x30
 80049a2:	4649      	mov	r1, r9
 80049a4:	414b      	adcs	r3, r1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049b4:	4659      	mov	r1, fp
 80049b6:	00cb      	lsls	r3, r1, #3
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049be:	4651      	mov	r1, sl
 80049c0:	00ca      	lsls	r2, r1, #3
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	4642      	mov	r2, r8
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d0:	464b      	mov	r3, r9
 80049d2:	460a      	mov	r2, r1
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049f0:	460b      	mov	r3, r1
 80049f2:	18db      	adds	r3, r3, r3
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f6:	4613      	mov	r3, r2
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a06:	f7fb fc3b 	bl	8000280 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004a10:	fba3 1302 	umull	r1, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2164      	movs	r1, #100	; 0x64
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	3332      	adds	r3, #50	; 0x32
 8004a22:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 0207 	and.w	r2, r3, #7
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4422      	add	r2, r4
 8004a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a38:	e105      	b.n	8004c46 <UART_SetConfig+0x4d6>
 8004a3a:	bf00      	nop
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	40011400 	.word	0x40011400
 8004a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	1891      	adds	r1, r2, r2
 8004a60:	6239      	str	r1, [r7, #32]
 8004a62:	415b      	adcs	r3, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	1854      	adds	r4, r2, r1
 8004a6e:	4649      	mov	r1, r9
 8004a70:	eb43 0501 	adc.w	r5, r3, r1
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	00eb      	lsls	r3, r5, #3
 8004a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a82:	00e2      	lsls	r2, r4, #3
 8004a84:	4614      	mov	r4, r2
 8004a86:	461d      	mov	r5, r3
 8004a88:	4643      	mov	r3, r8
 8004a8a:	18e3      	adds	r3, r4, r3
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a90:	464b      	mov	r3, r9
 8004a92:	eb45 0303 	adc.w	r3, r5, r3
 8004a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	008b      	lsls	r3, r1, #2
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	008a      	lsls	r2, r1, #2
 8004ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac8:	f7fb fbda 	bl	8000280 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	011c      	lsls	r4, r3, #4
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	61b9      	str	r1, [r7, #24]
 8004af4:	415b      	adcs	r3, r3
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6139      	str	r1, [r7, #16]
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b30:	464b      	mov	r3, r9
 8004b32:	460a      	mov	r2, r1
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b54:	4649      	mov	r1, r9
 8004b56:	008b      	lsls	r3, r1, #2
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5e:	4641      	mov	r1, r8
 8004b60:	008a      	lsls	r2, r1, #2
 8004b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b66:	f7fb fb8b 	bl	8000280 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a34      	ldr	r2, [pc, #208]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b8e:	441c      	add	r4, r3
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	673b      	str	r3, [r7, #112]	; 0x70
 8004b98:	677a      	str	r2, [r7, #116]	; 0x74
 8004b9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1851      	adds	r1, r2, r1
 8004bb2:	6039      	str	r1, [r7, #0]
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	414b      	adcs	r3, r1
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	00cb      	lsls	r3, r1, #3
 8004bca:	4651      	mov	r1, sl
 8004bcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	00ca      	lsls	r2, r1, #3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4642      	mov	r2, r8
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf4:	667a      	str	r2, [r7, #100]	; 0x64
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c02:	4649      	mov	r1, r9
 8004c04:	008b      	lsls	r3, r1, #2
 8004c06:	4641      	mov	r1, r8
 8004c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	008a      	lsls	r2, r1, #2
 8004c10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c14:	f7fb fb34 	bl	8000280 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2164      	movs	r1, #100	; 0x64
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4422      	add	r2, r4
 8004c44:	609a      	str	r2, [r3, #8]
}
 8004c46:	bf00      	nop
 8004c48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c52:	bf00      	nop
 8004c54:	51eb851f 	.word	0x51eb851f

08004c58 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004c58:	b084      	sub	sp, #16
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	f107 001c 	add.w	r0, r7, #28
 8004c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004c6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004c70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004c72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004c76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004c7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004c7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004c82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	b004      	add	sp, #16
 8004cac:	4770      	bx	lr

08004cae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0303 	and.w	r3, r3, #3
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d40:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004d46:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004d4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d5c:	f023 030f 	bic.w	r3, r3, #15
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	b2db      	uxtb	r3, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	461a      	mov	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
}  
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ddc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004de2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004de8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0

}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b088      	sub	sp, #32
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff74 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	2110      	movs	r1, #16
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa19 	bl	8005278 <SDMMC_GetCmdResp1>
 8004e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e48:	69fb      	ldr	r3, [r7, #28]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b088      	sub	sp, #32
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004e60:	2311      	movs	r3, #17
 8004e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff52 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	2111      	movs	r1, #17
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f9f7 	bl	8005278 <SDMMC_GetCmdResp1>
 8004e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004ea4:	2312      	movs	r3, #18
 8004ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff30 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	2112      	movs	r1, #18
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f9d5 	bl	8005278 <SDMMC_GetCmdResp1>
 8004ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b088      	sub	sp, #32
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004ee8:	2318      	movs	r3, #24
 8004eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004efa:	f107 0308 	add.w	r3, r7, #8
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff0e 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	2118      	movs	r1, #24
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f9b3 	bl	8005278 <SDMMC_GetCmdResp1>
 8004f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f14:	69fb      	ldr	r3, [r7, #28]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004f2c:	2319      	movs	r3, #25
 8004f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f30:	2340      	movs	r3, #64	; 0x40
 8004f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f3e:	f107 0308 	add.w	r3, r7, #8
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff feec 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	2119      	movs	r1, #25
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f991 	bl	8005278 <SDMMC_GetCmdResp1>
 8004f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f58:	69fb      	ldr	r3, [r7, #28]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004f70:	230c      	movs	r3, #12
 8004f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f82:	f107 0308 	add.w	r3, r7, #8
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff feca 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f8e:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <SDMMC_CmdStopTransfer+0x40>)
 8004f90:	210c      	movs	r1, #12
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f970 	bl	8005278 <SDMMC_GetCmdResp1>
 8004f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	05f5e100 	.word	0x05f5e100

08004fa8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fca:	f107 0310 	add.w	r3, r7, #16
 8004fce:	4619      	mov	r1, r3
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fea6 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	2107      	movs	r1, #7
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f94b 	bl	8005278 <SDMMC_GetCmdResp1>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3728      	adds	r7, #40	; 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b088      	sub	sp, #32
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800500c:	f107 0308 	add.w	r3, r7, #8
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fe85 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fb65 	bl	80056e8 <SDMMC_GetCmdError>
 800501e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005020:	69fb      	ldr	r3, [r7, #28]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b088      	sub	sp, #32
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005032:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005038:	2308      	movs	r3, #8
 800503a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fe66 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 faf8 	bl	800564c <SDMMC_GetCmdResp7>
 800505c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800505e:	69fb      	ldr	r3, [r7, #28]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005076:	2337      	movs	r3, #55	; 0x37
 8005078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005088:	f107 0308 	add.w	r3, r7, #8
 800508c:	4619      	mov	r1, r3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fe47 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005094:	f241 3288 	movw	r2, #5000	; 0x1388
 8005098:	2137      	movs	r1, #55	; 0x37
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8ec 	bl	8005278 <SDMMC_GetCmdResp1>
 80050a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050a2:	69fb      	ldr	r3, [r7, #28]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80050c2:	2329      	movs	r3, #41	; 0x29
 80050c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050d4:	f107 0308 	add.w	r3, r7, #8
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fe21 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f9ff 	bl	80054e4 <SDMMC_GetCmdResp3>
 80050e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e8:	69fb      	ldr	r3, [r7, #28]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005100:	2306      	movs	r3, #6
 8005102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005104:	2340      	movs	r3, #64	; 0x40
 8005106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fe02 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	2106      	movs	r1, #6
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8a7 	bl	8005278 <SDMMC_GetCmdResp1>
 800512a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b088      	sub	sp, #32
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005142:	2333      	movs	r3, #51	; 0x33
 8005144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800514e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005154:	f107 0308 	add.w	r3, r7, #8
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fde1 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	2133      	movs	r1, #51	; 0x33
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f886 	bl	8005278 <SDMMC_GetCmdResp1>
 800516c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800516e:	69fb      	ldr	r3, [r7, #28]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005184:	2302      	movs	r3, #2
 8005186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005188:	23c0      	movs	r3, #192	; 0xc0
 800518a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005194:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005196:	f107 0308 	add.w	r3, r7, #8
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fdc0 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f956 	bl	8005454 <SDMMC_GetCmdResp2>
 80051a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051aa:	69fb      	ldr	r3, [r7, #28]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80051c2:	2309      	movs	r3, #9
 80051c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80051c6:	23c0      	movs	r3, #192	; 0xc0
 80051c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d4:	f107 0308 	add.w	r3, r7, #8
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fda1 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f937 	bl	8005454 <SDMMC_GetCmdResp2>
 80051e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b088      	sub	sp, #32
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005200:	2303      	movs	r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800520c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005210:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fd82 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	2103      	movs	r1, #3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f99c 	bl	8005560 <SDMMC_GetCmdResp6>
 8005228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005242:	230d      	movs	r3, #13
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005246:	2340      	movs	r3, #64	; 0x40
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fd61 	bl	8004d22 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	210d      	movs	r1, #13
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f806 	bl	8005278 <SDMMC_GetCmdResp1>
 800526c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	460b      	mov	r3, r1
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005286:	4b70      	ldr	r3, [pc, #448]	; (8005448 <SDMMC_GetCmdResp1+0x1d0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a70      	ldr	r2, [pc, #448]	; (800544c <SDMMC_GetCmdResp1+0x1d4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	0a5a      	lsrs	r2, r3, #9
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	61fa      	str	r2, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052a8:	e0c9      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ef      	beq.n	800529a <SDMMC_GetCmdResp1+0x22>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ea      	bne.n	800529a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2204      	movs	r2, #4
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052d6:	2304      	movs	r3, #4
 80052d8:	e0b1      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0a6      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	22c5      	movs	r2, #197	; 0xc5
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fd3d 	bl	8004d76 <SDIO_GetCommandResponse>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	4293      	cmp	r3, r2
 8005304:	d001      	beq.n	800530a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005306:	2301      	movs	r3, #1
 8005308:	e099      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800530a:	2100      	movs	r1, #0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fd3f 	bl	8004d90 <SDIO_GetResponse>
 8005312:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <SDMMC_GetCmdResp1+0x1d8>)
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800531e:	2300      	movs	r3, #0
 8005320:	e08d      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	da02      	bge.n	800532e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800532c:	e087      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	e080      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	e079      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005358:	e071      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005368:	e069      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005378:	e061      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005388:	e059      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005398:	e051      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a8:	e049      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80053b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b8:	e041      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80053c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c8:	e039      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80053d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053d8:	e031      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80053e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053e8:	e029      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80053f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053f8:	e021      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005404:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005408:	e019      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005414:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005418:	e011      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005424:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005428:	e009      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005434:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005438:	e001      	b.n	800543e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800543a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000
 800544c:	10624dd3 	.word	0x10624dd3
 8005450:	fdffe008 	.word	0xfdffe008

08005454 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800545c:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <SDMMC_GetCmdResp2+0x88>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <SDMMC_GetCmdResp2+0x8c>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	0a5b      	lsrs	r3, r3, #9
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800547c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005480:	e026      	b.n	80054d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ef      	beq.n	8005472 <SDMMC_GetCmdResp2+0x1e>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ea      	bne.n	8005472 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ae:	2304      	movs	r3, #4
 80054b0:	e00e      	b.n	80054d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e003      	b.n	80054d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	22c5      	movs	r2, #197	; 0xc5
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000000 	.word	0x20000000
 80054e0:	10624dd3 	.word	0x10624dd3

080054e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <SDMMC_GetCmdResp3+0x74>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <SDMMC_GetCmdResp3+0x78>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0a5b      	lsrs	r3, r3, #9
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800550c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005510:	e01b      	b.n	800554a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0ef      	beq.n	8005502 <SDMMC_GetCmdResp3+0x1e>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1ea      	bne.n	8005502 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2204      	movs	r2, #4
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800553e:	2304      	movs	r3, #4
 8005540:	e003      	b.n	800554a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	22c5      	movs	r2, #197	; 0xc5
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000
 800555c:	10624dd3 	.word	0x10624dd3

08005560 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	460b      	mov	r3, r1
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800556e:	4b35      	ldr	r3, [pc, #212]	; (8005644 <SDMMC_GetCmdResp6+0xe4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a35      	ldr	r2, [pc, #212]	; (8005648 <SDMMC_GetCmdResp6+0xe8>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	0a5b      	lsrs	r3, r3, #9
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800558e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005592:	e052      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005598:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ef      	beq.n	8005584 <SDMMC_GetCmdResp6+0x24>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ea      	bne.n	8005584 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2204      	movs	r2, #4
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055c0:	2304      	movs	r3, #4
 80055c2:	e03a      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e02f      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fbcb 	bl	8004d76 <SDIO_GetCommandResponse>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	7afb      	ldrb	r3, [r7, #11]
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d001      	beq.n	80055ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e025      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22c5      	movs	r2, #197	; 0xc5
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80055f4:	2100      	movs	r1, #0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fbca 	bl	8004d90 <SDIO_GetResponse>
 80055fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	b29a      	uxth	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005612:	2300      	movs	r3, #0
 8005614:	e011      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005624:	e009      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005634:	e001      	b.n	800563a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000000 	.word	0x20000000
 8005648:	10624dd3 	.word	0x10624dd3

0800564c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <SDMMC_GetCmdResp7+0x94>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <SDMMC_GetCmdResp7+0x98>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0a5b      	lsrs	r3, r3, #9
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	60fa      	str	r2, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005678:	e02c      	b.n	80056d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ef      	beq.n	800566a <SDMMC_GetCmdResp7+0x1e>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056a6:	2304      	movs	r3, #4
 80056a8:	e014      	b.n	80056d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056bc:	2301      	movs	r3, #1
 80056be:	e009      	b.n	80056d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056d2:	2300      	movs	r3, #0
  
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000000 	.word	0x20000000
 80056e4:	10624dd3 	.word	0x10624dd3

080056e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <SDMMC_GetCmdError+0x50>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <SDMMC_GetCmdError+0x54>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0a5b      	lsrs	r3, r3, #9
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	60fa      	str	r2, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005714:	e009      	b.n	800572a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f1      	beq.n	8005706 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	22c5      	movs	r2, #197	; 0xc5
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3

08005740 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <MX_FATFS_Init+0x18>)
 8005746:	4805      	ldr	r0, [pc, #20]	; (800575c <MX_FATFS_Init+0x1c>)
 8005748:	f002 ffcc 	bl	80086e4 <FATFS_LinkDriver>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <MX_FATFS_Init+0x20>)
 8005752:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2000024c 	.word	0x2000024c
 800575c:	080092d0 	.word	0x080092d0
 8005760:	20000248 	.word	0x20000248

08005764 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005768:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800576a:	4618      	mov	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800577e:	f000 f896 	bl	80058ae <BSP_SD_IsDetected>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e012      	b.n	80057b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800578c:	480b      	ldr	r0, [pc, #44]	; (80057bc <BSP_SD_Init+0x48>)
 800578e:	f7fc feb9 	bl	8002504 <HAL_SD_Init>
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800579c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057a0:	4806      	ldr	r0, [pc, #24]	; (80057bc <BSP_SD_Init+0x48>)
 80057a2:	f7fd fc87 	bl	80030b4 <HAL_SD_ConfigWideBusOperation>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80057b0:	79fb      	ldrb	r3, [r7, #7]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200000b8 	.word	0x200000b8

080057c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	4806      	ldr	r0, [pc, #24]	; (80057f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80057d8:	f7fc ff44 	bl	8002664 <HAL_SD_ReadBlocks_DMA>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	200000b8 	.word	0x200000b8

080057f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	4806      	ldr	r0, [pc, #24]	; (8005824 <BSP_SD_WriteBlocks_DMA+0x30>)
 800580c:	f7fd f80c 	bl	8002828 <HAL_SD_WriteBlocks_DMA>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	200000b8 	.word	0x200000b8

08005828 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800582c:	4805      	ldr	r0, [pc, #20]	; (8005844 <BSP_SD_GetCardState+0x1c>)
 800582e:	f7fd fcdb 	bl	80031e8 <HAL_SD_GetCardState>
 8005832:	4603      	mov	r3, r0
 8005834:	2b04      	cmp	r3, #4
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
}
 800583e:	4618      	mov	r0, r3
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200000b8 	.word	0x200000b8

08005848 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4803      	ldr	r0, [pc, #12]	; (8005860 <BSP_SD_GetCardInfo+0x18>)
 8005854:	f7fd fc02 	bl	800305c <HAL_SD_GetCardInfo>
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200000b8 	.word	0x200000b8

08005864 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800586c:	f000 f818 	bl	80058a0 <BSP_SD_AbortCallback>
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005880:	f000 f98c 	bl	8005b9c <BSP_SD_WriteCpltCallback>
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005894:	f000 f98e 	bl	8005bb4 <BSP_SD_ReadCpltCallback>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0

}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80058b4:	2301      	movs	r3, #1
 80058b6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	b2db      	uxtb	r3, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80058d0:	f7fb faec 	bl	8000eac <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80058d6:	e006      	b.n	80058e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80058d8:	f7ff ffa6 	bl	8005828 <BSP_SD_GetCardState>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e009      	b.n	80058fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80058e6:	f7fb fae1 	bl	8000eac <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d8f0      	bhi.n	80058d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <SD_CheckStatus+0x38>)
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005914:	f7ff ff88 	bl	8005828 <BSP_SD_GetCardState>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <SD_CheckStatus+0x38>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <SD_CheckStatus+0x38>)
 800592c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <SD_CheckStatus+0x38>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000009 	.word	0x20000009

08005940 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800594a:	f7ff ff13 	bl	8005774 <BSP_SD_Init>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ffd4 	bl	8005904 <SD_CheckStatus>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <SD_initialize+0x34>)
 8005962:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <SD_initialize+0x34>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000009 	.word	0x20000009

08005978 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ffbd 	bl	8005904 <SD_CheckStatus>
 800598a:	4603      	mov	r3, r0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80059a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80059ac:	f7ff ff8c 	bl	80058c8 <SD_CheckStatusWithTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da01      	bge.n	80059ba <SD_read+0x26>
  {
    return res;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	e03b      	b.n	8005a32 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	68b8      	ldr	r0, [r7, #8]
 80059c0:	f7ff fefe 	bl	80057c0 <BSP_SD_ReadBlocks_DMA>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d132      	bne.n	8005a30 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <SD_read+0xa8>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80059d0:	f7fb fa6c 	bl	8000eac <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80059d6:	bf00      	nop
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <SD_read+0xa8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <SD_read+0x5e>
 80059e0:	f7fb fa64 	bl	8000eac <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d9f2      	bls.n	80059d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <SD_read+0xa8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	e017      	b.n	8005a30 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <SD_read+0xa8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005a06:	f7fb fa51 	bl	8000eac <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a0c:	e007      	b.n	8005a1e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a0e:	f7ff ff0b 	bl	8005828 <BSP_SD_GetCardState>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <SD_read+0x8a>
          {
            res = RES_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005a1c:	e008      	b.n	8005a30 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a1e:	f7fb fa45 	bl	8000eac <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d9ee      	bls.n	8005a0e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200006b8 	.word	0x200006b8

08005a40 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <SD_write+0xa8>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a5a:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a5e:	f7ff ff33 	bl	80058c8 <SD_CheckStatusWithTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da01      	bge.n	8005a6c <SD_write+0x2c>
  {
    return res;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	e038      	b.n	8005ade <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f7ff febf 	bl	80057f4 <BSP_SD_WriteBlocks_DMA>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d12f      	bne.n	8005adc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005a7c:	f7fb fa16 	bl	8000eac <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005a82:	bf00      	nop
 8005a84:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <SD_write+0xa8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <SD_write+0x5e>
 8005a8c:	f7fb fa0e 	bl	8000eac <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d9f2      	bls.n	8005a84 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <SD_write+0xa8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	e017      	b.n	8005adc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <SD_write+0xa8>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005ab2:	f7fb f9fb 	bl	8000eac <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005ab8:	e007      	b.n	8005aca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005aba:	f7ff feb5 	bl	8005828 <BSP_SD_GetCardState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <SD_write+0x8a>
          {
            res = RES_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac8:	e008      	b.n	8005adc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005aca:	f7fb f9ef 	bl	8000eac <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d9ee      	bls.n	8005aba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200006b4 	.word	0x200006b4

08005aec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	603a      	str	r2, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
 8005af8:	460b      	mov	r3, r1
 8005afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b02:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <SD_ioctl+0xac>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <SD_ioctl+0x28>
 8005b10:	2303      	movs	r3, #3
 8005b12:	e03c      	b.n	8005b8e <SD_ioctl+0xa2>

  switch (cmd)
 8005b14:	79bb      	ldrb	r3, [r7, #6]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d834      	bhi.n	8005b84 <SD_ioctl+0x98>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <SD_ioctl+0x34>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b39 	.word	0x08005b39
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b6b 	.word	0x08005b6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b36:	e028      	b.n	8005b8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fe83 	bl	8005848 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b4e:	e01c      	b.n	8005b8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b50:	f107 030c 	add.w	r3, r7, #12
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fe77 	bl	8005848 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b68:	e00f      	b.n	8005b8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b6a:	f107 030c 	add.w	r3, r7, #12
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fe6a 	bl	8005848 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	0a5a      	lsrs	r2, r3, #9
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b82:	e002      	b.n	8005b8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000009 	.word	0x20000009

08005b9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <BSP_SD_WriteCpltCallback+0x14>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	200006b4 	.word	0x200006b4

08005bb4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <BSP_SD_ReadCpltCallback+0x14>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	200006b8 	.word	0x200006b8

08005bcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <disk_status+0x30>)
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	79fa      	ldrb	r2, [r7, #7]
 8005be4:	4905      	ldr	r1, [pc, #20]	; (8005bfc <disk_status+0x30>)
 8005be6:	440a      	add	r2, r1
 8005be8:	7a12      	ldrb	r2, [r2, #8]
 8005bea:	4610      	mov	r0, r2
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200008e4 	.word	0x200008e4

08005c00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	4a0d      	ldr	r2, [pc, #52]	; (8005c48 <disk_initialize+0x48>)
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d111      	bne.n	8005c3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <disk_initialize+0x48>)
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <disk_initialize+0x48>)
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	79fa      	ldrb	r2, [r7, #7]
 8005c2e:	4906      	ldr	r1, [pc, #24]	; (8005c48 <disk_initialize+0x48>)
 8005c30:	440a      	add	r2, r1
 8005c32:	7a12      	ldrb	r2, [r2, #8]
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200008e4 	.word	0x200008e4

08005c4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <disk_read+0x3c>)
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	689c      	ldr	r4, [r3, #8]
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <disk_read+0x3c>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	7a18      	ldrb	r0, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	47a0      	blx	r4
 8005c78:	4603      	mov	r3, r0
 8005c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200008e4 	.word	0x200008e4

08005c8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <disk_write+0x3c>)
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	68dc      	ldr	r4, [r3, #12]
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4a07      	ldr	r2, [pc, #28]	; (8005cc8 <disk_write+0x3c>)
 8005cac:	4413      	add	r3, r2
 8005cae:	7a18      	ldrb	r0, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	47a0      	blx	r4
 8005cb8:	4603      	mov	r3, r0
 8005cba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200008e4 	.word	0x200008e4

08005ccc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	603a      	str	r2, [r7, #0]
 8005cd6:	71fb      	strb	r3, [r7, #7]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <disk_ioctl+0x38>)
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	4906      	ldr	r1, [pc, #24]	; (8005d04 <disk_ioctl+0x38>)
 8005cec:	440a      	add	r2, r1
 8005cee:	7a10      	ldrb	r0, [r2, #8]
 8005cf0:	79b9      	ldrb	r1, [r7, #6]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	200008e4 	.word	0x200008e4

08005d08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3301      	adds	r3, #1
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	b21a      	sxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b21b      	sxth	r3, r3
 8005d28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3303      	adds	r3, #3
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	3202      	adds	r2, #2
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	3201      	adds	r2, #1
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	887a      	ldrh	r2, [r7, #2]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	887b      	ldrh	r3, [r7, #2]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	887a      	ldrh	r2, [r7, #2]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	1c53      	adds	r3, r2, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	6179      	str	r1, [r7, #20]
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	607b      	str	r3, [r7, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f1      	bne.n	8005e26 <mem_cpy+0x1a>
	}
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e4e:	b480      	push	{r7}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	617a      	str	r2, [r7, #20]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	607b      	str	r3, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f3      	bne.n	8005e5e <mem_set+0x10>
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	61fa      	str	r2, [r7, #28]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	61ba      	str	r2, [r7, #24]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <mem_cmp+0x40>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0eb      	beq.n	8005e9c <mem_cmp+0x18>

	return r;
 8005ec4:	697b      	ldr	r3, [r7, #20]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005edc:	e002      	b.n	8005ee4 <chk_chr+0x12>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <chk_chr+0x26>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d1f2      	bne.n	8005ede <chk_chr+0xc>
	return *str;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	781b      	ldrb	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e029      	b.n	8005f70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f1c:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <chk_lock+0xb4>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01d      	beq.n	8005f66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f2a:	4a24      	ldr	r2, [pc, #144]	; (8005fbc <chk_lock+0xb4>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d116      	bne.n	8005f6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <chk_lock+0xb4>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	4413      	add	r3, r2
 8005f44:	3304      	adds	r3, #4
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d10c      	bne.n	8005f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <chk_lock+0xb4>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	4413      	add	r3, r2
 8005f58:	3308      	adds	r3, #8
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d102      	bne.n	8005f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f64:	e007      	b.n	8005f76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d9d2      	bls.n	8005f1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d109      	bne.n	8005f90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <chk_lock+0x80>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d101      	bne.n	8005f8c <chk_lock+0x84>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e010      	b.n	8005fae <chk_lock+0xa6>
 8005f8c:	2312      	movs	r3, #18
 8005f8e:	e00e      	b.n	8005fae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d108      	bne.n	8005fa8 <chk_lock+0xa0>
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <chk_lock+0xb4>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d101      	bne.n	8005fac <chk_lock+0xa4>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	e000      	b.n	8005fae <chk_lock+0xa6>
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	200006c4 	.word	0x200006c4

08005fc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	e002      	b.n	8005fd2 <enq_lock+0x12>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d806      	bhi.n	8005fe6 <enq_lock+0x26>
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <enq_lock+0x40>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	4413      	add	r3, r2
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f2      	bne.n	8005fcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	200006c4 	.word	0x200006c4

08006004 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e01f      	b.n	8006054 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006014:	4a41      	ldr	r2, [pc, #260]	; (800611c <inc_lock+0x118>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4413      	add	r3, r2
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d113      	bne.n	800604e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006026:	4a3d      	ldr	r2, [pc, #244]	; (800611c <inc_lock+0x118>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	4413      	add	r3, r2
 800602e:	3304      	adds	r3, #4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006036:	429a      	cmp	r2, r3
 8006038:	d109      	bne.n	800604e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800603a:	4a38      	ldr	r2, [pc, #224]	; (800611c <inc_lock+0x118>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	4413      	add	r3, r2
 8006042:	3308      	adds	r3, #8
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800604a:	429a      	cmp	r2, r3
 800604c:	d006      	beq.n	800605c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d9dc      	bls.n	8006014 <inc_lock+0x10>
 800605a:	e000      	b.n	800605e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800605c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d132      	bne.n	80060ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e002      	b.n	8006070 <inc_lock+0x6c>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d806      	bhi.n	8006084 <inc_lock+0x80>
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <inc_lock+0x118>)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	4413      	add	r3, r2
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f2      	bne.n	800606a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d101      	bne.n	800608e <inc_lock+0x8a>
 800608a:	2300      	movs	r3, #0
 800608c:	e040      	b.n	8006110 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4922      	ldr	r1, [pc, #136]	; (800611c <inc_lock+0x118>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	440b      	add	r3, r1
 800609a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	491e      	ldr	r1, [pc, #120]	; (800611c <inc_lock+0x118>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	440b      	add	r3, r1
 80060a8:	3304      	adds	r3, #4
 80060aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	491a      	ldr	r1, [pc, #104]	; (800611c <inc_lock+0x118>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	440b      	add	r3, r1
 80060b8:	3308      	adds	r3, #8
 80060ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <inc_lock+0x118>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	4413      	add	r3, r2
 80060c4:	330c      	adds	r3, #12
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <inc_lock+0xe0>
 80060d0:	4a12      	ldr	r2, [pc, #72]	; (800611c <inc_lock+0x118>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	4413      	add	r3, r2
 80060d8:	330c      	adds	r3, #12
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <inc_lock+0xe0>
 80060e0:	2300      	movs	r3, #0
 80060e2:	e015      	b.n	8006110 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <inc_lock+0xf8>
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <inc_lock+0x118>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	4413      	add	r3, r2
 80060f2:	330c      	adds	r3, #12
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	e001      	b.n	8006100 <inc_lock+0xfc>
 80060fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006100:	4906      	ldr	r1, [pc, #24]	; (800611c <inc_lock+0x118>)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	440b      	add	r3, r1
 8006108:	330c      	adds	r3, #12
 800610a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	200006c4 	.word	0x200006c4

08006120 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3b01      	subs	r3, #1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d825      	bhi.n	8006180 <dec_lock+0x60>
		n = Files[i].ctr;
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <dec_lock+0x74>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	330c      	adds	r3, #12
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006142:	89fb      	ldrh	r3, [r7, #14]
 8006144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006148:	d101      	bne.n	800614e <dec_lock+0x2e>
 800614a:	2300      	movs	r3, #0
 800614c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800614e:	89fb      	ldrh	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <dec_lock+0x3a>
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800615a:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <dec_lock+0x74>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4413      	add	r3, r2
 8006162:	330c      	adds	r3, #12
 8006164:	89fa      	ldrh	r2, [r7, #14]
 8006166:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006168:	89fb      	ldrh	r3, [r7, #14]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <dec_lock+0x5a>
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <dec_lock+0x74>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	4413      	add	r3, r2
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	737b      	strb	r3, [r7, #13]
 800617e:	e001      	b.n	8006184 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006180:	2302      	movs	r3, #2
 8006182:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006184:	7b7b      	ldrb	r3, [r7, #13]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	200006c4 	.word	0x200006c4

08006198 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e010      	b.n	80061c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <clear_lock+0x44>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d105      	bne.n	80061c2 <clear_lock+0x2a>
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <clear_lock+0x44>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	4413      	add	r3, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d9eb      	bls.n	80061a6 <clear_lock+0xe>
	}
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	200006c4 	.word	0x200006c4

080061e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	78db      	ldrb	r3, [r3, #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d034      	beq.n	800625e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7858      	ldrb	r0, [r3, #1]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006204:	2301      	movs	r3, #1
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	f7ff fd40 	bl	8005c8c <disk_write>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
 8006216:	e022      	b.n	800625e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	429a      	cmp	r2, r3
 800622c:	d217      	bcs.n	800625e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	789b      	ldrb	r3, [r3, #2]
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	e010      	b.n	8006258 <sync_window+0x78>
					wsect += fs->fsize;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7858      	ldrb	r0, [r3, #1]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800624a:	2301      	movs	r3, #1
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	f7ff fd1d 	bl	8005c8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3b01      	subs	r3, #1
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d8eb      	bhi.n	8006236 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d01b      	beq.n	80062b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ffad 	bl	80061e0 <sync_window>
 8006286:	4603      	mov	r3, r0
 8006288:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d113      	bne.n	80062b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7858      	ldrb	r0, [r3, #1]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800629a:	2301      	movs	r3, #1
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	f7ff fcd5 	bl	8005c4c <disk_read>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff87 	bl	80061e0 <sync_window>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d158      	bne.n	800638e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d148      	bne.n	8006376 <sync_fs+0xb2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	791b      	ldrb	r3, [r3, #4]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d144      	bne.n	8006376 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3334      	adds	r3, #52	; 0x34
 80062f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fda9 	bl	8005e4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3334      	adds	r3, #52	; 0x34
 8006300:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006304:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fd38 	bl	8005d7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3334      	adds	r3, #52	; 0x34
 8006312:	4921      	ldr	r1, [pc, #132]	; (8006398 <sync_fs+0xd4>)
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fd4d 	bl	8005db4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3334      	adds	r3, #52	; 0x34
 800631e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006322:	491e      	ldr	r1, [pc, #120]	; (800639c <sync_fs+0xd8>)
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fd45 	bl	8005db4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3334      	adds	r3, #52	; 0x34
 800632e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7ff fd3b 	bl	8005db4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3334      	adds	r3, #52	; 0x34
 8006342:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7ff fd31 	bl	8005db4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7858      	ldrb	r0, [r3, #1]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800636a:	2301      	movs	r3, #1
 800636c:	f7ff fc8e 	bl	8005c8c <disk_write>
			fs->fsi_flag = 0;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2200      	movs	r2, #0
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fca4 	bl	8005ccc <disk_ioctl>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <sync_fs+0xca>
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	41615252 	.word	0x41615252
 800639c:	61417272 	.word	0x61417272

080063a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	3b02      	subs	r3, #2
 80063ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	3b02      	subs	r3, #2
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d301      	bcc.n	80063c0 <clust2sect+0x20>
 80063bc:	2300      	movs	r3, #0
 80063be:	e008      	b.n	80063d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	461a      	mov	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	fb03 f202 	mul.w	r2, r3, r2
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	4413      	add	r3, r2
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d904      	bls.n	80063fe <get_fat+0x20>
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <get_fat+0x26>
		val = 1;	/* Internal error */
 80063fe:	2301      	movs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e08f      	b.n	8006524 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d062      	beq.n	80064d8 <get_fat+0xfa>
 8006412:	2b03      	cmp	r3, #3
 8006414:	dc7c      	bgt.n	8006510 <get_fat+0x132>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d002      	beq.n	8006420 <get_fat+0x42>
 800641a:	2b02      	cmp	r3, #2
 800641c:	d042      	beq.n	80064a4 <get_fat+0xc6>
 800641e:	e077      	b.n	8006510 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	0a5b      	lsrs	r3, r3, #9
 8006436:	4413      	add	r3, r2
 8006438:	4619      	mov	r1, r3
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f7ff ff14 	bl	8006268 <move_window>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d167      	bne.n	8006516 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	60fa      	str	r2, [r7, #12]
 800644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006458:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	0a5b      	lsrs	r3, r3, #9
 8006462:	4413      	add	r3, r2
 8006464:	4619      	mov	r1, r3
 8006466:	6938      	ldr	r0, [r7, #16]
 8006468:	f7ff fefe 	bl	8006268 <move_window>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d153      	bne.n	800651a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	461a      	mov	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <get_fat+0xbc>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	e002      	b.n	80064a0 <get_fat+0xc2>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a0:	617b      	str	r3, [r7, #20]
			break;
 80064a2:	e03f      	b.n	8006524 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	4413      	add	r3, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	6938      	ldr	r0, [r7, #16]
 80064b2:	f7ff fed9 	bl	8006268 <move_window>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d130      	bne.n	800651e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80064ca:	4413      	add	r3, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fc1b 	bl	8005d08 <ld_word>
 80064d2:	4603      	mov	r3, r0
 80064d4:	617b      	str	r3, [r7, #20]
			break;
 80064d6:	e025      	b.n	8006524 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	4413      	add	r3, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6938      	ldr	r0, [r7, #16]
 80064e6:	f7ff febf 	bl	8006268 <move_window>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d118      	bne.n	8006522 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80064fe:	4413      	add	r3, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fc19 	bl	8005d38 <ld_dword>
 8006506:	4603      	mov	r3, r0
 8006508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800650c:	617b      	str	r3, [r7, #20]
			break;
 800650e:	e009      	b.n	8006524 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e006      	b.n	8006524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006516:	bf00      	nop
 8006518:	e004      	b.n	8006524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006522:	bf00      	nop
		}
	}

	return val;
 8006524:	697b      	ldr	r3, [r7, #20]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800652e:	b590      	push	{r4, r7, lr}
 8006530:	b089      	sub	sp, #36	; 0x24
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800653a:	2302      	movs	r3, #2
 800653c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b01      	cmp	r3, #1
 8006542:	f240 80d2 	bls.w	80066ea <put_fat+0x1bc>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	f080 80cc 	bcs.w	80066ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b03      	cmp	r3, #3
 8006558:	f000 8096 	beq.w	8006688 <put_fat+0x15a>
 800655c:	2b03      	cmp	r3, #3
 800655e:	f300 80cd 	bgt.w	80066fc <put_fat+0x1ce>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d002      	beq.n	800656c <put_fat+0x3e>
 8006566:	2b02      	cmp	r3, #2
 8006568:	d06e      	beq.n	8006648 <put_fat+0x11a>
 800656a:	e0c7      	b.n	80066fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4413      	add	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	4413      	add	r3, r2
 8006584:	4619      	mov	r1, r3
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fe6e 	bl	8006268 <move_window>
 800658c:	4603      	mov	r3, r0
 800658e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 80ab 	bne.w	80066ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	1c59      	adds	r1, r3, #1
 80065a2:	61b9      	str	r1, [r7, #24]
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	4413      	add	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <put_fat+0xa4>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b25b      	sxtb	r3, r3
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	b25a      	sxtb	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	4313      	orrs	r3, r2
 80065cc:	b25b      	sxtb	r3, r3
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	e001      	b.n	80065d6 <put_fat+0xa8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	0a5b      	lsrs	r3, r3, #9
 80065e8:	4413      	add	r3, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff fe3b 	bl	8006268 <move_window>
 80065f2:	4603      	mov	r3, r0
 80065f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065f6:	7ffb      	ldrb	r3, [r7, #31]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d17a      	bne.n	80066f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	4413      	add	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <put_fat+0xf0>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	b2db      	uxtb	r3, r3
 800661c:	e00e      	b.n	800663c <put_fat+0x10e>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b25b      	sxtb	r3, r3
 8006624:	f023 030f 	bic.w	r3, r3, #15
 8006628:	b25a      	sxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	b25b      	sxtb	r3, r3
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	b25b      	sxtb	r3, r3
 8006636:	4313      	orrs	r3, r2
 8006638:	b25b      	sxtb	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	70da      	strb	r2, [r3, #3]
			break;
 8006646:	e059      	b.n	80066fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	4413      	add	r3, r2
 8006652:	4619      	mov	r1, r3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fe07 	bl	8006268 <move_window>
 800665a:	4603      	mov	r3, r0
 800665c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d148      	bne.n	80066f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006672:	4413      	add	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	b292      	uxth	r2, r2
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fb7f 	bl	8005d7e <st_word>
			fs->wflag = 1;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	70da      	strb	r2, [r3, #3]
			break;
 8006686:	e039      	b.n	80066fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	09db      	lsrs	r3, r3, #7
 8006690:	4413      	add	r3, r2
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff fde7 	bl	8006268 <move_window>
 800669a:	4603      	mov	r3, r0
 800669c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800669e:	7ffb      	ldrb	r3, [r7, #31]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d12a      	bne.n	80066fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066b8:	4413      	add	r3, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fb3c 	bl	8005d38 <ld_dword>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066c6:	4323      	orrs	r3, r4
 80066c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066d8:	4413      	add	r3, r2
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fb69 	bl	8005db4 <st_dword>
			fs->wflag = 1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	70da      	strb	r2, [r3, #3]
			break;
 80066e8:	e008      	b.n	80066fc <put_fat+0x1ce>
		}
	}
 80066ea:	bf00      	nop
 80066ec:	e006      	b.n	80066fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066fa:	bf00      	nop
	return res;
 80066fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3724      	adds	r7, #36	; 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd90      	pop	{r4, r7, pc}

08006706 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d904      	bls.n	800672c <remove_chain+0x26>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d301      	bcc.n	8006730 <remove_chain+0x2a>
 800672c:	2302      	movs	r3, #2
 800672e:	e04b      	b.n	80067c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	69b8      	ldr	r0, [r7, #24]
 800673e:	f7ff fef6 	bl	800652e <put_fat>
 8006742:	4603      	mov	r3, r0
 8006744:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <remove_chain+0x4a>
 800674c:	7ffb      	ldrb	r3, [r7, #31]
 800674e:	e03b      	b.n	80067c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fe43 	bl	80063de <get_fat>
 8006758:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d031      	beq.n	80067c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <remove_chain+0x64>
 8006766:	2302      	movs	r3, #2
 8006768:	e02e      	b.n	80067c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d101      	bne.n	8006776 <remove_chain+0x70>
 8006772:	2301      	movs	r3, #1
 8006774:	e028      	b.n	80067c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006776:	2200      	movs	r2, #0
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	69b8      	ldr	r0, [r7, #24]
 800677c:	f7ff fed7 	bl	800652e <put_fat>
 8006780:	4603      	mov	r3, r0
 8006782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <remove_chain+0x88>
 800678a:	7ffb      	ldrb	r3, [r7, #31]
 800678c:	e01c      	b.n	80067c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	3b02      	subs	r3, #2
 8006798:	429a      	cmp	r2, r3
 800679a:	d20b      	bcs.n	80067b4 <remove_chain+0xae>
			fs->free_clst++;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d3c6      	bcc.n	8006750 <remove_chain+0x4a>
 80067c2:	e000      	b.n	80067c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <create_chain+0x2c>
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d31b      	bcc.n	8006834 <create_chain+0x64>
 80067fc:	2301      	movs	r3, #1
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	e018      	b.n	8006834 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fdea 	bl	80063de <get_fat>
 800680a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d801      	bhi.n	8006816 <create_chain+0x46>
 8006812:	2301      	movs	r3, #1
 8006814:	e070      	b.n	80068f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d101      	bne.n	8006822 <create_chain+0x52>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	e06a      	b.n	80068f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	429a      	cmp	r2, r3
 800682a:	d201      	bcs.n	8006830 <create_chain+0x60>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	e063      	b.n	80068f8 <create_chain+0x128>
		scl = clst;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	429a      	cmp	r2, r3
 8006846:	d307      	bcc.n	8006858 <create_chain+0x88>
				ncl = 2;
 8006848:	2302      	movs	r3, #2
 800684a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	429a      	cmp	r2, r3
 8006852:	d901      	bls.n	8006858 <create_chain+0x88>
 8006854:	2300      	movs	r3, #0
 8006856:	e04f      	b.n	80068f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fdbf 	bl	80063de <get_fat>
 8006860:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00e      	beq.n	8006886 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d003      	beq.n	8006876 <create_chain+0xa6>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d101      	bne.n	800687a <create_chain+0xaa>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	e03e      	b.n	80068f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	429a      	cmp	r2, r3
 8006880:	d1da      	bne.n	8006838 <create_chain+0x68>
 8006882:	2300      	movs	r3, #0
 8006884:	e038      	b.n	80068f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006886:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006888:	f04f 32ff 	mov.w	r2, #4294967295
 800688c:	69f9      	ldr	r1, [r7, #28]
 800688e:	6938      	ldr	r0, [r7, #16]
 8006890:	f7ff fe4d 	bl	800652e <put_fat>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <create_chain+0xe2>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d006      	beq.n	80068b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6938      	ldr	r0, [r7, #16]
 80068aa:	f7ff fe40 	bl	800652e <put_fat>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d116      	bne.n	80068e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	3b02      	subs	r3, #2
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d804      	bhi.n	80068d6 <create_chain+0x106>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	1e5a      	subs	r2, r3, #1
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	711a      	strb	r2, [r3, #4]
 80068e4:	e007      	b.n	80068f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <create_chain+0x122>
 80068ec:	f04f 33ff 	mov.w	r3, #4294967295
 80068f0:	e000      	b.n	80068f4 <create_chain+0x124>
 80068f2:	2301      	movs	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80068f6:	69fb      	ldr	r3, [r7, #28]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	3304      	adds	r3, #4
 8006916:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	0a5b      	lsrs	r3, r3, #9
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	8952      	ldrh	r2, [r2, #10]
 8006920:	fbb3 f3f2 	udiv	r3, r3, r2
 8006924:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1d1a      	adds	r2, r3, #4
 800692a:	613a      	str	r2, [r7, #16]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <clmt_clust+0x3a>
 8006936:	2300      	movs	r3, #0
 8006938:	e010      	b.n	800695c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	d307      	bcc.n	8006952 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	3304      	adds	r3, #4
 800694e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006950:	e7e9      	b.n	8006926 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006952:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4413      	add	r3, r2
}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697e:	d204      	bcs.n	800698a <dir_sdi+0x22>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <dir_sdi+0x26>
		return FR_INT_ERR;
 800698a:	2302      	movs	r3, #2
 800698c:	e063      	b.n	8006a56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <dir_sdi+0x46>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d902      	bls.n	80069ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10c      	bne.n	80069ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	8912      	ldrh	r2, [r2, #8]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d301      	bcc.n	80069c4 <dir_sdi+0x5c>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e048      	b.n	8006a56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	61da      	str	r2, [r3, #28]
 80069cc:	e029      	b.n	8006a22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	895b      	ldrh	r3, [r3, #10]
 80069d2:	025b      	lsls	r3, r3, #9
 80069d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069d6:	e019      	b.n	8006a0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fcfe 	bl	80063de <get_fat>
 80069e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d101      	bne.n	80069f0 <dir_sdi+0x88>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e032      	b.n	8006a56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d904      	bls.n	8006a00 <dir_sdi+0x98>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d301      	bcc.n	8006a04 <dir_sdi+0x9c>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e028      	b.n	8006a56 <dir_sdi+0xee>
			ofs -= csz;
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d2e1      	bcs.n	80069d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a14:	6979      	ldr	r1, [r7, #20]
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f7ff fcc2 	bl	80063a0 <clust2sect>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <dir_sdi+0xcc>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e010      	b.n	8006a56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	0a5b      	lsrs	r3, r3, #9
 8006a3c:	441a      	add	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	441a      	add	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	3320      	adds	r3, #32
 8006a74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <dir_next+0x28>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a84:	d301      	bcc.n	8006a8a <dir_next+0x2c>
 8006a86:	2304      	movs	r3, #4
 8006a88:	e0aa      	b.n	8006be0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f040 8098 	bne.w	8006bc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	8912      	ldrh	r2, [r2, #8]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	f0c0 8088 	bcc.w	8006bc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	61da      	str	r2, [r3, #28]
 8006abc:	2304      	movs	r3, #4
 8006abe:	e08f      	b.n	8006be0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	0a5b      	lsrs	r3, r3, #9
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	8952      	ldrh	r2, [r2, #10]
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d17a      	bne.n	8006bc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7ff fc80 	bl	80063de <get_fat>
 8006ade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d801      	bhi.n	8006aea <dir_next+0x8c>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e07a      	b.n	8006be0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d101      	bne.n	8006af6 <dir_next+0x98>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e074      	b.n	8006be0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d358      	bcc.n	8006bb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	61da      	str	r2, [r3, #28]
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	e067      	b.n	8006be0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7ff fe59 	bl	80067d0 <create_chain>
 8006b1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <dir_next+0xcc>
 8006b26:	2307      	movs	r3, #7
 8006b28:	e05a      	b.n	8006be0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <dir_next+0xd6>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e055      	b.n	8006be0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d101      	bne.n	8006b40 <dir_next+0xe2>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e04f      	b.n	8006be0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fb4d 	bl	80061e0 <sync_window>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <dir_next+0xf2>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e047      	b.n	8006be0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3334      	adds	r3, #52	; 0x34
 8006b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff f977 	bl	8005e4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fc1a 	bl	80063a0 <clust2sect>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
 8006b72:	e012      	b.n	8006b9a <dir_next+0x13c>
						fs->wflag = 1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff fb30 	bl	80061e0 <sync_window>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <dir_next+0x12c>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e02a      	b.n	8006be0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	895b      	ldrh	r3, [r3, #10]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d3e6      	bcc.n	8006b74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fbf0 	bl	80063a0 <clust2sect>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff feb4 	bl	8006968 <dir_sdi>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d12b      	bne.n	8006c62 <dir_alloc+0x7a>
		n = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	4619      	mov	r1, r3
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fb27 	bl	8006268 <move_window>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11d      	bne.n	8006c60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2be5      	cmp	r3, #229	; 0xe5
 8006c2c:	d004      	beq.n	8006c38 <dir_alloc+0x50>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d102      	bne.n	8006c4c <dir_alloc+0x64>
 8006c46:	e00c      	b.n	8006c62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff ff05 	bl	8006a5e <dir_next>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0d7      	beq.n	8006c0e <dir_alloc+0x26>
 8006c5e:	e000      	b.n	8006c62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d101      	bne.n	8006c6c <dir_alloc+0x84>
 8006c68:	2307      	movs	r3, #7
 8006c6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	331a      	adds	r3, #26
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff f83f 	bl	8005d08 <ld_word>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d109      	bne.n	8006caa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff f834 	bl	8005d08 <ld_word>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	331a      	adds	r3, #26
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff f857 	bl	8005d7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d109      	bne.n	8006cec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f103 0214 	add.w	r2, r3, #20
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7ff f849 	bl	8005d7e <st_word>
	}
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	331a      	adds	r3, #26
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff f800 	bl	8005d08 <ld_word>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <cmp_lfn+0x1e>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e059      	b.n	8006dc6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d28:	2301      	movs	r3, #1
 8006d2a:	81fb      	strh	r3, [r7, #14]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	e033      	b.n	8006d9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006d32:	4a27      	ldr	r2, [pc, #156]	; (8006dd0 <cmp_lfn+0xdc>)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	4413      	add	r3, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe ffe1 	bl	8005d08 <ld_word>
 8006d46:	4603      	mov	r3, r0
 8006d48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006d4a:	89fb      	ldrh	r3, [r7, #14]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01a      	beq.n	8006d86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2bfe      	cmp	r3, #254	; 0xfe
 8006d54:	d812      	bhi.n	8006d7c <cmp_lfn+0x88>
 8006d56:	89bb      	ldrh	r3, [r7, #12]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fd0f 	bl	800877c <ff_wtoupper>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461c      	mov	r4, r3
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	617a      	str	r2, [r7, #20]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fd03 	bl	800877c <ff_wtoupper>
 8006d76:	4603      	mov	r3, r0
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	d001      	beq.n	8006d80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e022      	b.n	8006dc6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006d80:	89bb      	ldrh	r3, [r7, #12]
 8006d82:	81fb      	strh	r3, [r7, #14]
 8006d84:	e006      	b.n	8006d94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006d86:	89bb      	ldrh	r3, [r7, #12]
 8006d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d001      	beq.n	8006d94 <cmp_lfn+0xa0>
 8006d90:	2300      	movs	r3, #0
 8006d92:	e018      	b.n	8006dc6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3301      	adds	r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d9c8      	bls.n	8006d32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <cmp_lfn+0xd0>
 8006dac:	89fb      	ldrh	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <cmp_lfn+0xd0>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <cmp_lfn+0xd0>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006dc4:	2301      	movs	r3, #1
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd90      	pop	{r4, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08009364 	.word	0x08009364

08006dd4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	460b      	mov	r3, r1
 8006de4:	71fb      	strb	r3, [r7, #7]
 8006de6:	4613      	mov	r3, r2
 8006de8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	330d      	adds	r3, #13
 8006dee:	79ba      	ldrb	r2, [r7, #6]
 8006df0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	330b      	adds	r3, #11
 8006df6:	220f      	movs	r2, #15
 8006df8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	331a      	adds	r3, #26
 8006e06:	2100      	movs	r1, #0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe ffb8 	bl	8005d7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	1e5a      	subs	r2, r3, #1
 8006e12:	4613      	mov	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	82fb      	strh	r3, [r7, #22]
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006e26:	8afb      	ldrh	r3, [r7, #22]
 8006e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <put_lfn+0x6c>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	61fa      	str	r2, [r7, #28]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <put_lfn+0xcc>)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	4413      	add	r3, r2
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	8afa      	ldrh	r2, [r7, #22]
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe ff93 	bl	8005d7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006e58:	8afb      	ldrh	r3, [r7, #22]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <put_lfn+0x90>
 8006e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e62:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	3301      	adds	r3, #1
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b0c      	cmp	r3, #12
 8006e6e:	d9da      	bls.n	8006e26 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006e70:	8afb      	ldrh	r3, [r7, #22]
 8006e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d006      	beq.n	8006e88 <put_lfn+0xb4>
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <put_lfn+0xbc>
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	79fa      	ldrb	r2, [r7, #7]
 8006e94:	701a      	strb	r2, [r3, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08009364 	.word	0x08009364

08006ea4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	; 0x30
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006eb2:	220b      	movs	r2, #11
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7fe ffa8 	bl	8005e0c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d92b      	bls.n	8006f1a <gen_numname+0x76>
		sr = seq;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006ec6:	e022      	b.n	8006f0e <gen_numname+0x6a>
			wc = *lfn++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	1c9a      	adds	r2, r3, #2
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed6:	e017      	b.n	8006f08 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	005a      	lsls	r2, r3, #1
 8006edc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <gen_numname+0x5e>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006efc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	3301      	adds	r3, #1
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d9e4      	bls.n	8006ed8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d8      	bne.n	8006ec8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f1a:	2307      	movs	r3, #7
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	3330      	adds	r3, #48	; 0x30
 8006f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f32:	2b39      	cmp	r3, #57	; 0x39
 8006f34:	d904      	bls.n	8006f40 <gen_numname+0x9c>
 8006f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f46:	3330      	adds	r3, #48	; 0x30
 8006f48:	443b      	add	r3, r7
 8006f4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1df      	bne.n	8006f1e <gen_numname+0x7a>
	ns[i] = '~';
 8006f5e:	f107 0214 	add.w	r2, r7, #20
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	4413      	add	r3, r2
 8006f66:	227e      	movs	r2, #126	; 0x7e
 8006f68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6e:	e002      	b.n	8006f76 <gen_numname+0xd2>
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	3301      	adds	r3, #1
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
 8006f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d205      	bcs.n	8006f8a <gen_numname+0xe6>
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	4413      	add	r3, r2
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d1f2      	bne.n	8006f70 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	2b07      	cmp	r3, #7
 8006f8e:	d807      	bhi.n	8006fa0 <gen_numname+0xfc>
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f96:	3330      	adds	r3, #48	; 0x30
 8006f98:	443b      	add	r3, r7
 8006f9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006f9e:	e000      	b.n	8006fa2 <gen_numname+0xfe>
 8006fa0:	2120      	movs	r1, #32
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	460a      	mov	r2, r1
 8006fae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	d9e9      	bls.n	8006f8a <gen_numname+0xe6>
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	3730      	adds	r7, #48	; 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006fcc:	230b      	movs	r3, #11
 8006fce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	0852      	lsrs	r2, r2, #1
 8006fd6:	01db      	lsls	r3, r3, #7
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	6079      	str	r1, [r7, #4]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1ed      	bne.n	8006fd0 <sum_sfn+0x10>
	return sum;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007010:	2100      	movs	r1, #0
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fca8 	bl	8006968 <dir_sdi>
 8007018:	4603      	mov	r3, r0
 800701a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <dir_find+0x24>
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	e0a9      	b.n	800717a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007026:	23ff      	movs	r3, #255	; 0xff
 8007028:	753b      	strb	r3, [r7, #20]
 800702a:	7d3b      	ldrb	r3, [r7, #20]
 800702c:	757b      	strb	r3, [r7, #21]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	4619      	mov	r1, r3
 800703c:	6938      	ldr	r0, [r7, #16]
 800703e:	f7ff f913 	bl	8006268 <move_window>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 8090 	bne.w	800716e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007056:	7dbb      	ldrb	r3, [r7, #22]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <dir_find+0x60>
 800705c:	2304      	movs	r3, #4
 800705e:	75fb      	strb	r3, [r7, #23]
 8007060:	e08a      	b.n	8007178 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	330b      	adds	r3, #11
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800706e:	73fb      	strb	r3, [r7, #15]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	7bfa      	ldrb	r2, [r7, #15]
 8007074:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007076:	7dbb      	ldrb	r3, [r7, #22]
 8007078:	2be5      	cmp	r3, #229	; 0xe5
 800707a:	d007      	beq.n	800708c <dir_find+0x8a>
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <dir_find+0x98>
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b0f      	cmp	r3, #15
 800708a:	d006      	beq.n	800709a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800708c:	23ff      	movs	r3, #255	; 0xff
 800708e:	757b      	strb	r3, [r7, #21]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f04f 32ff 	mov.w	r2, #4294967295
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
 8007098:	e05e      	b.n	8007158 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b0f      	cmp	r3, #15
 800709e:	d136      	bne.n	800710e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d154      	bne.n	8007158 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	7b5b      	ldrb	r3, [r3, #13]
 80070be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80070c0:	7dbb      	ldrb	r3, [r7, #22]
 80070c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c6:	75bb      	strb	r3, [r7, #22]
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80070d4:	7dba      	ldrb	r2, [r7, #22]
 80070d6:	7d7b      	ldrb	r3, [r7, #21]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d115      	bne.n	8007108 <dir_find+0x106>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	330d      	adds	r3, #13
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	7d3a      	ldrb	r2, [r7, #20]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d10e      	bne.n	8007108 <dir_find+0x106>
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7ff fdfd 	bl	8006cf4 <cmp_lfn>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <dir_find+0x106>
 8007100:	7d7b      	ldrb	r3, [r7, #21]
 8007102:	3b01      	subs	r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e000      	b.n	800710a <dir_find+0x108>
 8007108:	23ff      	movs	r3, #255	; 0xff
 800710a:	757b      	strb	r3, [r7, #21]
 800710c:	e024      	b.n	8007158 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800710e:	7d7b      	ldrb	r3, [r7, #21]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <dir_find+0x126>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff ff51 	bl	8006fc0 <sum_sfn>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	7d3b      	ldrb	r3, [r7, #20]
 8007124:	4293      	cmp	r3, r2
 8007126:	d024      	beq.n	8007172 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <dir_find+0x14a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a18      	ldr	r0, [r3, #32]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3324      	adds	r3, #36	; 0x24
 800713e:	220b      	movs	r2, #11
 8007140:	4619      	mov	r1, r3
 8007142:	f7fe fe9f 	bl	8005e84 <mem_cmp>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d014      	beq.n	8007176 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800714c:	23ff      	movs	r3, #255	; 0xff
 800714e:	757b      	strb	r3, [r7, #21]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fc7f 	bl	8006a5e <dir_next>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f43f af65 	beq.w	8007036 <dir_find+0x34>
 800716c:	e004      	b.n	8007178 <dir_find+0x176>
		if (res != FR_OK) break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007176:	bf00      	nop

	return res;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08c      	sub	sp, #48	; 0x30
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007198:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <dir_register+0x20>
 80071a0:	2306      	movs	r3, #6
 80071a2:	e0e0      	b.n	8007366 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80071a4:	2300      	movs	r3, #0
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
 80071a8:	e002      	b.n	80071b0 <dir_register+0x2c>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	3301      	adds	r3, #1
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f4      	bne.n	80071aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	220c      	movs	r2, #12
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fe1d 	bl	8005e0c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d032      	beq.n	8007242 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2240      	movs	r2, #64	; 0x40
 80071e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80071e4:	2301      	movs	r3, #1
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e8:	e016      	b.n	8007218 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	f107 010c 	add.w	r1, r7, #12
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	f7ff fe53 	bl	8006ea4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff feff 	bl	8007002 <dir_find>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800720a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	3301      	adds	r3, #1
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b63      	cmp	r3, #99	; 0x63
 800721c:	d9e5      	bls.n	80071ea <dir_register+0x66>
 800721e:	e000      	b.n	8007222 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007220:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b64      	cmp	r3, #100	; 0x64
 8007226:	d101      	bne.n	800722c <dir_register+0xa8>
 8007228:	2307      	movs	r3, #7
 800722a:	e09c      	b.n	8007366 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800722c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007230:	2b04      	cmp	r3, #4
 8007232:	d002      	beq.n	800723a <dir_register+0xb6>
 8007234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007238:	e095      	b.n	8007366 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800723a:	7dfa      	ldrb	r2, [r7, #23]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <dir_register+0xd8>
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	330c      	adds	r3, #12
 8007250:	4a47      	ldr	r2, [pc, #284]	; (8007370 <dir_register+0x1ec>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	089b      	lsrs	r3, r3, #2
 8007258:	3301      	adds	r3, #1
 800725a:	e000      	b.n	800725e <dir_register+0xda>
 800725c:	2301      	movs	r3, #1
 800725e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007260:	6a39      	ldr	r1, [r7, #32]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff fcc0 	bl	8006be8 <dir_alloc>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800726e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007272:	2b00      	cmp	r3, #0
 8007274:	d148      	bne.n	8007308 <dir_register+0x184>
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	3b01      	subs	r3, #1
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d042      	beq.n	8007308 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	015b      	lsls	r3, r3, #5
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fb6a 	bl	8006968 <dir_sdi>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800729a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d132      	bne.n	8007308 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3324      	adds	r3, #36	; 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fe8a 	bl	8006fc0 <sum_sfn>
 80072ac:	4603      	mov	r3, r0
 80072ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4619      	mov	r1, r3
 80072b6:	69f8      	ldr	r0, [r7, #28]
 80072b8:	f7fe ffd6 	bl	8006268 <move_window>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80072c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d11d      	bne.n	8007306 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	68d8      	ldr	r0, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a19      	ldr	r1, [r3, #32]
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	7efb      	ldrb	r3, [r7, #27]
 80072d8:	f7ff fd7c 	bl	8006dd4 <put_lfn>
				fs->wflag = 1;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2201      	movs	r2, #1
 80072e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80072e2:	2100      	movs	r1, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff fbba 	bl	8006a5e <dir_next>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80072f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d107      	bne.n	8007308 <dir_register+0x184>
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1d5      	bne.n	80072b0 <dir_register+0x12c>
 8007304:	e000      	b.n	8007308 <dir_register+0x184>
				if (res != FR_OK) break;
 8007306:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800730c:	2b00      	cmp	r3, #0
 800730e:	d128      	bne.n	8007362 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4619      	mov	r1, r3
 8007316:	69f8      	ldr	r0, [r7, #28]
 8007318:	f7fe ffa6 	bl	8006268 <move_window>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007326:	2b00      	cmp	r3, #0
 8007328:	d11b      	bne.n	8007362 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	2220      	movs	r2, #32
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fd8b 	bl	8005e4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a18      	ldr	r0, [r3, #32]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	220b      	movs	r2, #11
 8007342:	4619      	mov	r1, r3
 8007344:	f7fe fd62 	bl	8005e0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	330c      	adds	r3, #12
 8007354:	f002 0218 	and.w	r2, r2, #24
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2201      	movs	r2, #1
 8007360:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007366:	4618      	mov	r0, r3
 8007368:	3730      	adds	r7, #48	; 0x30
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	4ec4ec4f 	.word	0x4ec4ec4f

08007374 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	61ba      	str	r2, [r7, #24]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80073a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073a4:	2b1f      	cmp	r3, #31
 80073a6:	d940      	bls.n	800742a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80073a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073aa:	2b2f      	cmp	r3, #47	; 0x2f
 80073ac:	d006      	beq.n	80073bc <create_name+0x48>
 80073ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b0:	2b5c      	cmp	r3, #92	; 0x5c
 80073b2:	d110      	bne.n	80073d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80073b4:	e002      	b.n	80073bc <create_name+0x48>
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b2f      	cmp	r3, #47	; 0x2f
 80073c6:	d0f6      	beq.n	80073b6 <create_name+0x42>
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	4413      	add	r3, r2
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b5c      	cmp	r3, #92	; 0x5c
 80073d2:	d0f0      	beq.n	80073b6 <create_name+0x42>
			break;
 80073d4:	e02a      	b.n	800742c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2bfe      	cmp	r3, #254	; 0xfe
 80073da:	d901      	bls.n	80073e0 <create_name+0x6c>
 80073dc:	2306      	movs	r3, #6
 80073de:	e17d      	b.n	80076dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80073e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80073e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 f98a 	bl	8008704 <ff_convert>
 80073f0:	4603      	mov	r3, r0
 80073f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80073f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <create_name+0x8a>
 80073fa:	2306      	movs	r3, #6
 80073fc:	e16e      	b.n	80076dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80073fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007400:	2b7f      	cmp	r3, #127	; 0x7f
 8007402:	d809      	bhi.n	8007418 <create_name+0xa4>
 8007404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007406:	4619      	mov	r1, r3
 8007408:	488d      	ldr	r0, [pc, #564]	; (8007640 <create_name+0x2cc>)
 800740a:	f7fe fd62 	bl	8005ed2 <chk_chr>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <create_name+0xa4>
 8007414:	2306      	movs	r3, #6
 8007416:	e161      	b.n	80076dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	617a      	str	r2, [r7, #20]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007426:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007428:	e7b4      	b.n	8007394 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800742a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	441a      	add	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007438:	2b1f      	cmp	r3, #31
 800743a:	d801      	bhi.n	8007440 <create_name+0xcc>
 800743c:	2304      	movs	r3, #4
 800743e:	e000      	b.n	8007442 <create_name+0xce>
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007446:	e011      	b.n	800746c <create_name+0xf8>
		w = lfn[di - 1];
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800744e:	3b01      	subs	r3, #1
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800745a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745c:	2b20      	cmp	r3, #32
 800745e:	d002      	beq.n	8007466 <create_name+0xf2>
 8007460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007462:	2b2e      	cmp	r3, #46	; 0x2e
 8007464:	d106      	bne.n	8007474 <create_name+0x100>
		di--;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	3b01      	subs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1ea      	bne.n	8007448 <create_name+0xd4>
 8007472:	e000      	b.n	8007476 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007474:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	2200      	movs	r2, #0
 8007480:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <create_name+0x118>
 8007488:	2306      	movs	r3, #6
 800748a:	e127      	b.n	80076dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	220b      	movs	r2, #11
 8007492:	2120      	movs	r1, #32
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fcda 	bl	8005e4e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	e002      	b.n	80074a6 <create_name+0x132>
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d0f5      	beq.n	80074a0 <create_name+0x12c>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	2b2e      	cmp	r3, #46	; 0x2e
 80074c0:	d0ee      	beq.n	80074a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <create_name+0x168>
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074cc:	f043 0303 	orr.w	r3, r3, #3
 80074d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80074d4:	e002      	b.n	80074dc <create_name+0x168>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	3b01      	subs	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <create_name+0x182>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074e8:	3b01      	subs	r3, #1
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	2b2e      	cmp	r3, #46	; 0x2e
 80074f4:	d1ef      	bne.n	80074d6 <create_name+0x162>

	i = b = 0; ni = 8;
 80074f6:	2300      	movs	r3, #0
 80074f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074fc:	2300      	movs	r3, #0
 80074fe:	623b      	str	r3, [r7, #32]
 8007500:	2308      	movs	r3, #8
 8007502:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	61ba      	str	r2, [r7, #24]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 8090 	beq.w	800763c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800751c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800751e:	2b20      	cmp	r3, #32
 8007520:	d006      	beq.n	8007530 <create_name+0x1bc>
 8007522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007524:	2b2e      	cmp	r3, #46	; 0x2e
 8007526:	d10a      	bne.n	800753e <create_name+0x1ca>
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	429a      	cmp	r2, r3
 800752e:	d006      	beq.n	800753e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007534:	f043 0303 	orr.w	r3, r3, #3
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800753c:	e07d      	b.n	800763a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	429a      	cmp	r2, r3
 8007544:	d203      	bcs.n	800754e <create_name+0x1da>
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	429a      	cmp	r2, r3
 800754c:	d123      	bne.n	8007596 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b0b      	cmp	r3, #11
 8007552:	d106      	bne.n	8007562 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007558:	f043 0303 	orr.w	r3, r3, #3
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007560:	e075      	b.n	800764e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	429a      	cmp	r2, r3
 8007568:	d005      	beq.n	8007576 <create_name+0x202>
 800756a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756e:	f043 0303 	orr.w	r3, r3, #3
 8007572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	429a      	cmp	r2, r3
 800757c:	d866      	bhi.n	800764c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	2308      	movs	r3, #8
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	230b      	movs	r3, #11
 8007588:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800758a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007594:	e051      	b.n	800763a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007598:	2b7f      	cmp	r3, #127	; 0x7f
 800759a:	d914      	bls.n	80075c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800759c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 f8af 	bl	8008704 <ff_convert>
 80075a6:	4603      	mov	r3, r0
 80075a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80075aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <create_name+0x246>
 80075b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b2:	3b80      	subs	r3, #128	; 0x80
 80075b4:	4a23      	ldr	r2, [pc, #140]	; (8007644 <create_name+0x2d0>)
 80075b6:	5cd3      	ldrb	r3, [r2, r3]
 80075b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80075ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075be:	f043 0302 	orr.w	r3, r3, #2
 80075c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80075c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <create_name+0x268>
 80075cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ce:	4619      	mov	r1, r3
 80075d0:	481d      	ldr	r0, [pc, #116]	; (8007648 <create_name+0x2d4>)
 80075d2:	f7fe fc7e 	bl	8005ed2 <chk_chr>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80075dc:	235f      	movs	r3, #95	; 0x5f
 80075de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e4:	f043 0303 	orr.w	r3, r3, #3
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075ec:	e01b      	b.n	8007626 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80075ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d909      	bls.n	8007608 <create_name+0x294>
 80075f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f6:	2b5a      	cmp	r3, #90	; 0x5a
 80075f8:	d806      	bhi.n	8007608 <create_name+0x294>
					b |= 2;
 80075fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075fe:	f043 0302 	orr.w	r3, r3, #2
 8007602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007606:	e00e      	b.n	8007626 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800760a:	2b60      	cmp	r3, #96	; 0x60
 800760c:	d90b      	bls.n	8007626 <create_name+0x2b2>
 800760e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007610:	2b7a      	cmp	r3, #122	; 0x7a
 8007612:	d808      	bhi.n	8007626 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007622:	3b20      	subs	r3, #32
 8007624:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	623a      	str	r2, [r7, #32]
 800762c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800762e:	b2d1      	uxtb	r1, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	460a      	mov	r2, r1
 8007636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800763a:	e763      	b.n	8007504 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800763c:	bf00      	nop
 800763e:	e006      	b.n	800764e <create_name+0x2da>
 8007640:	08009268 	.word	0x08009268
 8007644:	080092e4 	.word	0x080092e4
 8007648:	08009274 	.word	0x08009274
			if (si > di) break;			/* No extension */
 800764c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007654:	2be5      	cmp	r3, #229	; 0xe5
 8007656:	d103      	bne.n	8007660 <create_name+0x2ec>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2205      	movs	r2, #5
 800765c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b08      	cmp	r3, #8
 8007664:	d104      	bne.n	8007670 <create_name+0x2fc>
 8007666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d005      	beq.n	8007688 <create_name+0x314>
 800767c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	2b03      	cmp	r3, #3
 8007686:	d105      	bne.n	8007694 <create_name+0x320>
 8007688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d117      	bne.n	80076d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80076a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <create_name+0x344>
 80076ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b0:	f043 0310 	orr.w	r3, r3, #16
 80076b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80076b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076bc:	f003 030c 	and.w	r3, r3, #12
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d105      	bne.n	80076d0 <create_name+0x35c>
 80076c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80076da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3728      	adds	r7, #40	; 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80076f8:	e002      	b.n	8007700 <follow_path+0x1c>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b2f      	cmp	r3, #47	; 0x2f
 8007706:	d0f8      	beq.n	80076fa <follow_path+0x16>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b5c      	cmp	r3, #92	; 0x5c
 800770e:	d0f4      	beq.n	80076fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2200      	movs	r2, #0
 8007714:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b1f      	cmp	r3, #31
 800771c:	d80a      	bhi.n	8007734 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff f91d 	bl	8006968 <dir_sdi>
 800772e:	4603      	mov	r3, r0
 8007730:	75fb      	strb	r3, [r7, #23]
 8007732:	e043      	b.n	80077bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007734:	463b      	mov	r3, r7
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff fe1b 	bl	8007374 <create_name>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d134      	bne.n	80077b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fc5a 	bl	8007002 <dir_find>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007758:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d127      	bne.n	80077b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d122      	bne.n	80077b6 <follow_path+0xd2>
 8007770:	2305      	movs	r3, #5
 8007772:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007774:	e01f      	b.n	80077b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11c      	bne.n	80077ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	799b      	ldrb	r3, [r3, #6]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800778c:	2305      	movs	r3, #5
 800778e:	75fb      	strb	r3, [r7, #23]
 8007790:	e014      	b.n	80077bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	4413      	add	r3, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff fa66 	bl	8006c76 <ld_clust>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077b0:	e7c0      	b.n	8007734 <follow_path+0x50>
			if (res != FR_OK) break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <follow_path+0xd8>
				break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077ba:	bf00      	nop
			}
		}
	}

	return res;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d031      	beq.n	8007840 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e002      	b.n	80077ea <get_ldnumber+0x24>
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3301      	adds	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b1f      	cmp	r3, #31
 80077f0:	d903      	bls.n	80077fa <get_ldnumber+0x34>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b3a      	cmp	r3, #58	; 0x3a
 80077f8:	d1f4      	bne.n	80077e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b3a      	cmp	r3, #58	; 0x3a
 8007800:	d11c      	bne.n	800783c <get_ldnumber+0x76>
			tp = *path;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	60fa      	str	r2, [r7, #12]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	3b30      	subs	r3, #48	; 0x30
 8007812:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b09      	cmp	r3, #9
 8007818:	d80e      	bhi.n	8007838 <get_ldnumber+0x72>
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	429a      	cmp	r2, r3
 8007820:	d10a      	bne.n	8007838 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <get_ldnumber+0x72>
					vol = (int)i;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	3301      	adds	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	e002      	b.n	8007842 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007840:	693b      	ldr	r3, [r7, #16]
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	70da      	strb	r2, [r3, #3]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fe fcfc 	bl	8006268 <move_window>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <check_fs+0x2a>
 8007876:	2304      	movs	r3, #4
 8007878:	e038      	b.n	80078ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3334      	adds	r3, #52	; 0x34
 800787e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fa40 	bl	8005d08 <ld_word>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007890:	429a      	cmp	r2, r3
 8007892:	d001      	beq.n	8007898 <check_fs+0x48>
 8007894:	2303      	movs	r3, #3
 8007896:	e029      	b.n	80078ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800789e:	2be9      	cmp	r3, #233	; 0xe9
 80078a0:	d009      	beq.n	80078b6 <check_fs+0x66>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078a8:	2beb      	cmp	r3, #235	; 0xeb
 80078aa:	d11e      	bne.n	80078ea <check_fs+0x9a>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80078b2:	2b90      	cmp	r3, #144	; 0x90
 80078b4:	d119      	bne.n	80078ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3334      	adds	r3, #52	; 0x34
 80078ba:	3336      	adds	r3, #54	; 0x36
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fa3b 	bl	8005d38 <ld_dword>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078c8:	4a0a      	ldr	r2, [pc, #40]	; (80078f4 <check_fs+0xa4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <check_fs+0x82>
 80078ce:	2300      	movs	r3, #0
 80078d0:	e00c      	b.n	80078ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3334      	adds	r3, #52	; 0x34
 80078d6:	3352      	adds	r3, #82	; 0x52
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fa2d 	bl	8005d38 <ld_dword>
 80078de:	4603      	mov	r3, r0
 80078e0:	4a05      	ldr	r2, [pc, #20]	; (80078f8 <check_fs+0xa8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d101      	bne.n	80078ea <check_fs+0x9a>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80078ea:	2302      	movs	r3, #2
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	00544146 	.word	0x00544146
 80078f8:	33544146 	.word	0x33544146

080078fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b096      	sub	sp, #88	; 0x58
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff ff58 	bl	80077c6 <get_ldnumber>
 8007916:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	da01      	bge.n	8007922 <find_volume+0x26>
 800791e:	230b      	movs	r3, #11
 8007920:	e230      	b.n	8007d84 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007922:	4aa1      	ldr	r2, [pc, #644]	; (8007ba8 <find_volume+0x2ac>)
 8007924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <find_volume+0x3a>
 8007932:	230c      	movs	r3, #12
 8007934:	e226      	b.n	8007d84 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	f023 0301 	bic.w	r3, r3, #1
 8007942:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01a      	beq.n	8007982 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe f93b 	bl	8005bcc <disk_status>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800795c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <find_volume+0x82>
 800796e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800797a:	230a      	movs	r3, #10
 800797c:	e202      	b.n	8007d84 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800797e:	2300      	movs	r3, #0
 8007980:	e200      	b.n	8007d84 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	b2da      	uxtb	r2, r3
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe f933 	bl	8005c00 <disk_initialize>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1e9      	b.n	8007d84 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <find_volume+0xca>
 80079b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80079c2:	230a      	movs	r3, #10
 80079c4:	e1de      	b.n	8007d84 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80079ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079ce:	f7ff ff3f 	bl	8007850 <check_fs>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80079d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d149      	bne.n	8007a74 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80079e0:	2300      	movs	r3, #0
 80079e2:	643b      	str	r3, [r7, #64]	; 0x40
 80079e4:	e01e      	b.n	8007a24 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80079ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80079f4:	4413      	add	r3, r2
 80079f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	3304      	adds	r3, #4
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d006      	beq.n	8007a10 <find_volume+0x114>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	3308      	adds	r3, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe f996 	bl	8005d38 <ld_dword>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	e000      	b.n	8007a12 <find_volume+0x116>
 8007a10:	2200      	movs	r2, #0
 8007a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	3358      	adds	r3, #88	; 0x58
 8007a18:	443b      	add	r3, r7
 8007a1a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a20:	3301      	adds	r3, #1
 8007a22:	643b      	str	r3, [r7, #64]	; 0x40
 8007a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d9dd      	bls.n	80079e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <find_volume+0x13e>
 8007a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a36:	3b01      	subs	r3, #1
 8007a38:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	3358      	adds	r3, #88	; 0x58
 8007a40:	443b      	add	r3, r7
 8007a42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <find_volume+0x15e>
 8007a4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a52:	f7ff fefd 	bl	8007850 <check_fs>
 8007a56:	4603      	mov	r3, r0
 8007a58:	e000      	b.n	8007a5c <find_volume+0x160>
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d905      	bls.n	8007a74 <find_volume+0x178>
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d9e2      	bls.n	8007a3a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d101      	bne.n	8007a80 <find_volume+0x184>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e181      	b.n	8007d84 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007a80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d901      	bls.n	8007a8c <find_volume+0x190>
 8007a88:	230d      	movs	r3, #13
 8007a8a:	e17b      	b.n	8007d84 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	3334      	adds	r3, #52	; 0x34
 8007a90:	330b      	adds	r3, #11
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe f938 	bl	8005d08 <ld_word>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a9e:	d001      	beq.n	8007aa4 <find_volume+0x1a8>
 8007aa0:	230d      	movs	r3, #13
 8007aa2:	e16f      	b.n	8007d84 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	3334      	adds	r3, #52	; 0x34
 8007aa8:	3316      	adds	r3, #22
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe f92c 	bl	8005d08 <ld_word>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <find_volume+0x1cc>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	3334      	adds	r3, #52	; 0x34
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe f939 	bl	8005d38 <ld_dword>
 8007ac6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007acc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	789b      	ldrb	r3, [r3, #2]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d005      	beq.n	8007aec <find_volume+0x1f0>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	789b      	ldrb	r3, [r3, #2]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d001      	beq.n	8007aec <find_volume+0x1f0>
 8007ae8:	230d      	movs	r3, #13
 8007aea:	e14b      	b.n	8007d84 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d008      	beq.n	8007b20 <find_volume+0x224>
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	895b      	ldrh	r3, [r3, #10]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	895b      	ldrh	r3, [r3, #10]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <find_volume+0x228>
 8007b20:	230d      	movs	r3, #13
 8007b22:	e12f      	b.n	8007d84 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	3334      	adds	r3, #52	; 0x34
 8007b28:	3311      	adds	r3, #17
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f8ec 	bl	8005d08 <ld_word>
 8007b30:	4603      	mov	r3, r0
 8007b32:	461a      	mov	r2, r3
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	891b      	ldrh	r3, [r3, #8]
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <find_volume+0x24e>
 8007b46:	230d      	movs	r3, #13
 8007b48:	e11c      	b.n	8007d84 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	3334      	adds	r3, #52	; 0x34
 8007b4e:	3313      	adds	r3, #19
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe f8d9 	bl	8005d08 <ld_word>
 8007b56:	4603      	mov	r3, r0
 8007b58:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <find_volume+0x272>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	3334      	adds	r3, #52	; 0x34
 8007b64:	3320      	adds	r3, #32
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe f8e6 	bl	8005d38 <ld_dword>
 8007b6c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	3334      	adds	r3, #52	; 0x34
 8007b72:	330e      	adds	r3, #14
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe f8c7 	bl	8005d08 <ld_word>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <find_volume+0x28c>
 8007b84:	230d      	movs	r3, #13
 8007b86:	e0fd      	b.n	8007d84 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b90:	8912      	ldrh	r2, [r2, #8]
 8007b92:	0912      	lsrs	r2, r2, #4
 8007b94:	b292      	uxth	r2, r2
 8007b96:	4413      	add	r3, r2
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d204      	bcs.n	8007bac <find_volume+0x2b0>
 8007ba2:	230d      	movs	r3, #13
 8007ba4:	e0ee      	b.n	8007d84 <find_volume+0x488>
 8007ba6:	bf00      	nop
 8007ba8:	200006bc 	.word	0x200006bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb4:	8952      	ldrh	r2, [r2, #10]
 8007bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <find_volume+0x2ca>
 8007bc2:	230d      	movs	r3, #13
 8007bc4:	e0de      	b.n	8007d84 <find_volume+0x488>
		fmt = FS_FAT32;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d802      	bhi.n	8007bdc <find_volume+0x2e0>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d802      	bhi.n	8007bec <find_volume+0x2f0>
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	1c9a      	adds	r2, r3, #2
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bf8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007bfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfe:	441a      	add	r2, r3
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007c04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	441a      	add	r2, r3
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d11e      	bne.n	8007c54 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	3334      	adds	r3, #52	; 0x34
 8007c1a:	332a      	adds	r3, #42	; 0x2a
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe f873 	bl	8005d08 <ld_word>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <find_volume+0x330>
 8007c28:	230d      	movs	r3, #13
 8007c2a:	e0ab      	b.n	8007d84 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	891b      	ldrh	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <find_volume+0x33c>
 8007c34:	230d      	movs	r3, #13
 8007c36:	e0a5      	b.n	8007d84 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	3334      	adds	r3, #52	; 0x34
 8007c3c:	332c      	adds	r3, #44	; 0x2c
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe f87a 	bl	8005d38 <ld_dword>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	647b      	str	r3, [r7, #68]	; 0x44
 8007c52:	e01f      	b.n	8007c94 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	891b      	ldrh	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <find_volume+0x364>
 8007c5c:	230d      	movs	r3, #13
 8007c5e:	e091      	b.n	8007d84 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c66:	441a      	add	r2, r3
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d103      	bne.n	8007c7c <find_volume+0x380>
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	e00a      	b.n	8007c92 <find_volume+0x396>
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	4613      	mov	r3, r2
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	4413      	add	r3, r2
 8007c86:	085a      	lsrs	r2, r3, #1
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007c92:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d201      	bcs.n	8007ca8 <find_volume+0x3ac>
 8007ca4:	230d      	movs	r3, #13
 8007ca6:	e06d      	b.n	8007d84 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cae:	615a      	str	r2, [r3, #20]
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	695a      	ldr	r2, [r3, #20]
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2280      	movs	r2, #128	; 0x80
 8007cbc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d149      	bne.n	8007d5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	3334      	adds	r3, #52	; 0x34
 8007cca:	3330      	adds	r3, #48	; 0x30
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe f81b 	bl	8005d08 <ld_word>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d140      	bne.n	8007d5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cda:	3301      	adds	r3, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ce0:	f7fe fac2 	bl	8006268 <move_window>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d137      	bne.n	8007d5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2200      	movs	r2, #0
 8007cee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	3334      	adds	r3, #52	; 0x34
 8007cf4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe f805 	bl	8005d08 <ld_word>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	461a      	mov	r2, r3
 8007d02:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d127      	bne.n	8007d5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	3334      	adds	r3, #52	; 0x34
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f812 	bl	8005d38 <ld_dword>
 8007d14:	4603      	mov	r3, r0
 8007d16:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <find_volume+0x490>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d11e      	bne.n	8007d5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	3334      	adds	r3, #52	; 0x34
 8007d20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe f807 	bl	8005d38 <ld_dword>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <find_volume+0x494>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d113      	bne.n	8007d5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	3334      	adds	r3, #52	; 0x34
 8007d36:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fd fffc 	bl	8005d38 <ld_dword>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	3334      	adds	r3, #52	; 0x34
 8007d4a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fd fff2 	bl	8005d38 <ld_dword>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007d60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <find_volume+0x498>)
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <find_volume+0x498>)
 8007d6c:	801a      	strh	r2, [r3, #0]
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <find_volume+0x498>)
 8007d70:	881a      	ldrh	r2, [r3, #0]
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <find_volume+0x49c>)
 8007d7a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d7e:	f7fe fa0b 	bl	8006198 <clear_lock>
#endif
	return FR_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3758      	adds	r7, #88	; 0x58
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	41615252 	.word	0x41615252
 8007d90:	61417272 	.word	0x61417272
 8007d94:	200006c0 	.word	0x200006c0
 8007d98:	200006e4 	.word	0x200006e4

08007d9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007da6:	2309      	movs	r3, #9
 8007da8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01c      	beq.n	8007dea <validate+0x4e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d018      	beq.n	8007dea <validate+0x4e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <validate+0x4e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	889a      	ldrh	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	88db      	ldrh	r3, [r3, #6]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d10c      	bne.n	8007dea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fd fef8 	bl	8005bcc <disk_status>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <validate+0x4e>
			res = FR_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <validate+0x5a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	e000      	b.n	8007df8 <validate+0x5c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	6013      	str	r3, [r2, #0]
	return res;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007e1a:	f107 0310 	add.w	r3, r7, #16
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fcd1 	bl	80077c6 <get_ldnumber>
 8007e24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da01      	bge.n	8007e30 <f_mount+0x28>
 8007e2c:	230b      	movs	r3, #11
 8007e2e:	e02b      	b.n	8007e88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e30:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <f_mount+0x88>)
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007e40:	69b8      	ldr	r0, [r7, #24]
 8007e42:	f7fe f9a9 	bl	8006198 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	490d      	ldr	r1, [pc, #52]	; (8007e90 <f_mount+0x88>)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <f_mount+0x66>
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d001      	beq.n	8007e72 <f_mount+0x6a>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e00a      	b.n	8007e88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007e72:	f107 010c 	add.w	r1, r7, #12
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fd3d 	bl	80078fc <find_volume>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200006bc 	.word	0x200006bc

08007e94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b09a      	sub	sp, #104	; 0x68
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <f_open+0x18>
 8007ea8:	2309      	movs	r3, #9
 8007eaa:	e1ad      	b.n	8008208 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007eb4:	79fa      	ldrb	r2, [r7, #7]
 8007eb6:	f107 0114 	add.w	r1, r7, #20
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fd1c 	bl	80078fc <find_volume>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 8191 	bne.w	80081f6 <f_open+0x362>
		dj.obj.fs = fs;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	f107 0318 	add.w	r3, r7, #24
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fbff 	bl	80076e4 <follow_path>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11a      	bne.n	8007f2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da03      	bge.n	8007f06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007efe:	2306      	movs	r3, #6
 8007f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f04:	e011      	b.n	8007f2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf14      	ite	ne
 8007f10:	2301      	movne	r3, #1
 8007f12:	2300      	moveq	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	f107 0318 	add.w	r3, r7, #24
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fd fff2 	bl	8005f08 <chk_lock>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	f003 031c 	and.w	r3, r3, #28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d07f      	beq.n	8008034 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007f34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d017      	beq.n	8007f6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d10e      	bne.n	8007f62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f44:	f7fe f83c 	bl	8005fc0 <enq_lock>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <f_open+0xc8>
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f916 	bl	8007184 <dir_register>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	e000      	b.n	8007f5e <f_open+0xca>
 8007f5c:	2312      	movs	r3, #18
 8007f5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	f043 0308 	orr.w	r3, r3, #8
 8007f68:	71fb      	strb	r3, [r7, #7]
 8007f6a:	e010      	b.n	8007f8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f6c:	7fbb      	ldrb	r3, [r7, #30]
 8007f6e:	f003 0311 	and.w	r3, r3, #17
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <f_open+0xea>
					res = FR_DENIED;
 8007f76:	2307      	movs	r3, #7
 8007f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f7c:	e007      	b.n	8007f8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <f_open+0xfa>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d168      	bne.n	8008068 <f_open+0x1d4>
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d063      	beq.n	8008068 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007fa0:	f7fd fbe0 	bl	8005764 <get_fattime>
 8007fa4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	330e      	adds	r3, #14
 8007faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fd ff01 	bl	8005db4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	3316      	adds	r3, #22
 8007fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fefb 	bl	8005db4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	330b      	adds	r3, #11
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fe52 	bl	8006c76 <ld_clust>
 8007fd2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fe6a 	bl	8006cb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	331c      	adds	r3, #28
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd fee4 	bl	8005db4 <st_dword>
					fs->wflag = 1;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d037      	beq.n	8008068 <f_open+0x1d4>
						dw = fs->winsect;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007ffe:	f107 0318 	add.w	r3, r7, #24
 8008002:	2200      	movs	r2, #0
 8008004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fb7d 	bl	8006706 <remove_chain>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008016:	2b00      	cmp	r3, #0
 8008018:	d126      	bne.n	8008068 <f_open+0x1d4>
							res = move_window(fs, dw);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe f922 	bl	8006268 <move_window>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800802e:	3a01      	subs	r2, #1
 8008030:	611a      	str	r2, [r3, #16]
 8008032:	e019      	b.n	8008068 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008038:	2b00      	cmp	r3, #0
 800803a:	d115      	bne.n	8008068 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800803c:	7fbb      	ldrb	r3, [r7, #30]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008046:	2304      	movs	r3, #4
 8008048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800804c:	e00c      	b.n	8008068 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <f_open+0x1d4>
 8008058:	7fbb      	ldrb	r3, [r7, #30]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <f_open+0x1d4>
						res = FR_DENIED;
 8008062:	2307      	movs	r3, #7
 8008064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008068:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800806c:	2b00      	cmp	r3, #0
 800806e:	d128      	bne.n	80080c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008080:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800808a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	f023 0301 	bic.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	f107 0318 	add.w	r3, r7, #24
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd ffab 	bl	8006004 <inc_lock>
 80080ae:	4602      	mov	r2, r0
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <f_open+0x22e>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 8095 	bne.w	80081f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fdcf 	bl	8006c76 <ld_clust>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	331c      	adds	r3, #28
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fd fe28 	bl	8005d38 <ld_dword>
 80080e8:	4602      	mov	r2, r0
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	88da      	ldrh	r2, [r3, #6]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	79fa      	ldrb	r2, [r7, #7]
 8008106:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3330      	adds	r3, #48	; 0x30
 800811e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f7fd fe92 	bl	8005e4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d060      	beq.n	80081f6 <f_open+0x362>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d05c      	beq.n	80081f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	895b      	ldrh	r3, [r3, #10]
 8008148:	025b      	lsls	r3, r3, #9
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008158:	e016      	b.n	8008188 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe f93d 	bl	80063de <get_fat>
 8008164:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008168:	2b01      	cmp	r3, #1
 800816a:	d802      	bhi.n	8008172 <f_open+0x2de>
 800816c:	2302      	movs	r3, #2
 800816e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d102      	bne.n	8008180 <f_open+0x2ec>
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <f_open+0x304>
 8008190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008194:	429a      	cmp	r2, r3
 8008196:	d8e0      	bhi.n	800815a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800819c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800819e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d127      	bne.n	80081f6 <f_open+0x362>
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d022      	beq.n	80081f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe f8f3 	bl	80063a0 <clust2sect>
 80081ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80081bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <f_open+0x336>
						res = FR_INT_ERR;
 80081c2:	2302      	movs	r3, #2
 80081c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081c8:	e015      	b.n	80081f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80081ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081cc:	0a5a      	lsrs	r2, r3, #9
 80081ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	7858      	ldrb	r0, [r3, #1]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a1a      	ldr	r2, [r3, #32]
 80081e4:	2301      	movs	r3, #1
 80081e6:	f7fd fd31 	bl	8005c4c <disk_read>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <f_open+0x362>
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80081f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <f_open+0x370>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008208:	4618      	mov	r0, r3
 800820a:	3768      	adds	r7, #104	; 0x68
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	; 0x30
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f107 0210 	add.w	r2, r7, #16
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fdb3 	bl	8007d9c <validate>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800823c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008240:	2b00      	cmp	r3, #0
 8008242:	d107      	bne.n	8008254 <f_write+0x44>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	7d5b      	ldrb	r3, [r3, #21]
 8008248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800824c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <f_write+0x4a>
 8008254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008258:	e14b      	b.n	80084f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	7d1b      	ldrb	r3, [r3, #20]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <f_write+0x5a>
 8008266:	2307      	movs	r3, #7
 8008268:	e143      	b.n	80084f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	429a      	cmp	r2, r3
 8008278:	f080 812d 	bcs.w	80084d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	43db      	mvns	r3, r3
 8008282:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008284:	e127      	b.n	80084d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 80e3 	bne.w	800845a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	0a5b      	lsrs	r3, r3, #9
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	8952      	ldrh	r2, [r2, #10]
 800829e:	3a01      	subs	r2, #1
 80082a0:	4013      	ands	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d143      	bne.n	8008332 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10c      	bne.n	80082cc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11a      	bne.n	80082f4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fa84 	bl	80067d0 <create_chain>
 80082c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80082ca:	e013      	b.n	80082f4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	4619      	mov	r1, r3
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7fe fb10 	bl	8006900 <clmt_clust>
 80082e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80082e2:	e007      	b.n	80082f4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7fe fa6f 	bl	80067d0 <create_chain>
 80082f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80f2 	beq.w	80084e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d104      	bne.n	800830c <f_write+0xfc>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2202      	movs	r2, #2
 8008306:	755a      	strb	r2, [r3, #21]
 8008308:	2302      	movs	r3, #2
 800830a:	e0f2      	b.n	80084f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d104      	bne.n	800831e <f_write+0x10e>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	755a      	strb	r2, [r3, #21]
 800831a:	2301      	movs	r3, #1
 800831c:	e0e9      	b.n	80084f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008322:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d102      	bne.n	8008332 <f_write+0x122>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008330:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	7d1b      	ldrb	r3, [r3, #20]
 8008336:	b25b      	sxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	da18      	bge.n	800836e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	7858      	ldrb	r0, [r3, #1]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	2301      	movs	r3, #1
 800834c:	f7fd fc9e 	bl	8005c8c <disk_write>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <f_write+0x150>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	755a      	strb	r2, [r3, #21]
 800835c:	2301      	movs	r3, #1
 800835e:	e0c8      	b.n	80084f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	7d1b      	ldrb	r3, [r3, #20]
 8008364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008368:	b2da      	uxtb	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7fe f812 	bl	80063a0 <clust2sect>
 800837c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d104      	bne.n	800838e <f_write+0x17e>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2202      	movs	r2, #2
 8008388:	755a      	strb	r2, [r3, #21]
 800838a:	2302      	movs	r3, #2
 800838c:	e0b1      	b.n	80084f2 <f_write+0x2e2>
			sect += csect;
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	4413      	add	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	0a5b      	lsrs	r3, r3, #9
 800839a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d03c      	beq.n	800841c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	4413      	add	r3, r2
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	8952      	ldrh	r2, [r2, #10]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d905      	bls.n	80083bc <f_write+0x1ac>
					cc = fs->csize - csect;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	895b      	ldrh	r3, [r3, #10]
 80083b4:	461a      	mov	r2, r3
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	7858      	ldrb	r0, [r3, #1]
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	69f9      	ldr	r1, [r7, #28]
 80083c6:	f7fd fc61 	bl	8005c8c <disk_write>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <f_write+0x1ca>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	755a      	strb	r2, [r3, #21]
 80083d6:	2301      	movs	r3, #1
 80083d8:	e08b      	b.n	80084f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1a      	ldr	r2, [r3, #32]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d915      	bls.n	8008414 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1a      	ldr	r2, [r3, #32]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	025b      	lsls	r3, r3, #9
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	4413      	add	r3, r2
 80083fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008400:	4619      	mov	r1, r3
 8008402:	f7fd fd03 	bl	8005e0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7d1b      	ldrb	r3, [r3, #20]
 800840a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	025b      	lsls	r3, r3, #9
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800841a:	e03f      	b.n	800849c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	429a      	cmp	r2, r3
 8008424:	d016      	beq.n	8008454 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800842e:	429a      	cmp	r2, r3
 8008430:	d210      	bcs.n	8008454 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	7858      	ldrb	r0, [r3, #1]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800843c:	2301      	movs	r3, #1
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	f7fd fc04 	bl	8005c4c <disk_read>
 8008444:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	755a      	strb	r2, [r3, #21]
 8008450:	2301      	movs	r3, #1
 8008452:	e04e      	b.n	80084f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008462:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d901      	bls.n	8008474 <f_write+0x264>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	4413      	add	r3, r2
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	4618      	mov	r0, r3
 800848a:	f7fd fcbf 	bl	8005e0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	7d1b      	ldrb	r3, [r3, #20]
 8008492:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008496:	b2da      	uxtb	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	4413      	add	r3, r2
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	699a      	ldr	r2, [r3, #24]
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	441a      	add	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	619a      	str	r2, [r3, #24]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf38      	it	cc
 80084bc:	461a      	movcc	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	60da      	str	r2, [r3, #12]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	441a      	add	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f47f aed4 	bne.w	8008286 <f_write+0x76>
 80084de:	e000      	b.n	80084e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	7d1b      	ldrb	r3, [r3, #20]
 80084e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3730      	adds	r7, #48	; 0x30
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f107 0208 	add.w	r2, r7, #8
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fc46 	bl	8007d9c <validate>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d168      	bne.n	80085ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7d1b      	ldrb	r3, [r3, #20]
 800851e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d062      	beq.n	80085ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7d1b      	ldrb	r3, [r3, #20]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da15      	bge.n	800855c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	7858      	ldrb	r0, [r3, #1]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1a      	ldr	r2, [r3, #32]
 800853e:	2301      	movs	r3, #1
 8008540:	f7fd fba4 	bl	8005c8c <disk_write>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <f_sync+0x54>
 800854a:	2301      	movs	r3, #1
 800854c:	e04f      	b.n	80085ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7d1b      	ldrb	r3, [r3, #20]
 8008552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800855c:	f7fd f902 	bl	8005764 <get_fattime>
 8008560:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7fd fe7c 	bl	8006268 <move_window>
 8008570:	4603      	mov	r3, r0
 8008572:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d138      	bne.n	80085ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	330b      	adds	r3, #11
 8008584:	781a      	ldrb	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	330b      	adds	r3, #11
 800858a:	f042 0220 	orr.w	r2, r2, #32
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	461a      	mov	r2, r3
 800859c:	68f9      	ldr	r1, [r7, #12]
 800859e:	f7fe fb89 	bl	8006cb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f103 021c 	add.w	r2, r3, #28
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4619      	mov	r1, r3
 80085ae:	4610      	mov	r0, r2
 80085b0:	f7fd fc00 	bl	8005db4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3316      	adds	r3, #22
 80085b8:	6939      	ldr	r1, [r7, #16]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd fbfa 	bl	8005db4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3312      	adds	r3, #18
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fbd9 	bl	8005d7e <st_word>
					fs->wflag = 1;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2201      	movs	r2, #1
 80085d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fe75 	bl	80062c4 <sync_fs>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	7d1b      	ldrb	r3, [r3, #20]
 80085e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff ff7b 	bl	80084fa <f_sync>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d118      	bne.n	8008640 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f107 0208 	add.w	r2, r7, #8
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fbc0 	bl	8007d9c <validate>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	4618      	mov	r0, r3
 800862c:	f7fd fd78 	bl	8006120 <dec_lock>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008662:	4b1f      	ldr	r3, [pc, #124]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 8008664:	7a5b      	ldrb	r3, [r3, #9]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d131      	bne.n	80086d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800866c:	4b1c      	ldr	r3, [pc, #112]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 800866e:	7a5b      	ldrb	r3, [r3, #9]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 8008676:	2100      	movs	r1, #0
 8008678:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800867a:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 800868c:	7a5b      	ldrb	r3, [r3, #9]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	461a      	mov	r2, r3
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 8008694:	4413      	add	r3, r2
 8008696:	79fa      	ldrb	r2, [r7, #7]
 8008698:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800869a:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 800869c:	7a5b      	ldrb	r3, [r3, #9]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	b2d1      	uxtb	r1, r2
 80086a4:	4a0e      	ldr	r2, [pc, #56]	; (80086e0 <FATFS_LinkDriverEx+0x94>)
 80086a6:	7251      	strb	r1, [r2, #9]
 80086a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80086aa:	7dbb      	ldrb	r3, [r7, #22]
 80086ac:	3330      	adds	r3, #48	; 0x30
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3301      	adds	r3, #1
 80086b8:	223a      	movs	r2, #58	; 0x3a
 80086ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3302      	adds	r3, #2
 80086c0:	222f      	movs	r2, #47	; 0x2f
 80086c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3303      	adds	r3, #3
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	200008e4 	.word	0x200008e4

080086e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ee:	2200      	movs	r2, #0
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff ffaa 	bl	800864c <FATFS_LinkDriverEx>
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	2b7f      	cmp	r3, #127	; 0x7f
 8008714:	d802      	bhi.n	800871c <ff_convert+0x18>
		c = chr;
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	81fb      	strh	r3, [r7, #14]
 800871a:	e025      	b.n	8008768 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	2bff      	cmp	r3, #255	; 0xff
 8008726:	d805      	bhi.n	8008734 <ff_convert+0x30>
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	3b80      	subs	r3, #128	; 0x80
 800872c:	4a12      	ldr	r2, [pc, #72]	; (8008778 <ff_convert+0x74>)
 800872e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008732:	e000      	b.n	8008736 <ff_convert+0x32>
 8008734:	2300      	movs	r3, #0
 8008736:	81fb      	strh	r3, [r7, #14]
 8008738:	e016      	b.n	8008768 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800873a:	2300      	movs	r3, #0
 800873c:	81fb      	strh	r3, [r7, #14]
 800873e:	e009      	b.n	8008754 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	4a0d      	ldr	r2, [pc, #52]	; (8008778 <ff_convert+0x74>)
 8008744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008748:	88fa      	ldrh	r2, [r7, #6]
 800874a:	429a      	cmp	r2, r3
 800874c:	d006      	beq.n	800875c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	3301      	adds	r3, #1
 8008752:	81fb      	strh	r3, [r7, #14]
 8008754:	89fb      	ldrh	r3, [r7, #14]
 8008756:	2b7f      	cmp	r3, #127	; 0x7f
 8008758:	d9f2      	bls.n	8008740 <ff_convert+0x3c>
 800875a:	e000      	b.n	800875e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800875c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800875e:	89fb      	ldrh	r3, [r7, #14]
 8008760:	3380      	adds	r3, #128	; 0x80
 8008762:	b29b      	uxth	r3, r3
 8008764:	b2db      	uxtb	r3, r3
 8008766:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008768:	89fb      	ldrh	r3, [r7, #14]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	08009374 	.word	0x08009374

0800877c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878c:	d201      	bcs.n	8008792 <ff_wtoupper+0x16>
 800878e:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <ff_wtoupper+0x10c>)
 8008790:	e000      	b.n	8008794 <ff_wtoupper+0x18>
 8008792:	4b3e      	ldr	r3, [pc, #248]	; (800888c <ff_wtoupper+0x110>)
 8008794:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	617a      	str	r2, [r7, #20]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80087a0:	8a7b      	ldrh	r3, [r7, #18]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d068      	beq.n	8008878 <ff_wtoupper+0xfc>
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	8a7b      	ldrh	r3, [r7, #18]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d364      	bcc.n	8008878 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	1c9a      	adds	r2, r3, #2
 80087b2:	617a      	str	r2, [r7, #20]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	823b      	strh	r3, [r7, #16]
 80087b8:	8a3b      	ldrh	r3, [r7, #16]
 80087ba:	0a1b      	lsrs	r3, r3, #8
 80087bc:	81fb      	strh	r3, [r7, #14]
 80087be:	8a3b      	ldrh	r3, [r7, #16]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	8a79      	ldrh	r1, [r7, #18]
 80087c8:	8a3b      	ldrh	r3, [r7, #16]
 80087ca:	440b      	add	r3, r1
 80087cc:	429a      	cmp	r2, r3
 80087ce:	da49      	bge.n	8008864 <ff_wtoupper+0xe8>
			switch (cmd) {
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d84f      	bhi.n	8008876 <ff_wtoupper+0xfa>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <ff_wtoupper+0x60>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008813 	.word	0x08008813
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008831 	.word	0x08008831
 80087ec:	08008839 	.word	0x08008839
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008849 	.word	0x08008849
 80087f8:	08008851 	.word	0x08008851
 80087fc:	08008859 	.word	0x08008859
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	8a7b      	ldrh	r3, [r7, #18]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	80fb      	strh	r3, [r7, #6]
 8008810:	e027      	b.n	8008862 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	8a7b      	ldrh	r3, [r7, #18]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	b29b      	uxth	r3, r3
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	b29b      	uxth	r3, r3
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	80fb      	strh	r3, [r7, #6]
 8008826:	e01c      	b.n	8008862 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	3b10      	subs	r3, #16
 800882c:	80fb      	strh	r3, [r7, #6]
 800882e:	e018      	b.n	8008862 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	3b20      	subs	r3, #32
 8008834:	80fb      	strh	r3, [r7, #6]
 8008836:	e014      	b.n	8008862 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008838:	88fb      	ldrh	r3, [r7, #6]
 800883a:	3b30      	subs	r3, #48	; 0x30
 800883c:	80fb      	strh	r3, [r7, #6]
 800883e:	e010      	b.n	8008862 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	3b1a      	subs	r3, #26
 8008844:	80fb      	strh	r3, [r7, #6]
 8008846:	e00c      	b.n	8008862 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	3308      	adds	r3, #8
 800884c:	80fb      	strh	r3, [r7, #6]
 800884e:	e008      	b.n	8008862 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	3b50      	subs	r3, #80	; 0x50
 8008854:	80fb      	strh	r3, [r7, #6]
 8008856:	e004      	b.n	8008862 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800885e:	80fb      	strh	r3, [r7, #6]
 8008860:	bf00      	nop
			}
			break;
 8008862:	e008      	b.n	8008876 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008864:	89fb      	ldrh	r3, [r7, #14]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d195      	bne.n	8008796 <ff_wtoupper+0x1a>
 800886a:	8a3b      	ldrh	r3, [r7, #16]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008874:	e78f      	b.n	8008796 <ff_wtoupper+0x1a>
			break;
 8008876:	bf00      	nop
	}

	return chr;
 8008878:	88fb      	ldrh	r3, [r7, #6]
}
 800887a:	4618      	mov	r0, r3
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	08009474 	.word	0x08009474
 800888c:	08009668 	.word	0x08009668

08008890 <__errno>:
 8008890:	4b01      	ldr	r3, [pc, #4]	; (8008898 <__errno+0x8>)
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	2000000c 	.word	0x2000000c

0800889c <__libc_init_array>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	4d0d      	ldr	r5, [pc, #52]	; (80088d4 <__libc_init_array+0x38>)
 80088a0:	4c0d      	ldr	r4, [pc, #52]	; (80088d8 <__libc_init_array+0x3c>)
 80088a2:	1b64      	subs	r4, r4, r5
 80088a4:	10a4      	asrs	r4, r4, #2
 80088a6:	2600      	movs	r6, #0
 80088a8:	42a6      	cmp	r6, r4
 80088aa:	d109      	bne.n	80088c0 <__libc_init_array+0x24>
 80088ac:	4d0b      	ldr	r5, [pc, #44]	; (80088dc <__libc_init_array+0x40>)
 80088ae:	4c0c      	ldr	r4, [pc, #48]	; (80088e0 <__libc_init_array+0x44>)
 80088b0:	f000 fc8e 	bl	80091d0 <_init>
 80088b4:	1b64      	subs	r4, r4, r5
 80088b6:	10a4      	asrs	r4, r4, #2
 80088b8:	2600      	movs	r6, #0
 80088ba:	42a6      	cmp	r6, r4
 80088bc:	d105      	bne.n	80088ca <__libc_init_array+0x2e>
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c4:	4798      	blx	r3
 80088c6:	3601      	adds	r6, #1
 80088c8:	e7ee      	b.n	80088a8 <__libc_init_array+0xc>
 80088ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ce:	4798      	blx	r3
 80088d0:	3601      	adds	r6, #1
 80088d2:	e7f2      	b.n	80088ba <__libc_init_array+0x1e>
 80088d4:	08009760 	.word	0x08009760
 80088d8:	08009760 	.word	0x08009760
 80088dc:	08009760 	.word	0x08009760
 80088e0:	08009764 	.word	0x08009764

080088e4 <memset>:
 80088e4:	4402      	add	r2, r0
 80088e6:	4603      	mov	r3, r0
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d100      	bne.n	80088ee <memset+0xa>
 80088ec:	4770      	bx	lr
 80088ee:	f803 1b01 	strb.w	r1, [r3], #1
 80088f2:	e7f9      	b.n	80088e8 <memset+0x4>

080088f4 <siprintf>:
 80088f4:	b40e      	push	{r1, r2, r3}
 80088f6:	b500      	push	{lr}
 80088f8:	b09c      	sub	sp, #112	; 0x70
 80088fa:	ab1d      	add	r3, sp, #116	; 0x74
 80088fc:	9002      	str	r0, [sp, #8]
 80088fe:	9006      	str	r0, [sp, #24]
 8008900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008904:	4809      	ldr	r0, [pc, #36]	; (800892c <siprintf+0x38>)
 8008906:	9107      	str	r1, [sp, #28]
 8008908:	9104      	str	r1, [sp, #16]
 800890a:	4909      	ldr	r1, [pc, #36]	; (8008930 <siprintf+0x3c>)
 800890c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008910:	9105      	str	r1, [sp, #20]
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	a902      	add	r1, sp, #8
 8008918:	f000 f868 	bl	80089ec <_svfiprintf_r>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	b01c      	add	sp, #112	; 0x70
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b003      	add	sp, #12
 800892a:	4770      	bx	lr
 800892c:	2000000c 	.word	0x2000000c
 8008930:	ffff0208 	.word	0xffff0208

08008934 <__ssputs_r>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	688e      	ldr	r6, [r1, #8]
 800893a:	429e      	cmp	r6, r3
 800893c:	4682      	mov	sl, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4690      	mov	r8, r2
 8008942:	461f      	mov	r7, r3
 8008944:	d838      	bhi.n	80089b8 <__ssputs_r+0x84>
 8008946:	898a      	ldrh	r2, [r1, #12]
 8008948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800894c:	d032      	beq.n	80089b4 <__ssputs_r+0x80>
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6909      	ldr	r1, [r1, #16]
 8008952:	eba5 0901 	sub.w	r9, r5, r1
 8008956:	6965      	ldr	r5, [r4, #20]
 8008958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800895c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008960:	3301      	adds	r3, #1
 8008962:	444b      	add	r3, r9
 8008964:	106d      	asrs	r5, r5, #1
 8008966:	429d      	cmp	r5, r3
 8008968:	bf38      	it	cc
 800896a:	461d      	movcc	r5, r3
 800896c:	0553      	lsls	r3, r2, #21
 800896e:	d531      	bpl.n	80089d4 <__ssputs_r+0xa0>
 8008970:	4629      	mov	r1, r5
 8008972:	f000 fb63 	bl	800903c <_malloc_r>
 8008976:	4606      	mov	r6, r0
 8008978:	b950      	cbnz	r0, 8008990 <__ssputs_r+0x5c>
 800897a:	230c      	movs	r3, #12
 800897c:	f8ca 3000 	str.w	r3, [sl]
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	6921      	ldr	r1, [r4, #16]
 8008992:	464a      	mov	r2, r9
 8008994:	f000 fabe 	bl	8008f14 <memcpy>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	6126      	str	r6, [r4, #16]
 80089a6:	6165      	str	r5, [r4, #20]
 80089a8:	444e      	add	r6, r9
 80089aa:	eba5 0509 	sub.w	r5, r5, r9
 80089ae:	6026      	str	r6, [r4, #0]
 80089b0:	60a5      	str	r5, [r4, #8]
 80089b2:	463e      	mov	r6, r7
 80089b4:	42be      	cmp	r6, r7
 80089b6:	d900      	bls.n	80089ba <__ssputs_r+0x86>
 80089b8:	463e      	mov	r6, r7
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	4632      	mov	r2, r6
 80089be:	4641      	mov	r1, r8
 80089c0:	f000 fab6 	bl	8008f30 <memmove>
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	1b9b      	subs	r3, r3, r6
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	4433      	add	r3, r6
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7db      	b.n	800898c <__ssputs_r+0x58>
 80089d4:	462a      	mov	r2, r5
 80089d6:	f000 fba5 	bl	8009124 <_realloc_r>
 80089da:	4606      	mov	r6, r0
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1e1      	bne.n	80089a4 <__ssputs_r+0x70>
 80089e0:	6921      	ldr	r1, [r4, #16]
 80089e2:	4650      	mov	r0, sl
 80089e4:	f000 fabe 	bl	8008f64 <_free_r>
 80089e8:	e7c7      	b.n	800897a <__ssputs_r+0x46>
	...

080089ec <_svfiprintf_r>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	4698      	mov	r8, r3
 80089f2:	898b      	ldrh	r3, [r1, #12]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	b09d      	sub	sp, #116	; 0x74
 80089f8:	4607      	mov	r7, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	4614      	mov	r4, r2
 80089fe:	d50e      	bpl.n	8008a1e <_svfiprintf_r+0x32>
 8008a00:	690b      	ldr	r3, [r1, #16]
 8008a02:	b963      	cbnz	r3, 8008a1e <_svfiprintf_r+0x32>
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	f000 fb19 	bl	800903c <_malloc_r>
 8008a0a:	6028      	str	r0, [r5, #0]
 8008a0c:	6128      	str	r0, [r5, #16]
 8008a0e:	b920      	cbnz	r0, 8008a1a <_svfiprintf_r+0x2e>
 8008a10:	230c      	movs	r3, #12
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e0d1      	b.n	8008bbe <_svfiprintf_r+0x1d2>
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	616b      	str	r3, [r5, #20]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	2320      	movs	r3, #32
 8008a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a2c:	2330      	movs	r3, #48	; 0x30
 8008a2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bd8 <_svfiprintf_r+0x1ec>
 8008a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a36:	f04f 0901 	mov.w	r9, #1
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a42:	b10a      	cbz	r2, 8008a48 <_svfiprintf_r+0x5c>
 8008a44:	2a25      	cmp	r2, #37	; 0x25
 8008a46:	d1f9      	bne.n	8008a3c <_svfiprintf_r+0x50>
 8008a48:	ebba 0b04 	subs.w	fp, sl, r4
 8008a4c:	d00b      	beq.n	8008a66 <_svfiprintf_r+0x7a>
 8008a4e:	465b      	mov	r3, fp
 8008a50:	4622      	mov	r2, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ff6d 	bl	8008934 <__ssputs_r>
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f000 80aa 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a62:	445a      	add	r2, fp
 8008a64:	9209      	str	r2, [sp, #36]	; 0x24
 8008a66:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a2 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a7a:	f10a 0a01 	add.w	sl, sl, #1
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a86:	931a      	str	r3, [sp, #104]	; 0x68
 8008a88:	4654      	mov	r4, sl
 8008a8a:	2205      	movs	r2, #5
 8008a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a90:	4851      	ldr	r0, [pc, #324]	; (8008bd8 <_svfiprintf_r+0x1ec>)
 8008a92:	f7f7 fba5 	bl	80001e0 <memchr>
 8008a96:	9a04      	ldr	r2, [sp, #16]
 8008a98:	b9d8      	cbnz	r0, 8008ad2 <_svfiprintf_r+0xe6>
 8008a9a:	06d0      	lsls	r0, r2, #27
 8008a9c:	bf44      	itt	mi
 8008a9e:	2320      	movmi	r3, #32
 8008aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa4:	0711      	lsls	r1, r2, #28
 8008aa6:	bf44      	itt	mi
 8008aa8:	232b      	movmi	r3, #43	; 0x2b
 8008aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aae:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab4:	d015      	beq.n	8008ae2 <_svfiprintf_r+0xf6>
 8008ab6:	9a07      	ldr	r2, [sp, #28]
 8008ab8:	4654      	mov	r4, sl
 8008aba:	2000      	movs	r0, #0
 8008abc:	f04f 0c0a 	mov.w	ip, #10
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ac6:	3b30      	subs	r3, #48	; 0x30
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	d94e      	bls.n	8008b6a <_svfiprintf_r+0x17e>
 8008acc:	b1b0      	cbz	r0, 8008afc <_svfiprintf_r+0x110>
 8008ace:	9207      	str	r2, [sp, #28]
 8008ad0:	e014      	b.n	8008afc <_svfiprintf_r+0x110>
 8008ad2:	eba0 0308 	sub.w	r3, r0, r8
 8008ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	46a2      	mov	sl, r4
 8008ae0:	e7d2      	b.n	8008a88 <_svfiprintf_r+0x9c>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1d19      	adds	r1, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9103      	str	r1, [sp, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfbb      	ittet	lt
 8008aee:	425b      	neglt	r3, r3
 8008af0:	f042 0202 	orrlt.w	r2, r2, #2
 8008af4:	9307      	strge	r3, [sp, #28]
 8008af6:	9307      	strlt	r3, [sp, #28]
 8008af8:	bfb8      	it	lt
 8008afa:	9204      	strlt	r2, [sp, #16]
 8008afc:	7823      	ldrb	r3, [r4, #0]
 8008afe:	2b2e      	cmp	r3, #46	; 0x2e
 8008b00:	d10c      	bne.n	8008b1c <_svfiprintf_r+0x130>
 8008b02:	7863      	ldrb	r3, [r4, #1]
 8008b04:	2b2a      	cmp	r3, #42	; 0x2a
 8008b06:	d135      	bne.n	8008b74 <_svfiprintf_r+0x188>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9203      	str	r2, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfb8      	it	lt
 8008b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b18:	3402      	adds	r4, #2
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008be8 <_svfiprintf_r+0x1fc>
 8008b20:	7821      	ldrb	r1, [r4, #0]
 8008b22:	2203      	movs	r2, #3
 8008b24:	4650      	mov	r0, sl
 8008b26:	f7f7 fb5b 	bl	80001e0 <memchr>
 8008b2a:	b140      	cbz	r0, 8008b3e <_svfiprintf_r+0x152>
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	eba0 000a 	sub.w	r0, r0, sl
 8008b32:	fa03 f000 	lsl.w	r0, r3, r0
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	4303      	orrs	r3, r0
 8008b3a:	3401      	adds	r4, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	4826      	ldr	r0, [pc, #152]	; (8008bdc <_svfiprintf_r+0x1f0>)
 8008b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b48:	2206      	movs	r2, #6
 8008b4a:	f7f7 fb49 	bl	80001e0 <memchr>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d038      	beq.n	8008bc4 <_svfiprintf_r+0x1d8>
 8008b52:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <_svfiprintf_r+0x1f4>)
 8008b54:	bb1b      	cbnz	r3, 8008b9e <_svfiprintf_r+0x1b2>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	3307      	adds	r3, #7
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	3308      	adds	r3, #8
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	4433      	add	r3, r6
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	e767      	b.n	8008a3a <_svfiprintf_r+0x4e>
 8008b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b6e:	460c      	mov	r4, r1
 8008b70:	2001      	movs	r0, #1
 8008b72:	e7a5      	b.n	8008ac0 <_svfiprintf_r+0xd4>
 8008b74:	2300      	movs	r3, #0
 8008b76:	3401      	adds	r4, #1
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4620      	mov	r0, r4
 8008b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b86:	3a30      	subs	r2, #48	; 0x30
 8008b88:	2a09      	cmp	r2, #9
 8008b8a:	d903      	bls.n	8008b94 <_svfiprintf_r+0x1a8>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0c5      	beq.n	8008b1c <_svfiprintf_r+0x130>
 8008b90:	9105      	str	r1, [sp, #20]
 8008b92:	e7c3      	b.n	8008b1c <_svfiprintf_r+0x130>
 8008b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b98:	4604      	mov	r4, r0
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f0      	b.n	8008b80 <_svfiprintf_r+0x194>
 8008b9e:	ab03      	add	r3, sp, #12
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008ba6:	a904      	add	r1, sp, #16
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f3af 8000 	nop.w
 8008bae:	1c42      	adds	r2, r0, #1
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	d1d6      	bne.n	8008b62 <_svfiprintf_r+0x176>
 8008bb4:	89ab      	ldrh	r3, [r5, #12]
 8008bb6:	065b      	lsls	r3, r3, #25
 8008bb8:	f53f af2c 	bmi.w	8008a14 <_svfiprintf_r+0x28>
 8008bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bbe:	b01d      	add	sp, #116	; 0x74
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f000 f87a 	bl	8008cc8 <_printf_i>
 8008bd4:	e7eb      	b.n	8008bae <_svfiprintf_r+0x1c2>
 8008bd6:	bf00      	nop
 8008bd8:	08009724 	.word	0x08009724
 8008bdc:	0800972e 	.word	0x0800972e
 8008be0:	00000000 	.word	0x00000000
 8008be4:	08008935 	.word	0x08008935
 8008be8:	0800972a 	.word	0x0800972a

08008bec <_printf_common>:
 8008bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	4699      	mov	r9, r3
 8008bf4:	688a      	ldr	r2, [r1, #8]
 8008bf6:	690b      	ldr	r3, [r1, #16]
 8008bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	bfb8      	it	lt
 8008c00:	4613      	movlt	r3, r2
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c08:	4607      	mov	r7, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_printf_common+0x26>
 8008c0e:	3301      	adds	r3, #1
 8008c10:	6033      	str	r3, [r6, #0]
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	0699      	lsls	r1, r3, #26
 8008c16:	bf42      	ittt	mi
 8008c18:	6833      	ldrmi	r3, [r6, #0]
 8008c1a:	3302      	addmi	r3, #2
 8008c1c:	6033      	strmi	r3, [r6, #0]
 8008c1e:	6825      	ldr	r5, [r4, #0]
 8008c20:	f015 0506 	ands.w	r5, r5, #6
 8008c24:	d106      	bne.n	8008c34 <_printf_common+0x48>
 8008c26:	f104 0a19 	add.w	sl, r4, #25
 8008c2a:	68e3      	ldr	r3, [r4, #12]
 8008c2c:	6832      	ldr	r2, [r6, #0]
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	dc26      	bgt.n	8008c82 <_printf_common+0x96>
 8008c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c38:	1e13      	subs	r3, r2, #0
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	bf18      	it	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	0692      	lsls	r2, r2, #26
 8008c42:	d42b      	bmi.n	8008c9c <_printf_common+0xb0>
 8008c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	47c0      	blx	r8
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d01e      	beq.n	8008c90 <_printf_common+0xa4>
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	68e5      	ldr	r5, [r4, #12]
 8008c56:	6832      	ldr	r2, [r6, #0]
 8008c58:	f003 0306 	and.w	r3, r3, #6
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	bf08      	it	eq
 8008c60:	1aad      	subeq	r5, r5, r2
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	6922      	ldr	r2, [r4, #16]
 8008c66:	bf0c      	ite	eq
 8008c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c6c:	2500      	movne	r5, #0
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	bfc4      	itt	gt
 8008c72:	1a9b      	subgt	r3, r3, r2
 8008c74:	18ed      	addgt	r5, r5, r3
 8008c76:	2600      	movs	r6, #0
 8008c78:	341a      	adds	r4, #26
 8008c7a:	42b5      	cmp	r5, r6
 8008c7c:	d11a      	bne.n	8008cb4 <_printf_common+0xc8>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e008      	b.n	8008c94 <_printf_common+0xa8>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4652      	mov	r2, sl
 8008c86:	4649      	mov	r1, r9
 8008c88:	4638      	mov	r0, r7
 8008c8a:	47c0      	blx	r8
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d103      	bne.n	8008c98 <_printf_common+0xac>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c98:	3501      	adds	r5, #1
 8008c9a:	e7c6      	b.n	8008c2a <_printf_common+0x3e>
 8008c9c:	18e1      	adds	r1, r4, r3
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	2030      	movs	r0, #48	; 0x30
 8008ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca6:	4422      	add	r2, r4
 8008ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	e7c7      	b.n	8008c44 <_printf_common+0x58>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	4649      	mov	r1, r9
 8008cba:	4638      	mov	r0, r7
 8008cbc:	47c0      	blx	r8
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d0e6      	beq.n	8008c90 <_printf_common+0xa4>
 8008cc2:	3601      	adds	r6, #1
 8008cc4:	e7d9      	b.n	8008c7a <_printf_common+0x8e>
	...

08008cc8 <_printf_i>:
 8008cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	7e0f      	ldrb	r7, [r1, #24]
 8008cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cd0:	2f78      	cmp	r7, #120	; 0x78
 8008cd2:	4691      	mov	r9, r2
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	469a      	mov	sl, r3
 8008cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cde:	d807      	bhi.n	8008cf0 <_printf_i+0x28>
 8008ce0:	2f62      	cmp	r7, #98	; 0x62
 8008ce2:	d80a      	bhi.n	8008cfa <_printf_i+0x32>
 8008ce4:	2f00      	cmp	r7, #0
 8008ce6:	f000 80d8 	beq.w	8008e9a <_printf_i+0x1d2>
 8008cea:	2f58      	cmp	r7, #88	; 0x58
 8008cec:	f000 80a3 	beq.w	8008e36 <_printf_i+0x16e>
 8008cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf8:	e03a      	b.n	8008d70 <_printf_i+0xa8>
 8008cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfe:	2b15      	cmp	r3, #21
 8008d00:	d8f6      	bhi.n	8008cf0 <_printf_i+0x28>
 8008d02:	a101      	add	r1, pc, #4	; (adr r1, 8008d08 <_printf_i+0x40>)
 8008d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d08:	08008d61 	.word	0x08008d61
 8008d0c:	08008d75 	.word	0x08008d75
 8008d10:	08008cf1 	.word	0x08008cf1
 8008d14:	08008cf1 	.word	0x08008cf1
 8008d18:	08008cf1 	.word	0x08008cf1
 8008d1c:	08008cf1 	.word	0x08008cf1
 8008d20:	08008d75 	.word	0x08008d75
 8008d24:	08008cf1 	.word	0x08008cf1
 8008d28:	08008cf1 	.word	0x08008cf1
 8008d2c:	08008cf1 	.word	0x08008cf1
 8008d30:	08008cf1 	.word	0x08008cf1
 8008d34:	08008e81 	.word	0x08008e81
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008e63 	.word	0x08008e63
 8008d40:	08008cf1 	.word	0x08008cf1
 8008d44:	08008cf1 	.word	0x08008cf1
 8008d48:	08008ea3 	.word	0x08008ea3
 8008d4c:	08008cf1 	.word	0x08008cf1
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008cf1 	.word	0x08008cf1
 8008d58:	08008cf1 	.word	0x08008cf1
 8008d5c:	08008e6b 	.word	0x08008e6b
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	1d1a      	adds	r2, r3, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	602a      	str	r2, [r5, #0]
 8008d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0a3      	b.n	8008ebc <_printf_i+0x1f4>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	6829      	ldr	r1, [r5, #0]
 8008d78:	0606      	lsls	r6, r0, #24
 8008d7a:	f101 0304 	add.w	r3, r1, #4
 8008d7e:	d50a      	bpl.n	8008d96 <_printf_i+0xce>
 8008d80:	680e      	ldr	r6, [r1, #0]
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	2e00      	cmp	r6, #0
 8008d86:	da03      	bge.n	8008d90 <_printf_i+0xc8>
 8008d88:	232d      	movs	r3, #45	; 0x2d
 8008d8a:	4276      	negs	r6, r6
 8008d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d90:	485e      	ldr	r0, [pc, #376]	; (8008f0c <_printf_i+0x244>)
 8008d92:	230a      	movs	r3, #10
 8008d94:	e019      	b.n	8008dca <_printf_i+0x102>
 8008d96:	680e      	ldr	r6, [r1, #0]
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d9e:	bf18      	it	ne
 8008da0:	b236      	sxthne	r6, r6
 8008da2:	e7ef      	b.n	8008d84 <_printf_i+0xbc>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	6820      	ldr	r0, [r4, #0]
 8008da8:	1d19      	adds	r1, r3, #4
 8008daa:	6029      	str	r1, [r5, #0]
 8008dac:	0601      	lsls	r1, r0, #24
 8008dae:	d501      	bpl.n	8008db4 <_printf_i+0xec>
 8008db0:	681e      	ldr	r6, [r3, #0]
 8008db2:	e002      	b.n	8008dba <_printf_i+0xf2>
 8008db4:	0646      	lsls	r6, r0, #25
 8008db6:	d5fb      	bpl.n	8008db0 <_printf_i+0xe8>
 8008db8:	881e      	ldrh	r6, [r3, #0]
 8008dba:	4854      	ldr	r0, [pc, #336]	; (8008f0c <_printf_i+0x244>)
 8008dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2308      	moveq	r3, #8
 8008dc2:	230a      	movne	r3, #10
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dca:	6865      	ldr	r5, [r4, #4]
 8008dcc:	60a5      	str	r5, [r4, #8]
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	bfa2      	ittt	ge
 8008dd2:	6821      	ldrge	r1, [r4, #0]
 8008dd4:	f021 0104 	bicge.w	r1, r1, #4
 8008dd8:	6021      	strge	r1, [r4, #0]
 8008dda:	b90e      	cbnz	r6, 8008de0 <_printf_i+0x118>
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	d04d      	beq.n	8008e7c <_printf_i+0x1b4>
 8008de0:	4615      	mov	r5, r2
 8008de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008de6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dea:	5dc7      	ldrb	r7, [r0, r7]
 8008dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008df0:	4637      	mov	r7, r6
 8008df2:	42bb      	cmp	r3, r7
 8008df4:	460e      	mov	r6, r1
 8008df6:	d9f4      	bls.n	8008de2 <_printf_i+0x11a>
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d10b      	bne.n	8008e14 <_printf_i+0x14c>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	07de      	lsls	r6, r3, #31
 8008e00:	d508      	bpl.n	8008e14 <_printf_i+0x14c>
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4299      	cmp	r1, r3
 8008e08:	bfde      	ittt	le
 8008e0a:	2330      	movle	r3, #48	; 0x30
 8008e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e14:	1b52      	subs	r2, r2, r5
 8008e16:	6122      	str	r2, [r4, #16]
 8008e18:	f8cd a000 	str.w	sl, [sp]
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	aa03      	add	r2, sp, #12
 8008e20:	4621      	mov	r1, r4
 8008e22:	4640      	mov	r0, r8
 8008e24:	f7ff fee2 	bl	8008bec <_printf_common>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d14c      	bne.n	8008ec6 <_printf_i+0x1fe>
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	b004      	add	sp, #16
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	4835      	ldr	r0, [pc, #212]	; (8008f0c <_printf_i+0x244>)
 8008e38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e3c:	6829      	ldr	r1, [r5, #0]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e44:	6029      	str	r1, [r5, #0]
 8008e46:	061d      	lsls	r5, r3, #24
 8008e48:	d514      	bpl.n	8008e74 <_printf_i+0x1ac>
 8008e4a:	07df      	lsls	r7, r3, #31
 8008e4c:	bf44      	itt	mi
 8008e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e52:	6023      	strmi	r3, [r4, #0]
 8008e54:	b91e      	cbnz	r6, 8008e5e <_printf_i+0x196>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	f023 0320 	bic.w	r3, r3, #32
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	2310      	movs	r3, #16
 8008e60:	e7b0      	b.n	8008dc4 <_printf_i+0xfc>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	2378      	movs	r3, #120	; 0x78
 8008e6c:	4828      	ldr	r0, [pc, #160]	; (8008f10 <_printf_i+0x248>)
 8008e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e72:	e7e3      	b.n	8008e3c <_printf_i+0x174>
 8008e74:	0659      	lsls	r1, r3, #25
 8008e76:	bf48      	it	mi
 8008e78:	b2b6      	uxthmi	r6, r6
 8008e7a:	e7e6      	b.n	8008e4a <_printf_i+0x182>
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	e7bb      	b.n	8008df8 <_printf_i+0x130>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	6826      	ldr	r6, [r4, #0]
 8008e84:	6961      	ldr	r1, [r4, #20]
 8008e86:	1d18      	adds	r0, r3, #4
 8008e88:	6028      	str	r0, [r5, #0]
 8008e8a:	0635      	lsls	r5, r6, #24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	d501      	bpl.n	8008e94 <_printf_i+0x1cc>
 8008e90:	6019      	str	r1, [r3, #0]
 8008e92:	e002      	b.n	8008e9a <_printf_i+0x1d2>
 8008e94:	0670      	lsls	r0, r6, #25
 8008e96:	d5fb      	bpl.n	8008e90 <_printf_i+0x1c8>
 8008e98:	8019      	strh	r1, [r3, #0]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	4615      	mov	r5, r2
 8008ea0:	e7ba      	b.n	8008e18 <_printf_i+0x150>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	1d1a      	adds	r2, r3, #4
 8008ea6:	602a      	str	r2, [r5, #0]
 8008ea8:	681d      	ldr	r5, [r3, #0]
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	2100      	movs	r1, #0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7f7 f996 	bl	80001e0 <memchr>
 8008eb4:	b108      	cbz	r0, 8008eba <_printf_i+0x1f2>
 8008eb6:	1b40      	subs	r0, r0, r5
 8008eb8:	6060      	str	r0, [r4, #4]
 8008eba:	6863      	ldr	r3, [r4, #4]
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec4:	e7a8      	b.n	8008e18 <_printf_i+0x150>
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	47d0      	blx	sl
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d0ab      	beq.n	8008e2c <_printf_i+0x164>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	079b      	lsls	r3, r3, #30
 8008ed8:	d413      	bmi.n	8008f02 <_printf_i+0x23a>
 8008eda:	68e0      	ldr	r0, [r4, #12]
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	4298      	cmp	r0, r3
 8008ee0:	bfb8      	it	lt
 8008ee2:	4618      	movlt	r0, r3
 8008ee4:	e7a4      	b.n	8008e30 <_printf_i+0x168>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d09b      	beq.n	8008e2c <_printf_i+0x164>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	9903      	ldr	r1, [sp, #12]
 8008efa:	1a5b      	subs	r3, r3, r1
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dcf2      	bgt.n	8008ee6 <_printf_i+0x21e>
 8008f00:	e7eb      	b.n	8008eda <_printf_i+0x212>
 8008f02:	2500      	movs	r5, #0
 8008f04:	f104 0619 	add.w	r6, r4, #25
 8008f08:	e7f5      	b.n	8008ef6 <_printf_i+0x22e>
 8008f0a:	bf00      	nop
 8008f0c:	08009735 	.word	0x08009735
 8008f10:	08009746 	.word	0x08009746

08008f14 <memcpy>:
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f1c:	d100      	bne.n	8008f20 <memcpy+0xc>
 8008f1e:	4770      	bx	lr
 8008f20:	b510      	push	{r4, lr}
 8008f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d1f9      	bne.n	8008f22 <memcpy+0xe>
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <memmove>:
 8008f30:	4288      	cmp	r0, r1
 8008f32:	b510      	push	{r4, lr}
 8008f34:	eb01 0402 	add.w	r4, r1, r2
 8008f38:	d902      	bls.n	8008f40 <memmove+0x10>
 8008f3a:	4284      	cmp	r4, r0
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	d807      	bhi.n	8008f50 <memmove+0x20>
 8008f40:	1e43      	subs	r3, r0, #1
 8008f42:	42a1      	cmp	r1, r4
 8008f44:	d008      	beq.n	8008f58 <memmove+0x28>
 8008f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f4e:	e7f8      	b.n	8008f42 <memmove+0x12>
 8008f50:	4402      	add	r2, r0
 8008f52:	4601      	mov	r1, r0
 8008f54:	428a      	cmp	r2, r1
 8008f56:	d100      	bne.n	8008f5a <memmove+0x2a>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f62:	e7f7      	b.n	8008f54 <memmove+0x24>

08008f64 <_free_r>:
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d044      	beq.n	8008ff4 <_free_r+0x90>
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f1a1 0404 	sub.w	r4, r1, #4
 8008f76:	bfb8      	it	lt
 8008f78:	18e4      	addlt	r4, r4, r3
 8008f7a:	f000 f913 	bl	80091a4 <__malloc_lock>
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <_free_r+0x94>)
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x30>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	b003      	add	sp, #12
 8008f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f90:	f000 b90e 	b.w	80091b0 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x46>
 8008f98:	6825      	ldr	r5, [r4, #0]
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x22>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x50>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x46>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1855      	adds	r5, r2, r1
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x70>
 8008fbc:	6824      	ldr	r4, [r4, #0]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	1854      	adds	r4, r2, r1
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x26>
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	4421      	add	r1, r4
 8008fd0:	6011      	str	r1, [r2, #0]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x26>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x78>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x26>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7ca      	b.n	8008f8a <_free_r+0x26>
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	200008f0 	.word	0x200008f0

08008ffc <sbrk_aligned>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4e0e      	ldr	r6, [pc, #56]	; (8009038 <sbrk_aligned+0x3c>)
 8009000:	460c      	mov	r4, r1
 8009002:	6831      	ldr	r1, [r6, #0]
 8009004:	4605      	mov	r5, r0
 8009006:	b911      	cbnz	r1, 800900e <sbrk_aligned+0x12>
 8009008:	f000 f8bc 	bl	8009184 <_sbrk_r>
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	4621      	mov	r1, r4
 8009010:	4628      	mov	r0, r5
 8009012:	f000 f8b7 	bl	8009184 <_sbrk_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d00a      	beq.n	8009030 <sbrk_aligned+0x34>
 800901a:	1cc4      	adds	r4, r0, #3
 800901c:	f024 0403 	bic.w	r4, r4, #3
 8009020:	42a0      	cmp	r0, r4
 8009022:	d007      	beq.n	8009034 <sbrk_aligned+0x38>
 8009024:	1a21      	subs	r1, r4, r0
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f8ac 	bl	8009184 <_sbrk_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d101      	bne.n	8009034 <sbrk_aligned+0x38>
 8009030:	f04f 34ff 	mov.w	r4, #4294967295
 8009034:	4620      	mov	r0, r4
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	200008f4 	.word	0x200008f4

0800903c <_malloc_r>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	1ccd      	adds	r5, r1, #3
 8009042:	f025 0503 	bic.w	r5, r5, #3
 8009046:	3508      	adds	r5, #8
 8009048:	2d0c      	cmp	r5, #12
 800904a:	bf38      	it	cc
 800904c:	250c      	movcc	r5, #12
 800904e:	2d00      	cmp	r5, #0
 8009050:	4607      	mov	r7, r0
 8009052:	db01      	blt.n	8009058 <_malloc_r+0x1c>
 8009054:	42a9      	cmp	r1, r5
 8009056:	d905      	bls.n	8009064 <_malloc_r+0x28>
 8009058:	230c      	movs	r3, #12
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	2600      	movs	r6, #0
 800905e:	4630      	mov	r0, r6
 8009060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009064:	4e2e      	ldr	r6, [pc, #184]	; (8009120 <_malloc_r+0xe4>)
 8009066:	f000 f89d 	bl	80091a4 <__malloc_lock>
 800906a:	6833      	ldr	r3, [r6, #0]
 800906c:	461c      	mov	r4, r3
 800906e:	bb34      	cbnz	r4, 80090be <_malloc_r+0x82>
 8009070:	4629      	mov	r1, r5
 8009072:	4638      	mov	r0, r7
 8009074:	f7ff ffc2 	bl	8008ffc <sbrk_aligned>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	4604      	mov	r4, r0
 800907c:	d14d      	bne.n	800911a <_malloc_r+0xde>
 800907e:	6834      	ldr	r4, [r6, #0]
 8009080:	4626      	mov	r6, r4
 8009082:	2e00      	cmp	r6, #0
 8009084:	d140      	bne.n	8009108 <_malloc_r+0xcc>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	4631      	mov	r1, r6
 800908a:	4638      	mov	r0, r7
 800908c:	eb04 0803 	add.w	r8, r4, r3
 8009090:	f000 f878 	bl	8009184 <_sbrk_r>
 8009094:	4580      	cmp	r8, r0
 8009096:	d13a      	bne.n	800910e <_malloc_r+0xd2>
 8009098:	6821      	ldr	r1, [r4, #0]
 800909a:	3503      	adds	r5, #3
 800909c:	1a6d      	subs	r5, r5, r1
 800909e:	f025 0503 	bic.w	r5, r5, #3
 80090a2:	3508      	adds	r5, #8
 80090a4:	2d0c      	cmp	r5, #12
 80090a6:	bf38      	it	cc
 80090a8:	250c      	movcc	r5, #12
 80090aa:	4629      	mov	r1, r5
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff ffa5 	bl	8008ffc <sbrk_aligned>
 80090b2:	3001      	adds	r0, #1
 80090b4:	d02b      	beq.n	800910e <_malloc_r+0xd2>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	442b      	add	r3, r5
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	e00e      	b.n	80090dc <_malloc_r+0xa0>
 80090be:	6822      	ldr	r2, [r4, #0]
 80090c0:	1b52      	subs	r2, r2, r5
 80090c2:	d41e      	bmi.n	8009102 <_malloc_r+0xc6>
 80090c4:	2a0b      	cmp	r2, #11
 80090c6:	d916      	bls.n	80090f6 <_malloc_r+0xba>
 80090c8:	1961      	adds	r1, r4, r5
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6025      	str	r5, [r4, #0]
 80090ce:	bf18      	it	ne
 80090d0:	6059      	strne	r1, [r3, #4]
 80090d2:	6863      	ldr	r3, [r4, #4]
 80090d4:	bf08      	it	eq
 80090d6:	6031      	streq	r1, [r6, #0]
 80090d8:	5162      	str	r2, [r4, r5]
 80090da:	604b      	str	r3, [r1, #4]
 80090dc:	4638      	mov	r0, r7
 80090de:	f104 060b 	add.w	r6, r4, #11
 80090e2:	f000 f865 	bl	80091b0 <__malloc_unlock>
 80090e6:	f026 0607 	bic.w	r6, r6, #7
 80090ea:	1d23      	adds	r3, r4, #4
 80090ec:	1af2      	subs	r2, r6, r3
 80090ee:	d0b6      	beq.n	800905e <_malloc_r+0x22>
 80090f0:	1b9b      	subs	r3, r3, r6
 80090f2:	50a3      	str	r3, [r4, r2]
 80090f4:	e7b3      	b.n	800905e <_malloc_r+0x22>
 80090f6:	6862      	ldr	r2, [r4, #4]
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	bf0c      	ite	eq
 80090fc:	6032      	streq	r2, [r6, #0]
 80090fe:	605a      	strne	r2, [r3, #4]
 8009100:	e7ec      	b.n	80090dc <_malloc_r+0xa0>
 8009102:	4623      	mov	r3, r4
 8009104:	6864      	ldr	r4, [r4, #4]
 8009106:	e7b2      	b.n	800906e <_malloc_r+0x32>
 8009108:	4634      	mov	r4, r6
 800910a:	6876      	ldr	r6, [r6, #4]
 800910c:	e7b9      	b.n	8009082 <_malloc_r+0x46>
 800910e:	230c      	movs	r3, #12
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	4638      	mov	r0, r7
 8009114:	f000 f84c 	bl	80091b0 <__malloc_unlock>
 8009118:	e7a1      	b.n	800905e <_malloc_r+0x22>
 800911a:	6025      	str	r5, [r4, #0]
 800911c:	e7de      	b.n	80090dc <_malloc_r+0xa0>
 800911e:	bf00      	nop
 8009120:	200008f0 	.word	0x200008f0

08009124 <_realloc_r>:
 8009124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009128:	4680      	mov	r8, r0
 800912a:	4614      	mov	r4, r2
 800912c:	460e      	mov	r6, r1
 800912e:	b921      	cbnz	r1, 800913a <_realloc_r+0x16>
 8009130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009134:	4611      	mov	r1, r2
 8009136:	f7ff bf81 	b.w	800903c <_malloc_r>
 800913a:	b92a      	cbnz	r2, 8009148 <_realloc_r+0x24>
 800913c:	f7ff ff12 	bl	8008f64 <_free_r>
 8009140:	4625      	mov	r5, r4
 8009142:	4628      	mov	r0, r5
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009148:	f000 f838 	bl	80091bc <_malloc_usable_size_r>
 800914c:	4284      	cmp	r4, r0
 800914e:	4607      	mov	r7, r0
 8009150:	d802      	bhi.n	8009158 <_realloc_r+0x34>
 8009152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009156:	d812      	bhi.n	800917e <_realloc_r+0x5a>
 8009158:	4621      	mov	r1, r4
 800915a:	4640      	mov	r0, r8
 800915c:	f7ff ff6e 	bl	800903c <_malloc_r>
 8009160:	4605      	mov	r5, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d0ed      	beq.n	8009142 <_realloc_r+0x1e>
 8009166:	42bc      	cmp	r4, r7
 8009168:	4622      	mov	r2, r4
 800916a:	4631      	mov	r1, r6
 800916c:	bf28      	it	cs
 800916e:	463a      	movcs	r2, r7
 8009170:	f7ff fed0 	bl	8008f14 <memcpy>
 8009174:	4631      	mov	r1, r6
 8009176:	4640      	mov	r0, r8
 8009178:	f7ff fef4 	bl	8008f64 <_free_r>
 800917c:	e7e1      	b.n	8009142 <_realloc_r+0x1e>
 800917e:	4635      	mov	r5, r6
 8009180:	e7df      	b.n	8009142 <_realloc_r+0x1e>
	...

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d06      	ldr	r5, [pc, #24]	; (80091a0 <_sbrk_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f7 fd3a 	bl	8000c08 <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	200008f8 	.word	0x200008f8

080091a4 <__malloc_lock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__malloc_lock+0x8>)
 80091a6:	f000 b811 	b.w	80091cc <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	200008fc 	.word	0x200008fc

080091b0 <__malloc_unlock>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__malloc_unlock+0x8>)
 80091b2:	f000 b80c 	b.w	80091ce <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	200008fc 	.word	0x200008fc

080091bc <_malloc_usable_size_r>:
 80091bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c0:	1f18      	subs	r0, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbc      	itt	lt
 80091c6:	580b      	ldrlt	r3, [r1, r0]
 80091c8:	18c0      	addlt	r0, r0, r3
 80091ca:	4770      	bx	lr

080091cc <__retarget_lock_acquire_recursive>:
 80091cc:	4770      	bx	lr

080091ce <__retarget_lock_release_recursive>:
 80091ce:	4770      	bx	lr

080091d0 <_init>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr

080091dc <_fini>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr
