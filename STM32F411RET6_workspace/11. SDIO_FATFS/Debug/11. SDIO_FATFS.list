
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef8  08006ef8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f00  08006f00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000070  08006f78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08006f78  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba7  00000000  00000000  00031a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018953  00000000  00000000  00036138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f31  00000000  00000000  0004ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d11e  00000000  00000000  000629bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  000efb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e34 	.word	0x08006e34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006e34 	.word	0x08006e34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 fd47 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 fd60 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f000 fd3f 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f000 fd58 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x68>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x68>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x68>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fb89 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f865 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffc1 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fadf 	bl	8000c14 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000656:	f7ff ff95 	bl	8000584 <MX_DMA_Init>
  MX_FATFS_Init();
 800065a:	f005 f82f 	bl	80056bc <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800065e:	f000 f8e7 	bl	8000830 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	4923      	ldr	r1, [pc, #140]	; (80006f4 <main+0xb4>)
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <main+0xb8>)
 8000668:	f003 fb1c 	bl	8003ca4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BYTE buf[32] = "Hello world";	// file copy buffer
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <main+0xbc>)
 800066e:	463b      	mov	r3, r7
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
  uint32_t bw, br;

  // 1. FS Initialization("0:/"drive allocation)
//  if((retSD = f_mount(&SDFatFS, "0:/", 1)) == FR_OK)
  if((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK)
 8000686:	2201      	movs	r2, #1
 8000688:	491d      	ldr	r1, [pc, #116]	; (8000700 <main+0xc0>)
 800068a:	481e      	ldr	r0, [pc, #120]	; (8000704 <main+0xc4>)
 800068c:	f005 fe90 	bl	80063b0 <f_mount>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0xc8>)
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <main+0xc8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10d      	bne.n	80006bc <main+0x7c>
  {
	  sprintf(str, "f_mount OK %d\n", retSD);
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <main+0xc8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4919      	ldr	r1, [pc, #100]	; (800070c <main+0xcc>)
 80006a8:	4812      	ldr	r0, [pc, #72]	; (80006f4 <main+0xb4>)
 80006aa:	f005 ff55 	bl	8006558 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006ae:	230a      	movs	r3, #10
 80006b0:	2228      	movs	r2, #40	; 0x28
 80006b2:	4910      	ldr	r1, [pc, #64]	; (80006f4 <main+0xb4>)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <main+0xb8>)
 80006b6:	f003 fa63 	bl	8003b80 <HAL_UART_Transmit>
 80006ba:	e00c      	b.n	80006d6 <main+0x96>
  }
  else
  {
	  sprintf(str, "f_mount failed %d\n", retSD);
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <main+0xc8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4913      	ldr	r1, [pc, #76]	; (8000710 <main+0xd0>)
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <main+0xb4>)
 80006c6:	f005 ff47 	bl	8006558 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006ca:	230a      	movs	r3, #10
 80006cc:	2228      	movs	r2, #40	; 0x28
 80006ce:	4909      	ldr	r1, [pc, #36]	; (80006f4 <main+0xb4>)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <main+0xb8>)
 80006d2:	f003 fa55 	bl	8003b80 <HAL_UART_Transmit>
  }

  while (1)
  {

	  if(flag1)
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <main+0xd4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0fb      	beq.n	80006d6 <main+0x96>
	  {
		  flag1 = 0;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <main+0xd4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006e4:	230a      	movs	r3, #10
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	4902      	ldr	r1, [pc, #8]	; (80006f4 <main+0xb4>)
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <main+0xb8>)
 80006ec:	f003 fa48 	bl	8003b80 <HAL_UART_Transmit>
	  if(flag1)
 80006f0:	e7f1      	b.n	80006d6 <main+0x96>
 80006f2:	bf00      	nop
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000200 	.word	0x20000200
 80006fc:	08006e70 	.word	0x08006e70
 8000700:	2000024c 	.word	0x2000024c
 8000704:	20000250 	.word	0x20000250
 8000708:	20000248 	.word	0x20000248
 800070c:	08006e4c 	.word	0x08006e4c
 8000710:	08006e5c 	.word	0x08006e5c
 8000714:	200000b4 	.word	0x200000b4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 ff0e 	bl	8006548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0xc8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <SystemClock_Config+0xc8>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <SystemClock_Config+0xcc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <SystemClock_Config+0xcc>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000794:	2305      	movs	r3, #5
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fa17 	bl	8001bd0 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a8:	f000 f83c 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2103      	movs	r1, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fc79 	bl	80020c0 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d4:	f000 f826 	bl	8000824 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_UART_RxCpltCallback+0x2c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d107      	bne.n	800080a <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <HAL_UART_RxCpltCallback+0x30>)
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <HAL_UART_RxCpltCallback+0x34>)
 8000800:	f003 fa50 	bl	8003ca4 <HAL_UART_Receive_IT>
		flag1 = 1;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_UART_RxCpltCallback+0x38>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
	}
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40011000 	.word	0x40011000
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000200 	.word	0x20000200
 8000820:	200000b4 	.word	0x200000b4

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 8000836:	4a0d      	ldr	r2, [pc, #52]	; (800086c <MX_SDIO_SD_Init+0x3c>)
 8000838:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <MX_SDIO_SD_Init+0x38>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	200000b8 	.word	0x200000b8
 800086c:	40012c00 	.word	0x40012c00

08000870 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <HAL_SD_MspInit+0x1fc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	f040 80e8 	bne.w	8000a64 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	4b75      	ldr	r3, [pc, #468]	; (8000a70 <HAL_SD_MspInit+0x200>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089c:	4a74      	ldr	r2, [pc, #464]	; (8000a70 <HAL_SD_MspInit+0x200>)
 800089e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a2:	6453      	str	r3, [r2, #68]	; 0x44
 80008a4:	4b72      	ldr	r3, [pc, #456]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a6d      	ldr	r2, [pc, #436]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a66      	ldr	r2, [pc, #408]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b60      	ldr	r3, [pc, #384]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a5f      	ldr	r2, [pc, #380]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <HAL_SD_MspInit+0x200>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000914:	230c      	movs	r3, #12
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4855      	ldr	r0, [pc, #340]	; (8000a74 <HAL_SD_MspInit+0x204>)
 8000920:	f000 ffd2 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000936:	230c      	movs	r3, #12
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	484d      	ldr	r0, [pc, #308]	; (8000a78 <HAL_SD_MspInit+0x208>)
 8000942:	f000 ffc1 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000946:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000958:	230c      	movs	r3, #12
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4846      	ldr	r0, [pc, #280]	; (8000a7c <HAL_SD_MspInit+0x20c>)
 8000964:	f000 ffb0 	bl	80018c8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <HAL_SD_MspInit+0x210>)
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <HAL_SD_MspInit+0x214>)
 800096c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_SD_MspInit+0x210>)
 8000970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000974:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <HAL_SD_MspInit+0x210>)
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <HAL_SD_MspInit+0x210>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <HAL_SD_MspInit+0x210>)
 8000984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000988:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <HAL_SD_MspInit+0x210>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_SD_MspInit+0x210>)
 8000994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000998:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <HAL_SD_MspInit+0x210>)
 800099c:	2220      	movs	r2, #32
 800099e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009c2:	482f      	ldr	r0, [pc, #188]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009c4:	f000 fb72 	bl	80010ac <HAL_DMA_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 80009ce:	f7ff ff29 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <HAL_SD_MspInit+0x210>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_SD_MspInit+0x218>)
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <HAL_SD_MspInit+0x21c>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_SD_MspInit+0x218>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_SD_MspInit+0x218>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <HAL_SD_MspInit+0x218>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_SD_MspInit+0x218>)
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a12:	2220      	movs	r2, #32
 8000a14:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a24:	2203      	movs	r2, #3
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a3a:	f000 fb37 	bl	80010ac <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8000a44:	f7ff feee 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_SD_MspInit+0x218>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2031      	movs	r0, #49	; 0x31
 8000a5a:	f000 faf0 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a5e:	2031      	movs	r0, #49	; 0x31
 8000a60:	f000 fb09 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40012c00 	.word	0x40012c00
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	2000013c 	.word	0x2000013c
 8000a84:	40026458 	.word	0x40026458
 8000a88:	2000019c 	.word	0x2000019c
 8000a8c:	400264a0 	.word	0x400264a0

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f968 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <USART1_IRQHandler+0x10>)
 8000b3a:	f003 f8e3 	bl	8003d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000200 	.word	0x20000200

08000b48 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <SDIO_IRQHandler+0x10>)
 8000b4e:	f001 ff0f 	bl	8002970 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b8 	.word	0x200000b8

08000b5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA2_Stream3_IRQHandler+0x10>)
 8000b62:	f000 fc3b 	bl	80013dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000013c 	.word	0x2000013c

08000b70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <DMA2_Stream6_IRQHandler+0x10>)
 8000b76:	f000 fc31 	bl	80013dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000019c 	.word	0x2000019c

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f005 fc9e 	bl	80064f4 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20020000 	.word	0x20020000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200001fc 	.word	0x200001fc
 8000bec:	200006d0 	.word	0x200006d0

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_USART1_UART_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	f002 ff4b 	bl	8003ae6 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c56:	f7ff fde5 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000200 	.word	0x20000200
 8000c64:	40011000 	.word	0x40011000

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d134      	bne.n	8000cf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_UART_MspInit+0x9c>)
 8000ce0:	f000 fdf2 	bl	80018c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2025      	movs	r0, #37	; 0x25
 8000cea:	f000 f9a8 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cee:	2025      	movs	r0, #37	; 0x25
 8000cf0:	f000 f9c1 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ff5d 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f005 fbe3 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fc81 	bl	8000640 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08006f08 	.word	0x08006f08
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	200006d0 	.word	0x200006d0

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f94f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe7e 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f967 	bl	8001092 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f92f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000244 	.word	0x20000244

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000244 	.word	0x20000244

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff feb6 	bl	8000e28 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e099      	b.n	80011fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e00f      	b.n	800110a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fe9d 	bl	8000e28 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d908      	bls.n	800110a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e078      	b.n	80011fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e8      	bne.n	80010ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_DMA_Init+0x158>)
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	2b04      	cmp	r3, #4
 8001162:	d107      	bne.n	8001174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4313      	orrs	r3, r2
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2b04      	cmp	r3, #4
 800119c:	d117      	bne.n	80011ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fb0d 	bl	80017d0 <DMA_CheckFifoParam>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ca:	2301      	movs	r3, #1
 80011cc:	e016      	b.n	80011fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fac4 	bl	8001764 <DMA_CalcBaseAndBitshift>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	223f      	movs	r2, #63	; 0x3f
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f010803f 	.word	0xf010803f

08001208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_DMA_Start_IT+0x26>
 800122a:	2302      	movs	r3, #2
 800122c:	e040      	b.n	80012b0 <HAL_DMA_Start_IT+0xa8>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d12f      	bne.n	80012a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 fa56 	bl	8001708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	409a      	lsls	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0216 	orr.w	r2, r2, #22
 8001276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0208 	orr.w	r2, r2, #8
 800128e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e005      	b.n	80012ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012aa:	2302      	movs	r3, #2
 80012ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c6:	f7ff fdaf 	bl	8000e28 <HAL_GetTick>
 80012ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d008      	beq.n	80012ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e052      	b.n	8001390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0216 	bic.w	r2, r2, #22
 80012f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_DMA_Abort+0x62>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133a:	e013      	b.n	8001364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133c:	f7ff fd74 	bl	8000e28 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b05      	cmp	r3, #5
 8001348:	d90c      	bls.n	8001364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2220      	movs	r2, #32
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e015      	b.n	8001390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1e4      	bne.n	800133c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	223f      	movs	r2, #63	; 0x3f
 8001378:	409a      	lsls	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d004      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00c      	b.n	80013d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2205      	movs	r2, #5
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e8:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <HAL_DMA_IRQHandler+0x248>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a8e      	ldr	r2, [pc, #568]	; (8001628 <HAL_DMA_IRQHandler+0x24c>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a9b      	lsrs	r3, r3, #10
 80013f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2208      	movs	r2, #8
 8001408:	409a      	lsls	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01a      	beq.n	8001448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2208      	movs	r2, #8
 8001436:	409a      	lsls	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d012      	beq.n	800147e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2201      	movs	r2, #1
 800146c:	409a      	lsls	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	f043 0202 	orr.w	r2, r3, #2
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2204      	movs	r2, #4
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2204      	movs	r2, #4
 80014a2:	409a      	lsls	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f043 0204 	orr.w	r2, r3, #4
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2210      	movs	r2, #16
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d043      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03c      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2210      	movs	r2, #16
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d018      	beq.n	800151e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d024      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
 800150a:	e01f      	b.n	800154c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01b      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e016      	b.n	800154c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0208 	bic.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2220      	movs	r2, #32
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808f 	beq.w	800167c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8087 	beq.w	800167c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2220      	movs	r2, #32
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b05      	cmp	r3, #5
 8001584:	d136      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0216 	bic.w	r2, r2, #22
 8001594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x1da>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0208 	bic.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	223f      	movs	r2, #63	; 0x3f
 80015cc:	409a      	lsls	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d07e      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
        }
        return;
 80015f2:	e079      	b.n	80016e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01d      	beq.n	800163e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10d      	bne.n	800162c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	2b00      	cmp	r3, #0
 8001616:	d031      	beq.n	800167c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
 8001620:	e02c      	b.n	800167c <HAL_DMA_IRQHandler+0x2a0>
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000
 8001628:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
 800163c:	e01e      	b.n	800167c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10f      	bne.n	800166c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0210 	bic.w	r2, r2, #16
 800165a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	2b00      	cmp	r3, #0
 8001682:	d032      	beq.n	80016ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d022      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2205      	movs	r2, #5
 8001694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d307      	bcc.n	80016c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f2      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x2cc>
 80016c2:	e000      	b.n	80016c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
 80016e6:	e000      	b.n	80016ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80016e8:	bf00      	nop
    }
  }
}
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d108      	bne.n	8001748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001746:	e007      	b.n	8001758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3b10      	subs	r3, #16
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <DMA_CalcBaseAndBitshift+0x68>)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d909      	bls.n	80017a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	1d1a      	adds	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
 80017a4:	e007      	b.n	80017b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	aaaaaaab 	.word	0xaaaaaaab
 80017cc:	08006ea8 	.word	0x08006ea8

080017d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11f      	bne.n	800182a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d856      	bhi.n	800189e <DMA_CheckFifoParam+0xce>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DMA_CheckFifoParam+0x28>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800181b 	.word	0x0800181b
 8001800:	08001809 	.word	0x08001809
 8001804:	0800189f 	.word	0x0800189f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d046      	beq.n	80018a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001818:	e043      	b.n	80018a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001822:	d140      	bne.n	80018a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001828:	e03d      	b.n	80018a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001832:	d121      	bne.n	8001878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d837      	bhi.n	80018aa <DMA_CheckFifoParam+0xda>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <DMA_CheckFifoParam+0x70>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001851 	.word	0x08001851
 8001844:	08001857 	.word	0x08001857
 8001848:	08001851 	.word	0x08001851
 800184c:	08001869 	.word	0x08001869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      break;
 8001854:	e030      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d025      	beq.n	80018ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001866:	e022      	b.n	80018ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001870:	d11f      	bne.n	80018b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001876:	e01c      	b.n	80018b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d903      	bls.n	8001886 <DMA_CheckFifoParam+0xb6>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d003      	beq.n	800188c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001884:	e018      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
      break;
 800188a:	e015      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      break;
 800189c:	e00b      	b.n	80018b6 <DMA_CheckFifoParam+0xe6>
      break;
 800189e:	bf00      	nop
 80018a0:	e00a      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018a2:	bf00      	nop
 80018a4:	e008      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
 80018a8:	e006      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e004      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e002      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
    }
  } 
  
  return status; 
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e159      	b.n	8001b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8148 	bne.w	8001b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a2 	beq.w	8001b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x202>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1fe>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_GPIO_Init+0x2f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1fa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <HAL_GPIO_Init+0x2fc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1f6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1f2>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f aea2 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e267      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d075      	beq.n	8001cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d157      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e242      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x74>
 8001c36:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6f      	ldr	r2, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f8ce 	bl	8000e28 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f8ca 	bl	8000e28 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e207      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f8ba 	bl	8000e28 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f8b6 	bl	8000e28 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f3      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe8>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1c7      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4937      	ldr	r1, [pc, #220]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f86f 	bl	8000e28 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f86b 	bl	8000e28 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1a8      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4925      	ldr	r1, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f84e 	bl	8000e28 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff f84a 	bl	8000e28 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e187      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d036      	beq.n	8001e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f82e 	bl	8000e28 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f82a 	bl	8000e28 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e167      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x200>
 8001dee:	e01b      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff f817 	bl	8000e28 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e00e      	b.n	8001e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f813 	bl	8000e28 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d907      	bls.n	8001e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e150      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470000 	.word	0x42470000
 8001e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ea      	bne.n	8001dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8097 	beq.w	8001f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b77      	ldr	r3, [pc, #476]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b74      	ldr	r3, [pc, #464]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a73      	ldr	r2, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ffd3 	bl	8000e28 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7fe ffcf 	bl	8000e28 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e10c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x2ea>
 8001eac:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x30c>
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	4b55      	ldr	r3, [pc, #340]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a54      	ldr	r2, [pc, #336]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7fe ff94 	bl	8000e28 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7fe ff90 	bl	8000e28 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0cb      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7fe ff7e 	bl	8000e28 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff7a 	bl	8000e28 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0b5      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ee      	bne.n	8001f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a1 	beq.w	80020b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d05c      	beq.n	8002034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d141      	bne.n	8002006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff4e 	bl	8000e28 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe ff4a 	bl	8000e28 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e087      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	491b      	ldr	r1, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff23 	bl	8000e28 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ff1f 	bl	8000e28 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e05c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x416>
 8002004:	e054      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff0c 	bl	8000e28 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff08 	bl	8000e28 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e045      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
 8002032:	e03d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e038      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x4ec>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d028      	beq.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d121      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fe3a 	bl	8000e28 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fe36 	bl	8000e28 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fd9a 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	08006e90 	.word	0x08006e90
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b090      	sub	sp, #64	; 0x40
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d00d      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	f200 80a1 	bhi.w	80023f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022be:	e09b      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_GetSysClockFreq+0x184>)
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022c4:	e09b      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022ca:	e098      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022cc:	4b4f      	ldr	r3, [pc, #316]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d6:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	2200      	movs	r2, #0
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	627a      	str	r2, [r7, #36]	; 0x24
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022f4:	2100      	movs	r1, #0
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f8:	fb03 f201 	mul.w	r2, r3, r1
 80022fc:	2300      	movs	r3, #0
 80022fe:	fb00 f303 	mul.w	r3, r0, r3
 8002302:	4413      	add	r3, r2
 8002304:	4a43      	ldr	r2, [pc, #268]	; (8002414 <HAL_RCC_GetSysClockFreq+0x188>)
 8002306:	fba0 1202 	umull	r1, r2, r0, r2
 800230a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800230c:	460a      	mov	r2, r1
 800230e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002312:	4413      	add	r3, r2
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	2200      	movs	r2, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	61fa      	str	r2, [r7, #28]
 800231e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002326:	f7fd ffab 	bl	8000280 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4613      	mov	r3, r2
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002332:	e053      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	099b      	lsrs	r3, r3, #6
 800233a:	2200      	movs	r2, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	617a      	str	r2, [r7, #20]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002346:	f04f 0b00 	mov.w	fp, #0
 800234a:	4652      	mov	r2, sl
 800234c:	465b      	mov	r3, fp
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	ebb2 080a 	subs.w	r8, r2, sl
 8002366:	eb63 090b 	sbc.w	r9, r3, fp
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800237a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800237e:	ebb2 0408 	subs.w	r4, r2, r8
 8002382:	eb63 0509 	sbc.w	r5, r3, r9
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	00eb      	lsls	r3, r5, #3
 8002390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002394:	00e2      	lsls	r2, r4, #3
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	eb14 030a 	adds.w	r3, r4, sl
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	eb45 030b 	adc.w	r3, r5, fp
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b2:	4629      	mov	r1, r5
 80023b4:	028b      	lsls	r3, r1, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023bc:	4621      	mov	r1, r4
 80023be:	028a      	lsls	r2, r1, #10
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	2200      	movs	r2, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	60fa      	str	r2, [r7, #12]
 80023cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d0:	f7fd ff56 	bl	8000280 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002400:	4618      	mov	r0, r3
 8002402:	3740      	adds	r7, #64	; 0x40
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400
 8002414:	017d7840 	.word	0x017d7840

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCC_GetHCLKFreq+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000000 	.word	0x20000000

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002434:	f7ff fff0 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0a9b      	lsrs	r3, r3, #10
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	08006ea0 	.word	0x08006ea0

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800245c:	f7ff ffdc 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0b5b      	lsrs	r3, r3, #13
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08006ea0 	.word	0x08006ea0

08002480 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e022      	b.n	80024d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe f9e3 	bl	8000870 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f814 	bl	80024e0 <HAL_SD_InitCard>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00a      	b.n	80024d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80024fc:	2376      	movs	r3, #118	; 0x76
 80024fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681d      	ldr	r5, [r3, #0]
 8002504:	466c      	mov	r4, sp
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800250e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002518:	4628      	mov	r0, r5
 800251a:	f002 fb5b 	bl	8004bd4 <SDIO_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e04f      	b.n	80025d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_SD_InitCard+0xf8>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fb93 	bl	8004c66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_SD_InitCard+0xf8>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002546:	2002      	movs	r0, #2
 8002548:	f7fe fc7a 	bl	8000e40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f001 f805 	bl	800355c <SD_PowerON>
 8002552:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e02e      	b.n	80025d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 ff24 	bl	80033c0 <SD_InitCard>
 8002578:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e01b      	b.n	80025d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fbf2 	bl	8004d8a <SDMMC_CmdBlockLength>
 80025a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00f      	beq.n	80025ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_SD_InitCard+0xfc>)
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	422580a0 	.word	0x422580a0
 80025dc:	004005ff 	.word	0x004005ff

080025e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0c0      	b.n	800278a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	f040 80b9 	bne.w	8002788 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800261c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	441a      	add	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	429a      	cmp	r2, r3
 8002628:	d907      	bls.n	800263a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0a7      	b.n	800278a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800266c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2200      	movs	r2, #0
 8002674:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3380      	adds	r3, #128	; 0x80
 80026a4:	4619      	mov	r1, r3
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	025b      	lsls	r3, r3, #9
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	f7fe fdab 	bl	8001208 <HAL_DMA_Start_IT>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d017      	beq.n	80026e8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e050      	b.n	800278a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80026e8:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d002      	beq.n	80026fc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002708:	2390      	movs	r3, #144	; 0x90
 800270a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800270c:	2302      	movs	r3, #2
 800270e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f107 0210 	add.w	r2, r7, #16
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fb05 	bl	8004d32 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d90a      	bls.n	8002744 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2282      	movs	r2, #130	; 0x82
 8002732:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fb69 	bl	8004e12 <SDMMC_CmdReadMultiBlock>
 8002740:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002742:	e009      	b.n	8002758 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2281      	movs	r2, #129	; 0x81
 8002748:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fb3c 	bl	8004dce <SDMMC_CmdReadSingleBlock>
 8002756:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e002      	b.n	800278a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3730      	adds	r7, #48	; 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	080031cf 	.word	0x080031cf
 8002798:	08003241 	.word	0x08003241
 800279c:	004005ff 	.word	0x004005ff
 80027a0:	4225858c 	.word	0x4225858c

080027a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0c5      	b.n	8002958 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 80be 	bne.w	8002956 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	441a      	add	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d907      	bls.n	80027fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0ac      	b.n	8002958 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002830:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2200      	movs	r2, #0
 8002838:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	2b01      	cmp	r3, #1
 8002840:	d002      	beq.n	8002848 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	025b      	lsls	r3, r3, #9
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d90a      	bls.n	8002864 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	22a0      	movs	r2, #160	; 0xa0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fb1d 	bl	8004e9a <SDMMC_CmdWriteMultiBlock>
 8002860:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002862:	e009      	b.n	8002878 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2290      	movs	r2, #144	; 0x90
 8002868:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002870:	4618      	mov	r0, r3
 8002872:	f002 faf0 	bl	8004e56 <SDMMC_CmdWriteSingleBlock>
 8002876:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a39      	ldr	r2, [pc, #228]	; (8002968 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e059      	b.n	8002958 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3380      	adds	r3, #128	; 0x80
 80028da:	461a      	mov	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	f7fe fc91 	bl	8001208 <HAL_DMA_Start_IT>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01c      	beq.n	8002926 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80028fa:	f023 0302 	bic.w	r3, r3, #2
 80028fe:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e018      	b.n	8002958 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002932:	2390      	movs	r3, #144	; 0x90
 8002934:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800293e:	2301      	movs	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f107 0210 	add.w	r2, r7, #16
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f002 f9f0 	bl	8004d32 <SDIO_ConfigData>

      return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3730      	adds	r7, #48	; 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	080031a5 	.word	0x080031a5
 8002964:	08003241 	.word	0x08003241
 8002968:	004005ff 	.word	0x004005ff
 800296c:	4225858c 	.word	0x4225858c

08002970 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_SD_IRQHandler+0x2e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 ffff 	bl	800399a <SD_Read_IT>
 800299c:	e165      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 808f 	beq.w	8002acc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80029c6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80029ca:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d039      	beq.n	8002a5a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_SD_IRQHandler+0x8a>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d011      	beq.n	8002a1e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fa6e 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8002a04:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f92f 	bl	8002c7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <HAL_SD_IRQHandler+0xda>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f002 fed4 	bl	80057f8 <HAL_SD_RxCpltCallback>
 8002a50:	e10b      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f002 fec6 	bl	80057e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a58:	e107      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8102 	beq.w	8002c6a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d011      	beq.n	8002a94 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fa33 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8002a7a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8f4 	bl	8002c7c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 80e5 	bne.w	8002c6a <HAL_SD_IRQHandler+0x2fa>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80df 	bne.w	8002c6a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0208 	bic.w	r2, r2, #8
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f002 fe8d 	bl	80057e4 <HAL_SD_TxCpltCallback>
}
 8002aca:	e0ce      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_SD_IRQHandler+0x17c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ffa9 	bl	8003a3c <SD_Write_IT>
 8002aea:	e0be      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af2:	f240 233a 	movw	r3, #570	; 0x23a
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80b6 	beq.w	8002c6a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	f043 0202 	orr.w	r2, r3, #2
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	f043 0208 	orr.w	r2, r3, #8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f240 723a 	movw	r2, #1850	; 0x73a
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002b98:	f023 0302 	bic.w	r3, r3, #2
 8002b9c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 f99c 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f855 	bl	8002c7c <HAL_SD_ErrorCallback>
}
 8002bd2:	e04a      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d045      	beq.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_SD_IRQHandler+0x282>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_SD_IRQHandler+0x304>)
 8002bf8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fbca 	bl	8001398 <HAL_DMA_Abort_IT>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02f      	beq.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb68 	bl	80032e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c14:	e029      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_SD_IRQHandler+0x2ba>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_SD_IRQHandler+0x308>)
 8002c30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fbae 	bl	8001398 <HAL_DMA_Abort_IT>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d013      	beq.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fb83 	bl	8003352 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c4c:	e00d      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f002 fdb4 	bl	80057d0 <HAL_SD_AbortCallback>
}
 8002c68:	e7ff      	b.n	8002c6a <HAL_SD_IRQHandler+0x2fa>
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	080032e5 	.word	0x080032e5
 8002c78:	08003353 	.word	0x08003353

08002c7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9e:	0f9b      	lsrs	r3, r3, #30
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf0:	0d1b      	lsrs	r3, r3, #20
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0e:	0bdb      	lsrs	r3, r3, #15
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	0b9b      	lsrs	r3, r3, #14
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d32:	0b5b      	lsrs	r3, r3, #13
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	0b1b      	lsrs	r3, r3, #12
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d163      	bne.n	8002e28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d70:	0f92      	lsrs	r2, r2, #30
 8002d72:	431a      	orrs	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7c:	0edb      	lsrs	r3, r3, #27
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	0e1b      	lsrs	r3, r3, #24
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da0:	0d5b      	lsrs	r3, r3, #21
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc4:	0bdb      	lsrs	r3, r3, #15
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	3302      	adds	r3, #2
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	7a1b      	ldrb	r3, [r3, #8]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e14:	0a52      	lsrs	r2, r2, #9
 8002e16:	fb03 f202 	mul.w	r2, r3, r2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60
 8002e26:	e031      	b.n	8002e8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11d      	bne.n	8002e6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	029a      	lsls	r2, r3, #10
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60
 8002e6a:	e00f      	b.n	8002e8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_SD_GetCardCSD+0x344>)
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e09d      	b.n	8002fc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	0b9b      	lsrs	r3, r3, #14
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	09db      	lsrs	r3, r3, #7
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	0fdb      	lsrs	r3, r3, #31
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	0f5b      	lsrs	r3, r3, #29
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	0d9b      	lsrs	r3, r3, #22
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	0d5b      	lsrs	r3, r3, #21
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	0bdb      	lsrs	r3, r3, #15
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	0b9b      	lsrs	r3, r3, #14
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	0b1b      	lsrs	r3, r3, #12
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	0a9b      	lsrs	r3, r3, #10
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	004005ff 	.word	0x004005ff

08002fd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af04      	add	r7, sp, #16
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	2b03      	cmp	r3, #3
 800304e:	d02e      	beq.n	80030ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	d106      	bne.n	8003066 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
 8003064:	e029      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306c:	d10a      	bne.n	8003084 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fb2a 	bl	80036c8 <SD_WideBus_Enable>
 8003074:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
 8003082:	e01a      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fb67 	bl	800375e <SD_WideBus_Disable>
 8003090:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
 800309e:	e00c      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
 80030ac:	e005      	b.n	80030ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_SD_ConfigWideBusOperation+0x130>)
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030d8:	e01f      	b.n	800311a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681d      	ldr	r5, [r3, #0]
 8003100:	466c      	mov	r4, sp
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800310a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003114:	4628      	mov	r0, r5
 8003116:	f001 fd5d 	bl	8004bd4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fe31 	bl	8004d8a <SDMMC_CmdBlockLength>
 8003128:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bdb0      	pop	{r4, r5, r7, pc}
 800315e:	bf00      	nop
 8003160:	004005ff 	.word	0x004005ff

08003164 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa7e 	bl	8003678 <SD_SendStatus>
 800317c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800319a:	693b      	ldr	r3, [r7, #16]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2b82      	cmp	r3, #130	; 0x82
 80031e2:	d111      	bne.n	8003208 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fe79 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 80031ee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fd3a 	bl	8002c7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0208 	bic.w	r2, r2, #8
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f002 fae1 	bl	80057f8 <HAL_SD_RxCpltCallback>
#endif
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fa4e 	bl	80016f0 <HAL_DMA_GetError>
 8003254:	4603      	mov	r3, r0
 8003256:	2b02      	cmp	r3, #2
 8003258:	d03e      	beq.n	80032d8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d002      	beq.n	8003276 <SD_DMAError+0x36>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d12d      	bne.n	80032d2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <SD_DMAError+0xa0>)
 800327c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff62 	bl	8003164 <HAL_SD_GetCardState>
 80032a0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d002      	beq.n	80032ae <SD_DMAError+0x6e>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10a      	bne.n	80032c4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 fe14 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7ff fcd2 	bl	8002c7c <HAL_SD_ErrorCallback>
#endif
  }
}
 80032d8:	bf00      	nop
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	004005ff 	.word	0x004005ff

080032e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff ff31 	bl	8003164 <HAL_SD_GetCardState>
 8003302:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d002      	beq.n	800331e <SD_DMATxAbort+0x3a>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d10a      	bne.n	8003334 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f001 fddc 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f002 fa47 	bl	80057d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003342:	e002      	b.n	800334a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fc99 	bl	8002c7c <HAL_SD_ErrorCallback>
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f240 523a 	movw	r2, #1338	; 0x53a
 8003368:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff fefa 	bl	8003164 <HAL_SD_GetCardState>
 8003370:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d002      	beq.n	800338c <SD_DMARxAbort+0x3a>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b05      	cmp	r3, #5
 800338a:	d10a      	bne.n	80033a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fda5 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f002 fa10 	bl	80057d0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80033b0:	e002      	b.n	80033b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fc62 	bl	8002c7c <HAL_SD_ErrorCallback>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b094      	sub	sp, #80	; 0x50
 80033c4:	af04      	add	r7, sp, #16
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80033c8:	2301      	movs	r3, #1
 80033ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fc56 	bl	8004c82 <SDIO_GetPowerState>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033e0:	e0b8      	b.n	8003554 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d02f      	beq.n	800344a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fe80 	bl	80050f4 <SDMMC_CmdSendCID>
 80033f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <SD_InitCard+0x40>
    {
      return errorstate;
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	e0a9      	b.n	8003554 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fc80 	bl	8004d0c <SDIO_GetResponse>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2104      	movs	r1, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fc77 	bl	8004d0c <SDIO_GetResponse>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2108      	movs	r1, #8
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fc6e 	bl	8004d0c <SDIO_GetResponse>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	210c      	movs	r1, #12
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fc65 	bl	8004d0c <SDIO_GetResponse>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	2b03      	cmp	r3, #3
 8003450:	d00d      	beq.n	800346e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f107 020e 	add.w	r2, r7, #14
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fe86 	bl	800516e <SDMMC_CmdSetRelAdd>
 8003462:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SD_InitCard+0xae>
    {
      return errorstate;
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	e072      	b.n	8003554 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	2b03      	cmp	r3, #3
 8003474:	d036      	beq.n	80034e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f001 fe50 	bl	8005130 <SDMMC_CmdSendCSD>
 8003490:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349a:	e05b      	b.n	8003554 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fc32 	bl	8004d0c <SDIO_GetResponse>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2104      	movs	r1, #4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fc29 	bl	8004d0c <SDIO_GetResponse>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2108      	movs	r1, #8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fc20 	bl	8004d0c <SDIO_GetResponse>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	210c      	movs	r1, #12
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fc17 	bl	8004d0c <SDIO_GetResponse>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2104      	movs	r1, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fc0e 	bl	8004d0c <SDIO_GetResponse>
 80034f0:	4603      	mov	r3, r0
 80034f2:	0d1a      	lsrs	r2, r3, #20
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fbc6 	bl	8002c90 <HAL_SD_GetCardCSD>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800350a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800350e:	e021      	b.n	8003554 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	2200      	movs	r2, #0
 800351c:	461c      	mov	r4, r3
 800351e:	4615      	mov	r5, r2
 8003520:	4622      	mov	r2, r4
 8003522:	462b      	mov	r3, r5
 8003524:	4608      	mov	r0, r1
 8003526:	f001 fcfd 	bl	8004f24 <SDMMC_CmdSelDesel>
 800352a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <SD_InitCard+0x176>
  {
    return errorstate;
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	e00e      	b.n	8003554 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681d      	ldr	r5, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	466c      	mov	r4, sp
 800353e:	f103 0210 	add.w	r2, r3, #16
 8003542:	ca07      	ldmia	r2, {r0, r1, r2}
 8003544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003548:	3304      	adds	r3, #4
 800354a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354c:	4628      	mov	r0, r5
 800354e:	f001 fb41 	bl	8004bd4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3740      	adds	r7, #64	; 0x40
 8003558:	46bd      	mov	sp, r7
 800355a:	bdb0      	pop	{r4, r5, r7, pc}

0800355c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fcf8 	bl	8004f6a <SDMMC_CmdGoIdleState>
 800357a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	e072      	b.n	800366c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fd0b 	bl	8004fa6 <SDMMC_CmdOperCond>
 8003590:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fce1 	bl	8004f6a <SDMMC_CmdGoIdleState>
 80035a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	e05b      	b.n	800366c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d137      	bne.n	8003632 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fd0b 	bl	8004fe4 <SDMMC_CmdAppCommand>
 80035ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02d      	beq.n	8003632 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035da:	e047      	b.n	800366c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fcfe 	bl	8004fe4 <SDMMC_CmdAppCommand>
 80035e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	e03b      	b.n	800366c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	491e      	ldr	r1, [pc, #120]	; (8003674 <SD_PowerON+0x118>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fd14 	bl	8005028 <SDMMC_CmdAppOperCommand>
 8003600:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003608:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800360c:	e02e      	b.n	800366c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fb79 	bl	8004d0c <SDIO_GetResponse>
 800361a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	0fdb      	lsrs	r3, r3, #31
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <SD_PowerON+0xcc>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <SD_PowerON+0xce>
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]

    count++;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003638:	4293      	cmp	r3, r2
 800363a:	d802      	bhi.n	8003642 <SD_PowerON+0xe6>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0cc      	beq.n	80035dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003648:	4293      	cmp	r3, r2
 800364a:	d902      	bls.n	8003652 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800364c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003650:	e00c      	b.n	800366c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
 8003662:	e002      	b.n	800366a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	c1100000 	.word	0xc1100000

08003678 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003688:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800368c:	e018      	b.n	80036c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f001 fd88 	bl	80051b0 <SDMMC_CmdSendStatus>
 80036a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	e009      	b.n	80036c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fb2a 	bl	8004d0c <SDIO_GetResponse>
 80036b8:	4602      	mov	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fb14 	bl	8004d0c <SDIO_GetResponse>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ee:	d102      	bne.n	80036f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036f4:	e02f      	b.n	8003756 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f879 	bl	80037f4 <SD_FindSCR>
 8003702:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e023      	b.n	8003756 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01c      	beq.n	8003752 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f001 fc5d 	bl	8004fe4 <SDMMC_CmdAppCommand>
 800372a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	e00f      	b.n	8003756 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fc96 	bl	800506e <SDMMC_CmdBusWidth>
 8003742:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	e003      	b.n	8003756 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800374e:	2300      	movs	r3, #0
 8003750:	e001      	b.n	8003756 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003752:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fac9 	bl	8004d0c <SDIO_GetResponse>
 800377a:	4603      	mov	r3, r0
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003784:	d102      	bne.n	800378c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800378a:	e02f      	b.n	80037ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f82e 	bl	80037f4 <SD_FindSCR>
 8003798:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	e023      	b.n	80037ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01c      	beq.n	80037e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f001 fc12 	bl	8004fe4 <SDMMC_CmdAppCommand>
 80037c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	e00f      	b.n	80037ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fc4b 	bl	800506e <SDMMC_CmdBusWidth>
 80037d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	e003      	b.n	80037ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e001      	b.n	80037ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08f      	sub	sp, #60	; 0x3c
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037fe:	f7fd fb13 	bl	8000e28 <HAL_GetTick>
 8003802:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2108      	movs	r1, #8
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fab5 	bl	8004d8a <SDMMC_CmdBlockLength>
 8003820:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	e0b2      	b.n	8003992 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f001 fbd3 	bl	8004fe4 <SDMMC_CmdAppCommand>
 800383e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	e0a3      	b.n	8003992 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003850:	2308      	movs	r3, #8
 8003852:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003854:	2330      	movs	r3, #48	; 0x30
 8003856:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003858:	2302      	movs	r3, #2
 800385a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003860:	2301      	movs	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f107 0210 	add.w	r2, r7, #16
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fa5f 	bl	8004d32 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fc1a 	bl	80050b2 <SDMMC_CmdSendSCR>
 800387e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02a      	beq.n	80038dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	e083      	b.n	8003992 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00f      	beq.n	80038b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f107 0208 	add.w	r2, r7, #8
 80038a4:	18d4      	adds	r4, r2, r3
 80038a6:	4608      	mov	r0, r1
 80038a8:	f001 f9bf 	bl	8004c2a <SDIO_ReadFIFO>
 80038ac:	4603      	mov	r3, r0
 80038ae:	6023      	str	r3, [r4, #0]
      index++;
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	3301      	adds	r3, #1
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	e006      	b.n	80038c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d012      	beq.n	80038ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80038c6:	f7fd faaf 	bl	8000e28 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80038d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038da:	e05a      	b.n	8003992 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0cf      	beq.n	800388a <SD_FindSCR+0x96>
 80038ea:	e000      	b.n	80038ee <SD_FindSCR+0xfa>
      break;
 80038ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003904:	2308      	movs	r3, #8
 8003906:	e044      	b.n	8003992 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800391e:	2302      	movs	r3, #2
 8003920:	e037      	b.n	8003992 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003938:	2320      	movs	r3, #32
 800393a:	e02a      	b.n	8003992 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f240 523a 	movw	r2, #1338	; 0x53a
 8003944:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	061a      	lsls	r2, r3, #24
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003952:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800395c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	601a      	str	r2, [r3, #0]
    scr++;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	3304      	adds	r3, #4
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	061a      	lsls	r2, r3, #24
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800397a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	373c      	adds	r7, #60	; 0x3c
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}

0800399a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03f      	beq.n	8003a34 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e033      	b.n	8003a22 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f933 	bl	8004c2a <SDIO_ReadFIFO>
 80039c4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	0e1b      	lsrs	r3, r3, #24
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d9c8      	bls.n	80039ba <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d043      	beq.n	8003ade <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e037      	b.n	8003acc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021a      	lsls	r2, r3, #8
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	041a      	lsls	r2, r3, #16
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	061a      	lsls	r2, r3, #24
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f107 0208 	add.w	r2, r7, #8
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 f8bf 	bl	8004c44 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	d9c4      	bls.n	8003a5c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e03f      	b.n	8003b78 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fd f8ab 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2224      	movs	r2, #36	; 0x24
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fdde 	bl	80046ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d17c      	bne.n	8003c9a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Transmit+0x2c>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e075      	b.n	8003c9c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Transmit+0x3e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e06e      	b.n	8003c9c <HAL_UART_Transmit+0x11c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2221      	movs	r2, #33	; 0x21
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd4:	f7fd f928 	bl	8000e28 <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bee:	d108      	bne.n	8003c02 <HAL_UART_Transmit+0x82>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e003      	b.n	8003c0a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c12:	e02a      	b.n	8003c6a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fb1e 	bl	8004260 <UART_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e036      	b.n	8003c9c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3302      	adds	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e007      	b.n	8003c5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1cf      	bne.n	8003c14 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2140      	movs	r1, #64	; 0x40
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 faee 	bl	8004260 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e006      	b.n	8003c9c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d11d      	bne.n	8003cfa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_UART_Receive_IT+0x26>
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e016      	b.n	8003cfc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Receive_IT+0x38>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e00f      	b.n	8003cfc <HAL_UART_Receive_IT+0x58>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	461a      	mov	r2, r3
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb23 	bl	800433c <UART_Start_Receive_IT>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b0ba      	sub	sp, #232	; 0xe8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_UART_IRQHandler+0x66>
 8003d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fc07 	bl	8004576 <UART_Receive_IT>
      return;
 8003d68:	e256      	b.n	8004218 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80de 	beq.w	8003f30 <HAL_UART_IRQHandler+0x22c>
 8003d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80d1 	beq.w	8003f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_UART_IRQHandler+0xae>
 8003d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_UART_IRQHandler+0xd2>
 8003dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_UART_IRQHandler+0xf6>
 8003de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f043 0204 	orr.w	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <HAL_UART_IRQHandler+0x126>
 8003e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0208 	orr.w	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 81ed 	beq.w	800420e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_UART_IRQHandler+0x14e>
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb92 	bl	8004576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_UART_IRQHandler+0x17a>
 8003e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04f      	beq.n	8003f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa9a 	bl	80043b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d141      	bne.n	8003f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1d9      	bne.n	8003e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	4a7d      	ldr	r2, [pc, #500]	; (80040e0 <HAL_UART_IRQHandler+0x3dc>)
 8003eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd fa50 	bl	8001398 <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00e      	b.n	8003f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f990 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e00a      	b.n	8003f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f98c 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e006      	b.n	8003f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f988 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f2a:	e170      	b.n	800420e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	bf00      	nop
    return;
 8003f2e:	e16e      	b.n	800420e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 814a 	bne.w	80041ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8143 	beq.w	80041ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 813c 	beq.w	80041ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	f040 80b4 	bne.w	80040e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8140 	beq.w	8004212 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	f080 8139 	bcs.w	8004212 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	f000 8088 	beq.w	80040c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1d9      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800402a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800402e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e1      	bne.n	8004002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	f023 0310 	bic.w	r3, r3, #16
 800409a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e3      	bne.n	8004084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd f8f9 	bl	80012b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8b6 	bl	8004248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040dc:	e099      	b.n	8004212 <HAL_UART_IRQHandler+0x50e>
 80040de:	bf00      	nop
 80040e0:	0800447f 	.word	0x0800447f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 808b 	beq.w	8004216 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8086 	beq.w	8004216 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800412e:	647a      	str	r2, [r7, #68]	; 0x44
 8004130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800413c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	623b      	str	r3, [r7, #32]
   return(result);
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004166:	633a      	str	r2, [r7, #48]	; 0x30
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60fb      	str	r3, [r7, #12]
   return(result);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0310 	bic.w	r3, r3, #16
 800419e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041ac:	61fa      	str	r2, [r7, #28]
 80041ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e3      	bne.n	8004188 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f83e 	bl	8004248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041cc:	e023      	b.n	8004216 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_UART_IRQHandler+0x4ea>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f95d 	bl	80044a6 <UART_Transmit_IT>
    return;
 80041ec:	e014      	b.n	8004218 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00e      	beq.n	8004218 <HAL_UART_IRQHandler+0x514>
 80041fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f99d 	bl	8004546 <UART_EndTransmit_IT>
    return;
 800420c:	e004      	b.n	8004218 <HAL_UART_IRQHandler+0x514>
    return;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_UART_IRQHandler+0x514>
      return;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_UART_IRQHandler+0x514>
      return;
 8004216:	bf00      	nop
  }
}
 8004218:	37e8      	adds	r7, #232	; 0xe8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop

08004220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b090      	sub	sp, #64	; 0x40
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	e050      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d04c      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <UART_WaitOnFlagUntilTimeout+0x30>
 8004280:	f7fc fdd2 	bl	8000e28 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800428c:	429a      	cmp	r2, r3
 800428e:	d241      	bcs.n	8004314 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042b0:	637a      	str	r2, [r7, #52]	; 0x34
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042e4:	623a      	str	r2, [r7, #32]
 80042e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e00f      	b.n	8004334 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d09f      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3740      	adds	r7, #64	; 0x40
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2222      	movs	r2, #34	; 0x22
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004388:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0220 	orr.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b095      	sub	sp, #84	; 0x54
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043e0:	643a      	str	r2, [r7, #64]	; 0x40
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	61fb      	str	r3, [r7, #28]
   return(result);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	d119      	bne.n	8004464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	647b      	str	r3, [r7, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004450:	61ba      	str	r2, [r7, #24]
 8004452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6979      	ldr	r1, [r7, #20]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	613b      	str	r3, [r7, #16]
   return(result);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004472:	bf00      	nop
 8004474:	3754      	adds	r7, #84	; 0x54
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fecb 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b21      	cmp	r3, #33	; 0x21
 80044b8:	d13e      	bne.n	8004538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	d114      	bne.n	80044ee <UART_Transmit_IT+0x48>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d110      	bne.n	80044ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]
 80044ec:	e008      	b.n	8004500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6211      	str	r1, [r2, #32]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4619      	mov	r1, r3
 800450e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe5a 	bl	8004220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08c      	sub	sp, #48	; 0x30
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b22      	cmp	r3, #34	; 0x22
 8004588:	f040 80ab 	bne.w	80046e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d117      	bne.n	80045c6 <UART_Receive_IT+0x50>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d113      	bne.n	80045c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
 80045c4:	e026      	b.n	8004614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d007      	beq.n	80045ea <UART_Receive_IT+0x74>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <UART_Receive_IT+0x82>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e008      	b.n	800460a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004604:	b2da      	uxtb	r2, r3
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004624:	2b00      	cmp	r3, #0
 8004626:	d15a      	bne.n	80046de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0220 	bic.w	r2, r2, #32
 8004636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	2b01      	cmp	r3, #1
 8004666:	d135      	bne.n	80046d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	623a      	str	r2, [r7, #32]
 8004690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	61bb      	str	r3, [r7, #24]
   return(result);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e5      	bne.n	800466e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d10a      	bne.n	80046c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fdbb 	bl	8004248 <HAL_UARTEx_RxEventCallback>
 80046d2:	e002      	b.n	80046da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc f887 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e002      	b.n	80046e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b0c0      	sub	sp, #256	; 0x100
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	68d9      	ldr	r1, [r3, #12]
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	ea40 0301 	orr.w	r3, r0, r1
 8004714:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004744:	f021 010c 	bic.w	r1, r1, #12
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004752:	430b      	orrs	r3, r1
 8004754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	6999      	ldr	r1, [r3, #24]
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	ea40 0301 	orr.w	r3, r0, r1
 8004772:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b8f      	ldr	r3, [pc, #572]	; (80049b8 <UART_SetConfig+0x2cc>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d005      	beq.n	800478c <UART_SetConfig+0xa0>
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8d      	ldr	r3, [pc, #564]	; (80049bc <UART_SetConfig+0x2d0>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d104      	bne.n	8004796 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fd fe64 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8004790:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004794:	e003      	b.n	800479e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004796:	f7fd fe4b 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 800479a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	f040 810c 	bne.w	80049c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	1891      	adds	r1, r2, r2
 80047c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047c6:	415b      	adcs	r3, r3
 80047c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ce:	4621      	mov	r1, r4
 80047d0:	eb12 0801 	adds.w	r8, r2, r1
 80047d4:	4629      	mov	r1, r5
 80047d6:	eb43 0901 	adc.w	r9, r3, r1
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ee:	4690      	mov	r8, r2
 80047f0:	4699      	mov	r9, r3
 80047f2:	4623      	mov	r3, r4
 80047f4:	eb18 0303 	adds.w	r3, r8, r3
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047fc:	462b      	mov	r3, r5
 80047fe:	eb49 0303 	adc.w	r3, r9, r3
 8004802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004812:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800481a:	460b      	mov	r3, r1
 800481c:	18db      	adds	r3, r3, r3
 800481e:	653b      	str	r3, [r7, #80]	; 0x50
 8004820:	4613      	mov	r3, r2
 8004822:	eb42 0303 	adc.w	r3, r2, r3
 8004826:	657b      	str	r3, [r7, #84]	; 0x54
 8004828:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800482c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004830:	f7fb fd26 	bl	8000280 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <UART_SetConfig+0x2d4>)
 800483a:	fba3 2302 	umull	r2, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	011c      	lsls	r4, r3, #4
 8004842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800484c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004850:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	1891      	adds	r1, r2, r2
 800485a:	64b9      	str	r1, [r7, #72]	; 0x48
 800485c:	415b      	adcs	r3, r3
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004864:	4641      	mov	r1, r8
 8004866:	eb12 0a01 	adds.w	sl, r2, r1
 800486a:	4649      	mov	r1, r9
 800486c:	eb43 0b01 	adc.w	fp, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800487c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004884:	4692      	mov	sl, r2
 8004886:	469b      	mov	fp, r3
 8004888:	4643      	mov	r3, r8
 800488a:	eb1a 0303 	adds.w	r3, sl, r3
 800488e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004892:	464b      	mov	r3, r9
 8004894:	eb4b 0303 	adc.w	r3, fp, r3
 8004898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048b0:	460b      	mov	r3, r1
 80048b2:	18db      	adds	r3, r3, r3
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	4613      	mov	r3, r2
 80048b8:	eb42 0303 	adc.w	r3, r2, r3
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
 80048be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048c6:	f7fb fcdb 	bl	8000280 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <UART_SetConfig+0x2d4>)
 80048d2:	fba3 2301 	umull	r2, r3, r3, r1
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2264      	movs	r2, #100	; 0x64
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	1acb      	subs	r3, r1, r3
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <UART_SetConfig+0x2d4>)
 80048e8:	fba3 2302 	umull	r2, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f4:	441c      	add	r4, r3
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004900:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004904:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004910:	415b      	adcs	r3, r3
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004918:	4641      	mov	r1, r8
 800491a:	1851      	adds	r1, r2, r1
 800491c:	6339      	str	r1, [r7, #48]	; 0x30
 800491e:	4649      	mov	r1, r9
 8004920:	414b      	adcs	r3, r1
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004930:	4659      	mov	r1, fp
 8004932:	00cb      	lsls	r3, r1, #3
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493a:	4651      	mov	r1, sl
 800493c:	00ca      	lsls	r2, r1, #3
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	4603      	mov	r3, r0
 8004944:	4642      	mov	r2, r8
 8004946:	189b      	adds	r3, r3, r2
 8004948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800494c:	464b      	mov	r3, r9
 800494e:	460a      	mov	r2, r1
 8004950:	eb42 0303 	adc.w	r3, r2, r3
 8004954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004964:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004968:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800496c:	460b      	mov	r3, r1
 800496e:	18db      	adds	r3, r3, r3
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
 8004972:	4613      	mov	r3, r2
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800497e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004982:	f7fb fc7d 	bl	8000280 <__aeabi_uldivmod>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <UART_SetConfig+0x2d4>)
 800498c:	fba3 1302 	umull	r1, r3, r3, r2
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	2164      	movs	r1, #100	; 0x64
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	3332      	adds	r3, #50	; 0x32
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <UART_SetConfig+0x2d4>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	f003 0207 	and.w	r2, r3, #7
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4422      	add	r2, r4
 80049b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049b4:	e105      	b.n	8004bc2 <UART_SetConfig+0x4d6>
 80049b6:	bf00      	nop
 80049b8:	40011000 	.word	0x40011000
 80049bc:	40011400 	.word	0x40011400
 80049c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049d6:	4642      	mov	r2, r8
 80049d8:	464b      	mov	r3, r9
 80049da:	1891      	adds	r1, r2, r2
 80049dc:	6239      	str	r1, [r7, #32]
 80049de:	415b      	adcs	r3, r3
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049e6:	4641      	mov	r1, r8
 80049e8:	1854      	adds	r4, r2, r1
 80049ea:	4649      	mov	r1, r9
 80049ec:	eb43 0501 	adc.w	r5, r3, r1
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	00eb      	lsls	r3, r5, #3
 80049fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fe:	00e2      	lsls	r2, r4, #3
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	18e3      	adds	r3, r4, r3
 8004a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	eb45 0303 	adc.w	r3, r5, r3
 8004a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a32:	4629      	mov	r1, r5
 8004a34:	008b      	lsls	r3, r1, #2
 8004a36:	4621      	mov	r1, r4
 8004a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	008a      	lsls	r2, r1, #2
 8004a40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a44:	f7fb fc1c 	bl	8000280 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b60      	ldr	r3, [pc, #384]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011c      	lsls	r4, r3, #4
 8004a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	61b9      	str	r1, [r7, #24]
 8004a70:	415b      	adcs	r3, r3
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a78:	4641      	mov	r1, r8
 8004a7a:	1851      	adds	r1, r2, r1
 8004a7c:	6139      	str	r1, [r7, #16]
 8004a7e:	4649      	mov	r1, r9
 8004a80:	414b      	adcs	r3, r1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a90:	4659      	mov	r1, fp
 8004a92:	00cb      	lsls	r3, r1, #3
 8004a94:	4651      	mov	r1, sl
 8004a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	00ca      	lsls	r2, r1, #3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aac:	464b      	mov	r3, r9
 8004aae:	460a      	mov	r2, r1
 8004ab0:	eb42 0303 	adc.w	r3, r2, r3
 8004ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	008b      	lsls	r3, r1, #2
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ada:	4641      	mov	r1, r8
 8004adc:	008a      	lsls	r2, r1, #2
 8004ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ae2:	f7fb fbcd 	bl	8000280 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	441c      	add	r4, r3
 8004b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b10:	2200      	movs	r2, #0
 8004b12:	673b      	str	r3, [r7, #112]	; 0x70
 8004b14:	677a      	str	r2, [r7, #116]	; 0x74
 8004b16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	1891      	adds	r1, r2, r2
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	415b      	adcs	r3, r3
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	1851      	adds	r1, r2, r1
 8004b2e:	6039      	str	r1, [r7, #0]
 8004b30:	4649      	mov	r1, r9
 8004b32:	414b      	adcs	r3, r1
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b42:	4659      	mov	r1, fp
 8004b44:	00cb      	lsls	r3, r1, #3
 8004b46:	4651      	mov	r1, sl
 8004b48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	00ca      	lsls	r2, r1, #3
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	4642      	mov	r2, r8
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	460a      	mov	r2, r1
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b70:	667a      	str	r2, [r7, #100]	; 0x64
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b7e:	4649      	mov	r1, r9
 8004b80:	008b      	lsls	r3, r1, #2
 8004b82:	4641      	mov	r1, r8
 8004b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b88:	4641      	mov	r1, r8
 8004b8a:	008a      	lsls	r2, r1, #2
 8004b8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b90:	f7fb fb76 	bl	8000280 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2164      	movs	r1, #100	; 0x64
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	3332      	adds	r3, #50	; 0x32
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4422      	add	r2, r4
 8004bc0:	609a      	str	r2, [r3, #8]
}
 8004bc2:	bf00      	nop
 8004bc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	51eb851f 	.word	0x51eb851f

08004bd4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 001c 	add.w	r0, r7, #28
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004bea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004bec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004bee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004bf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004c0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	b004      	add	sp, #16
 8004c28:	4770      	bx	lr

08004c2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2203      	movs	r2, #3
 8004c72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cbc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004cc2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004cc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	b2db      	uxtb	r3, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
}  
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0

}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004d98:	2310      	movs	r3, #16
 8004d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff74 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	2110      	movs	r1, #16
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fa19 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ddc:	2311      	movs	r3, #17
 8004dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff52 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	2111      	movs	r1, #17
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f9f7 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e08:	69fb      	ldr	r3, [r7, #28]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b088      	sub	sp, #32
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004e20:	2312      	movs	r3, #18
 8004e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff30 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	2112      	movs	r1, #18
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9d5 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e64:	2318      	movs	r3, #24
 8004e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff0e 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	2118      	movs	r1, #24
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f9b3 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e90:	69fb      	ldr	r3, [r7, #28]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b088      	sub	sp, #32
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ea8:	2319      	movs	r3, #25
 8004eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eba:	f107 0308 	add.w	r3, r7, #8
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff feec 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	2119      	movs	r1, #25
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f991 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004eec:	230c      	movs	r3, #12
 8004eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004efe:	f107 0308 	add.w	r3, r7, #8
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff feca 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <SDMMC_CmdStopTransfer+0x40>)
 8004f0c:	210c      	movs	r1, #12
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f970 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f16:	69fb      	ldr	r3, [r7, #28]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	05f5e100 	.word	0x05f5e100

08004f24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f34:	2307      	movs	r3, #7
 8004f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f46:	f107 0310 	add.w	r3, r7, #16
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fea6 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	2107      	movs	r1, #7
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f94b 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b088      	sub	sp, #32
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f88:	f107 0308 	add.w	r3, r7, #8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fe85 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb65 	bl	8005664 <SDMMC_GetCmdError>
 8004f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b088      	sub	sp, #32
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004fae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fb8:	2340      	movs	r3, #64	; 0x40
 8004fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe66 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 faf8 	bl	80055c8 <SDMMC_GetCmdResp7>
 8004fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ff2:	2337      	movs	r3, #55	; 0x37
 8004ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff6:	2340      	movs	r3, #64	; 0x40
 8004ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fe47 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	2137      	movs	r1, #55	; 0x37
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ec 	bl	80051f4 <SDMMC_GetCmdResp1>
 800501c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501e:	69fb      	ldr	r3, [r7, #28]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800503e:	2329      	movs	r3, #41	; 0x29
 8005040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800504a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fe21 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9ff 	bl	8005460 <SDMMC_GetCmdResp3>
 8005062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005064:	69fb      	ldr	r3, [r7, #28]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b088      	sub	sp, #32
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800507c:	2306      	movs	r3, #6
 800507e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800508e:	f107 0308 	add.w	r3, r7, #8
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fe02 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	2106      	movs	r1, #6
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8a7 	bl	80051f4 <SDMMC_GetCmdResp1>
 80050a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050a8:	69fb      	ldr	r3, [r7, #28]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80050be:	2333      	movs	r3, #51	; 0x33
 80050c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050c2:	2340      	movs	r3, #64	; 0x40
 80050c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fde1 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	2133      	movs	r1, #51	; 0x33
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f886 	bl	80051f4 <SDMMC_GetCmdResp1>
 80050e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ea:	69fb      	ldr	r3, [r7, #28]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005100:	2302      	movs	r3, #2
 8005102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005104:	23c0      	movs	r3, #192	; 0xc0
 8005106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fdc0 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f956 	bl	80053d0 <SDMMC_GetCmdResp2>
 8005124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800513e:	2309      	movs	r3, #9
 8005140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005142:	23c0      	movs	r3, #192	; 0xc0
 8005144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800514a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fda1 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f937 	bl	80053d0 <SDMMC_GetCmdResp2>
 8005162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800517c:	2303      	movs	r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518e:	f107 0308 	add.w	r3, r7, #8
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fd82 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	2103      	movs	r1, #3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f99c 	bl	80054dc <SDMMC_GetCmdResp6>
 80051a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80051be:	230d      	movs	r3, #13
 80051c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fd61 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	210d      	movs	r1, #13
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f806 	bl	80051f4 <SDMMC_GetCmdResp1>
 80051e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ea:	69fb      	ldr	r3, [r7, #28]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <SDMMC_GetCmdResp1+0x1d0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a70      	ldr	r2, [pc, #448]	; (80053c8 <SDMMC_GetCmdResp1+0x1d4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0a5a      	lsrs	r2, r3, #9
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	1e5a      	subs	r2, r3, #1
 800521a:	61fa      	str	r2, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005224:	e0c9      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ef      	beq.n	8005216 <SDMMC_GetCmdResp1+0x22>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ea      	bne.n	8005216 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2204      	movs	r2, #4
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005252:	2304      	movs	r3, #4
 8005254:	e0b1      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005268:	2301      	movs	r3, #1
 800526a:	e0a6      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	22c5      	movs	r2, #197	; 0xc5
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff fd3d 	bl	8004cf2 <SDIO_GetCommandResponse>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	4293      	cmp	r3, r2
 8005280:	d001      	beq.n	8005286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005282:	2301      	movs	r3, #1
 8005284:	e099      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005286:	2100      	movs	r1, #0
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fd3f 	bl	8004d0c <SDIO_GetResponse>
 800528e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <SDMMC_GetCmdResp1+0x1d8>)
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	e08d      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da02      	bge.n	80052aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80052a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a8:	e087      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	e080      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	e079      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80052d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d4:	e071      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80052e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e4:	e069      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	e061      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005304:	e059      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005314:	e051      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005324:	e049      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005334:	e041      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005344:	e039      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005354:	e031      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005364:	e029      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005374:	e021      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005384:	e019      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005394:	e011      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80053a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053a4:	e009      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80053b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053b4:	e001      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000
 80053c8:	10624dd3 	.word	0x10624dd3
 80053cc:	fdffe008 	.word	0xfdffe008

080053d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <SDMMC_GetCmdResp2+0x88>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <SDMMC_GetCmdResp2+0x8c>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0a5b      	lsrs	r3, r3, #9
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e5a      	subs	r2, r3, #1
 80053f2:	60fa      	str	r2, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053fc:	e026      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ef      	beq.n	80053ee <SDMMC_GetCmdResp2+0x1e>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800542a:	2304      	movs	r3, #4
 800542c:	e00e      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005440:	2301      	movs	r3, #1
 8005442:	e003      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	22c5      	movs	r2, #197	; 0xc5
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000000 	.word	0x20000000
 800545c:	10624dd3 	.word	0x10624dd3

08005460 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <SDMMC_GetCmdResp3+0x74>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <SDMMC_GetCmdResp3+0x78>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0a5b      	lsrs	r3, r3, #9
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	fb02 f303 	mul.w	r3, r2, r3
 800547c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800548c:	e01b      	b.n	80054c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <SDMMC_GetCmdResp3+0x1e>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ea      	bne.n	800547e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2204      	movs	r2, #4
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ba:	2304      	movs	r3, #4
 80054bc:	e003      	b.n	80054c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	22c5      	movs	r2, #197	; 0xc5
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000000 	.word	0x20000000
 80054d8:	10624dd3 	.word	0x10624dd3

080054dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	460b      	mov	r3, r1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <SDMMC_GetCmdResp6+0xe4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a35      	ldr	r2, [pc, #212]	; (80055c4 <SDMMC_GetCmdResp6+0xe8>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	61fa      	str	r2, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800550a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800550e:	e052      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ef      	beq.n	8005500 <SDMMC_GetCmdResp6+0x24>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ea      	bne.n	8005500 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800553c:	2304      	movs	r3, #4
 800553e:	e03a      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005552:	2301      	movs	r3, #1
 8005554:	e02f      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff fbcb 	bl	8004cf2 <SDIO_GetCommandResponse>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	4293      	cmp	r3, r2
 8005564:	d001      	beq.n	800556a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005566:	2301      	movs	r3, #1
 8005568:	e025      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22c5      	movs	r2, #197	; 0xc5
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005570:	2100      	movs	r1, #0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fbca 	bl	8004d0c <SDIO_GetResponse>
 8005578:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	e011      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800559c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a0:	e009      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b0:	e001      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000000 	.word	0x20000000
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055d0:	4b22      	ldr	r3, [pc, #136]	; (800565c <SDMMC_GetCmdResp7+0x94>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <SDMMC_GetCmdResp7+0x98>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f4:	e02c      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <SDMMC_GetCmdResp7+0x1e>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ea      	bne.n	80055e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2204      	movs	r2, #4
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005622:	2304      	movs	r3, #4
 8005624:	e014      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005638:	2301      	movs	r3, #1
 800563a:	e009      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800564e:	2300      	movs	r3, #0
  
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	20000000 	.word	0x20000000
 8005660:	10624dd3 	.word	0x10624dd3

08005664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <SDMMC_GetCmdError+0x50>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <SDMMC_GetCmdError+0x54>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0a5b      	lsrs	r3, r3, #9
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	fb02 f303 	mul.w	r3, r2, r3
 8005680:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e5a      	subs	r2, r3, #1
 8005686:	60fa      	str	r2, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800568c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005690:	e009      	b.n	80056a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f1      	beq.n	8005682 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	22c5      	movs	r2, #197	; 0xc5
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000000 	.word	0x20000000
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <MX_FATFS_Init+0x18>)
 80056c2:	4805      	ldr	r0, [pc, #20]	; (80056d8 <MX_FATFS_Init+0x1c>)
 80056c4:	f000 ff06 	bl	80064d4 <FATFS_LinkDriver>
 80056c8:	4603      	mov	r3, r0
 80056ca:	461a      	mov	r2, r3
 80056cc:	4b03      	ldr	r3, [pc, #12]	; (80056dc <MX_FATFS_Init+0x20>)
 80056ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056d0:	bf00      	nop
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	2000024c 	.word	0x2000024c
 80056d8:	08006eb0 	.word	0x08006eb0
 80056dc:	20000248 	.word	0x20000248

080056e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80056ea:	f000 f896 	bl	800581a <BSP_SD_IsDetected>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e012      	b.n	800571e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80056f8:	480b      	ldr	r0, [pc, #44]	; (8005728 <BSP_SD_Init+0x48>)
 80056fa:	f7fc fec1 	bl	8002480 <HAL_SD_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800570c:	4806      	ldr	r0, [pc, #24]	; (8005728 <BSP_SD_Init+0x48>)
 800570e:	f7fd fc8f 	bl	8003030 <HAL_SD_ConfigWideBusOperation>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800571c:	79fb      	ldrb	r3, [r7, #7]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200000b8 	.word	0x200000b8

0800572c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	4806      	ldr	r0, [pc, #24]	; (800575c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005744:	f7fc ff4c 	bl	80025e0 <HAL_SD_ReadBlocks_DMA>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005752:	7dfb      	ldrb	r3, [r7, #23]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200000b8 	.word	0x200000b8

08005760 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	4806      	ldr	r0, [pc, #24]	; (8005790 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005778:	f7fd f814 	bl	80027a4 <HAL_SD_WriteBlocks_DMA>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	200000b8 	.word	0x200000b8

08005794 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005798:	4805      	ldr	r0, [pc, #20]	; (80057b0 <BSP_SD_GetCardState+0x1c>)
 800579a:	f7fd fce3 	bl	8003164 <HAL_SD_GetCardState>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200000b8 	.word	0x200000b8

080057b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4803      	ldr	r0, [pc, #12]	; (80057cc <BSP_SD_GetCardInfo+0x18>)
 80057c0:	f7fd fc0a 	bl	8002fd8 <HAL_SD_GetCardInfo>
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200000b8 	.word	0x200000b8

080057d0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80057d8:	f000 f818 	bl	800580c <BSP_SD_AbortCallback>
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80057ec:	f000 f98c 	bl	8005b08 <BSP_SD_WriteCpltCallback>
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005800:	f000 f98e 	bl	8005b20 <BSP_SD_ReadCpltCallback>
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0

}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005820:	2301      	movs	r3, #1
 8005822:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	b2db      	uxtb	r3, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800583c:	f7fb faf4 	bl	8000e28 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005842:	e006      	b.n	8005852 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005844:	f7ff ffa6 	bl	8005794 <BSP_SD_GetCardState>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800584e:	2300      	movs	r3, #0
 8005850:	e009      	b.n	8005866 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005852:	f7fb fae9 	bl	8000e28 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	d8f0      	bhi.n	8005844 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <SD_CheckStatus+0x38>)
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005880:	f7ff ff88 	bl	8005794 <BSP_SD_GetCardState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <SD_CheckStatus+0x38>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	b2da      	uxtb	r2, r3
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <SD_CheckStatus+0x38>)
 8005898:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800589a:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <SD_CheckStatus+0x38>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b2db      	uxtb	r3, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000009 	.word	0x20000009

080058ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80058b6:	f7ff ff13 	bl	80056e0 <BSP_SD_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff ffd4 	bl	8005870 <SD_CheckStatus>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <SD_initialize+0x34>)
 80058ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <SD_initialize+0x34>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	b2db      	uxtb	r3, r3
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000009 	.word	0x20000009

080058e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ffbd 	bl	8005870 <SD_CheckStatus>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005914:	f247 5030 	movw	r0, #30000	; 0x7530
 8005918:	f7ff ff8c 	bl	8005834 <SD_CheckStatusWithTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	da01      	bge.n	8005926 <SD_read+0x26>
  {
    return res;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	e03b      	b.n	800599e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f7ff fefe 	bl	800572c <BSP_SD_ReadBlocks_DMA>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d132      	bne.n	800599c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <SD_read+0xa8>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800593c:	f7fb fa74 	bl	8000e28 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005942:	bf00      	nop
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <SD_read+0xa8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <SD_read+0x5e>
 800594c:	f7fb fa6c 	bl	8000e28 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f247 522f 	movw	r2, #29999	; 0x752f
 800595a:	4293      	cmp	r3, r2
 800595c:	d9f2      	bls.n	8005944 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <SD_read+0xa8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
 800596a:	e017      	b.n	800599c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800596c:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <SD_read+0xa8>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005972:	f7fb fa59 	bl	8000e28 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005978:	e007      	b.n	800598a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800597a:	f7ff ff0b 	bl	8005794 <BSP_SD_GetCardState>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SD_read+0x8a>
          {
            res = RES_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005988:	e008      	b.n	800599c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800598a:	f7fb fa4d 	bl	8000e28 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f247 522f 	movw	r2, #29999	; 0x752f
 8005998:	4293      	cmp	r3, r2
 800599a:	d9ee      	bls.n	800597a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000488 	.word	0x20000488

080059ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80059c0:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <SD_write+0xa8>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80059c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80059ca:	f7ff ff33 	bl	8005834 <SD_CheckStatusWithTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da01      	bge.n	80059d8 <SD_write+0x2c>
  {
    return res;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	e038      	b.n	8005a4a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f7ff febf 	bl	8005760 <BSP_SD_WriteBlocks_DMA>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d12f      	bne.n	8005a48 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80059e8:	f7fb fa1e 	bl	8000e28 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80059ee:	bf00      	nop
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <SD_write+0xa8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <SD_write+0x5e>
 80059f8:	f7fb fa16 	bl	8000e28 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d9f2      	bls.n	80059f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <SD_write+0xa8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
 8005a16:	e017      	b.n	8005a48 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <SD_write+0xa8>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005a1e:	f7fb fa03 	bl	8000e28 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a24:	e007      	b.n	8005a36 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a26:	f7ff feb5 	bl	8005794 <BSP_SD_GetCardState>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <SD_write+0x8a>
          {
            res = RES_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75fb      	strb	r3, [r7, #23]
            break;
 8005a34:	e008      	b.n	8005a48 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a36:	f7fb f9f7 	bl	8000e28 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d9ee      	bls.n	8005a26 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000484 	.word	0x20000484

08005a58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	603a      	str	r2, [r7, #0]
 8005a62:	71fb      	strb	r3, [r7, #7]
 8005a64:	460b      	mov	r3, r1
 8005a66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a6e:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <SD_ioctl+0xac>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <SD_ioctl+0x28>
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e03c      	b.n	8005afa <SD_ioctl+0xa2>

  switch (cmd)
 8005a80:	79bb      	ldrb	r3, [r7, #6]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d834      	bhi.n	8005af0 <SD_ioctl+0x98>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <SD_ioctl+0x34>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005abd 	.word	0x08005abd
 8005a98:	08005ad7 	.word	0x08005ad7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005aa2:	e028      	b.n	8005af6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fe83 	bl	80057b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005aba:	e01c      	b.n	8005af6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005abc:	f107 030c 	add.w	r3, r7, #12
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fe77 	bl	80057b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ad4:	e00f      	b.n	8005af6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fe6a 	bl	80057b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	0a5a      	lsrs	r2, r3, #9
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005aee:	e002      	b.n	8005af6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3730      	adds	r7, #48	; 0x30
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000009 	.word	0x20000009

08005b08 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <BSP_SD_WriteCpltCallback+0x14>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20000484 	.word	0x20000484

08005b20 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005b24:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <BSP_SD_ReadCpltCallback+0x14>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000488 	.word	0x20000488

08005b38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <disk_status+0x30>)
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	79fa      	ldrb	r2, [r7, #7]
 8005b50:	4905      	ldr	r1, [pc, #20]	; (8005b68 <disk_status+0x30>)
 8005b52:	440a      	add	r2, r1
 8005b54:	7a12      	ldrb	r2, [r2, #8]
 8005b56:	4610      	mov	r0, r2
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	200006b4 	.word	0x200006b4

08005b6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <disk_initialize+0x48>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d111      	bne.n	8005ba8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <disk_initialize+0x48>)
 8005b88:	2101      	movs	r1, #1
 8005b8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <disk_initialize+0x48>)
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	79fa      	ldrb	r2, [r7, #7]
 8005b9a:	4906      	ldr	r1, [pc, #24]	; (8005bb4 <disk_initialize+0x48>)
 8005b9c:	440a      	add	r2, r1
 8005b9e:	7a12      	ldrb	r2, [r2, #8]
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200006b4 	.word	0x200006b4

08005bb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <disk_read+0x3c>)
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	689c      	ldr	r4, [r3, #8]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <disk_read+0x3c>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	7a18      	ldrb	r0, [r3, #8]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	47a0      	blx	r4
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200006b4 	.word	0x200006b4

08005bf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <disk_write+0x3c>)
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68dc      	ldr	r4, [r3, #12]
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4a07      	ldr	r2, [pc, #28]	; (8005c34 <disk_write+0x3c>)
 8005c18:	4413      	add	r3, r2
 8005c1a:	7a18      	ldrb	r0, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	47a0      	blx	r4
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd90      	pop	{r4, r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200006b4 	.word	0x200006b4

08005c38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3301      	adds	r3, #1
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	b21a      	sxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3303      	adds	r3, #3
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	3202      	adds	r2, #2
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	3201      	adds	r2, #1
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	e010      	b.n	8005ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cbe:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <clear_lock+0x44>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d105      	bne.n	8005cda <clear_lock+0x2a>
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <clear_lock+0x44>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d9eb      	bls.n	8005cbe <clear_lock+0xe>
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000494 	.word	0x20000494

08005cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	78db      	ldrb	r3, [r3, #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d034      	beq.n	8005d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7858      	ldrb	r0, [r3, #1]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	f7ff ff6a 	bl	8005bf8 <disk_write>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e022      	b.n	8005d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d217      	bcs.n	8005d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	789b      	ldrb	r3, [r3, #2]
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e010      	b.n	8005d70 <sync_window+0x78>
					wsect += fs->fsize;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7858      	ldrb	r0, [r3, #1]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d62:	2301      	movs	r3, #1
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	f7ff ff47 	bl	8005bf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d8eb      	bhi.n	8005d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d01b      	beq.n	8005dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ffad 	bl	8005cf8 <sync_window>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d113      	bne.n	8005dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7858      	ldrb	r0, [r3, #1]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005db2:	2301      	movs	r3, #1
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	f7ff feff 	bl	8005bb8 <disk_read>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d031      	beq.n	8005e54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	e002      	b.n	8005dfe <get_ldnumber+0x24>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b1f      	cmp	r3, #31
 8005e04:	d903      	bls.n	8005e0e <get_ldnumber+0x34>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b3a      	cmp	r3, #58	; 0x3a
 8005e0c:	d1f4      	bne.n	8005df8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b3a      	cmp	r3, #58	; 0x3a
 8005e14:	d11c      	bne.n	8005e50 <get_ldnumber+0x76>
			tp = *path;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	60fa      	str	r2, [r7, #12]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	3b30      	subs	r3, #48	; 0x30
 8005e26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	d80e      	bhi.n	8005e4c <get_ldnumber+0x72>
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d10a      	bne.n	8005e4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d107      	bne.n	8005e4c <get_ldnumber+0x72>
					vol = (int)i;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3301      	adds	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	e002      	b.n	8005e56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e54:	693b      	ldr	r3, [r7, #16]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	70da      	strb	r2, [r3, #3]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff ff7e 	bl	8005d80 <move_window>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <check_fs+0x2a>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e038      	b.n	8005f00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3334      	adds	r3, #52	; 0x34
 8005e92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fece 	bl	8005c38 <ld_word>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <check_fs+0x48>
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e029      	b.n	8005f00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eb2:	2be9      	cmp	r3, #233	; 0xe9
 8005eb4:	d009      	beq.n	8005eca <check_fs+0x66>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ebc:	2beb      	cmp	r3, #235	; 0xeb
 8005ebe:	d11e      	bne.n	8005efe <check_fs+0x9a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ec6:	2b90      	cmp	r3, #144	; 0x90
 8005ec8:	d119      	bne.n	8005efe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3334      	adds	r3, #52	; 0x34
 8005ece:	3336      	adds	r3, #54	; 0x36
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fec9 	bl	8005c68 <ld_dword>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <check_fs+0xa4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d101      	bne.n	8005ee6 <check_fs+0x82>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e00c      	b.n	8005f00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3334      	adds	r3, #52	; 0x34
 8005eea:	3352      	adds	r3, #82	; 0x52
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff febb 	bl	8005c68 <ld_dword>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <check_fs+0xa8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <check_fs+0x9a>
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005efe:	2302      	movs	r3, #2
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	00544146 	.word	0x00544146
 8005f0c:	33544146 	.word	0x33544146

08005f10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b096      	sub	sp, #88	; 0x58
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ff58 	bl	8005dda <get_ldnumber>
 8005f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da01      	bge.n	8005f36 <find_volume+0x26>
 8005f32:	230b      	movs	r3, #11
 8005f34:	e230      	b.n	8006398 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f36:	4aa1      	ldr	r2, [pc, #644]	; (80061bc <find_volume+0x2ac>)
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <find_volume+0x3a>
 8005f46:	230c      	movs	r3, #12
 8005f48:	e226      	b.n	8006398 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01a      	beq.n	8005f96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fde7 	bl	8005b38 <disk_status>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10c      	bne.n	8005f96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <find_volume+0x82>
 8005f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f8e:	230a      	movs	r3, #10
 8005f90:	e202      	b.n	8006398 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8005f92:	2300      	movs	r3, #0
 8005f94:	e200      	b.n	8006398 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fddf 	bl	8005b6c <disk_initialize>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1e9      	b.n	8006398 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <find_volume+0xca>
 8005fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005fd6:	230a      	movs	r3, #10
 8005fd8:	e1de      	b.n	8006398 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005fde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fe2:	f7ff ff3f 	bl	8005e64 <check_fs>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d149      	bne.n	8006088 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff8:	e01e      	b.n	8006038 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006008:	4413      	add	r3, r2
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	3304      	adds	r3, #4
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d006      	beq.n	8006024 <find_volume+0x114>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3308      	adds	r3, #8
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fe24 	bl	8005c68 <ld_dword>
 8006020:	4602      	mov	r2, r0
 8006022:	e000      	b.n	8006026 <find_volume+0x116>
 8006024:	2200      	movs	r2, #0
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	3358      	adds	r3, #88	; 0x58
 800602c:	443b      	add	r3, r7
 800602e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006034:	3301      	adds	r3, #1
 8006036:	643b      	str	r3, [r7, #64]	; 0x40
 8006038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603a:	2b03      	cmp	r3, #3
 800603c:	d9dd      	bls.n	8005ffa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800603e:	2300      	movs	r3, #0
 8006040:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <find_volume+0x13e>
 8006048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604a:	3b01      	subs	r3, #1
 800604c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800604e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	3358      	adds	r3, #88	; 0x58
 8006054:	443b      	add	r3, r7
 8006056:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800605a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800605c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <find_volume+0x15e>
 8006062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006066:	f7ff fefd 	bl	8005e64 <check_fs>
 800606a:	4603      	mov	r3, r0
 800606c:	e000      	b.n	8006070 <find_volume+0x160>
 800606e:	2303      	movs	r3, #3
 8006070:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006078:	2b01      	cmp	r3, #1
 800607a:	d905      	bls.n	8006088 <find_volume+0x178>
 800607c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607e:	3301      	adds	r3, #1
 8006080:	643b      	str	r3, [r7, #64]	; 0x40
 8006082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006084:	2b03      	cmp	r3, #3
 8006086:	d9e2      	bls.n	800604e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800608c:	2b04      	cmp	r3, #4
 800608e:	d101      	bne.n	8006094 <find_volume+0x184>
 8006090:	2301      	movs	r3, #1
 8006092:	e181      	b.n	8006398 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006098:	2b01      	cmp	r3, #1
 800609a:	d901      	bls.n	80060a0 <find_volume+0x190>
 800609c:	230d      	movs	r3, #13
 800609e:	e17b      	b.n	8006398 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	3334      	adds	r3, #52	; 0x34
 80060a4:	330b      	adds	r3, #11
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fdc6 	bl	8005c38 <ld_word>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d001      	beq.n	80060b8 <find_volume+0x1a8>
 80060b4:	230d      	movs	r3, #13
 80060b6:	e16f      	b.n	8006398 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	3334      	adds	r3, #52	; 0x34
 80060bc:	3316      	adds	r3, #22
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fdba 	bl	8005c38 <ld_word>
 80060c4:	4603      	mov	r3, r0
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80060c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <find_volume+0x1cc>
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	3334      	adds	r3, #52	; 0x34
 80060d2:	3324      	adds	r3, #36	; 0x24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fdc7 	bl	8005c68 <ld_dword>
 80060da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	789b      	ldrb	r3, [r3, #2]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d005      	beq.n	8006100 <find_volume+0x1f0>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	789b      	ldrb	r3, [r3, #2]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d001      	beq.n	8006100 <find_volume+0x1f0>
 80060fc:	230d      	movs	r3, #13
 80060fe:	e14b      	b.n	8006398 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	789b      	ldrb	r3, [r3, #2]
 8006104:	461a      	mov	r2, r3
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006114:	b29a      	uxth	r2, r3
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	895b      	ldrh	r3, [r3, #10]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <find_volume+0x224>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	895b      	ldrh	r3, [r3, #10]
 8006126:	461a      	mov	r2, r3
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	895b      	ldrh	r3, [r3, #10]
 800612c:	3b01      	subs	r3, #1
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <find_volume+0x228>
 8006134:	230d      	movs	r3, #13
 8006136:	e12f      	b.n	8006398 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	3334      	adds	r3, #52	; 0x34
 800613c:	3311      	adds	r3, #17
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fd7a 	bl	8005c38 <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	891b      	ldrh	r3, [r3, #8]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <find_volume+0x24e>
 800615a:	230d      	movs	r3, #13
 800615c:	e11c      	b.n	8006398 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	3334      	adds	r3, #52	; 0x34
 8006162:	3313      	adds	r3, #19
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fd67 	bl	8005c38 <ld_word>
 800616a:	4603      	mov	r3, r0
 800616c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800616e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <find_volume+0x272>
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	3334      	adds	r3, #52	; 0x34
 8006178:	3320      	adds	r3, #32
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fd74 	bl	8005c68 <ld_dword>
 8006180:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	3334      	adds	r3, #52	; 0x34
 8006186:	330e      	adds	r3, #14
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fd55 	bl	8005c38 <ld_word>
 800618e:	4603      	mov	r3, r0
 8006190:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <find_volume+0x28c>
 8006198:	230d      	movs	r3, #13
 800619a:	e0fd      	b.n	8006398 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800619c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	4413      	add	r3, r2
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	8912      	ldrh	r2, [r2, #8]
 80061a6:	0912      	lsrs	r2, r2, #4
 80061a8:	b292      	uxth	r2, r2
 80061aa:	4413      	add	r3, r2
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d204      	bcs.n	80061c0 <find_volume+0x2b0>
 80061b6:	230d      	movs	r3, #13
 80061b8:	e0ee      	b.n	8006398 <find_volume+0x488>
 80061ba:	bf00      	nop
 80061bc:	2000048c 	.word	0x2000048c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061c8:	8952      	ldrh	r2, [r2, #10]
 80061ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <find_volume+0x2ca>
 80061d6:	230d      	movs	r3, #13
 80061d8:	e0de      	b.n	8006398 <find_volume+0x488>
		fmt = FS_FAT32;
 80061da:	2303      	movs	r3, #3
 80061dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <find_volume+0x2e0>
 80061ea:	2302      	movs	r3, #2
 80061ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d802      	bhi.n	8006200 <find_volume+0x2f0>
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800620c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800620e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006212:	441a      	add	r2, r3
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	441a      	add	r2, r3
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006226:	2b03      	cmp	r3, #3
 8006228:	d11e      	bne.n	8006268 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	3334      	adds	r3, #52	; 0x34
 800622e:	332a      	adds	r3, #42	; 0x2a
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fd01 	bl	8005c38 <ld_word>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <find_volume+0x330>
 800623c:	230d      	movs	r3, #13
 800623e:	e0ab      	b.n	8006398 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	891b      	ldrh	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <find_volume+0x33c>
 8006248:	230d      	movs	r3, #13
 800624a:	e0a5      	b.n	8006398 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	3334      	adds	r3, #52	; 0x34
 8006250:	332c      	adds	r3, #44	; 0x2c
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fd08 	bl	8005c68 <ld_dword>
 8006258:	4602      	mov	r2, r0
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
 8006266:	e01f      	b.n	80062a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	891b      	ldrh	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <find_volume+0x364>
 8006270:	230d      	movs	r3, #13
 8006272:	e091      	b.n	8006398 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	441a      	add	r2, r3
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006284:	2b02      	cmp	r3, #2
 8006286:	d103      	bne.n	8006290 <find_volume+0x380>
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	e00a      	b.n	80062a6 <find_volume+0x396>
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	085a      	lsrs	r2, r3, #1
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80062a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80062b2:	0a5b      	lsrs	r3, r3, #9
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d201      	bcs.n	80062bc <find_volume+0x3ac>
 80062b8:	230d      	movs	r3, #13
 80062ba:	e06d      	b.n	8006398 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	615a      	str	r2, [r3, #20]
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80062d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d149      	bne.n	800636e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	3334      	adds	r3, #52	; 0x34
 80062de:	3330      	adds	r3, #48	; 0x30
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fca9 	bl	8005c38 <ld_word>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d140      	bne.n	800636e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80062ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ee:	3301      	adds	r3, #1
 80062f0:	4619      	mov	r1, r3
 80062f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062f4:	f7ff fd44 	bl	8005d80 <move_window>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d137      	bne.n	800636e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	3334      	adds	r3, #52	; 0x34
 8006308:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fc93 	bl	8005c38 <ld_word>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800631a:	429a      	cmp	r2, r3
 800631c:	d127      	bne.n	800636e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	3334      	adds	r3, #52	; 0x34
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fca0 	bl	8005c68 <ld_dword>
 8006328:	4603      	mov	r3, r0
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <find_volume+0x490>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d11e      	bne.n	800636e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	3334      	adds	r3, #52	; 0x34
 8006334:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fc95 	bl	8005c68 <ld_dword>
 800633e:	4603      	mov	r3, r0
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <find_volume+0x494>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	3334      	adds	r3, #52	; 0x34
 800634a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fc8a 	bl	8005c68 <ld_dword>
 8006354:	4602      	mov	r2, r0
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	3334      	adds	r3, #52	; 0x34
 800635e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fc80 	bl	8005c68 <ld_dword>
 8006368:	4602      	mov	r2, r0
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006374:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006376:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <find_volume+0x498>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <find_volume+0x498>)
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <find_volume+0x498>)
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	4a07      	ldr	r2, [pc, #28]	; (80063ac <find_volume+0x49c>)
 800638e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006392:	f7ff fc8d 	bl	8005cb0 <clear_lock>
#endif
	return FR_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3758      	adds	r7, #88	; 0x58
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	41615252 	.word	0x41615252
 80063a4:	61417272 	.word	0x61417272
 80063a8:	20000490 	.word	0x20000490
 80063ac:	200004b4 	.word	0x200004b4

080063b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fd07 	bl	8005dda <get_ldnumber>
 80063cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da01      	bge.n	80063d8 <f_mount+0x28>
 80063d4:	230b      	movs	r3, #11
 80063d6:	e02b      	b.n	8006430 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <f_mount+0x88>)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063e8:	69b8      	ldr	r0, [r7, #24]
 80063ea:	f7ff fc61 	bl	8005cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	490d      	ldr	r1, [pc, #52]	; (8006438 <f_mount+0x88>)
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <f_mount+0x66>
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d001      	beq.n	800641a <f_mount+0x6a>
 8006416:	2300      	movs	r3, #0
 8006418:	e00a      	b.n	8006430 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800641a:	f107 010c 	add.w	r1, r7, #12
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	2200      	movs	r2, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fd73 	bl	8005f10 <find_volume>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2000048c 	.word	0x2000048c

0800643c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006452:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 8006454:	7a5b      	ldrb	r3, [r3, #9]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d131      	bne.n	80064c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800645c:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 800645e:	7a5b      	ldrb	r3, [r3, #9]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 8006466:	2100      	movs	r1, #0
 8006468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 800646c:	7a5b      	ldrb	r3, [r3, #9]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 800647c:	7a5b      	ldrb	r3, [r3, #9]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 8006484:	4413      	add	r3, r2
 8006486:	79fa      	ldrb	r2, [r7, #7]
 8006488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 800648c:	7a5b      	ldrb	r3, [r3, #9]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	b2d1      	uxtb	r1, r2
 8006494:	4a0e      	ldr	r2, [pc, #56]	; (80064d0 <FATFS_LinkDriverEx+0x94>)
 8006496:	7251      	strb	r1, [r2, #9]
 8006498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	3330      	adds	r3, #48	; 0x30
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3301      	adds	r3, #1
 80064a8:	223a      	movs	r2, #58	; 0x3a
 80064aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3302      	adds	r3, #2
 80064b0:	222f      	movs	r2, #47	; 0x2f
 80064b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3303      	adds	r3, #3
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	200006b4 	.word	0x200006b4

080064d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064de:	2200      	movs	r2, #0
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ffaa 	bl	800643c <FATFS_LinkDriverEx>
 80064e8:	4603      	mov	r3, r0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <__errno>:
 80064f4:	4b01      	ldr	r3, [pc, #4]	; (80064fc <__errno+0x8>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	2000000c 	.word	0x2000000c

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4d0d      	ldr	r5, [pc, #52]	; (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	; (800653c <__libc_init_array+0x3c>)
 8006506:	1b64      	subs	r4, r4, r5
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2600      	movs	r6, #0
 800650c:	42a6      	cmp	r6, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4d0b      	ldr	r5, [pc, #44]	; (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	; (8006544 <__libc_init_array+0x44>)
 8006514:	f000 fc8e 	bl	8006e34 <_init>
 8006518:	1b64      	subs	r4, r4, r5
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2600      	movs	r6, #0
 800651e:	42a6      	cmp	r6, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f855 3b04 	ldr.w	r3, [r5], #4
 8006528:	4798      	blx	r3
 800652a:	3601      	adds	r6, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006532:	4798      	blx	r3
 8006534:	3601      	adds	r6, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	08006f00 	.word	0x08006f00
 800653c:	08006f00 	.word	0x08006f00
 8006540:	08006f00 	.word	0x08006f00
 8006544:	08006f04 	.word	0x08006f04

08006548 <memset>:
 8006548:	4402      	add	r2, r0
 800654a:	4603      	mov	r3, r0
 800654c:	4293      	cmp	r3, r2
 800654e:	d100      	bne.n	8006552 <memset+0xa>
 8006550:	4770      	bx	lr
 8006552:	f803 1b01 	strb.w	r1, [r3], #1
 8006556:	e7f9      	b.n	800654c <memset+0x4>

08006558 <siprintf>:
 8006558:	b40e      	push	{r1, r2, r3}
 800655a:	b500      	push	{lr}
 800655c:	b09c      	sub	sp, #112	; 0x70
 800655e:	ab1d      	add	r3, sp, #116	; 0x74
 8006560:	9002      	str	r0, [sp, #8]
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <siprintf+0x38>)
 800656a:	9107      	str	r1, [sp, #28]
 800656c:	9104      	str	r1, [sp, #16]
 800656e:	4909      	ldr	r1, [pc, #36]	; (8006594 <siprintf+0x3c>)
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	6800      	ldr	r0, [r0, #0]
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	a902      	add	r1, sp, #8
 800657c:	f000 f868 	bl	8006650 <_svfiprintf_r>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	b01c      	add	sp, #112	; 0x70
 8006588:	f85d eb04 	ldr.w	lr, [sp], #4
 800658c:	b003      	add	sp, #12
 800658e:	4770      	bx	lr
 8006590:	2000000c 	.word	0x2000000c
 8006594:	ffff0208 	.word	0xffff0208

08006598 <__ssputs_r>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	688e      	ldr	r6, [r1, #8]
 800659e:	429e      	cmp	r6, r3
 80065a0:	4682      	mov	sl, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	4690      	mov	r8, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	d838      	bhi.n	800661c <__ssputs_r+0x84>
 80065aa:	898a      	ldrh	r2, [r1, #12]
 80065ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065b0:	d032      	beq.n	8006618 <__ssputs_r+0x80>
 80065b2:	6825      	ldr	r5, [r4, #0]
 80065b4:	6909      	ldr	r1, [r1, #16]
 80065b6:	eba5 0901 	sub.w	r9, r5, r1
 80065ba:	6965      	ldr	r5, [r4, #20]
 80065bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065c4:	3301      	adds	r3, #1
 80065c6:	444b      	add	r3, r9
 80065c8:	106d      	asrs	r5, r5, #1
 80065ca:	429d      	cmp	r5, r3
 80065cc:	bf38      	it	cc
 80065ce:	461d      	movcc	r5, r3
 80065d0:	0553      	lsls	r3, r2, #21
 80065d2:	d531      	bpl.n	8006638 <__ssputs_r+0xa0>
 80065d4:	4629      	mov	r1, r5
 80065d6:	f000 fb63 	bl	8006ca0 <_malloc_r>
 80065da:	4606      	mov	r6, r0
 80065dc:	b950      	cbnz	r0, 80065f4 <__ssputs_r+0x5c>
 80065de:	230c      	movs	r3, #12
 80065e0:	f8ca 3000 	str.w	r3, [sl]
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	6921      	ldr	r1, [r4, #16]
 80065f6:	464a      	mov	r2, r9
 80065f8:	f000 fabe 	bl	8006b78 <memcpy>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	6126      	str	r6, [r4, #16]
 800660a:	6165      	str	r5, [r4, #20]
 800660c:	444e      	add	r6, r9
 800660e:	eba5 0509 	sub.w	r5, r5, r9
 8006612:	6026      	str	r6, [r4, #0]
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	463e      	mov	r6, r7
 8006618:	42be      	cmp	r6, r7
 800661a:	d900      	bls.n	800661e <__ssputs_r+0x86>
 800661c:	463e      	mov	r6, r7
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	4632      	mov	r2, r6
 8006622:	4641      	mov	r1, r8
 8006624:	f000 fab6 	bl	8006b94 <memmove>
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	1b9b      	subs	r3, r3, r6
 800662c:	60a3      	str	r3, [r4, #8]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	4433      	add	r3, r6
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	2000      	movs	r0, #0
 8006636:	e7db      	b.n	80065f0 <__ssputs_r+0x58>
 8006638:	462a      	mov	r2, r5
 800663a:	f000 fba5 	bl	8006d88 <_realloc_r>
 800663e:	4606      	mov	r6, r0
 8006640:	2800      	cmp	r0, #0
 8006642:	d1e1      	bne.n	8006608 <__ssputs_r+0x70>
 8006644:	6921      	ldr	r1, [r4, #16]
 8006646:	4650      	mov	r0, sl
 8006648:	f000 fabe 	bl	8006bc8 <_free_r>
 800664c:	e7c7      	b.n	80065de <__ssputs_r+0x46>
	...

08006650 <_svfiprintf_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	4698      	mov	r8, r3
 8006656:	898b      	ldrh	r3, [r1, #12]
 8006658:	061b      	lsls	r3, r3, #24
 800665a:	b09d      	sub	sp, #116	; 0x74
 800665c:	4607      	mov	r7, r0
 800665e:	460d      	mov	r5, r1
 8006660:	4614      	mov	r4, r2
 8006662:	d50e      	bpl.n	8006682 <_svfiprintf_r+0x32>
 8006664:	690b      	ldr	r3, [r1, #16]
 8006666:	b963      	cbnz	r3, 8006682 <_svfiprintf_r+0x32>
 8006668:	2140      	movs	r1, #64	; 0x40
 800666a:	f000 fb19 	bl	8006ca0 <_malloc_r>
 800666e:	6028      	str	r0, [r5, #0]
 8006670:	6128      	str	r0, [r5, #16]
 8006672:	b920      	cbnz	r0, 800667e <_svfiprintf_r+0x2e>
 8006674:	230c      	movs	r3, #12
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e0d1      	b.n	8006822 <_svfiprintf_r+0x1d2>
 800667e:	2340      	movs	r3, #64	; 0x40
 8006680:	616b      	str	r3, [r5, #20]
 8006682:	2300      	movs	r3, #0
 8006684:	9309      	str	r3, [sp, #36]	; 0x24
 8006686:	2320      	movs	r3, #32
 8006688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800668c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006690:	2330      	movs	r3, #48	; 0x30
 8006692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800683c <_svfiprintf_r+0x1ec>
 8006696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800669a:	f04f 0901 	mov.w	r9, #1
 800669e:	4623      	mov	r3, r4
 80066a0:	469a      	mov	sl, r3
 80066a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a6:	b10a      	cbz	r2, 80066ac <_svfiprintf_r+0x5c>
 80066a8:	2a25      	cmp	r2, #37	; 0x25
 80066aa:	d1f9      	bne.n	80066a0 <_svfiprintf_r+0x50>
 80066ac:	ebba 0b04 	subs.w	fp, sl, r4
 80066b0:	d00b      	beq.n	80066ca <_svfiprintf_r+0x7a>
 80066b2:	465b      	mov	r3, fp
 80066b4:	4622      	mov	r2, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff ff6d 	bl	8006598 <__ssputs_r>
 80066be:	3001      	adds	r0, #1
 80066c0:	f000 80aa 	beq.w	8006818 <_svfiprintf_r+0x1c8>
 80066c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c6:	445a      	add	r2, fp
 80066c8:	9209      	str	r2, [sp, #36]	; 0x24
 80066ca:	f89a 3000 	ldrb.w	r3, [sl]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80a2 	beq.w	8006818 <_svfiprintf_r+0x1c8>
 80066d4:	2300      	movs	r3, #0
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066de:	f10a 0a01 	add.w	sl, sl, #1
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ea:	931a      	str	r3, [sp, #104]	; 0x68
 80066ec:	4654      	mov	r4, sl
 80066ee:	2205      	movs	r2, #5
 80066f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f4:	4851      	ldr	r0, [pc, #324]	; (800683c <_svfiprintf_r+0x1ec>)
 80066f6:	f7f9 fd73 	bl	80001e0 <memchr>
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	b9d8      	cbnz	r0, 8006736 <_svfiprintf_r+0xe6>
 80066fe:	06d0      	lsls	r0, r2, #27
 8006700:	bf44      	itt	mi
 8006702:	2320      	movmi	r3, #32
 8006704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006708:	0711      	lsls	r1, r2, #28
 800670a:	bf44      	itt	mi
 800670c:	232b      	movmi	r3, #43	; 0x2b
 800670e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006712:	f89a 3000 	ldrb.w	r3, [sl]
 8006716:	2b2a      	cmp	r3, #42	; 0x2a
 8006718:	d015      	beq.n	8006746 <_svfiprintf_r+0xf6>
 800671a:	9a07      	ldr	r2, [sp, #28]
 800671c:	4654      	mov	r4, sl
 800671e:	2000      	movs	r0, #0
 8006720:	f04f 0c0a 	mov.w	ip, #10
 8006724:	4621      	mov	r1, r4
 8006726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800672a:	3b30      	subs	r3, #48	; 0x30
 800672c:	2b09      	cmp	r3, #9
 800672e:	d94e      	bls.n	80067ce <_svfiprintf_r+0x17e>
 8006730:	b1b0      	cbz	r0, 8006760 <_svfiprintf_r+0x110>
 8006732:	9207      	str	r2, [sp, #28]
 8006734:	e014      	b.n	8006760 <_svfiprintf_r+0x110>
 8006736:	eba0 0308 	sub.w	r3, r0, r8
 800673a:	fa09 f303 	lsl.w	r3, r9, r3
 800673e:	4313      	orrs	r3, r2
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	46a2      	mov	sl, r4
 8006744:	e7d2      	b.n	80066ec <_svfiprintf_r+0x9c>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	1d19      	adds	r1, r3, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	9103      	str	r1, [sp, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfbb      	ittet	lt
 8006752:	425b      	neglt	r3, r3
 8006754:	f042 0202 	orrlt.w	r2, r2, #2
 8006758:	9307      	strge	r3, [sp, #28]
 800675a:	9307      	strlt	r3, [sp, #28]
 800675c:	bfb8      	it	lt
 800675e:	9204      	strlt	r2, [sp, #16]
 8006760:	7823      	ldrb	r3, [r4, #0]
 8006762:	2b2e      	cmp	r3, #46	; 0x2e
 8006764:	d10c      	bne.n	8006780 <_svfiprintf_r+0x130>
 8006766:	7863      	ldrb	r3, [r4, #1]
 8006768:	2b2a      	cmp	r3, #42	; 0x2a
 800676a:	d135      	bne.n	80067d8 <_svfiprintf_r+0x188>
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	9203      	str	r2, [sp, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	bfb8      	it	lt
 8006778:	f04f 33ff 	movlt.w	r3, #4294967295
 800677c:	3402      	adds	r4, #2
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800684c <_svfiprintf_r+0x1fc>
 8006784:	7821      	ldrb	r1, [r4, #0]
 8006786:	2203      	movs	r2, #3
 8006788:	4650      	mov	r0, sl
 800678a:	f7f9 fd29 	bl	80001e0 <memchr>
 800678e:	b140      	cbz	r0, 80067a2 <_svfiprintf_r+0x152>
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	eba0 000a 	sub.w	r0, r0, sl
 8006796:	fa03 f000 	lsl.w	r0, r3, r0
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	4303      	orrs	r3, r0
 800679e:	3401      	adds	r4, #1
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a6:	4826      	ldr	r0, [pc, #152]	; (8006840 <_svfiprintf_r+0x1f0>)
 80067a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ac:	2206      	movs	r2, #6
 80067ae:	f7f9 fd17 	bl	80001e0 <memchr>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d038      	beq.n	8006828 <_svfiprintf_r+0x1d8>
 80067b6:	4b23      	ldr	r3, [pc, #140]	; (8006844 <_svfiprintf_r+0x1f4>)
 80067b8:	bb1b      	cbnz	r3, 8006802 <_svfiprintf_r+0x1b2>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3307      	adds	r3, #7
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	3308      	adds	r3, #8
 80067c4:	9303      	str	r3, [sp, #12]
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	4433      	add	r3, r6
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	e767      	b.n	800669e <_svfiprintf_r+0x4e>
 80067ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80067d2:	460c      	mov	r4, r1
 80067d4:	2001      	movs	r0, #1
 80067d6:	e7a5      	b.n	8006724 <_svfiprintf_r+0xd4>
 80067d8:	2300      	movs	r3, #0
 80067da:	3401      	adds	r4, #1
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	4619      	mov	r1, r3
 80067e0:	f04f 0c0a 	mov.w	ip, #10
 80067e4:	4620      	mov	r0, r4
 80067e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ea:	3a30      	subs	r2, #48	; 0x30
 80067ec:	2a09      	cmp	r2, #9
 80067ee:	d903      	bls.n	80067f8 <_svfiprintf_r+0x1a8>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0c5      	beq.n	8006780 <_svfiprintf_r+0x130>
 80067f4:	9105      	str	r1, [sp, #20]
 80067f6:	e7c3      	b.n	8006780 <_svfiprintf_r+0x130>
 80067f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80067fc:	4604      	mov	r4, r0
 80067fe:	2301      	movs	r3, #1
 8006800:	e7f0      	b.n	80067e4 <_svfiprintf_r+0x194>
 8006802:	ab03      	add	r3, sp, #12
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	462a      	mov	r2, r5
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <_svfiprintf_r+0x1f8>)
 800680a:	a904      	add	r1, sp, #16
 800680c:	4638      	mov	r0, r7
 800680e:	f3af 8000 	nop.w
 8006812:	1c42      	adds	r2, r0, #1
 8006814:	4606      	mov	r6, r0
 8006816:	d1d6      	bne.n	80067c6 <_svfiprintf_r+0x176>
 8006818:	89ab      	ldrh	r3, [r5, #12]
 800681a:	065b      	lsls	r3, r3, #25
 800681c:	f53f af2c 	bmi.w	8006678 <_svfiprintf_r+0x28>
 8006820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006822:	b01d      	add	sp, #116	; 0x74
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	462a      	mov	r2, r5
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <_svfiprintf_r+0x1f8>)
 8006830:	a904      	add	r1, sp, #16
 8006832:	4638      	mov	r0, r7
 8006834:	f000 f87a 	bl	800692c <_printf_i>
 8006838:	e7eb      	b.n	8006812 <_svfiprintf_r+0x1c2>
 800683a:	bf00      	nop
 800683c:	08006ec4 	.word	0x08006ec4
 8006840:	08006ece 	.word	0x08006ece
 8006844:	00000000 	.word	0x00000000
 8006848:	08006599 	.word	0x08006599
 800684c:	08006eca 	.word	0x08006eca

08006850 <_printf_common>:
 8006850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	4616      	mov	r6, r2
 8006856:	4699      	mov	r9, r3
 8006858:	688a      	ldr	r2, [r1, #8]
 800685a:	690b      	ldr	r3, [r1, #16]
 800685c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006860:	4293      	cmp	r3, r2
 8006862:	bfb8      	it	lt
 8006864:	4613      	movlt	r3, r2
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800686c:	4607      	mov	r7, r0
 800686e:	460c      	mov	r4, r1
 8006870:	b10a      	cbz	r2, 8006876 <_printf_common+0x26>
 8006872:	3301      	adds	r3, #1
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	0699      	lsls	r1, r3, #26
 800687a:	bf42      	ittt	mi
 800687c:	6833      	ldrmi	r3, [r6, #0]
 800687e:	3302      	addmi	r3, #2
 8006880:	6033      	strmi	r3, [r6, #0]
 8006882:	6825      	ldr	r5, [r4, #0]
 8006884:	f015 0506 	ands.w	r5, r5, #6
 8006888:	d106      	bne.n	8006898 <_printf_common+0x48>
 800688a:	f104 0a19 	add.w	sl, r4, #25
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	6832      	ldr	r2, [r6, #0]
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	42ab      	cmp	r3, r5
 8006896:	dc26      	bgt.n	80068e6 <_printf_common+0x96>
 8006898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800689c:	1e13      	subs	r3, r2, #0
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	bf18      	it	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	0692      	lsls	r2, r2, #26
 80068a6:	d42b      	bmi.n	8006900 <_printf_common+0xb0>
 80068a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ac:	4649      	mov	r1, r9
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c0      	blx	r8
 80068b2:	3001      	adds	r0, #1
 80068b4:	d01e      	beq.n	80068f4 <_printf_common+0xa4>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	68e5      	ldr	r5, [r4, #12]
 80068ba:	6832      	ldr	r2, [r6, #0]
 80068bc:	f003 0306 	and.w	r3, r3, #6
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	bf08      	it	eq
 80068c4:	1aad      	subeq	r5, r5, r2
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	bf0c      	ite	eq
 80068cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d0:	2500      	movne	r5, #0
 80068d2:	4293      	cmp	r3, r2
 80068d4:	bfc4      	itt	gt
 80068d6:	1a9b      	subgt	r3, r3, r2
 80068d8:	18ed      	addgt	r5, r5, r3
 80068da:	2600      	movs	r6, #0
 80068dc:	341a      	adds	r4, #26
 80068de:	42b5      	cmp	r5, r6
 80068e0:	d11a      	bne.n	8006918 <_printf_common+0xc8>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e008      	b.n	80068f8 <_printf_common+0xa8>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4652      	mov	r2, sl
 80068ea:	4649      	mov	r1, r9
 80068ec:	4638      	mov	r0, r7
 80068ee:	47c0      	blx	r8
 80068f0:	3001      	adds	r0, #1
 80068f2:	d103      	bne.n	80068fc <_printf_common+0xac>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fc:	3501      	adds	r5, #1
 80068fe:	e7c6      	b.n	800688e <_printf_common+0x3e>
 8006900:	18e1      	adds	r1, r4, r3
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	2030      	movs	r0, #48	; 0x30
 8006906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800690a:	4422      	add	r2, r4
 800690c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006914:	3302      	adds	r3, #2
 8006916:	e7c7      	b.n	80068a8 <_printf_common+0x58>
 8006918:	2301      	movs	r3, #1
 800691a:	4622      	mov	r2, r4
 800691c:	4649      	mov	r1, r9
 800691e:	4638      	mov	r0, r7
 8006920:	47c0      	blx	r8
 8006922:	3001      	adds	r0, #1
 8006924:	d0e6      	beq.n	80068f4 <_printf_common+0xa4>
 8006926:	3601      	adds	r6, #1
 8006928:	e7d9      	b.n	80068de <_printf_common+0x8e>
	...

0800692c <_printf_i>:
 800692c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	7e0f      	ldrb	r7, [r1, #24]
 8006932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006934:	2f78      	cmp	r7, #120	; 0x78
 8006936:	4691      	mov	r9, r2
 8006938:	4680      	mov	r8, r0
 800693a:	460c      	mov	r4, r1
 800693c:	469a      	mov	sl, r3
 800693e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006942:	d807      	bhi.n	8006954 <_printf_i+0x28>
 8006944:	2f62      	cmp	r7, #98	; 0x62
 8006946:	d80a      	bhi.n	800695e <_printf_i+0x32>
 8006948:	2f00      	cmp	r7, #0
 800694a:	f000 80d8 	beq.w	8006afe <_printf_i+0x1d2>
 800694e:	2f58      	cmp	r7, #88	; 0x58
 8006950:	f000 80a3 	beq.w	8006a9a <_printf_i+0x16e>
 8006954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800695c:	e03a      	b.n	80069d4 <_printf_i+0xa8>
 800695e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006962:	2b15      	cmp	r3, #21
 8006964:	d8f6      	bhi.n	8006954 <_printf_i+0x28>
 8006966:	a101      	add	r1, pc, #4	; (adr r1, 800696c <_printf_i+0x40>)
 8006968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800696c:	080069c5 	.word	0x080069c5
 8006970:	080069d9 	.word	0x080069d9
 8006974:	08006955 	.word	0x08006955
 8006978:	08006955 	.word	0x08006955
 800697c:	08006955 	.word	0x08006955
 8006980:	08006955 	.word	0x08006955
 8006984:	080069d9 	.word	0x080069d9
 8006988:	08006955 	.word	0x08006955
 800698c:	08006955 	.word	0x08006955
 8006990:	08006955 	.word	0x08006955
 8006994:	08006955 	.word	0x08006955
 8006998:	08006ae5 	.word	0x08006ae5
 800699c:	08006a09 	.word	0x08006a09
 80069a0:	08006ac7 	.word	0x08006ac7
 80069a4:	08006955 	.word	0x08006955
 80069a8:	08006955 	.word	0x08006955
 80069ac:	08006b07 	.word	0x08006b07
 80069b0:	08006955 	.word	0x08006955
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006955 	.word	0x08006955
 80069bc:	08006955 	.word	0x08006955
 80069c0:	08006acf 	.word	0x08006acf
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	1d1a      	adds	r2, r3, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	602a      	str	r2, [r5, #0]
 80069cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0a3      	b.n	8006b20 <_printf_i+0x1f4>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	6829      	ldr	r1, [r5, #0]
 80069dc:	0606      	lsls	r6, r0, #24
 80069de:	f101 0304 	add.w	r3, r1, #4
 80069e2:	d50a      	bpl.n	80069fa <_printf_i+0xce>
 80069e4:	680e      	ldr	r6, [r1, #0]
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	da03      	bge.n	80069f4 <_printf_i+0xc8>
 80069ec:	232d      	movs	r3, #45	; 0x2d
 80069ee:	4276      	negs	r6, r6
 80069f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f4:	485e      	ldr	r0, [pc, #376]	; (8006b70 <_printf_i+0x244>)
 80069f6:	230a      	movs	r3, #10
 80069f8:	e019      	b.n	8006a2e <_printf_i+0x102>
 80069fa:	680e      	ldr	r6, [r1, #0]
 80069fc:	602b      	str	r3, [r5, #0]
 80069fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a02:	bf18      	it	ne
 8006a04:	b236      	sxthne	r6, r6
 8006a06:	e7ef      	b.n	80069e8 <_printf_i+0xbc>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	1d19      	adds	r1, r3, #4
 8006a0e:	6029      	str	r1, [r5, #0]
 8006a10:	0601      	lsls	r1, r0, #24
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0xec>
 8006a14:	681e      	ldr	r6, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <_printf_i+0xf2>
 8006a18:	0646      	lsls	r6, r0, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0xe8>
 8006a1c:	881e      	ldrh	r6, [r3, #0]
 8006a1e:	4854      	ldr	r0, [pc, #336]	; (8006b70 <_printf_i+0x244>)
 8006a20:	2f6f      	cmp	r7, #111	; 0x6f
 8006a22:	bf0c      	ite	eq
 8006a24:	2308      	moveq	r3, #8
 8006a26:	230a      	movne	r3, #10
 8006a28:	2100      	movs	r1, #0
 8006a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a2e:	6865      	ldr	r5, [r4, #4]
 8006a30:	60a5      	str	r5, [r4, #8]
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	bfa2      	ittt	ge
 8006a36:	6821      	ldrge	r1, [r4, #0]
 8006a38:	f021 0104 	bicge.w	r1, r1, #4
 8006a3c:	6021      	strge	r1, [r4, #0]
 8006a3e:	b90e      	cbnz	r6, 8006a44 <_printf_i+0x118>
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	d04d      	beq.n	8006ae0 <_printf_i+0x1b4>
 8006a44:	4615      	mov	r5, r2
 8006a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a4e:	5dc7      	ldrb	r7, [r0, r7]
 8006a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a54:	4637      	mov	r7, r6
 8006a56:	42bb      	cmp	r3, r7
 8006a58:	460e      	mov	r6, r1
 8006a5a:	d9f4      	bls.n	8006a46 <_printf_i+0x11a>
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d10b      	bne.n	8006a78 <_printf_i+0x14c>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	07de      	lsls	r6, r3, #31
 8006a64:	d508      	bpl.n	8006a78 <_printf_i+0x14c>
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	6861      	ldr	r1, [r4, #4]
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	bfde      	ittt	le
 8006a6e:	2330      	movle	r3, #48	; 0x30
 8006a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a78:	1b52      	subs	r2, r2, r5
 8006a7a:	6122      	str	r2, [r4, #16]
 8006a7c:	f8cd a000 	str.w	sl, [sp]
 8006a80:	464b      	mov	r3, r9
 8006a82:	aa03      	add	r2, sp, #12
 8006a84:	4621      	mov	r1, r4
 8006a86:	4640      	mov	r0, r8
 8006a88:	f7ff fee2 	bl	8006850 <_printf_common>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d14c      	bne.n	8006b2a <_printf_i+0x1fe>
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	b004      	add	sp, #16
 8006a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9a:	4835      	ldr	r0, [pc, #212]	; (8006b70 <_printf_i+0x244>)
 8006a9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006aa0:	6829      	ldr	r1, [r5, #0]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aa8:	6029      	str	r1, [r5, #0]
 8006aaa:	061d      	lsls	r5, r3, #24
 8006aac:	d514      	bpl.n	8006ad8 <_printf_i+0x1ac>
 8006aae:	07df      	lsls	r7, r3, #31
 8006ab0:	bf44      	itt	mi
 8006ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab6:	6023      	strmi	r3, [r4, #0]
 8006ab8:	b91e      	cbnz	r6, 8006ac2 <_printf_i+0x196>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	f023 0320 	bic.w	r3, r3, #32
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	e7b0      	b.n	8006a28 <_printf_i+0xfc>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	2378      	movs	r3, #120	; 0x78
 8006ad0:	4828      	ldr	r0, [pc, #160]	; (8006b74 <_printf_i+0x248>)
 8006ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ad6:	e7e3      	b.n	8006aa0 <_printf_i+0x174>
 8006ad8:	0659      	lsls	r1, r3, #25
 8006ada:	bf48      	it	mi
 8006adc:	b2b6      	uxthmi	r6, r6
 8006ade:	e7e6      	b.n	8006aae <_printf_i+0x182>
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	e7bb      	b.n	8006a5c <_printf_i+0x130>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	6826      	ldr	r6, [r4, #0]
 8006ae8:	6961      	ldr	r1, [r4, #20]
 8006aea:	1d18      	adds	r0, r3, #4
 8006aec:	6028      	str	r0, [r5, #0]
 8006aee:	0635      	lsls	r5, r6, #24
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	d501      	bpl.n	8006af8 <_printf_i+0x1cc>
 8006af4:	6019      	str	r1, [r3, #0]
 8006af6:	e002      	b.n	8006afe <_printf_i+0x1d2>
 8006af8:	0670      	lsls	r0, r6, #25
 8006afa:	d5fb      	bpl.n	8006af4 <_printf_i+0x1c8>
 8006afc:	8019      	strh	r1, [r3, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	4615      	mov	r5, r2
 8006b04:	e7ba      	b.n	8006a7c <_printf_i+0x150>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	602a      	str	r2, [r5, #0]
 8006b0c:	681d      	ldr	r5, [r3, #0]
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	2100      	movs	r1, #0
 8006b12:	4628      	mov	r0, r5
 8006b14:	f7f9 fb64 	bl	80001e0 <memchr>
 8006b18:	b108      	cbz	r0, 8006b1e <_printf_i+0x1f2>
 8006b1a:	1b40      	subs	r0, r0, r5
 8006b1c:	6060      	str	r0, [r4, #4]
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	2300      	movs	r3, #0
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b28:	e7a8      	b.n	8006a7c <_printf_i+0x150>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d0ab      	beq.n	8006a90 <_printf_i+0x164>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	d413      	bmi.n	8006b66 <_printf_i+0x23a>
 8006b3e:	68e0      	ldr	r0, [r4, #12]
 8006b40:	9b03      	ldr	r3, [sp, #12]
 8006b42:	4298      	cmp	r0, r3
 8006b44:	bfb8      	it	lt
 8006b46:	4618      	movlt	r0, r3
 8006b48:	e7a4      	b.n	8006a94 <_printf_i+0x168>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d09b      	beq.n	8006a90 <_printf_i+0x164>
 8006b58:	3501      	adds	r5, #1
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	9903      	ldr	r1, [sp, #12]
 8006b5e:	1a5b      	subs	r3, r3, r1
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dcf2      	bgt.n	8006b4a <_printf_i+0x21e>
 8006b64:	e7eb      	b.n	8006b3e <_printf_i+0x212>
 8006b66:	2500      	movs	r5, #0
 8006b68:	f104 0619 	add.w	r6, r4, #25
 8006b6c:	e7f5      	b.n	8006b5a <_printf_i+0x22e>
 8006b6e:	bf00      	nop
 8006b70:	08006ed5 	.word	0x08006ed5
 8006b74:	08006ee6 	.word	0x08006ee6

08006b78 <memcpy>:
 8006b78:	440a      	add	r2, r1
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b80:	d100      	bne.n	8006b84 <memcpy+0xc>
 8006b82:	4770      	bx	lr
 8006b84:	b510      	push	{r4, lr}
 8006b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b8e:	4291      	cmp	r1, r2
 8006b90:	d1f9      	bne.n	8006b86 <memcpy+0xe>
 8006b92:	bd10      	pop	{r4, pc}

08006b94 <memmove>:
 8006b94:	4288      	cmp	r0, r1
 8006b96:	b510      	push	{r4, lr}
 8006b98:	eb01 0402 	add.w	r4, r1, r2
 8006b9c:	d902      	bls.n	8006ba4 <memmove+0x10>
 8006b9e:	4284      	cmp	r4, r0
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	d807      	bhi.n	8006bb4 <memmove+0x20>
 8006ba4:	1e43      	subs	r3, r0, #1
 8006ba6:	42a1      	cmp	r1, r4
 8006ba8:	d008      	beq.n	8006bbc <memmove+0x28>
 8006baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bb2:	e7f8      	b.n	8006ba6 <memmove+0x12>
 8006bb4:	4402      	add	r2, r0
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	428a      	cmp	r2, r1
 8006bba:	d100      	bne.n	8006bbe <memmove+0x2a>
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bc6:	e7f7      	b.n	8006bb8 <memmove+0x24>

08006bc8 <_free_r>:
 8006bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d044      	beq.n	8006c58 <_free_r+0x90>
 8006bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bda:	bfb8      	it	lt
 8006bdc:	18e4      	addlt	r4, r4, r3
 8006bde:	f000 f913 	bl	8006e08 <__malloc_lock>
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <_free_r+0x94>)
 8006be4:	9801      	ldr	r0, [sp, #4]
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	b933      	cbnz	r3, 8006bf8 <_free_r+0x30>
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6014      	str	r4, [r2, #0]
 8006bee:	b003      	add	sp, #12
 8006bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf4:	f000 b90e 	b.w	8006e14 <__malloc_unlock>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d908      	bls.n	8006c0e <_free_r+0x46>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf01      	itttt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	1949      	addeq	r1, r1, r5
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	e7ed      	b.n	8006bea <_free_r+0x22>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x50>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x46>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x70>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1e0      	bne.n	8006bee <_free_r+0x26>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	4421      	add	r1, r4
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	e7da      	b.n	8006bee <_free_r+0x26>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x78>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d6      	b.n	8006bee <_free_r+0x26>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7ca      	b.n	8006bee <_free_r+0x26>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	200006c0 	.word	0x200006c0

08006c60 <sbrk_aligned>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0e      	ldr	r6, [pc, #56]	; (8006c9c <sbrk_aligned+0x3c>)
 8006c64:	460c      	mov	r4, r1
 8006c66:	6831      	ldr	r1, [r6, #0]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b911      	cbnz	r1, 8006c72 <sbrk_aligned+0x12>
 8006c6c:	f000 f8bc 	bl	8006de8 <_sbrk_r>
 8006c70:	6030      	str	r0, [r6, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 f8b7 	bl	8006de8 <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d00a      	beq.n	8006c94 <sbrk_aligned+0x34>
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d007      	beq.n	8006c98 <sbrk_aligned+0x38>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f8ac 	bl	8006de8 <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d101      	bne.n	8006c98 <sbrk_aligned+0x38>
 8006c94:	f04f 34ff 	mov.w	r4, #4294967295
 8006c98:	4620      	mov	r0, r4
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	200006c4 	.word	0x200006c4

08006ca0 <_malloc_r>:
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d905      	bls.n	8006cc8 <_malloc_r+0x28>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	4e2e      	ldr	r6, [pc, #184]	; (8006d84 <_malloc_r+0xe4>)
 8006cca:	f000 f89d 	bl	8006e08 <__malloc_lock>
 8006cce:	6833      	ldr	r3, [r6, #0]
 8006cd0:	461c      	mov	r4, r3
 8006cd2:	bb34      	cbnz	r4, 8006d22 <_malloc_r+0x82>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7ff ffc2 	bl	8006c60 <sbrk_aligned>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	4604      	mov	r4, r0
 8006ce0:	d14d      	bne.n	8006d7e <_malloc_r+0xde>
 8006ce2:	6834      	ldr	r4, [r6, #0]
 8006ce4:	4626      	mov	r6, r4
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d140      	bne.n	8006d6c <_malloc_r+0xcc>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	4631      	mov	r1, r6
 8006cee:	4638      	mov	r0, r7
 8006cf0:	eb04 0803 	add.w	r8, r4, r3
 8006cf4:	f000 f878 	bl	8006de8 <_sbrk_r>
 8006cf8:	4580      	cmp	r8, r0
 8006cfa:	d13a      	bne.n	8006d72 <_malloc_r+0xd2>
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	3503      	adds	r5, #3
 8006d00:	1a6d      	subs	r5, r5, r1
 8006d02:	f025 0503 	bic.w	r5, r5, #3
 8006d06:	3508      	adds	r5, #8
 8006d08:	2d0c      	cmp	r5, #12
 8006d0a:	bf38      	it	cc
 8006d0c:	250c      	movcc	r5, #12
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff ffa5 	bl	8006c60 <sbrk_aligned>
 8006d16:	3001      	adds	r0, #1
 8006d18:	d02b      	beq.n	8006d72 <_malloc_r+0xd2>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	442b      	add	r3, r5
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	e00e      	b.n	8006d40 <_malloc_r+0xa0>
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	1b52      	subs	r2, r2, r5
 8006d26:	d41e      	bmi.n	8006d66 <_malloc_r+0xc6>
 8006d28:	2a0b      	cmp	r2, #11
 8006d2a:	d916      	bls.n	8006d5a <_malloc_r+0xba>
 8006d2c:	1961      	adds	r1, r4, r5
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	6025      	str	r5, [r4, #0]
 8006d32:	bf18      	it	ne
 8006d34:	6059      	strne	r1, [r3, #4]
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	bf08      	it	eq
 8006d3a:	6031      	streq	r1, [r6, #0]
 8006d3c:	5162      	str	r2, [r4, r5]
 8006d3e:	604b      	str	r3, [r1, #4]
 8006d40:	4638      	mov	r0, r7
 8006d42:	f104 060b 	add.w	r6, r4, #11
 8006d46:	f000 f865 	bl	8006e14 <__malloc_unlock>
 8006d4a:	f026 0607 	bic.w	r6, r6, #7
 8006d4e:	1d23      	adds	r3, r4, #4
 8006d50:	1af2      	subs	r2, r6, r3
 8006d52:	d0b6      	beq.n	8006cc2 <_malloc_r+0x22>
 8006d54:	1b9b      	subs	r3, r3, r6
 8006d56:	50a3      	str	r3, [r4, r2]
 8006d58:	e7b3      	b.n	8006cc2 <_malloc_r+0x22>
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	bf0c      	ite	eq
 8006d60:	6032      	streq	r2, [r6, #0]
 8006d62:	605a      	strne	r2, [r3, #4]
 8006d64:	e7ec      	b.n	8006d40 <_malloc_r+0xa0>
 8006d66:	4623      	mov	r3, r4
 8006d68:	6864      	ldr	r4, [r4, #4]
 8006d6a:	e7b2      	b.n	8006cd2 <_malloc_r+0x32>
 8006d6c:	4634      	mov	r4, r6
 8006d6e:	6876      	ldr	r6, [r6, #4]
 8006d70:	e7b9      	b.n	8006ce6 <_malloc_r+0x46>
 8006d72:	230c      	movs	r3, #12
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4638      	mov	r0, r7
 8006d78:	f000 f84c 	bl	8006e14 <__malloc_unlock>
 8006d7c:	e7a1      	b.n	8006cc2 <_malloc_r+0x22>
 8006d7e:	6025      	str	r5, [r4, #0]
 8006d80:	e7de      	b.n	8006d40 <_malloc_r+0xa0>
 8006d82:	bf00      	nop
 8006d84:	200006c0 	.word	0x200006c0

08006d88 <_realloc_r>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4614      	mov	r4, r2
 8006d90:	460e      	mov	r6, r1
 8006d92:	b921      	cbnz	r1, 8006d9e <_realloc_r+0x16>
 8006d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d98:	4611      	mov	r1, r2
 8006d9a:	f7ff bf81 	b.w	8006ca0 <_malloc_r>
 8006d9e:	b92a      	cbnz	r2, 8006dac <_realloc_r+0x24>
 8006da0:	f7ff ff12 	bl	8006bc8 <_free_r>
 8006da4:	4625      	mov	r5, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dac:	f000 f838 	bl	8006e20 <_malloc_usable_size_r>
 8006db0:	4284      	cmp	r4, r0
 8006db2:	4607      	mov	r7, r0
 8006db4:	d802      	bhi.n	8006dbc <_realloc_r+0x34>
 8006db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dba:	d812      	bhi.n	8006de2 <_realloc_r+0x5a>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7ff ff6e 	bl	8006ca0 <_malloc_r>
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0ed      	beq.n	8006da6 <_realloc_r+0x1e>
 8006dca:	42bc      	cmp	r4, r7
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4631      	mov	r1, r6
 8006dd0:	bf28      	it	cs
 8006dd2:	463a      	movcs	r2, r7
 8006dd4:	f7ff fed0 	bl	8006b78 <memcpy>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7ff fef4 	bl	8006bc8 <_free_r>
 8006de0:	e7e1      	b.n	8006da6 <_realloc_r+0x1e>
 8006de2:	4635      	mov	r5, r6
 8006de4:	e7df      	b.n	8006da6 <_realloc_r+0x1e>
	...

08006de8 <_sbrk_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4d06      	ldr	r5, [pc, #24]	; (8006e04 <_sbrk_r+0x1c>)
 8006dec:	2300      	movs	r3, #0
 8006dee:	4604      	mov	r4, r0
 8006df0:	4608      	mov	r0, r1
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	f7f9 fec6 	bl	8000b84 <_sbrk>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_sbrk_r+0x1a>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_sbrk_r+0x1a>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	200006c8 	.word	0x200006c8

08006e08 <__malloc_lock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__malloc_lock+0x8>)
 8006e0a:	f000 b811 	b.w	8006e30 <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	200006cc 	.word	0x200006cc

08006e14 <__malloc_unlock>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__malloc_unlock+0x8>)
 8006e16:	f000 b80c 	b.w	8006e32 <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	200006cc 	.word	0x200006cc

08006e20 <_malloc_usable_size_r>:
 8006e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e24:	1f18      	subs	r0, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bfbc      	itt	lt
 8006e2a:	580b      	ldrlt	r3, [r1, r0]
 8006e2c:	18c0      	addlt	r0, r0, r3
 8006e2e:	4770      	bx	lr

08006e30 <__retarget_lock_acquire_recursive>:
 8006e30:	4770      	bx	lr

08006e32 <__retarget_lock_release_recursive>:
 8006e32:	4770      	bx	lr

08006e34 <_init>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr

08006e40 <_fini>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr
