
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ecc  08006ecc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000070  08006f44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08006f44  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba7  00000000  00000000  00031a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018953  00000000  00000000  00036138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f2f  00000000  00000000  0004ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d11e  00000000  00000000  000629ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  000efb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e14 	.word	0x08006e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006e14 	.word	0x08006e14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 fd37 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 fd50 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2045      	movs	r0, #69	; 0x45
 80005bc:	f000 fd2f 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005c0:	2045      	movs	r0, #69	; 0x45
 80005c2:	f000 fd48 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x68>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x68>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x68>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fb79 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f855 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ffc1 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000652:	f000 facf 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000656:	f7ff ff95 	bl	8000584 <MX_DMA_Init>
  MX_FATFS_Init();
 800065a:	f005 f81f 	bl	800569c <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800065e:	f000 f8d7 	bl	8000810 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	491c      	ldr	r1, [pc, #112]	; (80006d8 <main+0x98>)
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <main+0x9c>)
 8000668:	f003 fb0c 	bl	8003c84 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BYTE buf[32] = "Hello world";	// file copy buffer
 800066c:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <main+0xa0>)
 800066e:	463b      	mov	r3, r7
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
  uint32_t bw, br;

  // 1. FS Initialization("0:/"drive allocation)
//  if((retSD = f_mount(&SDFatFS, "0:/", 1)) == FR_OK)
  if((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK)
 8000686:	2201      	movs	r2, #1
 8000688:	4916      	ldr	r1, [pc, #88]	; (80006e4 <main+0xa4>)
 800068a:	4817      	ldr	r0, [pc, #92]	; (80006e8 <main+0xa8>)
 800068c:	f005 fe80 	bl	8006390 <f_mount>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <main+0xac>)
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <main+0xac>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10c      	bne.n	80006ba <main+0x7a>
  {
	  sprintf(str, "f_mount OK %d\n", retSD);
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0xac>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4912      	ldr	r1, [pc, #72]	; (80006f0 <main+0xb0>)
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0x98>)
 80006aa:	f005 ff45 	bl	8006538 <siprintf>
	  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006ae:	230a      	movs	r3, #10
 80006b0:	2228      	movs	r2, #40	; 0x28
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <main+0x98>)
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <main+0x9c>)
 80006b6:	f003 fa53 	bl	8003b60 <HAL_UART_Transmit>
  }

  while (1)
  {

	  if(flag1)
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <main+0xb4>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0fb      	beq.n	80006ba <main+0x7a>
	  {
		  flag1 = 0;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, str, STR_SIZE, 10);
 80006c8:	230a      	movs	r3, #10
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	4902      	ldr	r1, [pc, #8]	; (80006d8 <main+0x98>)
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <main+0x9c>)
 80006d0:	f003 fa46 	bl	8003b60 <HAL_UART_Transmit>
	  if(flag1)
 80006d4:	e7f1      	b.n	80006ba <main+0x7a>
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	20000200 	.word	0x20000200
 80006e0:	08006e3c 	.word	0x08006e3c
 80006e4:	2000024c 	.word	0x2000024c
 80006e8:	20000250 	.word	0x20000250
 80006ec:	20000248 	.word	0x20000248
 80006f0:	08006e2c 	.word	0x08006e2c
 80006f4:	200000b4 	.word	0x200000b4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 ff0e 	bl	8006528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SystemClock_Config+0xc8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <SystemClock_Config+0xc8>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SystemClock_Config+0xc8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <SystemClock_Config+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <SystemClock_Config+0xcc>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <SystemClock_Config+0xcc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000774:	2305      	movs	r3, #5
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fa17 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f83c 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2103      	movs	r1, #3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fc79 	bl	80020a0 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b4:	f000 f826 	bl	8000804 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3750      	adds	r7, #80	; 0x50
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_UART_RxCpltCallback+0x2c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d107      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart1, str, STR_SIZE);
 80007da:	2228      	movs	r2, #40	; 0x28
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <HAL_UART_RxCpltCallback+0x30>)
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <HAL_UART_RxCpltCallback+0x34>)
 80007e0:	f003 fa50 	bl	8003c84 <HAL_UART_Receive_IT>
		flag1 = 1;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_UART_RxCpltCallback+0x38>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	}
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40011000 	.word	0x40011000
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	20000200 	.word	0x20000200
 8000800:	200000b4 	.word	0x200000b4

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <MX_SDIO_SD_Init+0x3c>)
 8000818:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	200000b8 	.word	0x200000b8
 800084c:	40012c00 	.word	0x40012c00

08000850 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a77      	ldr	r2, [pc, #476]	; (8000a4c <HAL_SD_MspInit+0x1fc>)
 800086e:	4293      	cmp	r3, r2
 8000870:	f040 80e8 	bne.w	8000a44 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	4b75      	ldr	r3, [pc, #468]	; (8000a50 <HAL_SD_MspInit+0x200>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	4a74      	ldr	r2, [pc, #464]	; (8000a50 <HAL_SD_MspInit+0x200>)
 800087e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000882:	6453      	str	r3, [r2, #68]	; 0x44
 8000884:	4b72      	ldr	r3, [pc, #456]	; (8000a50 <HAL_SD_MspInit+0x200>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	4b6e      	ldr	r3, [pc, #440]	; (8000a50 <HAL_SD_MspInit+0x200>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a6d      	ldr	r2, [pc, #436]	; (8000a50 <HAL_SD_MspInit+0x200>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b6b      	ldr	r3, [pc, #428]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	4b67      	ldr	r3, [pc, #412]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a66      	ldr	r2, [pc, #408]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b64      	ldr	r3, [pc, #400]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a5f      	ldr	r2, [pc, #380]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <HAL_SD_MspInit+0x200>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008f4:	230c      	movs	r3, #12
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4855      	ldr	r0, [pc, #340]	; (8000a54 <HAL_SD_MspInit+0x204>)
 8000900:	f000 ffd2 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000916:	230c      	movs	r3, #12
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	484d      	ldr	r0, [pc, #308]	; (8000a58 <HAL_SD_MspInit+0x208>)
 8000922:	f000 ffc1 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000926:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000938:	230c      	movs	r3, #12
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4846      	ldr	r0, [pc, #280]	; (8000a5c <HAL_SD_MspInit+0x20c>)
 8000944:	f000 ffb0 	bl	80018a8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000948:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800094a:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <HAL_SD_MspInit+0x214>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000950:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000954:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000974:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000978:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800097c:	2220      	movs	r2, #32
 800097e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000988:	2204      	movs	r2, #4
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800098c:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800098e:	2203      	movs	r2, #3
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_SD_MspInit+0x210>)
 8000994:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <HAL_SD_MspInit+0x210>)
 800099c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_SD_MspInit+0x210>)
 80009a4:	f000 fb72 	bl	800108c <HAL_DMA_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 80009ae:	f7ff ff29 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <HAL_SD_MspInit+0x210>)
 80009b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009b8:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <HAL_SD_MspInit+0x210>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009c0:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <HAL_SD_MspInit+0x21c>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009f2:	2220      	movs	r2, #32
 80009f4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_SD_MspInit+0x218>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a04:	2203      	movs	r2, #3
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a1a:	f000 fb37 	bl	800108c <HAL_DMA_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8000a24:	f7ff feee 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_SD_MspInit+0x218>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2031      	movs	r0, #49	; 0x31
 8000a3a:	f000 faf0 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a3e:	2031      	movs	r0, #49	; 0x31
 8000a40:	f000 fb09 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	2000013c 	.word	0x2000013c
 8000a64:	40026458 	.word	0x40026458
 8000a68:	2000019c 	.word	0x2000019c
 8000a6c:	400264a0 	.word	0x400264a0

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f968 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <USART1_IRQHandler+0x10>)
 8000b1a:	f003 f8e3 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000200 	.word	0x20000200

08000b28 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <SDIO_IRQHandler+0x10>)
 8000b2e:	f001 ff0f 	bl	8002950 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000b8 	.word	0x200000b8

08000b3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <DMA2_Stream3_IRQHandler+0x10>)
 8000b42:	f000 fc3b 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000013c 	.word	0x2000013c

08000b50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <DMA2_Stream6_IRQHandler+0x10>)
 8000b56:	f000 fc31 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000019c 	.word	0x2000019c

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f005 fc9e 	bl	80064d4 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200001fc 	.word	0x200001fc
 8000bcc:	200006d0 	.word	0x200006d0

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f002 ff4b 	bl	8003ac6 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f7ff fde5 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000200 	.word	0x20000200
 8000c44:	40011000 	.word	0x40011000

08000c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x94>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d134      	bne.n	8000cd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0x9c>)
 8000cc0:	f000 fdf2 	bl	80018a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2025      	movs	r0, #37	; 0x25
 8000cca:	f000 f9a8 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cce:	2025      	movs	r0, #37	; 0x25
 8000cd0:	f000 f9c1 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ff5d 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f005 fbe3 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc91 	bl	8000640 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d2c:	08006ed4 	.word	0x08006ed4
  ldr r2, =_sbss
 8000d30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d34:	200006d0 	.word	0x200006d0

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe7e 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000244 	.word	0x20000244

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000244 	.word	0x20000244

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff feb6 	bl	8000e08 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e099      	b.n	80011dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c8:	e00f      	b.n	80010ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ca:	f7ff fe9d 	bl	8000e08 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d908      	bls.n	80010ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2220      	movs	r2, #32
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e078      	b.n	80011dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e8      	bne.n	80010ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_DMA_Init+0x158>)
 8001104:	4013      	ands	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2b04      	cmp	r3, #4
 8001142:	d107      	bne.n	8001154 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4313      	orrs	r3, r2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f023 0307 	bic.w	r3, r3, #7
 800116a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	2b04      	cmp	r3, #4
 800117c:	d117      	bne.n	80011ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00e      	beq.n	80011ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fb0d 	bl	80017b0 <DMA_CheckFifoParam>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011aa:	2301      	movs	r3, #1
 80011ac:	e016      	b.n	80011dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fac4 	bl	8001744 <DMA_CalcBaseAndBitshift>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	223f      	movs	r2, #63	; 0x3f
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	f010803f 	.word	0xf010803f

080011e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_DMA_Start_IT+0x26>
 800120a:	2302      	movs	r3, #2
 800120c:	e040      	b.n	8001290 <HAL_DMA_Start_IT+0xa8>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d12f      	bne.n	8001282 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2202      	movs	r2, #2
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 fa56 	bl	80016e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0216 	orr.w	r2, r2, #22
 8001256:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0208 	orr.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800128a:	2302      	movs	r3, #2
 800128c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a6:	f7ff fdaf 	bl	8000e08 <HAL_GetTick>
 80012aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d008      	beq.n	80012ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e052      	b.n	8001370 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0216 	bic.w	r2, r2, #22
 80012d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <HAL_DMA_Abort+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131a:	e013      	b.n	8001344 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131c:	f7ff fd74 	bl	8000e08 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b05      	cmp	r3, #5
 8001328:	d90c      	bls.n	8001344 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e015      	b.n	8001370 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e4      	bne.n	800131c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	223f      	movs	r2, #63	; 0x3f
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d004      	beq.n	8001396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00c      	b.n	80013b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c8:	4b8e      	ldr	r3, [pc, #568]	; (8001604 <HAL_DMA_IRQHandler+0x248>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a8e      	ldr	r2, [pc, #568]	; (8001608 <HAL_DMA_IRQHandler+0x24c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2208      	movs	r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2201      	movs	r2, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d012      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	2201      	movs	r2, #1
 800144c:	409a      	lsls	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2204      	movs	r2, #4
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	2204      	movs	r2, #4
 8001482:	409a      	lsls	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	2210      	movs	r2, #16
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d043      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03c      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2210      	movs	r2, #16
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d024      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	e01f      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e016      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2220      	movs	r2, #32
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 808f 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8087 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2220      	movs	r2, #32
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b05      	cmp	r3, #5
 8001564:	d136      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0216 	bic.w	r2, r2, #22
 8001574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_DMA_IRQHandler+0x1da>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0208 	bic.w	r2, r2, #8
 80015a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	223f      	movs	r2, #63	; 0x3f
 80015ac:	409a      	lsls	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d07e      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
        }
        return;
 80015d2:	e079      	b.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01d      	beq.n	800161e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d031      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
 8001600:	e02c      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
 800161c:	e01e      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0210 	bic.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d307      	bcc.n	80016a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <HAL_DMA_IRQHandler+0x2cc>
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
 80016c6:	e000      	b.n	80016ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80016c8:	bf00      	nop
    }
  }
}
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d108      	bne.n	8001728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001726:	e007      	b.n	8001738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	60da      	str	r2, [r3, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3b10      	subs	r3, #16
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <DMA_CalcBaseAndBitshift+0x68>)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d909      	bls.n	8001786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	1d1a      	adds	r2, r3, #4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58
 8001784:	e007      	b.n	8001796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	aaaaaaab 	.word	0xaaaaaaab
 80017ac:	08006e74 	.word	0x08006e74

080017b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11f      	bne.n	800180a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d856      	bhi.n	800187e <DMA_CheckFifoParam+0xce>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <DMA_CheckFifoParam+0x28>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017fb 	.word	0x080017fb
 80017e0:	080017e9 	.word	0x080017e9
 80017e4:	0800187f 	.word	0x0800187f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d046      	beq.n	8001882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f8:	e043      	b.n	8001882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001802:	d140      	bne.n	8001886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001808:	e03d      	b.n	8001886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001812:	d121      	bne.n	8001858 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d837      	bhi.n	800188a <DMA_CheckFifoParam+0xda>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <DMA_CheckFifoParam+0x70>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001831 	.word	0x08001831
 8001824:	08001837 	.word	0x08001837
 8001828:	08001831 	.word	0x08001831
 800182c:	08001849 	.word	0x08001849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
      break;
 8001834:	e030      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d025      	beq.n	800188e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001846:	e022      	b.n	800188e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001850:	d11f      	bne.n	8001892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001856:	e01c      	b.n	8001892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d903      	bls.n	8001866 <DMA_CheckFifoParam+0xb6>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d003      	beq.n	800186c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001864:	e018      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
      break;
 800186a:	e015      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      break;
 800187c:	e00b      	b.n	8001896 <DMA_CheckFifoParam+0xe6>
      break;
 800187e:	bf00      	nop
 8001880:	e00a      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
 8001884:	e008      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
 8001888:	e006      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;   
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <DMA_CheckFifoParam+0xe8>
      break;
 8001896:	bf00      	nop
    }
  } 
  
  return status; 
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e159      	b.n	8001b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8148 	bne.w	8001b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d130      	bne.n	800195c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0201 	and.w	r2, r3, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b03      	cmp	r3, #3
 8001966:	d017      	beq.n	8001998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a2 	beq.w	8001b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b54      	ldr	r3, [pc, #336]	; (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x202>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fe>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a46      	ldr	r2, [pc, #280]	; (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x1f6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a45      	ldr	r2, [pc, #276]	; (8001ba8 <HAL_GPIO_Init+0x300>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x1f2>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f aea2 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e267      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d075      	beq.n	8001cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf2:	d10b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d157      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e242      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x74>
 8001c16:	4b76      	ldr	r3, [pc, #472]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a75      	ldr	r2, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6f      	ldr	r2, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6c      	ldr	r2, [pc, #432]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c48:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a68      	ldr	r2, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8ce 	bl	8000e08 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8ca 	bl	8000e08 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e207      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff f8ba 	bl	8000e08 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f8b6 	bl	8000e08 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1f3      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1c7      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f86f 	bl	8000e08 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f86b 	bl	8000e08 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1a8      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f84e 	bl	8000e08 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff f84a 	bl	8000e08 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e187      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d036      	beq.n	8001e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_RCC_OscConfig+0x248>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff f82e 	bl	8000e08 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff f82a 	bl	8000e08 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e167      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x200>
 8001dce:	e01b      	b.n	8001e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x248>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f817 	bl	8000e08 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	e00e      	b.n	8001dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff f813 	bl	8000e08 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d907      	bls.n	8001dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e150      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470000 	.word	0x42470000
 8001df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ea      	bne.n	8001dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8097 	beq.w	8001f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b81      	ldr	r3, [pc, #516]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b7d      	ldr	r3, [pc, #500]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a7c      	ldr	r2, [pc, #496]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b7a      	ldr	r3, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b77      	ldr	r3, [pc, #476]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	4b74      	ldr	r3, [pc, #464]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a73      	ldr	r2, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe ffd3 	bl	8000e08 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7fe ffcf 	bl	8000e08 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e10c      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2ea>
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x324>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x30c>
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b5c      	ldr	r3, [pc, #368]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x324>
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a57      	ldr	r2, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7fe ff94 	bl	8000e08 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ff90 	bl	8000e08 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0cb      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ee      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x334>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7fe ff7e 	bl	8000e08 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7fe ff7a 	bl	8000e08 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0b5      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ee      	bne.n	8001f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a38      	ldr	r2, [pc, #224]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a1 	beq.w	8002090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d05c      	beq.n	8002014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d141      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff4e 	bl	8000e08 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe ff4a 	bl	8000e08 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e087      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	019b      	lsls	r3, r3, #6
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	491b      	ldr	r1, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff23 	bl	8000e08 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ff1f 	bl	8000e08 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e05c      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x416>
 8001fe4:	e054      	b.n	8002090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff0c 	bl	8000e08 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff08 	bl	8000e08 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e045      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x444>
 8002012:	e03d      	b.n	8002090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e038      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
 8002020:	40023800 	.word	0x40023800
 8002024:	40007000 	.word	0x40007000
 8002028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x4ec>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d028      	beq.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d121      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d11a      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	4293      	cmp	r3, r2
 8002066:	d111      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0cc      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d90c      	bls.n	80020dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b65      	ldr	r3, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d044      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d119      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d003      	beq.n	800215e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e067      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7fe fe3a 	bl	8000e08 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fe36 	bl	8000e08 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e04f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d20c      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fd9a 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00
 800225c:	40023800 	.word	0x40023800
 8002260:	08006e5c 	.word	0x08006e5c
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002270:	b090      	sub	sp, #64	; 0x40
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
 8002278:	2300      	movs	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d00d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 8002290:	2b08      	cmp	r3, #8
 8002292:	f200 80a1 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 800229a:	2b04      	cmp	r3, #4
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800229e:	e09b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022a4:	e09b      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022aa:	e098      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b6:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d028      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	2200      	movs	r2, #0
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	627a      	str	r2, [r7, #36]	; 0x24
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d4:	2100      	movs	r1, #0
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d8:	fb03 f201 	mul.w	r2, r3, r1
 80022dc:	2300      	movs	r3, #0
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	4a43      	ldr	r2, [pc, #268]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e6:	fba0 1202 	umull	r1, r2, r0, r2
 80022ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ec:	460a      	mov	r2, r1
 80022ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	4413      	add	r3, r2
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	2200      	movs	r2, #0
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002306:	f7fd ffbb 	bl	8000280 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4613      	mov	r3, r2
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002312:	e053      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	2200      	movs	r2, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	617a      	str	r2, [r7, #20]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002326:	f04f 0b00 	mov.w	fp, #0
 800232a:	4652      	mov	r2, sl
 800232c:	465b      	mov	r3, fp
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	0159      	lsls	r1, r3, #5
 8002338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233c:	0150      	lsls	r0, r2, #5
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	ebb2 080a 	subs.w	r8, r2, sl
 8002346:	eb63 090b 	sbc.w	r9, r3, fp
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002356:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800235a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235e:	ebb2 0408 	subs.w	r4, r2, r8
 8002362:	eb63 0509 	sbc.w	r5, r3, r9
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	00eb      	lsls	r3, r5, #3
 8002370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002374:	00e2      	lsls	r2, r4, #3
 8002376:	4614      	mov	r4, r2
 8002378:	461d      	mov	r5, r3
 800237a:	eb14 030a 	adds.w	r3, r4, sl
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	eb45 030b 	adc.w	r3, r5, fp
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	2200      	movs	r2, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b0:	f7fd ff66 	bl	8000280 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3740      	adds	r7, #64	; 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	017d7840 	.word	0x017d7840

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08006e6c 	.word	0x08006e6c

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08006e6c 	.word	0x08006e6c

08002460 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e022      	b.n	80024b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe f9e3 	bl	8000850 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f814 	bl	80024c0 <HAL_SD_InitCard>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00a      	b.n	80024b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b08e      	sub	sp, #56	; 0x38
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80024dc:	2376      	movs	r3, #118	; 0x76
 80024de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681d      	ldr	r5, [r3, #0]
 80024e4:	466c      	mov	r4, sp
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f8:	4628      	mov	r0, r5
 80024fa:	f002 fb5b 	bl	8004bb4 <SDIO_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e04f      	b.n	80025b0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_SD_InitCard+0xf8>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fb93 	bl	8004c46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_SD_InitCard+0xf8>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe fc7a 	bl	8000e20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f001 f805 	bl	800353c <SD_PowerON>
 8002532:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02e      	b.n	80025b0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 ff24 	bl	80033a0 <SD_InitCard>
 8002558:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01b      	b.n	80025b0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fbf2 	bl	8004d6a <SDMMC_CmdBlockLength>
 8002586:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_SD_InitCard+0xfc>)
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	422580a0 	.word	0x422580a0
 80025bc:	004005ff 	.word	0x004005ff

080025c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0c0      	b.n	800276a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	f040 80b9 	bne.w	8002768 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	441a      	add	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	429a      	cmp	r2, r3
 8002608:	d907      	bls.n	800261a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0a7      	b.n	800276a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800264c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2200      	movs	r2, #0
 8002654:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3380      	adds	r3, #128	; 0x80
 8002684:	4619      	mov	r1, r3
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	025b      	lsls	r3, r3, #9
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	f7fe fdab 	bl	80011e8 <HAL_DMA_Start_IT>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d017      	beq.n	80026c8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e050      	b.n	800276a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d002      	beq.n	80026dc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026e8:	2390      	movs	r3, #144	; 0x90
 80026ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f002 fb05 	bl	8004d12 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d90a      	bls.n	8002724 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2282      	movs	r2, #130	; 0x82
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fb69 	bl	8004df2 <SDMMC_CmdReadMultiBlock>
 8002720:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002722:	e009      	b.n	8002738 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2281      	movs	r2, #129	; 0x81
 8002728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fb3c 	bl	8004dae <SDMMC_CmdReadSingleBlock>
 8002736:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	431a      	orrs	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e002      	b.n	800276a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	080031af 	.word	0x080031af
 8002778:	08003221 	.word	0x08003221
 800277c:	004005ff 	.word	0x004005ff
 8002780:	4225858c 	.word	0x4225858c

08002784 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0c5      	b.n	8002938 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 80be 	bne.w	8002936 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	441a      	add	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d907      	bls.n	80027de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0ac      	b.n	8002938 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002810:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	2200      	movs	r2, #0
 8002818:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	2b01      	cmp	r3, #1
 8002820:	d002      	beq.n	8002828 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d90a      	bls.n	8002844 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22a0      	movs	r2, #160	; 0xa0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fb1d 	bl	8004e7a <SDMMC_CmdWriteMultiBlock>
 8002840:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002842:	e009      	b.n	8002858 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2290      	movs	r2, #144	; 0x90
 8002848:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002850:	4618      	mov	r0, r3
 8002852:	f002 faf0 	bl	8004e36 <SDMMC_CmdWriteSingleBlock>
 8002856:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e059      	b.n	8002938 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2240      	movs	r2, #64	; 0x40
 8002890:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3380      	adds	r3, #128	; 0x80
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	f7fe fc91 	bl	80011e8 <HAL_DMA_Start_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01c      	beq.n	8002906 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80028da:	f023 0302 	bic.w	r3, r3, #2
 80028de:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e018      	b.n	8002938 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002912:	2390      	movs	r3, #144	; 0x90
 8002914:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800291e:	2301      	movs	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f107 0210 	add.w	r2, r7, #16
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 f9f0 	bl	8004d12 <SDIO_ConfigData>

      return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	08003185 	.word	0x08003185
 8002944:	08003221 	.word	0x08003221
 8002948:	004005ff 	.word	0x004005ff
 800294c:	4225858c 	.word	0x4225858c

08002950 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_SD_IRQHandler+0x2e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 ffff 	bl	800397a <SD_Read_IT>
 800297c:	e165      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 808f 	beq.w	8002aac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002996:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80029a6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80029aa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d039      	beq.n	8002a3a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <HAL_SD_IRQHandler+0x8a>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 fa6e 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 80029e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f92f 	bl	8002c5c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <HAL_SD_IRQHandler+0xda>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f002 fed4 	bl	80057d8 <HAL_SD_RxCpltCallback>
 8002a30:	e10b      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f002 fec6 	bl	80057c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a38:	e107      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8102 	beq.w	8002c4a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fa33 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 8002a5a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8f4 	bl	8002c5c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 80e5 	bne.w	8002c4a <HAL_SD_IRQHandler+0x2fa>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80df 	bne.w	8002c4a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f002 fe8d 	bl	80057c4 <HAL_SD_TxCpltCallback>
}
 8002aaa:	e0ce      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_SD_IRQHandler+0x17c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 ffa9 	bl	8003a1c <SD_Write_IT>
 8002aca:	e0be      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad2:	f240 233a 	movw	r3, #570	; 0x23a
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80b6 	beq.w	8002c4a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	f043 0208 	orr.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	f043 0208 	orr.w	r2, r3, #8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f240 723a 	movw	r2, #1850	; 0x73a
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002b78:	f023 0302 	bic.w	r3, r3, #2
 8002b7c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 f99c 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f855 	bl	8002c5c <HAL_SD_ErrorCallback>
}
 8002bb2:	e04a      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d045      	beq.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_SD_IRQHandler+0x282>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d011      	beq.n	8002bf6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_SD_IRQHandler+0x304>)
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fbca 	bl	8001378 <HAL_DMA_Abort_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02f      	beq.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fb68 	bl	80032c4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002bf4:	e029      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <HAL_SD_IRQHandler+0x2ba>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d011      	beq.n	8002c2e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <HAL_SD_IRQHandler+0x308>)
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fbae 	bl	8001378 <HAL_DMA_Abort_IT>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d013      	beq.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fb83 	bl	8003332 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c2c:	e00d      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f002 fdb4 	bl	80057b0 <HAL_SD_AbortCallback>
}
 8002c48:	e7ff      	b.n	8002c4a <HAL_SD_IRQHandler+0x2fa>
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	080032c5 	.word	0x080032c5
 8002c58:	08003333 	.word	0x08003333

08002c5c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7e:	0f9b      	lsrs	r3, r3, #30
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9c:	0e1b      	lsrs	r3, r3, #24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd0:	0d1b      	lsrs	r3, r3, #20
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cee:	0bdb      	lsrs	r3, r3, #15
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d00:	0b9b      	lsrs	r3, r3, #14
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d24:	0b1b      	lsrs	r3, r3, #12
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d163      	bne.n	8002e08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d50:	0f92      	lsrs	r2, r2, #30
 8002d52:	431a      	orrs	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5c:	0edb      	lsrs	r3, r3, #27
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	0e1b      	lsrs	r3, r3, #24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	0bdb      	lsrs	r3, r3, #15
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002dd2:	fb03 f202 	mul.w	r2, r3, r2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7a1b      	ldrb	r3, [r3, #8]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002df4:	0a52      	lsrs	r2, r2, #9
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60
 8002e06:	e031      	b.n	8002e6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d11d      	bne.n	8002e4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	029a      	lsls	r2, r3, #10
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60
 8002e4a:	e00f      	b.n	8002e6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_SD_GetCardCSD+0x344>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e09d      	b.n	8002fa8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e70:	0b9b      	lsrs	r3, r3, #14
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	09db      	lsrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	0fdb      	lsrs	r3, r3, #31
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	0f5b      	lsrs	r3, r3, #29
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	0d9b      	lsrs	r3, r3, #22
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	0bdb      	lsrs	r3, r3, #15
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	0b9b      	lsrs	r3, r3, #14
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	0b5b      	lsrs	r3, r3, #13
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	0b1b      	lsrs	r3, r3, #12
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	004005ff 	.word	0x004005ff

08002fb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b08e      	sub	sp, #56	; 0x38
 8003014:	af04      	add	r7, sp, #16
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	2b03      	cmp	r3, #3
 800302e:	d02e      	beq.n	800308e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d106      	bne.n	8003046 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
 8003044:	e029      	b.n	800309a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304c:	d10a      	bne.n	8003064 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fb2a 	bl	80036a8 <SD_WideBus_Enable>
 8003054:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
 8003062:	e01a      	b.n	800309a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb67 	bl	800373e <SD_WideBus_Disable>
 8003070:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
 800307e:	e00c      	b.n	800309a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
 800308c:	e005      	b.n	800309a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_SD_ConfigWideBusOperation+0x130>)
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030b8:	e01f      	b.n	80030fa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681d      	ldr	r5, [r3, #0]
 80030e0:	466c      	mov	r4, sp
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f4:	4628      	mov	r0, r5
 80030f6:	f001 fd5d 	bl	8004bb4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fe31 	bl	8004d6a <SDMMC_CmdBlockLength>
 8003108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003136:	4618      	mov	r0, r3
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bdb0      	pop	{r4, r5, r7, pc}
 800313e:	bf00      	nop
 8003140:	004005ff 	.word	0x004005ff

08003144 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa7e 	bl	8003658 <SD_SendStatus>
 800315c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	0a5b      	lsrs	r3, r3, #9
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800317a:	693b      	ldr	r3, [r7, #16]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b82      	cmp	r3, #130	; 0x82
 80031c2:	d111      	bne.n	80031e8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 fe79 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 80031ce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff fd3a 	bl	8002c5c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0208 	bic.w	r2, r2, #8
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003200:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f002 fae1 	bl	80057d8 <HAL_SD_RxCpltCallback>
#endif
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fa4e 	bl	80016d0 <HAL_DMA_GetError>
 8003234:	4603      	mov	r3, r0
 8003236:	2b02      	cmp	r3, #2
 8003238:	d03e      	beq.n	80032b8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d002      	beq.n	8003256 <SD_DMAError+0x36>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12d      	bne.n	80032b2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <SD_DMAError+0xa0>)
 800325c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff62 	bl	8003144 <HAL_SD_GetCardState>
 8003280:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d002      	beq.n	800328e <SD_DMAError+0x6e>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d10a      	bne.n	80032a4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f001 fe14 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 8003298:	4602      	mov	r2, r0
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff fcd2 	bl	8002c5c <HAL_SD_ErrorCallback>
#endif
  }
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	004005ff 	.word	0x004005ff

080032c4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff ff31 	bl	8003144 <HAL_SD_GetCardState>
 80032e2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d002      	beq.n	80032fe <SD_DMATxAbort+0x3a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10a      	bne.n	8003314 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fddc 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	431a      	orrs	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f002 fa47 	bl	80057b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003322:	e002      	b.n	800332a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fc99 	bl	8002c5c <HAL_SD_ErrorCallback>
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f240 523a 	movw	r2, #1338	; 0x53a
 8003348:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fefa 	bl	8003144 <HAL_SD_GetCardState>
 8003350:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d002      	beq.n	800336c <SD_DMARxAbort+0x3a>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d10a      	bne.n	8003382 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f001 fda5 	bl	8004ec0 <SDMMC_CmdStopTransfer>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f002 fa10 	bl	80057b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003390:	e002      	b.n	8003398 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fc62 	bl	8002c5c <HAL_SD_ErrorCallback>
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b094      	sub	sp, #80	; 0x50
 80033a4:	af04      	add	r7, sp, #16
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fc56 	bl	8004c62 <SDIO_GetPowerState>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033c0:	e0b8      	b.n	8003534 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d02f      	beq.n	800342a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fe80 	bl	80050d4 <SDMMC_CmdSendCID>
 80033d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80033d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80033dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033de:	e0a9      	b.n	8003534 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fc80 	bl	8004cec <SDIO_GetResponse>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2104      	movs	r1, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 fc77 	bl	8004cec <SDIO_GetResponse>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2108      	movs	r1, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fc6e 	bl	8004cec <SDIO_GetResponse>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	210c      	movs	r1, #12
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fc65 	bl	8004cec <SDIO_GetResponse>
 8003422:	4602      	mov	r2, r0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	2b03      	cmp	r3, #3
 8003430:	d00d      	beq.n	800344e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f107 020e 	add.w	r2, r7, #14
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fe86 	bl	800514e <SDMMC_CmdSetRelAdd>
 8003442:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <SD_InitCard+0xae>
    {
      return errorstate;
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	e072      	b.n	8003534 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	2b03      	cmp	r3, #3
 8003454:	d036      	beq.n	80034c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	461a      	mov	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f001 fe50 	bl	8005110 <SDMMC_CmdSendCSD>
 8003470:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	e05b      	b.n	8003534 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fc32 	bl	8004cec <SDIO_GetResponse>
 8003488:	4602      	mov	r2, r0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2104      	movs	r1, #4
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fc29 	bl	8004cec <SDIO_GetResponse>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2108      	movs	r1, #8
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fc20 	bl	8004cec <SDIO_GetResponse>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	210c      	movs	r1, #12
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fc17 	bl	8004cec <SDIO_GetResponse>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2104      	movs	r1, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fc0e 	bl	8004cec <SDIO_GetResponse>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0d1a      	lsrs	r2, r3, #20
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fbc6 	bl	8002c70 <HAL_SD_GetCardCSD>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034ee:	e021      	b.n	8003534 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	2200      	movs	r2, #0
 80034fc:	461c      	mov	r4, r3
 80034fe:	4615      	mov	r5, r2
 8003500:	4622      	mov	r2, r4
 8003502:	462b      	mov	r3, r5
 8003504:	4608      	mov	r0, r1
 8003506:	f001 fcfd 	bl	8004f04 <SDMMC_CmdSelDesel>
 800350a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <SD_InitCard+0x176>
  {
    return errorstate;
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	e00e      	b.n	8003534 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681d      	ldr	r5, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	466c      	mov	r4, sp
 800351e:	f103 0210 	add.w	r2, r3, #16
 8003522:	ca07      	ldmia	r2, {r0, r1, r2}
 8003524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003528:	3304      	adds	r3, #4
 800352a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352c:	4628      	mov	r0, r5
 800352e:	f001 fb41 	bl	8004bb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3740      	adds	r7, #64	; 0x40
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}

0800353c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fcf8 	bl	8004f4a <SDMMC_CmdGoIdleState>
 800355a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	e072      	b.n	800364c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fd0b 	bl	8004f86 <SDMMC_CmdOperCond>
 8003570:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fce1 	bl	8004f4a <SDMMC_CmdGoIdleState>
 8003588:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	e05b      	b.n	800364c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d137      	bne.n	8003612 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fd0b 	bl	8004fc4 <SDMMC_CmdAppCommand>
 80035ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02d      	beq.n	8003612 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035ba:	e047      	b.n	800364c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fcfe 	bl	8004fc4 <SDMMC_CmdAppCommand>
 80035c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	e03b      	b.n	800364c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	491e      	ldr	r1, [pc, #120]	; (8003654 <SD_PowerON+0x118>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fd14 	bl	8005008 <SDMMC_CmdAppOperCommand>
 80035e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035ec:	e02e      	b.n	800364c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fb79 	bl	8004cec <SDIO_GetResponse>
 80035fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	0fdb      	lsrs	r3, r3, #31
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <SD_PowerON+0xcc>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <SD_PowerON+0xce>
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

    count++;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3301      	adds	r3, #1
 8003610:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003618:	4293      	cmp	r3, r2
 800361a:	d802      	bhi.n	8003622 <SD_PowerON+0xe6>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0cc      	beq.n	80035bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003628:	4293      	cmp	r3, r2
 800362a:	d902      	bls.n	8003632 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800362c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003630:	e00c      	b.n	800364c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
 8003642:	e002      	b.n	800364a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	c1100000 	.word	0xc1100000

08003658 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800366c:	e018      	b.n	80036a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f001 fd88 	bl	8005190 <SDMMC_CmdSendStatus>
 8003680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	e009      	b.n	80036a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fb2a 	bl	8004cec <SDIO_GetResponse>
 8003698:	4602      	mov	r2, r0
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fb14 	bl	8004cec <SDIO_GetResponse>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ce:	d102      	bne.n	80036d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036d4:	e02f      	b.n	8003736 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f879 	bl	80037d4 <SD_FindSCR>
 80036e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e023      	b.n	8003736 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01c      	beq.n	8003732 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f001 fc5d 	bl	8004fc4 <SDMMC_CmdAppCommand>
 800370a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	e00f      	b.n	8003736 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc96 	bl	800504e <SDMMC_CmdBusWidth>
 8003722:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	e003      	b.n	8003736 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	e001      	b.n	8003736 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003732:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fac9 	bl	8004cec <SDIO_GetResponse>
 800375a:	4603      	mov	r3, r0
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003764:	d102      	bne.n	800376c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800376a:	e02f      	b.n	80037cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f82e 	bl	80037d4 <SD_FindSCR>
 8003778:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	e023      	b.n	80037cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01c      	beq.n	80037c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f001 fc12 	bl	8004fc4 <SDMMC_CmdAppCommand>
 80037a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	e00f      	b.n	80037cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fc4b 	bl	800504e <SDMMC_CmdBusWidth>
 80037b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	e003      	b.n	80037cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e001      	b.n	80037cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b08f      	sub	sp, #60	; 0x3c
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037de:	f7fd fb13 	bl	8000e08 <HAL_GetTick>
 80037e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2108      	movs	r1, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fab5 	bl	8004d6a <SDMMC_CmdBlockLength>
 8003800:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	e0b2      	b.n	8003972 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f001 fbd3 	bl	8004fc4 <SDMMC_CmdAppCommand>
 800381e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	e0a3      	b.n	8003972 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003830:	2308      	movs	r3, #8
 8003832:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003838:	2302      	movs	r3, #2
 800383a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003840:	2301      	movs	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f107 0210 	add.w	r2, r7, #16
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fa5f 	bl	8004d12 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fc1a 	bl	8005092 <SDMMC_CmdSendSCR>
 800385e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02a      	beq.n	80038bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	e083      	b.n	8003972 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00f      	beq.n	8003898 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	f107 0208 	add.w	r2, r7, #8
 8003884:	18d4      	adds	r4, r2, r3
 8003886:	4608      	mov	r0, r1
 8003888:	f001 f9bf 	bl	8004c0a <SDIO_ReadFIFO>
 800388c:	4603      	mov	r3, r0
 800388e:	6023      	str	r3, [r4, #0]
      index++;
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	3301      	adds	r3, #1
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
 8003896:	e006      	b.n	80038a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80038a6:	f7fd faaf 	bl	8000e08 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d102      	bne.n	80038bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80038b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038ba:	e05a      	b.n	8003972 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0cf      	beq.n	800386a <SD_FindSCR+0x96>
 80038ca:	e000      	b.n	80038ce <SD_FindSCR+0xfa>
      break;
 80038cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2208      	movs	r2, #8
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80038e4:	2308      	movs	r3, #8
 80038e6:	e044      	b.n	8003972 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2202      	movs	r2, #2
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80038fe:	2302      	movs	r3, #2
 8003900:	e037      	b.n	8003972 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2220      	movs	r2, #32
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003918:	2320      	movs	r3, #32
 800391a:	e02a      	b.n	8003972 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f240 523a 	movw	r2, #1338	; 0x53a
 8003924:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	061a      	lsls	r2, r3, #24
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003932:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800393c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	601a      	str	r2, [r3, #0]
    scr++;
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	3304      	adds	r3, #4
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800395a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003964:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	373c      	adds	r7, #60	; 0x3c
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}

0800397a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03f      	beq.n	8003a14 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e033      	b.n	8003a02 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f933 	bl	8004c0a <SDIO_ReadFIFO>
 80039a4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3301      	adds	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	d9c8      	bls.n	800399a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d043      	beq.n	8003abe <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e037      	b.n	8003aac <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	041a      	lsls	r2, r3, #16
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	061a      	lsls	r2, r3, #24
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f107 0208 	add.w	r2, r7, #8
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f8bf 	bl	8004c24 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d9c4      	bls.n	8003a3c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e03f      	b.n	8003b58 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fd f8ab 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fdde 	bl	80046cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d17c      	bne.n	8003c7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Transmit+0x2c>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e075      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x3e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e06e      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2221      	movs	r2, #33	; 0x21
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd f928 	bl	8000e08 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d108      	bne.n	8003be2 <HAL_UART_Transmit+0x82>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e003      	b.n	8003bea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bf2:	e02a      	b.n	8003c4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fb1e 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e036      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	3302      	adds	r3, #2
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e007      	b.n	8003c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1cf      	bne.n	8003bf4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2140      	movs	r1, #64	; 0x40
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 faee 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d11d      	bne.n	8003cda <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_UART_Receive_IT+0x26>
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e016      	b.n	8003cdc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Receive_IT+0x38>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e00f      	b.n	8003cdc <HAL_UART_Receive_IT+0x58>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb23 	bl	800431c <UART_Start_Receive_IT>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b0ba      	sub	sp, #232	; 0xe8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_UART_IRQHandler+0x66>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fc07 	bl	8004556 <UART_Receive_IT>
      return;
 8003d48:	e256      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80de 	beq.w	8003f10 <HAL_UART_IRQHandler+0x22c>
 8003d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80d1 	beq.w	8003f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0xae>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0xd2>
 8003d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_UART_IRQHandler+0xf6>
 8003dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_UART_IRQHandler+0x126>
 8003de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0208 	orr.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 81ed 	beq.w	80041ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x14e>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb92 	bl	8004556 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_UART_IRQHandler+0x17a>
 8003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04f      	beq.n	8003efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa9a 	bl	8004398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d141      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3314      	adds	r3, #20
 8003e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <HAL_UART_IRQHandler+0x3dc>)
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fa50 	bl	8001378 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00e      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f990 	bl	8004214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00a      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f98c 	bl	8004214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e006      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f988 	bl	8004214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f0a:	e170      	b.n	80041ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	bf00      	nop
    return;
 8003f0e:	e16e      	b.n	80041ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f040 814a 	bne.w	80041ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8143 	beq.w	80041ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 813c 	beq.w	80041ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	f040 80b4 	bne.w	80040c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8140 	beq.w	80041f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f080 8139 	bcs.w	80041f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	f000 8088 	beq.w	80040a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1d9      	bne.n	8003f96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800400e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e1      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004088:	65ba      	str	r2, [r7, #88]	; 0x58
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f8f9 	bl	8001298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8b6 	bl	8004228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040bc:	e099      	b.n	80041f2 <HAL_UART_IRQHandler+0x50e>
 80040be:	bf00      	nop
 80040c0:	0800445f 	.word	0x0800445f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 808b 	beq.w	80041f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800410e:	647a      	str	r2, [r7, #68]	; 0x44
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e3      	bne.n	80040ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	623b      	str	r3, [r7, #32]
   return(result);
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004146:	633a      	str	r2, [r7, #48]	; 0x30
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e3      	bne.n	8004122 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e3      	bne.n	8004168 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f83e 	bl	8004228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ac:	e023      	b.n	80041f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_UART_IRQHandler+0x4ea>
 80041ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f95d 	bl	8004486 <UART_Transmit_IT>
    return;
 80041cc:	e014      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <HAL_UART_IRQHandler+0x514>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f99d 	bl	8004526 <UART_EndTransmit_IT>
    return;
 80041ec:	e004      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
    return;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
      return;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
      return;
 80041f6:	bf00      	nop
  }
}
 80041f8:	37e8      	adds	r7, #232	; 0xe8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b090      	sub	sp, #64	; 0x40
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004250:	e050      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d04c      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x30>
 8004260:	f7fc fdd2 	bl	8000e08 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800426c:	429a      	cmp	r2, r3
 800426e:	d241      	bcs.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004290:	637a      	str	r2, [r7, #52]	; 0x34
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	613b      	str	r3, [r7, #16]
   return(result);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c4:	623a      	str	r2, [r7, #32]
 80042c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e00f      	b.n	8004314 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d09f      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3740      	adds	r7, #64	; 0x40
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2222      	movs	r2, #34	; 0x22
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004368:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0220 	orr.w	r2, r2, #32
 8004388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b095      	sub	sp, #84	; 0x54
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c0:	643a      	str	r2, [r7, #64]	; 0x40
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0310 	bic.w	r3, r3, #16
 8004426:	647b      	str	r3, [r7, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004430:	61ba      	str	r2, [r7, #24]
 8004432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	613b      	str	r3, [r7, #16]
   return(result);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004452:	bf00      	nop
 8004454:	3754      	adds	r7, #84	; 0x54
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fecb 	bl	8004214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b21      	cmp	r3, #33	; 0x21
 8004498:	d13e      	bne.n	8004518 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d114      	bne.n	80044ce <UART_Transmit_IT+0x48>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d110      	bne.n	80044ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	e008      	b.n	80044e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6211      	str	r1, [r2, #32]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4619      	mov	r1, r3
 80044ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004502:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004512:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fe5a 	bl	8004200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b08c      	sub	sp, #48	; 0x30
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b22      	cmp	r3, #34	; 0x22
 8004568:	f040 80ab 	bne.w	80046c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d117      	bne.n	80045a6 <UART_Receive_IT+0x50>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	b29a      	uxth	r2, r3
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
 80045a4:	e026      	b.n	80045f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	d007      	beq.n	80045ca <UART_Receive_IT+0x74>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <UART_Receive_IT+0x82>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e008      	b.n	80045ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004604:	2b00      	cmp	r3, #0
 8004606:	d15a      	bne.n	80046be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0220 	bic.w	r2, r2, #32
 8004616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d135      	bne.n	80046b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	613b      	str	r3, [r7, #16]
   return(result);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	623a      	str	r2, [r7, #32]
 8004670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69f9      	ldr	r1, [r7, #28]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	61bb      	str	r3, [r7, #24]
   return(result);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d10a      	bne.n	80046a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fdbb 	bl	8004228 <HAL_UARTEx_RxEventCallback>
 80046b2:	e002      	b.n	80046ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fc f887 	bl	80007c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e002      	b.n	80046c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b0c0      	sub	sp, #256	; 0x100
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	68d9      	ldr	r1, [r3, #12]
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	ea40 0301 	orr.w	r3, r0, r1
 80046f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004724:	f021 010c 	bic.w	r1, r1, #12
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004732:	430b      	orrs	r3, r1
 8004734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	6999      	ldr	r1, [r3, #24]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	ea40 0301 	orr.w	r3, r0, r1
 8004752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <UART_SetConfig+0x2cc>)
 800475c:	429a      	cmp	r2, r3
 800475e:	d005      	beq.n	800476c <UART_SetConfig+0xa0>
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8d      	ldr	r3, [pc, #564]	; (800499c <UART_SetConfig+0x2d0>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d104      	bne.n	8004776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7fd fe64 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8004770:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004774:	e003      	b.n	800477e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004776:	f7fd fe4b 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 800477a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	f040 810c 	bne.w	80049a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800478c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800479a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047a6:	415b      	adcs	r3, r3
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ae:	4621      	mov	r1, r4
 80047b0:	eb12 0801 	adds.w	r8, r2, r1
 80047b4:	4629      	mov	r1, r5
 80047b6:	eb43 0901 	adc.w	r9, r3, r1
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ce:	4690      	mov	r8, r2
 80047d0:	4699      	mov	r9, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	eb18 0303 	adds.w	r3, r8, r3
 80047d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047dc:	462b      	mov	r3, r5
 80047de:	eb49 0303 	adc.w	r3, r9, r3
 80047e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047fa:	460b      	mov	r3, r1
 80047fc:	18db      	adds	r3, r3, r3
 80047fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004800:	4613      	mov	r3, r2
 8004802:	eb42 0303 	adc.w	r3, r2, r3
 8004806:	657b      	str	r3, [r7, #84]	; 0x54
 8004808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800480c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004810:	f7fb fd36 	bl	8000280 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <UART_SetConfig+0x2d4>)
 800481a:	fba3 2302 	umull	r2, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	011c      	lsls	r4, r3, #4
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800482c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	64b9      	str	r1, [r7, #72]	; 0x48
 800483c:	415b      	adcs	r3, r3
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004844:	4641      	mov	r1, r8
 8004846:	eb12 0a01 	adds.w	sl, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb43 0b01 	adc.w	fp, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800485c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004864:	4692      	mov	sl, r2
 8004866:	469b      	mov	fp, r3
 8004868:	4643      	mov	r3, r8
 800486a:	eb1a 0303 	adds.w	r3, sl, r3
 800486e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004872:	464b      	mov	r3, r9
 8004874:	eb4b 0303 	adc.w	r3, fp, r3
 8004878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004888:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800488c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004890:	460b      	mov	r3, r1
 8004892:	18db      	adds	r3, r3, r3
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
 8004896:	4613      	mov	r3, r2
 8004898:	eb42 0303 	adc.w	r3, r2, r3
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
 800489e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048a6:	f7fb fceb 	bl	8000280 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <UART_SetConfig+0x2d4>)
 80048b2:	fba3 2301 	umull	r2, r3, r3, r1
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2264      	movs	r2, #100	; 0x64
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	1acb      	subs	r3, r1, r3
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <UART_SetConfig+0x2d4>)
 80048c8:	fba3 2302 	umull	r2, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d4:	441c      	add	r4, r3
 80048d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80048f0:	415b      	adcs	r3, r3
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048f8:	4641      	mov	r1, r8
 80048fa:	1851      	adds	r1, r2, r1
 80048fc:	6339      	str	r1, [r7, #48]	; 0x30
 80048fe:	4649      	mov	r1, r9
 8004900:	414b      	adcs	r3, r1
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004910:	4659      	mov	r1, fp
 8004912:	00cb      	lsls	r3, r1, #3
 8004914:	4651      	mov	r1, sl
 8004916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491a:	4651      	mov	r1, sl
 800491c:	00ca      	lsls	r2, r1, #3
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	4603      	mov	r3, r0
 8004924:	4642      	mov	r2, r8
 8004926:	189b      	adds	r3, r3, r2
 8004928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800492c:	464b      	mov	r3, r9
 800492e:	460a      	mov	r2, r1
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800494c:	460b      	mov	r3, r1
 800494e:	18db      	adds	r3, r3, r3
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 8004952:	4613      	mov	r3, r2
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800495e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004962:	f7fb fc8d 	bl	8000280 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <UART_SetConfig+0x2d4>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	; 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	3332      	adds	r3, #50	; 0x32
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <UART_SetConfig+0x2d4>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	f003 0207 	and.w	r2, r3, #7
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4422      	add	r2, r4
 8004992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004994:	e105      	b.n	8004ba2 <UART_SetConfig+0x4d6>
 8004996:	bf00      	nop
 8004998:	40011000 	.word	0x40011000
 800499c:	40011400 	.word	0x40011400
 80049a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049b6:	4642      	mov	r2, r8
 80049b8:	464b      	mov	r3, r9
 80049ba:	1891      	adds	r1, r2, r2
 80049bc:	6239      	str	r1, [r7, #32]
 80049be:	415b      	adcs	r3, r3
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c6:	4641      	mov	r1, r8
 80049c8:	1854      	adds	r4, r2, r1
 80049ca:	4649      	mov	r1, r9
 80049cc:	eb43 0501 	adc.w	r5, r3, r1
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	00eb      	lsls	r3, r5, #3
 80049da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049de:	00e2      	lsls	r2, r4, #3
 80049e0:	4614      	mov	r4, r2
 80049e2:	461d      	mov	r5, r3
 80049e4:	4643      	mov	r3, r8
 80049e6:	18e3      	adds	r3, r4, r3
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049ec:	464b      	mov	r3, r9
 80049ee:	eb45 0303 	adc.w	r3, r5, r3
 80049f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a12:	4629      	mov	r1, r5
 8004a14:	008b      	lsls	r3, r1, #2
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	008a      	lsls	r2, r1, #2
 8004a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a24:	f7fb fc2c 	bl	8000280 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b60      	ldr	r3, [pc, #384]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	011c      	lsls	r4, r3, #4
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	61b9      	str	r1, [r7, #24]
 8004a50:	415b      	adcs	r3, r3
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6139      	str	r1, [r7, #16]
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	460a      	mov	r2, r1
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	008b      	lsls	r3, r1, #2
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aba:	4641      	mov	r1, r8
 8004abc:	008a      	lsls	r2, r1, #2
 8004abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ac2:	f7fb fbdd 	bl	8000280 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aea:	441c      	add	r4, r3
 8004aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af0:	2200      	movs	r2, #0
 8004af2:	673b      	str	r3, [r7, #112]	; 0x70
 8004af4:	677a      	str	r2, [r7, #116]	; 0x74
 8004af6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	415b      	adcs	r3, r3
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	1851      	adds	r1, r2, r1
 8004b0e:	6039      	str	r1, [r7, #0]
 8004b10:	4649      	mov	r1, r9
 8004b12:	414b      	adcs	r3, r1
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b22:	4659      	mov	r1, fp
 8004b24:	00cb      	lsls	r3, r1, #3
 8004b26:	4651      	mov	r1, sl
 8004b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	00ca      	lsls	r2, r1, #3
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	4642      	mov	r2, r8
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b50:	667a      	str	r2, [r7, #100]	; 0x64
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b5e:	4649      	mov	r1, r9
 8004b60:	008b      	lsls	r3, r1, #2
 8004b62:	4641      	mov	r1, r8
 8004b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b68:	4641      	mov	r1, r8
 8004b6a:	008a      	lsls	r2, r1, #2
 8004b6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b70:	f7fb fb86 	bl	8000280 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2164      	movs	r1, #100	; 0x64
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	; 0x32
 8004b8c:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4422      	add	r2, r4
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 001c 	add.w	r0, r7, #28
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004bca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004bce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004bd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004bd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004bda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004bde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	b004      	add	sp, #16
 8004c08:	4770      	bx	lr

08004c0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ca2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ca8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	b2db      	uxtb	r3, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
}  
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0

}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004d78:	2310      	movs	r3, #16
 8004d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff74 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa19 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004da4:	69fb      	ldr	r3, [r7, #28]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b088      	sub	sp, #32
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004dbc:	2311      	movs	r3, #17
 8004dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff52 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	2111      	movs	r1, #17
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f9f7 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b088      	sub	sp, #32
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004e00:	2312      	movs	r3, #18
 8004e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ff30 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	2112      	movs	r1, #18
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9d5 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e44:	2318      	movs	r3, #24
 8004e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff0e 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	2118      	movs	r1, #24
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f9b3 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e70:	69fb      	ldr	r3, [r7, #28]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b088      	sub	sp, #32
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004e88:	2319      	movs	r3, #25
 8004e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e8c:	2340      	movs	r3, #64	; 0x40
 8004e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e9a:	f107 0308 	add.w	r3, r7, #8
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff feec 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	2119      	movs	r1, #25
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f991 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004ecc:	230c      	movs	r3, #12
 8004ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff feca 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <SDMMC_CmdStopTransfer+0x40>)
 8004eec:	210c      	movs	r1, #12
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f970 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	05f5e100 	.word	0x05f5e100

08004f04 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f14:	2307      	movs	r3, #7
 8004f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f24:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f26:	f107 0310 	add.w	r3, r7, #16
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fea6 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	2107      	movs	r1, #7
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f94b 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3728      	adds	r7, #40	; 0x28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b088      	sub	sp, #32
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fe85 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fb65 	bl	8005644 <SDMMC_GetCmdError>
 8004f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b088      	sub	sp, #32
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004f8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004f94:	2308      	movs	r3, #8
 8004f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fa6:	f107 0308 	add.w	r3, r7, #8
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fe66 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 faf8 	bl	80055a8 <SDMMC_GetCmdResp7>
 8004fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fba:	69fb      	ldr	r3, [r7, #28]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004fd2:	2337      	movs	r3, #55	; 0x37
 8004fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fd6:	2340      	movs	r3, #64	; 0x40
 8004fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fe47 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	2137      	movs	r1, #55	; 0x37
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8ec 	bl	80051d4 <SDMMC_GetCmdResp1>
 8004ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800501e:	2329      	movs	r3, #41	; 0x29
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fe21 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9ff 	bl	8005440 <SDMMC_GetCmdResp3>
 8005042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005044:	69fb      	ldr	r3, [r7, #28]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800505c:	2306      	movs	r3, #6
 800505e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800506c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fe02 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	2106      	movs	r1, #6
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8a7 	bl	80051d4 <SDMMC_GetCmdResp1>
 8005086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005088:	69fb      	ldr	r3, [r7, #28]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b088      	sub	sp, #32
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800509e:	2333      	movs	r3, #51	; 0x33
 80050a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050a2:	2340      	movs	r3, #64	; 0x40
 80050a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fde1 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	2133      	movs	r1, #51	; 0x33
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f886 	bl	80051d4 <SDMMC_GetCmdResp1>
 80050c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ca:	69fb      	ldr	r3, [r7, #28]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80050e0:	2302      	movs	r3, #2
 80050e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80050e4:	23c0      	movs	r3, #192	; 0xc0
 80050e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff fdc0 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f956 	bl	80053b0 <SDMMC_GetCmdResp2>
 8005104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005106:	69fb      	ldr	r3, [r7, #28]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800511e:	2309      	movs	r3, #9
 8005120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005122:	23c0      	movs	r3, #192	; 0xc0
 8005124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800512a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fda1 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f937 	bl	80053b0 <SDMMC_GetCmdResp2>
 8005142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005144:	69fb      	ldr	r3, [r7, #28]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b088      	sub	sp, #32
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800515c:	2303      	movs	r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800516e:	f107 0308 	add.w	r3, r7, #8
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fd82 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	2103      	movs	r1, #3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f99c 	bl	80054bc <SDMMC_GetCmdResp6>
 8005184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800519e:	230d      	movs	r3, #13
 80051a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fd61 	bl	8004c7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	210d      	movs	r1, #13
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f806 	bl	80051d4 <SDMMC_GetCmdResp1>
 80051c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ca:	69fb      	ldr	r3, [r7, #28]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	460b      	mov	r3, r1
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80051e2:	4b70      	ldr	r3, [pc, #448]	; (80053a4 <SDMMC_GetCmdResp1+0x1d0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a70      	ldr	r2, [pc, #448]	; (80053a8 <SDMMC_GetCmdResp1+0x1d4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	0a5a      	lsrs	r2, r3, #9
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	61fa      	str	r2, [r7, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005204:	e0c9      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <SDMMC_GetCmdResp1+0x22>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ea      	bne.n	80051f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2204      	movs	r2, #4
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005232:	2304      	movs	r3, #4
 8005234:	e0b1      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005248:	2301      	movs	r3, #1
 800524a:	e0a6      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22c5      	movs	r2, #197	; 0xc5
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fd3d 	bl	8004cd2 <SDIO_GetCommandResponse>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	4293      	cmp	r3, r2
 8005260:	d001      	beq.n	8005266 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005262:	2301      	movs	r3, #1
 8005264:	e099      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005266:	2100      	movs	r1, #0
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff fd3f 	bl	8004cec <SDIO_GetResponse>
 800526e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4b4e      	ldr	r3, [pc, #312]	; (80053ac <SDMMC_GetCmdResp1+0x1d8>)
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800527a:	2300      	movs	r3, #0
 800527c:	e08d      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	da02      	bge.n	800528a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005288:	e087      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005294:	2340      	movs	r3, #64	; 0x40
 8005296:	e080      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	e079      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80052b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b4:	e071      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80052c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c4:	e069      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80052d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d4:	e061      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80052e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052e4:	e059      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f4:	e051      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005304:	e049      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005314:	e041      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005324:	e039      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005334:	e031      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005344:	e029      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005354:	e021      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005364:	e019      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005374:	e011      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005384:	e009      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005390:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005394:	e001      	b.n	800539a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000000 	.word	0x20000000
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	fdffe008 	.word	0xfdffe008

080053b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053b8:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <SDMMC_GetCmdResp2+0x88>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <SDMMC_GetCmdResp2+0x8c>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	0a5b      	lsrs	r3, r3, #9
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	60fa      	str	r2, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053dc:	e026      	b.n	800542c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ef      	beq.n	80053ce <SDMMC_GetCmdResp2+0x1e>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ea      	bne.n	80053ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2204      	movs	r2, #4
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800540a:	2304      	movs	r3, #4
 800540c:	e00e      	b.n	800542c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005420:	2301      	movs	r3, #1
 8005422:	e003      	b.n	800542c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	22c5      	movs	r2, #197	; 0xc5
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000000 	.word	0x20000000
 800543c:	10624dd3 	.word	0x10624dd3

08005440 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005448:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <SDMMC_GetCmdResp3+0x74>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <SDMMC_GetCmdResp3+0x78>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0a5b      	lsrs	r3, r3, #9
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	60fa      	str	r2, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800546c:	e01b      	b.n	80054a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ef      	beq.n	800545e <SDMMC_GetCmdResp3+0x1e>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ea      	bne.n	800545e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800549a:	2304      	movs	r3, #4
 800549c:	e003      	b.n	80054a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	22c5      	movs	r2, #197	; 0xc5
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000000 	.word	0x20000000
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	460b      	mov	r3, r1
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <SDMMC_GetCmdResp6+0xe4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a35      	ldr	r2, [pc, #212]	; (80055a4 <SDMMC_GetCmdResp6+0xe8>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	0a5b      	lsrs	r3, r3, #9
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	61fa      	str	r2, [r7, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054ee:	e052      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <SDMMC_GetCmdResp6+0x24>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ea      	bne.n	80054e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2204      	movs	r2, #4
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800551c:	2304      	movs	r3, #4
 800551e:	e03a      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005532:	2301      	movs	r3, #1
 8005534:	e02f      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fbcb 	bl	8004cd2 <SDIO_GetCommandResponse>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	7afb      	ldrb	r3, [r7, #11]
 8005542:	4293      	cmp	r3, r2
 8005544:	d001      	beq.n	800554a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005546:	2301      	movs	r3, #1
 8005548:	e025      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	22c5      	movs	r2, #197	; 0xc5
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005550:	2100      	movs	r1, #0
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fbca 	bl	8004cec <SDIO_GetResponse>
 8005558:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
 8005570:	e011      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800557c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005580:	e009      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800558c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005590:	e001      	b.n	8005596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000
 80055a4:	10624dd3 	.word	0x10624dd3

080055a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <SDMMC_GetCmdResp7+0x94>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <SDMMC_GetCmdResp7+0x98>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	0a5b      	lsrs	r3, r3, #9
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1e5a      	subs	r2, r3, #1
 80055ca:	60fa      	str	r2, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055d4:	e02c      	b.n	8005630 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <SDMMC_GetCmdResp7+0x1e>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2204      	movs	r2, #4
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005602:	2304      	movs	r3, #4
 8005604:	e014      	b.n	8005630 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005618:	2301      	movs	r3, #1
 800561a:	e009      	b.n	8005630 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
  
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000000 	.word	0x20000000
 8005640:	10624dd3 	.word	0x10624dd3

08005644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <SDMMC_GetCmdError+0x50>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a11      	ldr	r2, [pc, #68]	; (8005698 <SDMMC_GetCmdError+0x54>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	60fa      	str	r2, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800566c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005670:	e009      	b.n	8005686 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f1      	beq.n	8005662 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	22c5      	movs	r2, #197	; 0xc5
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000000 	.word	0x20000000
 8005698:	10624dd3 	.word	0x10624dd3

0800569c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056a0:	4904      	ldr	r1, [pc, #16]	; (80056b4 <MX_FATFS_Init+0x18>)
 80056a2:	4805      	ldr	r0, [pc, #20]	; (80056b8 <MX_FATFS_Init+0x1c>)
 80056a4:	f000 ff06 	bl	80064b4 <FATFS_LinkDriver>
 80056a8:	4603      	mov	r3, r0
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <MX_FATFS_Init+0x20>)
 80056ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056b0:	bf00      	nop
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2000024c 	.word	0x2000024c
 80056b8:	08006e7c 	.word	0x08006e7c
 80056bc:	20000248 	.word	0x20000248

080056c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80056ca:	f000 f896 	bl	80057fa <BSP_SD_IsDetected>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e012      	b.n	80056fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80056d8:	480b      	ldr	r0, [pc, #44]	; (8005708 <BSP_SD_Init+0x48>)
 80056da:	f7fc fec1 	bl	8002460 <HAL_SD_Init>
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80056e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056ec:	4806      	ldr	r0, [pc, #24]	; (8005708 <BSP_SD_Init+0x48>)
 80056ee:	f7fd fc8f 	bl	8003010 <HAL_SD_ConfigWideBusOperation>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80056fc:	79fb      	ldrb	r3, [r7, #7]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200000b8 	.word	0x200000b8

0800570c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	4806      	ldr	r0, [pc, #24]	; (800573c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005724:	f7fc ff4c 	bl	80025c0 <HAL_SD_ReadBlocks_DMA>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200000b8 	.word	0x200000b8

08005740 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	4806      	ldr	r0, [pc, #24]	; (8005770 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005758:	f7fd f814 	bl	8002784 <HAL_SD_WriteBlocks_DMA>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005766:	7dfb      	ldrb	r3, [r7, #23]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	200000b8 	.word	0x200000b8

08005774 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005778:	4805      	ldr	r0, [pc, #20]	; (8005790 <BSP_SD_GetCardState+0x1c>)
 800577a:	f7fd fce3 	bl	8003144 <HAL_SD_GetCardState>
 800577e:	4603      	mov	r3, r0
 8005780:	2b04      	cmp	r3, #4
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200000b8 	.word	0x200000b8

08005794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4803      	ldr	r0, [pc, #12]	; (80057ac <BSP_SD_GetCardInfo+0x18>)
 80057a0:	f7fd fc0a 	bl	8002fb8 <HAL_SD_GetCardInfo>
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200000b8 	.word	0x200000b8

080057b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80057b8:	f000 f818 	bl	80057ec <BSP_SD_AbortCallback>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80057cc:	f000 f98c 	bl	8005ae8 <BSP_SD_WriteCpltCallback>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80057e0:	f000 f98e 	bl	8005b00 <BSP_SD_ReadCpltCallback>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0

}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005800:	2301      	movs	r3, #1
 8005802:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	b2db      	uxtb	r3, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800581c:	f7fb faf4 	bl	8000e08 <HAL_GetTick>
 8005820:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005822:	e006      	b.n	8005832 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005824:	f7ff ffa6 	bl	8005774 <BSP_SD_GetCardState>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800582e:	2300      	movs	r3, #0
 8005830:	e009      	b.n	8005846 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005832:	f7fb fae9 	bl	8000e08 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d8f0      	bhi.n	8005824 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <SD_CheckStatus+0x38>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005860:	f7ff ff88 	bl	8005774 <BSP_SD_GetCardState>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <SD_CheckStatus+0x38>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	4b04      	ldr	r3, [pc, #16]	; (8005888 <SD_CheckStatus+0x38>)
 8005878:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800587a:	4b03      	ldr	r3, [pc, #12]	; (8005888 <SD_CheckStatus+0x38>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000009 	.word	0x20000009

0800588c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005896:	f7ff ff13 	bl	80056c0 <BSP_SD_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff ffd4 	bl	8005850 <SD_CheckStatus>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <SD_initialize+0x34>)
 80058ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <SD_initialize+0x34>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000009 	.word	0x20000009

080058c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ffbd 	bl	8005850 <SD_CheckStatus>
 80058d6:	4603      	mov	r3, r0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4603      	mov	r3, r0
 80058ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80058f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80058f8:	f7ff ff8c 	bl	8005814 <SD_CheckStatusWithTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da01      	bge.n	8005906 <SD_read+0x26>
  {
    return res;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	e03b      	b.n	800597e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f7ff fefe 	bl	800570c <BSP_SD_ReadBlocks_DMA>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d132      	bne.n	800597c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005916:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <SD_read+0xa8>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800591c:	f7fb fa74 	bl	8000e08 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005922:	bf00      	nop
 8005924:	4b18      	ldr	r3, [pc, #96]	; (8005988 <SD_read+0xa8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <SD_read+0x5e>
 800592c:	f7fb fa6c 	bl	8000e08 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f247 522f 	movw	r2, #29999	; 0x752f
 800593a:	4293      	cmp	r3, r2
 800593c:	d9f2      	bls.n	8005924 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <SD_read+0xa8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e017      	b.n	800597c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <SD_read+0xa8>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005952:	f7fb fa59 	bl	8000e08 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005958:	e007      	b.n	800596a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800595a:	f7ff ff0b 	bl	8005774 <BSP_SD_GetCardState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <SD_read+0x8a>
          {
            res = RES_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005968:	e008      	b.n	800597c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800596a:	f7fb fa4d 	bl	8000e08 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f247 522f 	movw	r2, #29999	; 0x752f
 8005978:	4293      	cmp	r3, r2
 800597a:	d9ee      	bls.n	800595a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000488 	.word	0x20000488

0800598c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80059a0:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <SD_write+0xa8>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80059a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80059aa:	f7ff ff33 	bl	8005814 <SD_CheckStatusWithTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da01      	bge.n	80059b8 <SD_write+0x2c>
  {
    return res;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	e038      	b.n	8005a2a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f7ff febf 	bl	8005740 <BSP_SD_WriteBlocks_DMA>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d12f      	bne.n	8005a28 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80059c8:	f7fb fa1e 	bl	8000e08 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80059ce:	bf00      	nop
 80059d0:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <SD_write+0xa8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <SD_write+0x5e>
 80059d8:	f7fb fa16 	bl	8000e08 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d9f2      	bls.n	80059d0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <SD_write+0xa8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
 80059f6:	e017      	b.n	8005a28 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <SD_write+0xa8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80059fe:	f7fb fa03 	bl	8000e08 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a04:	e007      	b.n	8005a16 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a06:	f7ff feb5 	bl	8005774 <BSP_SD_GetCardState>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <SD_write+0x8a>
          {
            res = RES_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
            break;
 8005a14:	e008      	b.n	8005a28 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a16:	f7fb f9f7 	bl	8000e08 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d9ee      	bls.n	8005a06 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000484 	.word	0x20000484

08005a38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08c      	sub	sp, #48	; 0x30
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	603a      	str	r2, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
 8005a44:	460b      	mov	r3, r1
 8005a46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <SD_ioctl+0xac>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <SD_ioctl+0x28>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e03c      	b.n	8005ada <SD_ioctl+0xa2>

  switch (cmd)
 8005a60:	79bb      	ldrb	r3, [r7, #6]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d834      	bhi.n	8005ad0 <SD_ioctl+0x98>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <SD_ioctl+0x34>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a85 	.word	0x08005a85
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005ab7 	.word	0x08005ab7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a82:	e028      	b.n	8005ad6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fe83 	bl	8005794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a9a:	e01c      	b.n	8005ad6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fe77 	bl	8005794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ab4:	e00f      	b.n	8005ad6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fe6a 	bl	8005794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	0a5a      	lsrs	r2, r3, #9
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ace:	e002      	b.n	8005ad6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3730      	adds	r7, #48	; 0x30
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000009 	.word	0x20000009

08005ae8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <BSP_SD_WriteCpltCallback+0x14>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000484 	.word	0x20000484

08005b00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <BSP_SD_ReadCpltCallback+0x14>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20000488 	.word	0x20000488

08005b18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <disk_status+0x30>)
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	79fa      	ldrb	r2, [r7, #7]
 8005b30:	4905      	ldr	r1, [pc, #20]	; (8005b48 <disk_status+0x30>)
 8005b32:	440a      	add	r2, r1
 8005b34:	7a12      	ldrb	r2, [r2, #8]
 8005b36:	4610      	mov	r0, r2
 8005b38:	4798      	blx	r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200006b4 	.word	0x200006b4

08005b4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4a0d      	ldr	r2, [pc, #52]	; (8005b94 <disk_initialize+0x48>)
 8005b5e:	5cd3      	ldrb	r3, [r2, r3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d111      	bne.n	8005b88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	4a0b      	ldr	r2, [pc, #44]	; (8005b94 <disk_initialize+0x48>)
 8005b68:	2101      	movs	r1, #1
 8005b6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <disk_initialize+0x48>)
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	79fa      	ldrb	r2, [r7, #7]
 8005b7a:	4906      	ldr	r1, [pc, #24]	; (8005b94 <disk_initialize+0x48>)
 8005b7c:	440a      	add	r2, r1
 8005b7e:	7a12      	ldrb	r2, [r2, #8]
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200006b4 	.word	0x200006b4

08005b98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <disk_read+0x3c>)
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	689c      	ldr	r4, [r3, #8]
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	4a07      	ldr	r2, [pc, #28]	; (8005bd4 <disk_read+0x3c>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	7a18      	ldrb	r0, [r3, #8]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	47a0      	blx	r4
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd90      	pop	{r4, r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200006b4 	.word	0x200006b4

08005bd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <disk_write+0x3c>)
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68dc      	ldr	r4, [r3, #12]
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <disk_write+0x3c>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	7a18      	ldrb	r0, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	47a0      	blx	r4
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd90      	pop	{r4, r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200006b4 	.word	0x200006b4

08005c18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3301      	adds	r3, #1
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	b21a      	sxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b21b      	sxth	r3, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3303      	adds	r3, #3
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	3202      	adds	r2, #2
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	3201      	adds	r2, #1
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e010      	b.n	8005cc0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <clear_lock+0x44>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d105      	bne.n	8005cba <clear_lock+0x2a>
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <clear_lock+0x44>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	4413      	add	r3, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d9eb      	bls.n	8005c9e <clear_lock+0xe>
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000494 	.word	0x20000494

08005cd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d034      	beq.n	8005d56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7858      	ldrb	r0, [r3, #1]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	f7ff ff6a 	bl	8005bd8 <disk_write>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
 8005d0e:	e022      	b.n	8005d56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	1ad2      	subs	r2, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d217      	bcs.n	8005d56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e010      	b.n	8005d50 <sync_window+0x78>
					wsect += fs->fsize;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7858      	ldrb	r0, [r3, #1]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d42:	2301      	movs	r3, #1
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	f7ff ff47 	bl	8005bd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d8eb      	bhi.n	8005d2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d01b      	beq.n	8005db0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ffad 	bl	8005cd8 <sync_window>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d113      	bne.n	8005db0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7858      	ldrb	r0, [r3, #1]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d92:	2301      	movs	r3, #1
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	f7ff feff 	bl	8005b98 <disk_read>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d031      	beq.n	8005e34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e002      	b.n	8005dde <get_ldnumber+0x24>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b1f      	cmp	r3, #31
 8005de4:	d903      	bls.n	8005dee <get_ldnumber+0x34>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b3a      	cmp	r3, #58	; 0x3a
 8005dec:	d1f4      	bne.n	8005dd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b3a      	cmp	r3, #58	; 0x3a
 8005df4:	d11c      	bne.n	8005e30 <get_ldnumber+0x76>
			tp = *path;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	60fa      	str	r2, [r7, #12]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	3b30      	subs	r3, #48	; 0x30
 8005e06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b09      	cmp	r3, #9
 8005e0c:	d80e      	bhi.n	8005e2c <get_ldnumber+0x72>
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d10a      	bne.n	8005e2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <get_ldnumber+0x72>
					vol = (int)i;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3301      	adds	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	e002      	b.n	8005e36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e34:	693b      	ldr	r3, [r7, #16]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	70da      	strb	r2, [r3, #3]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ff7e 	bl	8005d60 <move_window>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <check_fs+0x2a>
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	e038      	b.n	8005ee0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3334      	adds	r3, #52	; 0x34
 8005e72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fece 	bl	8005c18 <ld_word>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <check_fs+0x48>
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e029      	b.n	8005ee0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e92:	2be9      	cmp	r3, #233	; 0xe9
 8005e94:	d009      	beq.n	8005eaa <check_fs+0x66>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e9c:	2beb      	cmp	r3, #235	; 0xeb
 8005e9e:	d11e      	bne.n	8005ede <check_fs+0x9a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ea6:	2b90      	cmp	r3, #144	; 0x90
 8005ea8:	d119      	bne.n	8005ede <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3334      	adds	r3, #52	; 0x34
 8005eae:	3336      	adds	r3, #54	; 0x36
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fec9 	bl	8005c48 <ld_dword>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <check_fs+0xa4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <check_fs+0x82>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e00c      	b.n	8005ee0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3334      	adds	r3, #52	; 0x34
 8005eca:	3352      	adds	r3, #82	; 0x52
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff febb 	bl	8005c48 <ld_dword>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4a05      	ldr	r2, [pc, #20]	; (8005eec <check_fs+0xa8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <check_fs+0x9a>
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005ede:	2302      	movs	r3, #2
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	00544146 	.word	0x00544146
 8005eec:	33544146 	.word	0x33544146

08005ef0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b096      	sub	sp, #88	; 0x58
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff ff58 	bl	8005dba <get_ldnumber>
 8005f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da01      	bge.n	8005f16 <find_volume+0x26>
 8005f12:	230b      	movs	r3, #11
 8005f14:	e230      	b.n	8006378 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f16:	4aa1      	ldr	r2, [pc, #644]	; (800619c <find_volume+0x2ac>)
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <find_volume+0x3a>
 8005f26:	230c      	movs	r3, #12
 8005f28:	e226      	b.n	8006378 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01a      	beq.n	8005f76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fde7 	bl	8005b18 <disk_status>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10c      	bne.n	8005f76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <find_volume+0x82>
 8005f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f6e:	230a      	movs	r3, #10
 8005f70:	e202      	b.n	8006378 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8005f72:	2300      	movs	r3, #0
 8005f74:	e200      	b.n	8006378 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fddf 	bl	8005b4c <disk_initialize>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e1e9      	b.n	8006378 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <find_volume+0xca>
 8005faa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	e1de      	b.n	8006378 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fc2:	f7ff ff3f 	bl	8005e44 <check_fs>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d149      	bne.n	8006068 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd8:	e01e      	b.n	8006018 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005fe8:	4413      	add	r3, r2
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	3304      	adds	r3, #4
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d006      	beq.n	8006004 <find_volume+0x114>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fe24 	bl	8005c48 <ld_dword>
 8006000:	4602      	mov	r2, r0
 8006002:	e000      	b.n	8006006 <find_volume+0x116>
 8006004:	2200      	movs	r2, #0
 8006006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3358      	adds	r3, #88	; 0x58
 800600c:	443b      	add	r3, r7
 800600e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006014:	3301      	adds	r3, #1
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
 8006018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601a:	2b03      	cmp	r3, #3
 800601c:	d9dd      	bls.n	8005fda <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800601e:	2300      	movs	r3, #0
 8006020:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <find_volume+0x13e>
 8006028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800602a:	3b01      	subs	r3, #1
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800602e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	3358      	adds	r3, #88	; 0x58
 8006034:	443b      	add	r3, r7
 8006036:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800603a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800603c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <find_volume+0x15e>
 8006042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006046:	f7ff fefd 	bl	8005e44 <check_fs>
 800604a:	4603      	mov	r3, r0
 800604c:	e000      	b.n	8006050 <find_volume+0x160>
 800604e:	2303      	movs	r3, #3
 8006050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006058:	2b01      	cmp	r3, #1
 800605a:	d905      	bls.n	8006068 <find_volume+0x178>
 800605c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605e:	3301      	adds	r3, #1
 8006060:	643b      	str	r3, [r7, #64]	; 0x40
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	2b03      	cmp	r3, #3
 8006066:	d9e2      	bls.n	800602e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800606c:	2b04      	cmp	r3, #4
 800606e:	d101      	bne.n	8006074 <find_volume+0x184>
 8006070:	2301      	movs	r3, #1
 8006072:	e181      	b.n	8006378 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006078:	2b01      	cmp	r3, #1
 800607a:	d901      	bls.n	8006080 <find_volume+0x190>
 800607c:	230d      	movs	r3, #13
 800607e:	e17b      	b.n	8006378 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	3334      	adds	r3, #52	; 0x34
 8006084:	330b      	adds	r3, #11
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fdc6 	bl	8005c18 <ld_word>
 800608c:	4603      	mov	r3, r0
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	d001      	beq.n	8006098 <find_volume+0x1a8>
 8006094:	230d      	movs	r3, #13
 8006096:	e16f      	b.n	8006378 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	3334      	adds	r3, #52	; 0x34
 800609c:	3316      	adds	r3, #22
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fdba 	bl	8005c18 <ld_word>
 80060a4:	4603      	mov	r3, r0
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <find_volume+0x1cc>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	3334      	adds	r3, #52	; 0x34
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fdc7 	bl	8005c48 <ld_dword>
 80060ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	789b      	ldrb	r3, [r3, #2]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d005      	beq.n	80060e0 <find_volume+0x1f0>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	789b      	ldrb	r3, [r3, #2]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d001      	beq.n	80060e0 <find_volume+0x1f0>
 80060dc:	230d      	movs	r3, #13
 80060de:	e14b      	b.n	8006378 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	789b      	ldrb	r3, [r3, #2]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	895b      	ldrh	r3, [r3, #10]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <find_volume+0x224>
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	895b      	ldrh	r3, [r3, #10]
 8006106:	461a      	mov	r2, r3
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	895b      	ldrh	r3, [r3, #10]
 800610c:	3b01      	subs	r3, #1
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <find_volume+0x228>
 8006114:	230d      	movs	r3, #13
 8006116:	e12f      	b.n	8006378 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	3334      	adds	r3, #52	; 0x34
 800611c:	3311      	adds	r3, #17
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fd7a 	bl	8005c18 <ld_word>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	891b      	ldrh	r3, [r3, #8]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <find_volume+0x24e>
 800613a:	230d      	movs	r3, #13
 800613c:	e11c      	b.n	8006378 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	3334      	adds	r3, #52	; 0x34
 8006142:	3313      	adds	r3, #19
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fd67 	bl	8005c18 <ld_word>
 800614a:	4603      	mov	r3, r0
 800614c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800614e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <find_volume+0x272>
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	3334      	adds	r3, #52	; 0x34
 8006158:	3320      	adds	r3, #32
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fd74 	bl	8005c48 <ld_dword>
 8006160:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	3334      	adds	r3, #52	; 0x34
 8006166:	330e      	adds	r3, #14
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fd55 	bl	8005c18 <ld_word>
 800616e:	4603      	mov	r3, r0
 8006170:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <find_volume+0x28c>
 8006178:	230d      	movs	r3, #13
 800617a:	e0fd      	b.n	8006378 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800617c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	4413      	add	r3, r2
 8006182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006184:	8912      	ldrh	r2, [r2, #8]
 8006186:	0912      	lsrs	r2, r2, #4
 8006188:	b292      	uxth	r2, r2
 800618a:	4413      	add	r3, r2
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800618e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	429a      	cmp	r2, r3
 8006194:	d204      	bcs.n	80061a0 <find_volume+0x2b0>
 8006196:	230d      	movs	r3, #13
 8006198:	e0ee      	b.n	8006378 <find_volume+0x488>
 800619a:	bf00      	nop
 800619c:	2000048c 	.word	0x2000048c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a8:	8952      	ldrh	r2, [r2, #10]
 80061aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <find_volume+0x2ca>
 80061b6:	230d      	movs	r3, #13
 80061b8:	e0de      	b.n	8006378 <find_volume+0x488>
		fmt = FS_FAT32;
 80061ba:	2303      	movs	r3, #3
 80061bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d802      	bhi.n	80061d0 <find_volume+0x2e0>
 80061ca:	2302      	movs	r3, #2
 80061cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d802      	bhi.n	80061e0 <find_volume+0x2f0>
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1c9a      	adds	r2, r3, #2
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ec:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80061ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f2:	441a      	add	r2, r3
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80061f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	441a      	add	r2, r3
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006206:	2b03      	cmp	r3, #3
 8006208:	d11e      	bne.n	8006248 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	3334      	adds	r3, #52	; 0x34
 800620e:	332a      	adds	r3, #42	; 0x2a
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fd01 	bl	8005c18 <ld_word>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <find_volume+0x330>
 800621c:	230d      	movs	r3, #13
 800621e:	e0ab      	b.n	8006378 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	891b      	ldrh	r3, [r3, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <find_volume+0x33c>
 8006228:	230d      	movs	r3, #13
 800622a:	e0a5      	b.n	8006378 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	3334      	adds	r3, #52	; 0x34
 8006230:	332c      	adds	r3, #44	; 0x2c
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fd08 	bl	8005c48 <ld_dword>
 8006238:	4602      	mov	r2, r0
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	e01f      	b.n	8006288 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	891b      	ldrh	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <find_volume+0x364>
 8006250:	230d      	movs	r3, #13
 8006252:	e091      	b.n	8006378 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625a:	441a      	add	r2, r3
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006264:	2b02      	cmp	r3, #2
 8006266:	d103      	bne.n	8006270 <find_volume+0x380>
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	e00a      	b.n	8006286 <find_volume+0x396>
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	085a      	lsrs	r2, r3, #1
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006286:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006292:	0a5b      	lsrs	r3, r3, #9
 8006294:	429a      	cmp	r2, r3
 8006296:	d201      	bcs.n	800629c <find_volume+0x3ac>
 8006298:	230d      	movs	r3, #13
 800629a:	e06d      	b.n	8006378 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	615a      	str	r2, [r3, #20]
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	2280      	movs	r2, #128	; 0x80
 80062b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80062b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d149      	bne.n	800634e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	3334      	adds	r3, #52	; 0x34
 80062be:	3330      	adds	r3, #48	; 0x30
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fca9 	bl	8005c18 <ld_word>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d140      	bne.n	800634e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	3301      	adds	r3, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d4:	f7ff fd44 	bl	8005d60 <move_window>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d137      	bne.n	800634e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	2200      	movs	r2, #0
 80062e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	3334      	adds	r3, #52	; 0x34
 80062e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fc93 	bl	8005c18 <ld_word>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d127      	bne.n	800634e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	3334      	adds	r3, #52	; 0x34
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fca0 	bl	8005c48 <ld_dword>
 8006308:	4603      	mov	r3, r0
 800630a:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <find_volume+0x490>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d11e      	bne.n	800634e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	3334      	adds	r3, #52	; 0x34
 8006314:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fc95 	bl	8005c48 <ld_dword>
 800631e:	4603      	mov	r3, r0
 8006320:	4a18      	ldr	r2, [pc, #96]	; (8006384 <find_volume+0x494>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	3334      	adds	r3, #52	; 0x34
 800632a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fc8a 	bl	8005c48 <ld_dword>
 8006334:	4602      	mov	r2, r0
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	3334      	adds	r3, #52	; 0x34
 800633e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fc80 	bl	8005c48 <ld_dword>
 8006348:	4602      	mov	r2, r0
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006354:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <find_volume+0x498>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <find_volume+0x498>)
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <find_volume+0x498>)
 8006364:	881a      	ldrh	r2, [r3, #0]
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	4a07      	ldr	r2, [pc, #28]	; (800638c <find_volume+0x49c>)
 800636e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006372:	f7ff fc8d 	bl	8005c90 <clear_lock>
#endif
	return FR_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3758      	adds	r7, #88	; 0x58
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	41615252 	.word	0x41615252
 8006384:	61417272 	.word	0x61417272
 8006388:	20000490 	.word	0x20000490
 800638c:	200004b4 	.word	0x200004b4

08006390 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063a2:	f107 0310 	add.w	r3, r7, #16
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fd07 	bl	8005dba <get_ldnumber>
 80063ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da01      	bge.n	80063b8 <f_mount+0x28>
 80063b4:	230b      	movs	r3, #11
 80063b6:	e02b      	b.n	8006410 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <f_mount+0x88>)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063c8:	69b8      	ldr	r0, [r7, #24]
 80063ca:	f7ff fc61 	bl	8005c90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <f_mount+0x88>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <f_mount+0x66>
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <f_mount+0x6a>
 80063f6:	2300      	movs	r3, #0
 80063f8:	e00a      	b.n	8006410 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063fa:	f107 010c 	add.w	r1, r7, #12
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	2200      	movs	r2, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fd73 	bl	8005ef0 <find_volume>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2000048c 	.word	0x2000048c

0800641c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800642a:	2301      	movs	r3, #1
 800642c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 8006434:	7a5b      	ldrb	r3, [r3, #9]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d131      	bne.n	80064a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800643c:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 800643e:	7a5b      	ldrb	r3, [r3, #9]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 8006446:	2100      	movs	r1, #0
 8006448:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800644a:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 800644c:	7a5b      	ldrb	r3, [r3, #9]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800645a:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 800645c:	7a5b      	ldrb	r3, [r3, #9]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 8006464:	4413      	add	r3, r2
 8006466:	79fa      	ldrb	r2, [r7, #7]
 8006468:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 800646c:	7a5b      	ldrb	r3, [r3, #9]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	b2d1      	uxtb	r1, r2
 8006474:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <FATFS_LinkDriverEx+0x94>)
 8006476:	7251      	strb	r1, [r2, #9]
 8006478:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800647a:	7dbb      	ldrb	r3, [r7, #22]
 800647c:	3330      	adds	r3, #48	; 0x30
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	3301      	adds	r3, #1
 8006488:	223a      	movs	r2, #58	; 0x3a
 800648a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	3302      	adds	r3, #2
 8006490:	222f      	movs	r2, #47	; 0x2f
 8006492:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	3303      	adds	r3, #3
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	200006b4 	.word	0x200006b4

080064b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064be:	2200      	movs	r2, #0
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ffaa 	bl	800641c <FATFS_LinkDriverEx>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	2000000c 	.word	0x2000000c

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	; (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	; (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	; (8006524 <__libc_init_array+0x44>)
 80064f4:	f000 fc8e 	bl	8006e14 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08006ecc 	.word	0x08006ecc
 800651c:	08006ecc 	.word	0x08006ecc
 8006520:	08006ecc 	.word	0x08006ecc
 8006524:	08006ed0 	.word	0x08006ed0

08006528 <memset>:
 8006528:	4402      	add	r2, r0
 800652a:	4603      	mov	r3, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	d100      	bne.n	8006532 <memset+0xa>
 8006530:	4770      	bx	lr
 8006532:	f803 1b01 	strb.w	r1, [r3], #1
 8006536:	e7f9      	b.n	800652c <memset+0x4>

08006538 <siprintf>:
 8006538:	b40e      	push	{r1, r2, r3}
 800653a:	b500      	push	{lr}
 800653c:	b09c      	sub	sp, #112	; 0x70
 800653e:	ab1d      	add	r3, sp, #116	; 0x74
 8006540:	9002      	str	r0, [sp, #8]
 8006542:	9006      	str	r0, [sp, #24]
 8006544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006548:	4809      	ldr	r0, [pc, #36]	; (8006570 <siprintf+0x38>)
 800654a:	9107      	str	r1, [sp, #28]
 800654c:	9104      	str	r1, [sp, #16]
 800654e:	4909      	ldr	r1, [pc, #36]	; (8006574 <siprintf+0x3c>)
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	9105      	str	r1, [sp, #20]
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	a902      	add	r1, sp, #8
 800655c:	f000 f868 	bl	8006630 <_svfiprintf_r>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	b01c      	add	sp, #112	; 0x70
 8006568:	f85d eb04 	ldr.w	lr, [sp], #4
 800656c:	b003      	add	sp, #12
 800656e:	4770      	bx	lr
 8006570:	2000000c 	.word	0x2000000c
 8006574:	ffff0208 	.word	0xffff0208

08006578 <__ssputs_r>:
 8006578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	688e      	ldr	r6, [r1, #8]
 800657e:	429e      	cmp	r6, r3
 8006580:	4682      	mov	sl, r0
 8006582:	460c      	mov	r4, r1
 8006584:	4690      	mov	r8, r2
 8006586:	461f      	mov	r7, r3
 8006588:	d838      	bhi.n	80065fc <__ssputs_r+0x84>
 800658a:	898a      	ldrh	r2, [r1, #12]
 800658c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006590:	d032      	beq.n	80065f8 <__ssputs_r+0x80>
 8006592:	6825      	ldr	r5, [r4, #0]
 8006594:	6909      	ldr	r1, [r1, #16]
 8006596:	eba5 0901 	sub.w	r9, r5, r1
 800659a:	6965      	ldr	r5, [r4, #20]
 800659c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065a4:	3301      	adds	r3, #1
 80065a6:	444b      	add	r3, r9
 80065a8:	106d      	asrs	r5, r5, #1
 80065aa:	429d      	cmp	r5, r3
 80065ac:	bf38      	it	cc
 80065ae:	461d      	movcc	r5, r3
 80065b0:	0553      	lsls	r3, r2, #21
 80065b2:	d531      	bpl.n	8006618 <__ssputs_r+0xa0>
 80065b4:	4629      	mov	r1, r5
 80065b6:	f000 fb63 	bl	8006c80 <_malloc_r>
 80065ba:	4606      	mov	r6, r0
 80065bc:	b950      	cbnz	r0, 80065d4 <__ssputs_r+0x5c>
 80065be:	230c      	movs	r3, #12
 80065c0:	f8ca 3000 	str.w	r3, [sl]
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	6921      	ldr	r1, [r4, #16]
 80065d6:	464a      	mov	r2, r9
 80065d8:	f000 fabe 	bl	8006b58 <memcpy>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	6126      	str	r6, [r4, #16]
 80065ea:	6165      	str	r5, [r4, #20]
 80065ec:	444e      	add	r6, r9
 80065ee:	eba5 0509 	sub.w	r5, r5, r9
 80065f2:	6026      	str	r6, [r4, #0]
 80065f4:	60a5      	str	r5, [r4, #8]
 80065f6:	463e      	mov	r6, r7
 80065f8:	42be      	cmp	r6, r7
 80065fa:	d900      	bls.n	80065fe <__ssputs_r+0x86>
 80065fc:	463e      	mov	r6, r7
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	4632      	mov	r2, r6
 8006602:	4641      	mov	r1, r8
 8006604:	f000 fab6 	bl	8006b74 <memmove>
 8006608:	68a3      	ldr	r3, [r4, #8]
 800660a:	1b9b      	subs	r3, r3, r6
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	4433      	add	r3, r6
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	2000      	movs	r0, #0
 8006616:	e7db      	b.n	80065d0 <__ssputs_r+0x58>
 8006618:	462a      	mov	r2, r5
 800661a:	f000 fba5 	bl	8006d68 <_realloc_r>
 800661e:	4606      	mov	r6, r0
 8006620:	2800      	cmp	r0, #0
 8006622:	d1e1      	bne.n	80065e8 <__ssputs_r+0x70>
 8006624:	6921      	ldr	r1, [r4, #16]
 8006626:	4650      	mov	r0, sl
 8006628:	f000 fabe 	bl	8006ba8 <_free_r>
 800662c:	e7c7      	b.n	80065be <__ssputs_r+0x46>
	...

08006630 <_svfiprintf_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4698      	mov	r8, r3
 8006636:	898b      	ldrh	r3, [r1, #12]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	b09d      	sub	sp, #116	; 0x74
 800663c:	4607      	mov	r7, r0
 800663e:	460d      	mov	r5, r1
 8006640:	4614      	mov	r4, r2
 8006642:	d50e      	bpl.n	8006662 <_svfiprintf_r+0x32>
 8006644:	690b      	ldr	r3, [r1, #16]
 8006646:	b963      	cbnz	r3, 8006662 <_svfiprintf_r+0x32>
 8006648:	2140      	movs	r1, #64	; 0x40
 800664a:	f000 fb19 	bl	8006c80 <_malloc_r>
 800664e:	6028      	str	r0, [r5, #0]
 8006650:	6128      	str	r0, [r5, #16]
 8006652:	b920      	cbnz	r0, 800665e <_svfiprintf_r+0x2e>
 8006654:	230c      	movs	r3, #12
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e0d1      	b.n	8006802 <_svfiprintf_r+0x1d2>
 800665e:	2340      	movs	r3, #64	; 0x40
 8006660:	616b      	str	r3, [r5, #20]
 8006662:	2300      	movs	r3, #0
 8006664:	9309      	str	r3, [sp, #36]	; 0x24
 8006666:	2320      	movs	r3, #32
 8006668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800666c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006670:	2330      	movs	r3, #48	; 0x30
 8006672:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800681c <_svfiprintf_r+0x1ec>
 8006676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800667a:	f04f 0901 	mov.w	r9, #1
 800667e:	4623      	mov	r3, r4
 8006680:	469a      	mov	sl, r3
 8006682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006686:	b10a      	cbz	r2, 800668c <_svfiprintf_r+0x5c>
 8006688:	2a25      	cmp	r2, #37	; 0x25
 800668a:	d1f9      	bne.n	8006680 <_svfiprintf_r+0x50>
 800668c:	ebba 0b04 	subs.w	fp, sl, r4
 8006690:	d00b      	beq.n	80066aa <_svfiprintf_r+0x7a>
 8006692:	465b      	mov	r3, fp
 8006694:	4622      	mov	r2, r4
 8006696:	4629      	mov	r1, r5
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff ff6d 	bl	8006578 <__ssputs_r>
 800669e:	3001      	adds	r0, #1
 80066a0:	f000 80aa 	beq.w	80067f8 <_svfiprintf_r+0x1c8>
 80066a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a6:	445a      	add	r2, fp
 80066a8:	9209      	str	r2, [sp, #36]	; 0x24
 80066aa:	f89a 3000 	ldrb.w	r3, [sl]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80a2 	beq.w	80067f8 <_svfiprintf_r+0x1c8>
 80066b4:	2300      	movs	r3, #0
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066be:	f10a 0a01 	add.w	sl, sl, #1
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	9307      	str	r3, [sp, #28]
 80066c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ca:	931a      	str	r3, [sp, #104]	; 0x68
 80066cc:	4654      	mov	r4, sl
 80066ce:	2205      	movs	r2, #5
 80066d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d4:	4851      	ldr	r0, [pc, #324]	; (800681c <_svfiprintf_r+0x1ec>)
 80066d6:	f7f9 fd83 	bl	80001e0 <memchr>
 80066da:	9a04      	ldr	r2, [sp, #16]
 80066dc:	b9d8      	cbnz	r0, 8006716 <_svfiprintf_r+0xe6>
 80066de:	06d0      	lsls	r0, r2, #27
 80066e0:	bf44      	itt	mi
 80066e2:	2320      	movmi	r3, #32
 80066e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066e8:	0711      	lsls	r1, r2, #28
 80066ea:	bf44      	itt	mi
 80066ec:	232b      	movmi	r3, #43	; 0x2b
 80066ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f2:	f89a 3000 	ldrb.w	r3, [sl]
 80066f6:	2b2a      	cmp	r3, #42	; 0x2a
 80066f8:	d015      	beq.n	8006726 <_svfiprintf_r+0xf6>
 80066fa:	9a07      	ldr	r2, [sp, #28]
 80066fc:	4654      	mov	r4, sl
 80066fe:	2000      	movs	r0, #0
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	4621      	mov	r1, r4
 8006706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800670a:	3b30      	subs	r3, #48	; 0x30
 800670c:	2b09      	cmp	r3, #9
 800670e:	d94e      	bls.n	80067ae <_svfiprintf_r+0x17e>
 8006710:	b1b0      	cbz	r0, 8006740 <_svfiprintf_r+0x110>
 8006712:	9207      	str	r2, [sp, #28]
 8006714:	e014      	b.n	8006740 <_svfiprintf_r+0x110>
 8006716:	eba0 0308 	sub.w	r3, r0, r8
 800671a:	fa09 f303 	lsl.w	r3, r9, r3
 800671e:	4313      	orrs	r3, r2
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	46a2      	mov	sl, r4
 8006724:	e7d2      	b.n	80066cc <_svfiprintf_r+0x9c>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	1d19      	adds	r1, r3, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	9103      	str	r1, [sp, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfbb      	ittet	lt
 8006732:	425b      	neglt	r3, r3
 8006734:	f042 0202 	orrlt.w	r2, r2, #2
 8006738:	9307      	strge	r3, [sp, #28]
 800673a:	9307      	strlt	r3, [sp, #28]
 800673c:	bfb8      	it	lt
 800673e:	9204      	strlt	r2, [sp, #16]
 8006740:	7823      	ldrb	r3, [r4, #0]
 8006742:	2b2e      	cmp	r3, #46	; 0x2e
 8006744:	d10c      	bne.n	8006760 <_svfiprintf_r+0x130>
 8006746:	7863      	ldrb	r3, [r4, #1]
 8006748:	2b2a      	cmp	r3, #42	; 0x2a
 800674a:	d135      	bne.n	80067b8 <_svfiprintf_r+0x188>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	1d1a      	adds	r2, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	9203      	str	r2, [sp, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfb8      	it	lt
 8006758:	f04f 33ff 	movlt.w	r3, #4294967295
 800675c:	3402      	adds	r4, #2
 800675e:	9305      	str	r3, [sp, #20]
 8006760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800682c <_svfiprintf_r+0x1fc>
 8006764:	7821      	ldrb	r1, [r4, #0]
 8006766:	2203      	movs	r2, #3
 8006768:	4650      	mov	r0, sl
 800676a:	f7f9 fd39 	bl	80001e0 <memchr>
 800676e:	b140      	cbz	r0, 8006782 <_svfiprintf_r+0x152>
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	eba0 000a 	sub.w	r0, r0, sl
 8006776:	fa03 f000 	lsl.w	r0, r3, r0
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	4303      	orrs	r3, r0
 800677e:	3401      	adds	r4, #1
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006786:	4826      	ldr	r0, [pc, #152]	; (8006820 <_svfiprintf_r+0x1f0>)
 8006788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800678c:	2206      	movs	r2, #6
 800678e:	f7f9 fd27 	bl	80001e0 <memchr>
 8006792:	2800      	cmp	r0, #0
 8006794:	d038      	beq.n	8006808 <_svfiprintf_r+0x1d8>
 8006796:	4b23      	ldr	r3, [pc, #140]	; (8006824 <_svfiprintf_r+0x1f4>)
 8006798:	bb1b      	cbnz	r3, 80067e2 <_svfiprintf_r+0x1b2>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	3307      	adds	r3, #7
 800679e:	f023 0307 	bic.w	r3, r3, #7
 80067a2:	3308      	adds	r3, #8
 80067a4:	9303      	str	r3, [sp, #12]
 80067a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a8:	4433      	add	r3, r6
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
 80067ac:	e767      	b.n	800667e <_svfiprintf_r+0x4e>
 80067ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80067b2:	460c      	mov	r4, r1
 80067b4:	2001      	movs	r0, #1
 80067b6:	e7a5      	b.n	8006704 <_svfiprintf_r+0xd4>
 80067b8:	2300      	movs	r3, #0
 80067ba:	3401      	adds	r4, #1
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	4619      	mov	r1, r3
 80067c0:	f04f 0c0a 	mov.w	ip, #10
 80067c4:	4620      	mov	r0, r4
 80067c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ca:	3a30      	subs	r2, #48	; 0x30
 80067cc:	2a09      	cmp	r2, #9
 80067ce:	d903      	bls.n	80067d8 <_svfiprintf_r+0x1a8>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0c5      	beq.n	8006760 <_svfiprintf_r+0x130>
 80067d4:	9105      	str	r1, [sp, #20]
 80067d6:	e7c3      	b.n	8006760 <_svfiprintf_r+0x130>
 80067d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80067dc:	4604      	mov	r4, r0
 80067de:	2301      	movs	r3, #1
 80067e0:	e7f0      	b.n	80067c4 <_svfiprintf_r+0x194>
 80067e2:	ab03      	add	r3, sp, #12
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	462a      	mov	r2, r5
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <_svfiprintf_r+0x1f8>)
 80067ea:	a904      	add	r1, sp, #16
 80067ec:	4638      	mov	r0, r7
 80067ee:	f3af 8000 	nop.w
 80067f2:	1c42      	adds	r2, r0, #1
 80067f4:	4606      	mov	r6, r0
 80067f6:	d1d6      	bne.n	80067a6 <_svfiprintf_r+0x176>
 80067f8:	89ab      	ldrh	r3, [r5, #12]
 80067fa:	065b      	lsls	r3, r3, #25
 80067fc:	f53f af2c 	bmi.w	8006658 <_svfiprintf_r+0x28>
 8006800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006802:	b01d      	add	sp, #116	; 0x74
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	ab03      	add	r3, sp, #12
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	462a      	mov	r2, r5
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <_svfiprintf_r+0x1f8>)
 8006810:	a904      	add	r1, sp, #16
 8006812:	4638      	mov	r0, r7
 8006814:	f000 f87a 	bl	800690c <_printf_i>
 8006818:	e7eb      	b.n	80067f2 <_svfiprintf_r+0x1c2>
 800681a:	bf00      	nop
 800681c:	08006e90 	.word	0x08006e90
 8006820:	08006e9a 	.word	0x08006e9a
 8006824:	00000000 	.word	0x00000000
 8006828:	08006579 	.word	0x08006579
 800682c:	08006e96 	.word	0x08006e96

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4699      	mov	r9, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800688c:	4649      	mov	r1, r9
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	68e5      	ldr	r5, [r4, #12]
 800689a:	6832      	ldr	r2, [r6, #0]
 800689c:	f003 0306 	and.w	r3, r3, #6
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	bf08      	it	eq
 80068a4:	1aad      	subeq	r5, r5, r2
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	6922      	ldr	r2, [r4, #16]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4649      	mov	r1, r9
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c0      	blx	r8
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	; 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4649      	mov	r1, r9
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	7e0f      	ldrb	r7, [r1, #24]
 8006912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006914:	2f78      	cmp	r7, #120	; 0x78
 8006916:	4691      	mov	r9, r2
 8006918:	4680      	mov	r8, r0
 800691a:	460c      	mov	r4, r1
 800691c:	469a      	mov	sl, r3
 800691e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	; 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d8 	beq.w	8006ade <_printf_i+0x1d2>
 800692e:	2f58      	cmp	r7, #88	; 0x58
 8006930:	f000 80a3 	beq.w	8006a7a <_printf_i+0x16e>
 8006934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a101      	add	r1, pc, #4	; (adr r1, 800694c <_printf_i+0x40>)
 8006948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006ac5 	.word	0x08006ac5
 800697c:	080069e9 	.word	0x080069e9
 8006980:	08006aa7 	.word	0x08006aa7
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006ae7 	.word	0x08006ae7
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006aaf 	.word	0x08006aaf
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	602a      	str	r2, [r5, #0]
 80069ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0a3      	b.n	8006b00 <_printf_i+0x1f4>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	6829      	ldr	r1, [r5, #0]
 80069bc:	0606      	lsls	r6, r0, #24
 80069be:	f101 0304 	add.w	r3, r1, #4
 80069c2:	d50a      	bpl.n	80069da <_printf_i+0xce>
 80069c4:	680e      	ldr	r6, [r1, #0]
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	da03      	bge.n	80069d4 <_printf_i+0xc8>
 80069cc:	232d      	movs	r3, #45	; 0x2d
 80069ce:	4276      	negs	r6, r6
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d4:	485e      	ldr	r0, [pc, #376]	; (8006b50 <_printf_i+0x244>)
 80069d6:	230a      	movs	r3, #10
 80069d8:	e019      	b.n	8006a0e <_printf_i+0x102>
 80069da:	680e      	ldr	r6, [r1, #0]
 80069dc:	602b      	str	r3, [r5, #0]
 80069de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069e2:	bf18      	it	ne
 80069e4:	b236      	sxthne	r6, r6
 80069e6:	e7ef      	b.n	80069c8 <_printf_i+0xbc>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	6029      	str	r1, [r5, #0]
 80069f0:	0601      	lsls	r1, r0, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xec>
 80069f4:	681e      	ldr	r6, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0xf2>
 80069f8:	0646      	lsls	r6, r0, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xe8>
 80069fc:	881e      	ldrh	r6, [r3, #0]
 80069fe:	4854      	ldr	r0, [pc, #336]	; (8006b50 <_printf_i+0x244>)
 8006a00:	2f6f      	cmp	r7, #111	; 0x6f
 8006a02:	bf0c      	ite	eq
 8006a04:	2308      	moveq	r3, #8
 8006a06:	230a      	movne	r3, #10
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a0e:	6865      	ldr	r5, [r4, #4]
 8006a10:	60a5      	str	r5, [r4, #8]
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	bfa2      	ittt	ge
 8006a16:	6821      	ldrge	r1, [r4, #0]
 8006a18:	f021 0104 	bicge.w	r1, r1, #4
 8006a1c:	6021      	strge	r1, [r4, #0]
 8006a1e:	b90e      	cbnz	r6, 8006a24 <_printf_i+0x118>
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	d04d      	beq.n	8006ac0 <_printf_i+0x1b4>
 8006a24:	4615      	mov	r5, r2
 8006a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a2e:	5dc7      	ldrb	r7, [r0, r7]
 8006a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a34:	4637      	mov	r7, r6
 8006a36:	42bb      	cmp	r3, r7
 8006a38:	460e      	mov	r6, r1
 8006a3a:	d9f4      	bls.n	8006a26 <_printf_i+0x11a>
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d10b      	bne.n	8006a58 <_printf_i+0x14c>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	07de      	lsls	r6, r3, #31
 8006a44:	d508      	bpl.n	8006a58 <_printf_i+0x14c>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	6861      	ldr	r1, [r4, #4]
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	bfde      	ittt	le
 8006a4e:	2330      	movle	r3, #48	; 0x30
 8006a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a58:	1b52      	subs	r2, r2, r5
 8006a5a:	6122      	str	r2, [r4, #16]
 8006a5c:	f8cd a000 	str.w	sl, [sp]
 8006a60:	464b      	mov	r3, r9
 8006a62:	aa03      	add	r2, sp, #12
 8006a64:	4621      	mov	r1, r4
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fee2 	bl	8006830 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d14c      	bne.n	8006b0a <_printf_i+0x1fe>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b004      	add	sp, #16
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	4835      	ldr	r0, [pc, #212]	; (8006b50 <_printf_i+0x244>)
 8006a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a80:	6829      	ldr	r1, [r5, #0]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a88:	6029      	str	r1, [r5, #0]
 8006a8a:	061d      	lsls	r5, r3, #24
 8006a8c:	d514      	bpl.n	8006ab8 <_printf_i+0x1ac>
 8006a8e:	07df      	lsls	r7, r3, #31
 8006a90:	bf44      	itt	mi
 8006a92:	f043 0320 	orrmi.w	r3, r3, #32
 8006a96:	6023      	strmi	r3, [r4, #0]
 8006a98:	b91e      	cbnz	r6, 8006aa2 <_printf_i+0x196>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f023 0320 	bic.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e7b0      	b.n	8006a08 <_printf_i+0xfc>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	2378      	movs	r3, #120	; 0x78
 8006ab0:	4828      	ldr	r0, [pc, #160]	; (8006b54 <_printf_i+0x248>)
 8006ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ab6:	e7e3      	b.n	8006a80 <_printf_i+0x174>
 8006ab8:	0659      	lsls	r1, r3, #25
 8006aba:	bf48      	it	mi
 8006abc:	b2b6      	uxthmi	r6, r6
 8006abe:	e7e6      	b.n	8006a8e <_printf_i+0x182>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	e7bb      	b.n	8006a3c <_printf_i+0x130>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	6826      	ldr	r6, [r4, #0]
 8006ac8:	6961      	ldr	r1, [r4, #20]
 8006aca:	1d18      	adds	r0, r3, #4
 8006acc:	6028      	str	r0, [r5, #0]
 8006ace:	0635      	lsls	r5, r6, #24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0x1cc>
 8006ad4:	6019      	str	r1, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0x1d2>
 8006ad8:	0670      	lsls	r0, r6, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0x1c8>
 8006adc:	8019      	strh	r1, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	4615      	mov	r5, r2
 8006ae4:	e7ba      	b.n	8006a5c <_printf_i+0x150>
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	602a      	str	r2, [r5, #0]
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7f9 fb74 	bl	80001e0 <memchr>
 8006af8:	b108      	cbz	r0, 8006afe <_printf_i+0x1f2>
 8006afa:	1b40      	subs	r0, r0, r5
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b08:	e7a8      	b.n	8006a5c <_printf_i+0x150>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	47d0      	blx	sl
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0ab      	beq.n	8006a70 <_printf_i+0x164>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	079b      	lsls	r3, r3, #30
 8006b1c:	d413      	bmi.n	8006b46 <_printf_i+0x23a>
 8006b1e:	68e0      	ldr	r0, [r4, #12]
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	4298      	cmp	r0, r3
 8006b24:	bfb8      	it	lt
 8006b26:	4618      	movlt	r0, r3
 8006b28:	e7a4      	b.n	8006a74 <_printf_i+0x168>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d09b      	beq.n	8006a70 <_printf_i+0x164>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dcf2      	bgt.n	8006b2a <_printf_i+0x21e>
 8006b44:	e7eb      	b.n	8006b1e <_printf_i+0x212>
 8006b46:	2500      	movs	r5, #0
 8006b48:	f104 0619 	add.w	r6, r4, #25
 8006b4c:	e7f5      	b.n	8006b3a <_printf_i+0x22e>
 8006b4e:	bf00      	nop
 8006b50:	08006ea1 	.word	0x08006ea1
 8006b54:	08006eb2 	.word	0x08006eb2

08006b58 <memcpy>:
 8006b58:	440a      	add	r2, r1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b60:	d100      	bne.n	8006b64 <memcpy+0xc>
 8006b62:	4770      	bx	lr
 8006b64:	b510      	push	{r4, lr}
 8006b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	d1f9      	bne.n	8006b66 <memcpy+0xe>
 8006b72:	bd10      	pop	{r4, pc}

08006b74 <memmove>:
 8006b74:	4288      	cmp	r0, r1
 8006b76:	b510      	push	{r4, lr}
 8006b78:	eb01 0402 	add.w	r4, r1, r2
 8006b7c:	d902      	bls.n	8006b84 <memmove+0x10>
 8006b7e:	4284      	cmp	r4, r0
 8006b80:	4623      	mov	r3, r4
 8006b82:	d807      	bhi.n	8006b94 <memmove+0x20>
 8006b84:	1e43      	subs	r3, r0, #1
 8006b86:	42a1      	cmp	r1, r4
 8006b88:	d008      	beq.n	8006b9c <memmove+0x28>
 8006b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b92:	e7f8      	b.n	8006b86 <memmove+0x12>
 8006b94:	4402      	add	r2, r0
 8006b96:	4601      	mov	r1, r0
 8006b98:	428a      	cmp	r2, r1
 8006b9a:	d100      	bne.n	8006b9e <memmove+0x2a>
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ba6:	e7f7      	b.n	8006b98 <memmove+0x24>

08006ba8 <_free_r>:
 8006ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d044      	beq.n	8006c38 <_free_r+0x90>
 8006bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb2:	9001      	str	r0, [sp, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bba:	bfb8      	it	lt
 8006bbc:	18e4      	addlt	r4, r4, r3
 8006bbe:	f000 f913 	bl	8006de8 <__malloc_lock>
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <_free_r+0x94>)
 8006bc4:	9801      	ldr	r0, [sp, #4]
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	b933      	cbnz	r3, 8006bd8 <_free_r+0x30>
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6014      	str	r4, [r2, #0]
 8006bce:	b003      	add	sp, #12
 8006bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd4:	f000 b90e 	b.w	8006df4 <__malloc_unlock>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d908      	bls.n	8006bee <_free_r+0x46>
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	1961      	adds	r1, r4, r5
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf01      	itttt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	e7ed      	b.n	8006bca <_free_r+0x22>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b10b      	cbz	r3, 8006bf8 <_free_r+0x50>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d9fa      	bls.n	8006bee <_free_r+0x46>
 8006bf8:	6811      	ldr	r1, [r2, #0]
 8006bfa:	1855      	adds	r5, r2, r1
 8006bfc:	42a5      	cmp	r5, r4
 8006bfe:	d10b      	bne.n	8006c18 <_free_r+0x70>
 8006c00:	6824      	ldr	r4, [r4, #0]
 8006c02:	4421      	add	r1, r4
 8006c04:	1854      	adds	r4, r2, r1
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	d1e0      	bne.n	8006bce <_free_r+0x26>
 8006c0c:	681c      	ldr	r4, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	6053      	str	r3, [r2, #4]
 8006c12:	4421      	add	r1, r4
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	e7da      	b.n	8006bce <_free_r+0x26>
 8006c18:	d902      	bls.n	8006c20 <_free_r+0x78>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	6003      	str	r3, [r0, #0]
 8006c1e:	e7d6      	b.n	8006bce <_free_r+0x26>
 8006c20:	6825      	ldr	r5, [r4, #0]
 8006c22:	1961      	adds	r1, r4, r5
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bf04      	itt	eq
 8006c28:	6819      	ldreq	r1, [r3, #0]
 8006c2a:	685b      	ldreq	r3, [r3, #4]
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	bf04      	itt	eq
 8006c30:	1949      	addeq	r1, r1, r5
 8006c32:	6021      	streq	r1, [r4, #0]
 8006c34:	6054      	str	r4, [r2, #4]
 8006c36:	e7ca      	b.n	8006bce <_free_r+0x26>
 8006c38:	b003      	add	sp, #12
 8006c3a:	bd30      	pop	{r4, r5, pc}
 8006c3c:	200006c0 	.word	0x200006c0

08006c40 <sbrk_aligned>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4e0e      	ldr	r6, [pc, #56]	; (8006c7c <sbrk_aligned+0x3c>)
 8006c44:	460c      	mov	r4, r1
 8006c46:	6831      	ldr	r1, [r6, #0]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	b911      	cbnz	r1, 8006c52 <sbrk_aligned+0x12>
 8006c4c:	f000 f8bc 	bl	8006dc8 <_sbrk_r>
 8006c50:	6030      	str	r0, [r6, #0]
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f8b7 	bl	8006dc8 <_sbrk_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d00a      	beq.n	8006c74 <sbrk_aligned+0x34>
 8006c5e:	1cc4      	adds	r4, r0, #3
 8006c60:	f024 0403 	bic.w	r4, r4, #3
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d007      	beq.n	8006c78 <sbrk_aligned+0x38>
 8006c68:	1a21      	subs	r1, r4, r0
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f8ac 	bl	8006dc8 <_sbrk_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d101      	bne.n	8006c78 <sbrk_aligned+0x38>
 8006c74:	f04f 34ff 	mov.w	r4, #4294967295
 8006c78:	4620      	mov	r0, r4
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	200006c4 	.word	0x200006c4

08006c80 <_malloc_r>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	1ccd      	adds	r5, r1, #3
 8006c86:	f025 0503 	bic.w	r5, r5, #3
 8006c8a:	3508      	adds	r5, #8
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	bf38      	it	cc
 8006c90:	250c      	movcc	r5, #12
 8006c92:	2d00      	cmp	r5, #0
 8006c94:	4607      	mov	r7, r0
 8006c96:	db01      	blt.n	8006c9c <_malloc_r+0x1c>
 8006c98:	42a9      	cmp	r1, r5
 8006c9a:	d905      	bls.n	8006ca8 <_malloc_r+0x28>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca8:	4e2e      	ldr	r6, [pc, #184]	; (8006d64 <_malloc_r+0xe4>)
 8006caa:	f000 f89d 	bl	8006de8 <__malloc_lock>
 8006cae:	6833      	ldr	r3, [r6, #0]
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	bb34      	cbnz	r4, 8006d02 <_malloc_r+0x82>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ffc2 	bl	8006c40 <sbrk_aligned>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	d14d      	bne.n	8006d5e <_malloc_r+0xde>
 8006cc2:	6834      	ldr	r4, [r6, #0]
 8006cc4:	4626      	mov	r6, r4
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d140      	bne.n	8006d4c <_malloc_r+0xcc>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4638      	mov	r0, r7
 8006cd0:	eb04 0803 	add.w	r8, r4, r3
 8006cd4:	f000 f878 	bl	8006dc8 <_sbrk_r>
 8006cd8:	4580      	cmp	r8, r0
 8006cda:	d13a      	bne.n	8006d52 <_malloc_r+0xd2>
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	3503      	adds	r5, #3
 8006ce0:	1a6d      	subs	r5, r5, r1
 8006ce2:	f025 0503 	bic.w	r5, r5, #3
 8006ce6:	3508      	adds	r5, #8
 8006ce8:	2d0c      	cmp	r5, #12
 8006cea:	bf38      	it	cc
 8006cec:	250c      	movcc	r5, #12
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff ffa5 	bl	8006c40 <sbrk_aligned>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d02b      	beq.n	8006d52 <_malloc_r+0xd2>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	442b      	add	r3, r5
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	e00e      	b.n	8006d20 <_malloc_r+0xa0>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	1b52      	subs	r2, r2, r5
 8006d06:	d41e      	bmi.n	8006d46 <_malloc_r+0xc6>
 8006d08:	2a0b      	cmp	r2, #11
 8006d0a:	d916      	bls.n	8006d3a <_malloc_r+0xba>
 8006d0c:	1961      	adds	r1, r4, r5
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	6025      	str	r5, [r4, #0]
 8006d12:	bf18      	it	ne
 8006d14:	6059      	strne	r1, [r3, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	bf08      	it	eq
 8006d1a:	6031      	streq	r1, [r6, #0]
 8006d1c:	5162      	str	r2, [r4, r5]
 8006d1e:	604b      	str	r3, [r1, #4]
 8006d20:	4638      	mov	r0, r7
 8006d22:	f104 060b 	add.w	r6, r4, #11
 8006d26:	f000 f865 	bl	8006df4 <__malloc_unlock>
 8006d2a:	f026 0607 	bic.w	r6, r6, #7
 8006d2e:	1d23      	adds	r3, r4, #4
 8006d30:	1af2      	subs	r2, r6, r3
 8006d32:	d0b6      	beq.n	8006ca2 <_malloc_r+0x22>
 8006d34:	1b9b      	subs	r3, r3, r6
 8006d36:	50a3      	str	r3, [r4, r2]
 8006d38:	e7b3      	b.n	8006ca2 <_malloc_r+0x22>
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	bf0c      	ite	eq
 8006d40:	6032      	streq	r2, [r6, #0]
 8006d42:	605a      	strne	r2, [r3, #4]
 8006d44:	e7ec      	b.n	8006d20 <_malloc_r+0xa0>
 8006d46:	4623      	mov	r3, r4
 8006d48:	6864      	ldr	r4, [r4, #4]
 8006d4a:	e7b2      	b.n	8006cb2 <_malloc_r+0x32>
 8006d4c:	4634      	mov	r4, r6
 8006d4e:	6876      	ldr	r6, [r6, #4]
 8006d50:	e7b9      	b.n	8006cc6 <_malloc_r+0x46>
 8006d52:	230c      	movs	r3, #12
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4638      	mov	r0, r7
 8006d58:	f000 f84c 	bl	8006df4 <__malloc_unlock>
 8006d5c:	e7a1      	b.n	8006ca2 <_malloc_r+0x22>
 8006d5e:	6025      	str	r5, [r4, #0]
 8006d60:	e7de      	b.n	8006d20 <_malloc_r+0xa0>
 8006d62:	bf00      	nop
 8006d64:	200006c0 	.word	0x200006c0

08006d68 <_realloc_r>:
 8006d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6c:	4680      	mov	r8, r0
 8006d6e:	4614      	mov	r4, r2
 8006d70:	460e      	mov	r6, r1
 8006d72:	b921      	cbnz	r1, 8006d7e <_realloc_r+0x16>
 8006d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	4611      	mov	r1, r2
 8006d7a:	f7ff bf81 	b.w	8006c80 <_malloc_r>
 8006d7e:	b92a      	cbnz	r2, 8006d8c <_realloc_r+0x24>
 8006d80:	f7ff ff12 	bl	8006ba8 <_free_r>
 8006d84:	4625      	mov	r5, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d8c:	f000 f838 	bl	8006e00 <_malloc_usable_size_r>
 8006d90:	4284      	cmp	r4, r0
 8006d92:	4607      	mov	r7, r0
 8006d94:	d802      	bhi.n	8006d9c <_realloc_r+0x34>
 8006d96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d9a:	d812      	bhi.n	8006dc2 <_realloc_r+0x5a>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f7ff ff6e 	bl	8006c80 <_malloc_r>
 8006da4:	4605      	mov	r5, r0
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d0ed      	beq.n	8006d86 <_realloc_r+0x1e>
 8006daa:	42bc      	cmp	r4, r7
 8006dac:	4622      	mov	r2, r4
 8006dae:	4631      	mov	r1, r6
 8006db0:	bf28      	it	cs
 8006db2:	463a      	movcs	r2, r7
 8006db4:	f7ff fed0 	bl	8006b58 <memcpy>
 8006db8:	4631      	mov	r1, r6
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f7ff fef4 	bl	8006ba8 <_free_r>
 8006dc0:	e7e1      	b.n	8006d86 <_realloc_r+0x1e>
 8006dc2:	4635      	mov	r5, r6
 8006dc4:	e7df      	b.n	8006d86 <_realloc_r+0x1e>
	...

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7f9 fec6 	bl	8000b64 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200006c8 	.word	0x200006c8

08006de8 <__malloc_lock>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__malloc_lock+0x8>)
 8006dea:	f000 b811 	b.w	8006e10 <__retarget_lock_acquire_recursive>
 8006dee:	bf00      	nop
 8006df0:	200006cc 	.word	0x200006cc

08006df4 <__malloc_unlock>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__malloc_unlock+0x8>)
 8006df6:	f000 b80c 	b.w	8006e12 <__retarget_lock_release_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	200006cc 	.word	0x200006cc

08006e00 <_malloc_usable_size_r>:
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f18      	subs	r0, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfbc      	itt	lt
 8006e0a:	580b      	ldrlt	r3, [r1, r0]
 8006e0c:	18c0      	addlt	r0, r0, r3
 8006e0e:	4770      	bx	lr

08006e10 <__retarget_lock_acquire_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <__retarget_lock_release_recursive>:
 8006e12:	4770      	bx	lr

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
