
9. I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003c60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003c60  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001978b  00000000  00000000  0002c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c751  00000000  00000000  000458b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d17  00000000  00000000  00052004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4d1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000e4d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b60 	.word	0x08003b60

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003b60 	.word	0x08003b60

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022a:	4b14      	ldr	r3, [pc, #80]	; (800027c <MX_GPIO_Init+0x58>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_GPIO_Init+0x58>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_GPIO_Init+0x58>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0320 	and.w	r3, r3, #32
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_GPIO_Init+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <MX_GPIO_Init+0x58>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <MX_GPIO_Init+0x58>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_GPIO_Init+0x58>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a07      	ldr	r2, [pc, #28]	; (800027c <MX_GPIO_Init+0x58>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <MX_GPIO_Init+0x58>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0308 	and.w	r3, r3, #8
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]

}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40021000 	.word	0x40021000

08000280 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000286:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <MX_I2C1_Init+0x54>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_I2C1_Init+0x50>)
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_I2C1_Init+0x58>)
 800028e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_I2C1_Init+0x50>)
 800029e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002be:	f000 feb1 	bl	8001024 <HAL_I2C_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f901 	bl	80004ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	40005400 	.word	0x40005400
 80002d8:	00061a80 	.word	0x00061a80

080002dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a15      	ldr	r2, [pc, #84]	; (800034c <HAL_I2C_MspInit+0x70>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d123      	bne.n	8000344 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <HAL_I2C_MspInit+0x74>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <HAL_I2C_MspInit+0x74>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <HAL_I2C_MspInit+0x74>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000314:	23c0      	movs	r3, #192	; 0xc0
 8000316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000318:	2312      	movs	r3, #18
 800031a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <HAL_I2C_MspInit+0x78>)
 8000328:	f000 fce8 	bl	8000cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <HAL_I2C_MspInit+0x74>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <HAL_I2C_MspInit+0x74>)
 8000332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000336:	61d3      	str	r3, [r2, #28]
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <HAL_I2C_MspInit+0x74>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000344:	bf00      	nop
 8000346:	3720      	adds	r7, #32
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40005400 	.word	0x40005400
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08e      	sub	sp, #56	; 0x38
 800035c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 f9f7 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f863 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f7ff ff5d 	bl	8000224 <MX_GPIO_Init>
  MX_I2C1_Init();
 800036a:	f7ff ff89 	bl	8000280 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800036e:	f000 f953 	bl	8000618 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000372:	f000 f8a0 	bl	80004b6 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i;
  char str[20] = {0};
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  uint8_t eeprom[10] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99 };
 8000388:	4a24      	ldr	r2, [pc, #144]	; (800041c <main+0xc4>)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	ca07      	ldmia	r2, {r0, r1, r2}
 800038e:	c303      	stmia	r3!, {r0, r1}
 8000390:	801a      	strh	r2, [r3, #0]
//  uint8_t eeprom[10] = { 0x00 };

  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 8000392:	230a      	movs	r3, #10
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	230a      	movs	r3, #10
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2200      	movs	r2, #0
 80003a2:	21a0      	movs	r1, #160	; 0xa0
 80003a4:	481e      	ldr	r0, [pc, #120]	; (8000420 <main+0xc8>)
 80003a6:	f000 ff81 	bl	80012ac <HAL_I2C_Mem_Write>

  HAL_Delay(3);
 80003aa:	2003      	movs	r0, #3
 80003ac:	f000 fa32 	bl	8000814 <HAL_Delay>

  for(i = 0; i < 10; i++) eeprom[i] = 0x00;
 80003b0:	2300      	movs	r3, #0
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
 80003b4:	e007      	b.n	80003c6 <main+0x6e>
 80003b6:	1d3a      	adds	r2, r7, #4
 80003b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ba:	4413      	add	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c2:	3301      	adds	r3, #1
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24
 80003c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c8:	2b09      	cmp	r3, #9
 80003ca:	ddf4      	ble.n	80003b6 <main+0x5e>

  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 80003cc:	230a      	movs	r3, #10
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	230a      	movs	r3, #10
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2301      	movs	r3, #1
 80003da:	2200      	movs	r2, #0
 80003dc:	21a0      	movs	r1, #160	; 0xa0
 80003de:	4810      	ldr	r0, [pc, #64]	; (8000420 <main+0xc8>)
 80003e0:	f001 f85e 	bl	80014a0 <HAL_I2C_Mem_Read>

  for(i = 0; i < 10; i++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
 80003e8:	e014      	b.n	8000414 <main+0xbc>
  {
	  sprintf(str, "%02x\n", eeprom[i]);
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ee:	4413      	add	r3, r2
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	490a      	ldr	r1, [pc, #40]	; (8000424 <main+0xcc>)
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 ff36 	bl	800326c <siprintf>
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000400:	f107 0110 	add.w	r1, r7, #16
 8000404:	230a      	movs	r3, #10
 8000406:	2214      	movs	r2, #20
 8000408:	4807      	ldr	r0, [pc, #28]	; (8000428 <main+0xd0>)
 800040a:	f002 fa72 	bl	80028f2 <HAL_UART_Transmit>
  for(i = 0; i < 10; i++)
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	3301      	adds	r3, #1
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
 8000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000416:	2b09      	cmp	r3, #9
 8000418:	dde7      	ble.n	80003ea <main+0x92>
  }

  while (1)
 800041a:	e7fe      	b.n	800041a <main+0xc2>
 800041c:	08003b80 	.word	0x08003b80
 8000420:	2000008c 	.word	0x2000008c
 8000424:	08003b78 	.word	0x08003b78
 8000428:	200000e4 	.word	0x200000e4

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b090      	sub	sp, #64	; 0x40
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	2228      	movs	r2, #40	; 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 ff0e 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044e:	2301      	movs	r3, #1
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000460:	2302      	movs	r3, #2
 8000462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4618      	mov	r0, r3
 8000476:	f001 fdd5 	bl	8002024 <HAL_RCC_OscConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000480:	f000 f825 	bl	80004ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000484:	230f      	movs	r3, #15
 8000486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000488:	2302      	movs	r3, #2
 800048a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2102      	movs	r1, #2
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f842 	bl	8002528 <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004aa:	f000 f810 	bl	80004ce <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3740      	adds	r7, #64	; 0x40
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2025      	movs	r0, #37	; 0x25
 80004c0:	f000 faa3 	bl	8000a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004c4:	2025      	movs	r0, #37	; 0x25
 80004c6:	f000 fabc 	bl	8000a42 <HAL_NVIC_EnableIRQ>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d2:	b672      	cpsid	i
}
 80004d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x8>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <HAL_MspInit+0x5c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6193      	str	r3, [r2, #24]
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_MspInit+0x5c>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x60>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_MspInit+0x60>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f92b 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <USART1_IRQHandler+0x10>)
 8000592:	f002 fa41 	bl	8002a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000e4 	.word	0x200000e4

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f002 fe1a 	bl	8003208 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000c000 	.word	0x2000c000
 8000600:	00000400 	.word	0x00000400
 8000604:	200000e0 	.word	0x200000e0
 8000608:	20000140 	.word	0x20000140

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f002 f902 	bl	8002858 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f7ff ff38 	bl	80004ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e4 	.word	0x200000e4
 8000668:	40013800 	.word	0x40013800

0800066c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <HAL_UART_MspInit+0x8c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d131      	bne.n	80006f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_UART_MspInit+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <HAL_UART_MspInit+0x90>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006d2:	f000 fb13 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006ec:	f000 fb06 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072a:	f7ff ff6f 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072e:	f002 fd71 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fe11 	bl	8000358 <main>
  bx lr
 8000736:	4770      	bx	lr
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000740:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8000744:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000748:	2000013c 	.word	0x2000013c

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f947 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff feb4 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f95f 	bl	8000a5e <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f927 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000128 	.word	0x20000128

08000800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000128 	.word	0x20000128

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <__NVIC_EnableIRQ+0x34>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff2d 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff42 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff35 	bl	80008c0 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b085      	sub	sp, #20
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d008      	beq.n	8000a9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2204      	movs	r2, #4
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e020      	b.n	8000ae0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 020e 	bic.w	r2, r2, #14
 8000aac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d005      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2204      	movs	r2, #4
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e0d6      	b.n	8000cbc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 020e 	bic.w	r2, r2, #14
 8000b1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0201 	bic.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b64      	ldr	r3, [pc, #400]	; (8000cc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d958      	bls.n	8000bec <HAL_DMA_Abort_IT+0x100>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a63      	ldr	r2, [pc, #396]	; (8000ccc <HAL_DMA_Abort_IT+0x1e0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04f      	beq.n	8000be4 <HAL_DMA_Abort_IT+0xf8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a61      	ldr	r2, [pc, #388]	; (8000cd0 <HAL_DMA_Abort_IT+0x1e4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d048      	beq.n	8000be0 <HAL_DMA_Abort_IT+0xf4>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a60      	ldr	r2, [pc, #384]	; (8000cd4 <HAL_DMA_Abort_IT+0x1e8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d040      	beq.n	8000bda <HAL_DMA_Abort_IT+0xee>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a5e      	ldr	r2, [pc, #376]	; (8000cd8 <HAL_DMA_Abort_IT+0x1ec>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d038      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0xe8>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a5d      	ldr	r2, [pc, #372]	; (8000cdc <HAL_DMA_Abort_IT+0x1f0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d030      	beq.n	8000bce <HAL_DMA_Abort_IT+0xe2>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a5b      	ldr	r2, [pc, #364]	; (8000ce0 <HAL_DMA_Abort_IT+0x1f4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d028      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0xdc>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a53      	ldr	r2, [pc, #332]	; (8000cc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d020      	beq.n	8000bc2 <HAL_DMA_Abort_IT+0xd6>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <HAL_DMA_Abort_IT+0x1f8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d019      	beq.n	8000bbe <HAL_DMA_Abort_IT+0xd2>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <HAL_DMA_Abort_IT+0x1fc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d012      	beq.n	8000bba <HAL_DMA_Abort_IT+0xce>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a54      	ldr	r2, [pc, #336]	; (8000cec <HAL_DMA_Abort_IT+0x200>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0xc8>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a53      	ldr	r2, [pc, #332]	; (8000cf0 <HAL_DMA_Abort_IT+0x204>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d102      	bne.n	8000bae <HAL_DMA_Abort_IT+0xc2>
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	e01b      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb2:	e018      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb8:	e015      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bba:	2310      	movs	r3, #16
 8000bbc:	e013      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e011      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bc6:	e00e      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bcc:	e00b      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd2:	e008      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	e005      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	e002      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000be0:	2310      	movs	r3, #16
 8000be2:	e000      	b.n	8000be6 <HAL_DMA_Abort_IT+0xfa>
 8000be4:	2301      	movs	r3, #1
 8000be6:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <HAL_DMA_Abort_IT+0x208>)
 8000be8:	6053      	str	r3, [r2, #4]
 8000bea:	e057      	b.n	8000c9c <HAL_DMA_Abort_IT+0x1b0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <HAL_DMA_Abort_IT+0x1e0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d04f      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x1aa>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a35      	ldr	r2, [pc, #212]	; (8000cd0 <HAL_DMA_Abort_IT+0x1e4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d048      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x1a6>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <HAL_DMA_Abort_IT+0x1e8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d040      	beq.n	8000c8c <HAL_DMA_Abort_IT+0x1a0>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DMA_Abort_IT+0x1ec>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d038      	beq.n	8000c86 <HAL_DMA_Abort_IT+0x19a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a30      	ldr	r2, [pc, #192]	; (8000cdc <HAL_DMA_Abort_IT+0x1f0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d030      	beq.n	8000c80 <HAL_DMA_Abort_IT+0x194>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <HAL_DMA_Abort_IT+0x1f4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d028      	beq.n	8000c7a <HAL_DMA_Abort_IT+0x18e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d020      	beq.n	8000c74 <HAL_DMA_Abort_IT+0x188>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <HAL_DMA_Abort_IT+0x1f8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d019      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x184>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <HAL_DMA_Abort_IT+0x1fc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d012      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x180>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a28      	ldr	r2, [pc, #160]	; (8000cec <HAL_DMA_Abort_IT+0x200>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00a      	beq.n	8000c66 <HAL_DMA_Abort_IT+0x17a>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_DMA_Abort_IT+0x204>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d102      	bne.n	8000c60 <HAL_DMA_Abort_IT+0x174>
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	e01b      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c64:	e018      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	e015      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	e013      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e011      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c78:	e00e      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7e:	e00b      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	e008      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	e005      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c90:	e002      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c92:	2310      	movs	r3, #16
 8000c94:	e000      	b.n	8000c98 <HAL_DMA_Abort_IT+0x1ac>
 8000c96:	2301      	movs	r3, #1
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_DMA_Abort_IT+0x20c>)
 8000c9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	4798      	blx	r3
    } 
  }
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40020080 	.word	0x40020080
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	4002001c 	.word	0x4002001c
 8000cd4:	40020030 	.word	0x40020030
 8000cd8:	40020044 	.word	0x40020044
 8000cdc:	40020058 	.word	0x40020058
 8000ce0:	4002006c 	.word	0x4002006c
 8000ce4:	40020408 	.word	0x40020408
 8000ce8:	4002041c 	.word	0x4002041c
 8000cec:	40020430 	.word	0x40020430
 8000cf0:	40020444 	.word	0x40020444
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e179      	b.n	8001004 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d10:	2201      	movs	r2, #1
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8168 	bne.w	8000ffe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a96      	ldr	r2, [pc, #600]	; (8000f8c <HAL_GPIO_Init+0x290>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d05e      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d38:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_GPIO_Init+0x290>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d875      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d3e:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <HAL_GPIO_Init+0x294>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d058      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d44:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <HAL_GPIO_Init+0x294>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d86f      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d4a:	4a92      	ldr	r2, [pc, #584]	; (8000f94 <HAL_GPIO_Init+0x298>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d052      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d50:	4a90      	ldr	r2, [pc, #576]	; (8000f94 <HAL_GPIO_Init+0x298>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d869      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d56:	4a90      	ldr	r2, [pc, #576]	; (8000f98 <HAL_GPIO_Init+0x29c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d04c      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a8e      	ldr	r2, [pc, #568]	; (8000f98 <HAL_GPIO_Init+0x29c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d863      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d62:	4a8e      	ldr	r2, [pc, #568]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d046      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d68:	4a8c      	ldr	r2, [pc, #560]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d85d      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d82a      	bhi.n	8000dc8 <HAL_GPIO_Init+0xcc>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d859      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <HAL_GPIO_Init+0x80>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000df7 	.word	0x08000df7
 8000d80:	08000dd1 	.word	0x08000dd1
 8000d84:	08000de3 	.word	0x08000de3
 8000d88:	08000e25 	.word	0x08000e25
 8000d8c:	08000e2b 	.word	0x08000e2b
 8000d90:	08000e2b 	.word	0x08000e2b
 8000d94:	08000e2b 	.word	0x08000e2b
 8000d98:	08000e2b 	.word	0x08000e2b
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e2b 	.word	0x08000e2b
 8000da4:	08000e2b 	.word	0x08000e2b
 8000da8:	08000e2b 	.word	0x08000e2b
 8000dac:	08000e2b 	.word	0x08000e2b
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e2b 	.word	0x08000e2b
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e2b 	.word	0x08000e2b
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000ded 	.word	0x08000ded
 8000dc8:	4a75      	ldr	r2, [pc, #468]	; (8000fa0 <HAL_GPIO_Init+0x2a4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dce:	e02c      	b.n	8000e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e029      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	e024      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e01f      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	330c      	adds	r3, #12
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e01a      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e013      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	611a      	str	r2, [r3, #16]
          break;
 8000e16:	e009      	b.n	8000e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	615a      	str	r2, [r3, #20]
          break;
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          break;
 8000e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d801      	bhi.n	8000e36 <HAL_GPIO_Init+0x13a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	e001      	b.n	8000e3a <HAL_GPIO_Init+0x13e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d802      	bhi.n	8000e48 <HAL_GPIO_Init+0x14c>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0x152>
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	3b08      	subs	r3, #8
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	210f      	movs	r1, #15
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	6a39      	ldr	r1, [r7, #32]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80c1 	beq.w	8000ffe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7c:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e94:	4a44      	ldr	r2, [pc, #272]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3c      	ldr	r2, [pc, #240]	; (8000fac <HAL_GPIO_Init+0x2b0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d01f      	beq.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <HAL_GPIO_Init+0x2b4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d019      	beq.n	8000efc <HAL_GPIO_Init+0x200>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d013      	beq.n	8000ef8 <HAL_GPIO_Init+0x1fc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a38      	ldr	r2, [pc, #224]	; (8000fbc <HAL_GPIO_Init+0x2c0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1f4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <HAL_GPIO_Init+0x2c4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000ee8:	2305      	movs	r3, #5
 8000eea:	e00a      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000eec:	2306      	movs	r3, #6
 8000eee:	e008      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e004      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_GPIO_Init+0x206>
 8000f00:	2300      	movs	r3, #0
 8000f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f04:	f002 0203 	and.w	r2, r2, #3
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f12:	4925      	ldr	r1, [pc, #148]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4924      	ldr	r1, [pc, #144]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4920      	ldr	r1, [pc, #128]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	491a      	ldr	r1, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4916      	ldr	r1, [pc, #88]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d025      	beq.n	8000fc8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]
 8000f88:	e025      	b.n	8000fd6 <HAL_GPIO_Init+0x2da>
 8000f8a:	bf00      	nop
 8000f8c:	10320000 	.word	0x10320000
 8000f90:	10310000 	.word	0x10310000
 8000f94:	10220000 	.word	0x10220000
 8000f98:	10210000 	.word	0x10210000
 8000f9c:	10120000 	.word	0x10120000
 8000fa0:	10110000 	.word	0x10110000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40011800 	.word	0x40011800
 8000fc0:	40011c00 	.word	0x40011c00
 8000fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4913      	ldr	r1, [pc, #76]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60cb      	str	r3, [r1, #12]
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	4909      	ldr	r1, [pc, #36]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	3301      	adds	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae7e 	bne.w	8000d10 <HAL_GPIO_Init+0x14>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	372c      	adds	r7, #44	; 0x2c
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e12b      	b.n	800128e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f946 	bl	80002dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001088:	f001 fba0 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 800108c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a81      	ldr	r2, [pc, #516]	; (8001298 <HAL_I2C_Init+0x274>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d807      	bhi.n	80010a8 <HAL_I2C_Init+0x84>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a80      	ldr	r2, [pc, #512]	; (800129c <HAL_I2C_Init+0x278>)
 800109c:	4293      	cmp	r3, r2
 800109e:	bf94      	ite	ls
 80010a0:	2301      	movls	r3, #1
 80010a2:	2300      	movhi	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	e006      	b.n	80010b6 <HAL_I2C_Init+0x92>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a7d      	ldr	r2, [pc, #500]	; (80012a0 <HAL_I2C_Init+0x27c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bf94      	ite	ls
 80010b0:	2301      	movls	r3, #1
 80010b2:	2300      	movhi	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0e7      	b.n	800128e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4a78      	ldr	r2, [pc, #480]	; (80012a4 <HAL_I2C_Init+0x280>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_I2C_Init+0x274>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d802      	bhi.n	80010f8 <HAL_I2C_Init+0xd4>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3301      	adds	r3, #1
 80010f6:	e009      	b.n	800110c <HAL_I2C_Init+0xe8>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <HAL_I2C_Init+0x284>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	3301      	adds	r3, #1
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	430b      	orrs	r3, r1
 8001112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800111e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	495c      	ldr	r1, [pc, #368]	; (8001298 <HAL_I2C_Init+0x274>)
 8001128:	428b      	cmp	r3, r1
 800112a:	d819      	bhi.n	8001160 <HAL_I2C_Init+0x13c>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1e59      	subs	r1, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fbb1 f3f3 	udiv	r3, r1, r3
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001140:	400b      	ands	r3, r1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <HAL_I2C_Init+0x138>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1e59      	subs	r1, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fbb1 f3f3 	udiv	r3, r1, r3
 8001154:	3301      	adds	r3, #1
 8001156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115a:	e051      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 800115c:	2304      	movs	r3, #4
 800115e:	e04f      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_I2C_Init+0x168>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e58      	subs	r0, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	440b      	add	r3, r1
 8001176:	fbb0 f3f3 	udiv	r3, r0, r3
 800117a:	3301      	adds	r3, #1
 800117c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e012      	b.n	80011b2 <HAL_I2C_Init+0x18e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e58      	subs	r0, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	0099      	lsls	r1, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Init+0x196>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e022      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10e      	bne.n	80011e0 <HAL_I2C_Init+0x1bc>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e58      	subs	r0, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6859      	ldr	r1, [r3, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	440b      	add	r3, r1
 80011d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011de:	e00f      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1e58      	subs	r0, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	0099      	lsls	r1, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	6809      	ldr	r1, [r1, #0]
 8001204:	4313      	orrs	r3, r2
 8001206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69da      	ldr	r2, [r3, #28]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800122e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6911      	ldr	r1, [r2, #16]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68d2      	ldr	r2, [r2, #12]
 800123a:	4311      	orrs	r1, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2220      	movs	r2, #32
 800127a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	000186a0 	.word	0x000186a0
 800129c:	001e847f 	.word	0x001e847f
 80012a0:	003d08ff 	.word	0x003d08ff
 80012a4:	431bde83 	.word	0x431bde83
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	4608      	mov	r0, r1
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	817b      	strh	r3, [r7, #10]
 80012be:	460b      	mov	r3, r1
 80012c0:	813b      	strh	r3, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012c6:	f7ff fa9b 	bl	8000800 <HAL_GetTick>
 80012ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	f040 80d9 	bne.w	800148c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2319      	movs	r3, #25
 80012e0:	2201      	movs	r2, #1
 80012e2:	496d      	ldr	r1, [pc, #436]	; (8001498 <HAL_I2C_Mem_Write+0x1ec>)
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 fcc1 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012f0:	2302      	movs	r3, #2
 80012f2:	e0cc      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_I2C_Mem_Write+0x56>
 80012fe:	2302      	movs	r3, #2
 8001300:	e0c5      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d007      	beq.n	8001328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2221      	movs	r2, #33	; 0x21
 800133c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a4d      	ldr	r2, [pc, #308]	; (800149c <HAL_I2C_Mem_Write+0x1f0>)
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800136a:	88f8      	ldrh	r0, [r7, #6]
 800136c:	893a      	ldrh	r2, [r7, #8]
 800136e:	8979      	ldrh	r1, [r7, #10]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 faf8 	bl	8001970 <I2C_RequestMemoryWrite>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d052      	beq.n	800142c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e081      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fd42 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00d      	beq.n	80013b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d107      	bne.n	80013b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06b      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d11b      	bne.n	800142c <HAL_I2C_Mem_Write+0x180>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d017      	beq.n	800142c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	3b01      	subs	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1aa      	bne.n	800138a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fd2e 	bl	8001e9a <I2C_WaitOnBTFFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00d      	beq.n	8001460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2b04      	cmp	r3, #4
 800144a:	d107      	bne.n	800145c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800145a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e016      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800146e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800148c:	2302      	movs	r3, #2
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	00100002 	.word	0x00100002
 800149c:	ffff0000 	.word	0xffff0000

080014a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	460b      	mov	r3, r1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014be:	f7ff f99f 	bl	8000800 <HAL_GetTick>
 80014c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	f040 8244 	bne.w	800195a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2319      	movs	r3, #25
 80014d8:	2201      	movs	r2, #1
 80014da:	4982      	ldr	r1, [pc, #520]	; (80016e4 <HAL_I2C_Mem_Read+0x244>)
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fbc5 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
 80014ea:	e237      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_I2C_Mem_Read+0x5a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e230      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d007      	beq.n	8001520 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2222      	movs	r2, #34	; 0x22
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <HAL_I2C_Mem_Read+0x248>)
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001562:	88f8      	ldrh	r0, [r7, #6]
 8001564:	893a      	ldrh	r2, [r7, #8]
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fa92 	bl	8001a9c <I2C_RequestMemoryRead>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1ec      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e1c0      	b.n	8001934 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11e      	bne.n	80015f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ca:	b672      	cpsid	i
}
 80015cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015f4:	b662      	cpsie	i
}
 80015f6:	e035      	b.n	8001664 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d11e      	bne.n	800163e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800163a:	b662      	cpsie	i
}
 800163c:	e012      	b.n	8001664 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800164c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001664:	e166      	b.n	8001934 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	2b03      	cmp	r3, #3
 800166c:	f200 811f 	bhi.w	80018ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b01      	cmp	r3, #1
 8001676:	d123      	bne.n	80016c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fc4d 	bl	8001f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e167      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016be:	e139      	b.n	8001934 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d152      	bne.n	800176e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	2200      	movs	r2, #0
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <HAL_I2C_Mem_Read+0x24c>)
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 faca 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e13c      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
 80016e2:	bf00      	nop
 80016e4:	00100002 	.word	0x00100002
 80016e8:	ffff0000 	.word	0xffff0000
 80016ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001736:	b662      	cpsie	i
}
 8001738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800176c:	e0e2      	b.n	8001934 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	2200      	movs	r2, #0
 8001776:	497b      	ldr	r1, [pc, #492]	; (8001964 <HAL_I2C_Mem_Read+0x4c4>)
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 fa77 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0e9      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_I2C_Mem_Read+0x4c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_I2C_Mem_Read+0x4cc>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a1a      	lsrs	r2, r3, #8
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00da      	lsls	r2, r3, #3
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d118      	bne.n	8001826 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001816:	b662      	cpsie	i
}
 8001818:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e09a      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b04      	cmp	r3, #4
 8001832:	d1d9      	bne.n	80017e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001876:	b662      	cpsie	i
}
 8001878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ac:	e042      	b.n	8001934 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fb32 	bl	8001f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e04c      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d118      	bne.n	8001934 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae94 	bne.w	8001666 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00010004 	.word	0x00010004
 8001968:	20000000 	.word	0x20000000
 800196c:	14f8b589 	.word	0x14f8b589

08001970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	460b      	mov	r3, r1
 8001984:	813b      	strh	r3, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f960 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c0:	d103      	bne.n	80019ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e05f      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	492d      	ldr	r1, [pc, #180]	; (8001a98 <I2C_RequestMemoryWrite+0x128>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f998 	bl	8001d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04c      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa02 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d107      	bne.n	8001a32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e02b      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3c:	893b      	ldrh	r3, [r7, #8]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	e021      	b.n	8001a8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a48:	893b      	ldrh	r3, [r7, #8]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f9dc 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e005      	b.n	8001a8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a82:	893b      	ldrh	r3, [r7, #8]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	00010002 	.word	0x00010002

08001a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f8c2 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001afc:	d103      	bne.n	8001b06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0aa      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	4952      	ldr	r1, [pc, #328]	; (8001c68 <I2C_RequestMemoryRead+0x1cc>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f8fa 	bl	8001d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e097      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f964 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e076      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b78:	893b      	ldrh	r3, [r7, #8]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	e021      	b.n	8001bc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	6a39      	ldr	r1, [r7, #32]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f93e 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d107      	bne.n	8001bba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e050      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	6a39      	ldr	r1, [r7, #32]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f923 	bl	8001e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e035      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f82b 	bl	8001c6c <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2a:	d103      	bne.n	8001c34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e013      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c38:	897b      	ldrh	r3, [r7, #10]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	6a3a      	ldr	r2, [r7, #32]
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <I2C_RequestMemoryRead+0x1cc>)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f863 	bl	8001d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00010002 	.word	0x00010002

08001c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7c:	e025      	b.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d021      	beq.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7fe fdbb 	bl	8000800 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d116      	bne.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f043 0220 	orr.w	r2, r3, #32
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e023      	b.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10d      	bne.n	8001cf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	e00c      	b.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d0b6      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d28:	e051      	b.n	8001dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d38:	d123      	bne.n	8001d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e046      	b.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d021      	beq.n	8001dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7fe fd39 	bl	8000800 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d116      	bne.n	8001dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e020      	b.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10c      	bne.n	8001df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	e00b      	b.n	8001e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d18d      	bne.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e24:	e02d      	b.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f8ce 	bl	8001fc8 <I2C_IsAcknowledgeFailed>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e02d      	b.n	8001e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d021      	beq.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7fe fcdf 	bl	8000800 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d116      	bne.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e007      	b.n	8001e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d1ca      	bne.n	8001e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ea6:	e02d      	b.n	8001f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f88d 	bl	8001fc8 <I2C_IsAcknowledgeFailed>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e02d      	b.n	8001f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebe:	d021      	beq.n	8001f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec0:	f7fe fc9e 	bl	8000800 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d302      	bcc.n	8001ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e007      	b.n	8001f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d1ca      	bne.n	8001ea8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f28:	e042      	b.n	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d119      	bne.n	8001f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0210 	mvn.w	r2, #16
 8001f40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e029      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7fe fc48 	bl	8000800 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e007      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d1b5      	bne.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d11b      	bne.n	8002018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e272      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8087 	beq.w	8002152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	4b92      	ldr	r3, [pc, #584]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b04      	cmp	r3, #4
 800204e:	d00c      	beq.n	800206a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002050:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d112      	bne.n	8002082 <HAL_RCC_OscConfig+0x5e>
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d10b      	bne.n	8002082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06c      	beq.n	8002150 <HAL_RCC_OscConfig+0x12c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d168      	bne.n	8002150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e24c      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x76>
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e02e      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x98>
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e01d      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0xbc>
 80020c6:	4b72      	ldr	r3, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a71      	ldr	r2, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6e      	ldr	r2, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020e0:	4b6b      	ldr	r3, [pc, #428]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a67      	ldr	r2, [pc, #412]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fb7e 	bl	8000800 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe fb7a 	bl	8000800 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e200      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xe4>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fb6a 	bl	8000800 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe fb66 	bl	8000800 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1ec      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x10c>
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d063      	beq.n	8002226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215e:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x18c>
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x176>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1c0      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4939      	ldr	r1, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	e03a      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_OscConfig+0x270>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fb1f 	bl	8000800 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7fe fb1b 	bl	8000800 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1a1      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x270>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fafe 	bl	8000800 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7fe fafa 	bl	8000800 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e180      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03a      	beq.n	80022a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d019      	beq.n	800226e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fade 	bl	8000800 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe fada 	bl	8000800 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e160      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 fad8 	bl	800281c <RCC_Delay>
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe fac4 	bl	8000800 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227a:	e00f      	b.n	800229c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe fac0 	bl	8000800 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d908      	bls.n	800229c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e146      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	42420000 	.word	0x42420000
 8002298:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e9      	bne.n	800227c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a6 	beq.w	8002402 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10d      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a87      	ldr	r2, [pc, #540]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	4b85      	ldr	r3, [pc, #532]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b82      	ldr	r3, [pc, #520]	; (80024ec <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x4c8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7e      	ldr	r2, [pc, #504]	; (80024ec <HAL_RCC_OscConfig+0x4c8>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7fe fa81 	bl	8000800 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7fe fa7d 	bl	8000800 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e103      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x4c8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x312>
 8002328:	4b6f      	ldr	r3, [pc, #444]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e02d      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x334>
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a69      	ldr	r2, [pc, #420]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a66      	ldr	r2, [pc, #408]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	e01c      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d10c      	bne.n	800237a <HAL_RCC_OscConfig+0x356>
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a60      	ldr	r2, [pc, #384]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e00b      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a5a      	ldr	r2, [pc, #360]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a57      	ldr	r2, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fa31 	bl	8000800 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fa2d 	bl	8000800 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0b1      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ee      	beq.n	80023a2 <HAL_RCC_OscConfig+0x37e>
 80023c4:	e014      	b.n	80023f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe fa1b 	bl	8000800 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe fa17 	bl	8000800 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e09b      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ee      	bne.n	80023ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8087 	beq.w	800251a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d061      	beq.n	80024dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d146      	bne.n	80024ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe f9eb 	bl	8000800 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe f9e7 	bl	8000800 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e06d      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d108      	bne.n	8002468 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4921      	ldr	r1, [pc, #132]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a19      	ldr	r1, [r3, #32]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	430b      	orrs	r3, r1
 800247a:	491b      	ldr	r1, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x4cc>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe f9bb 	bl	8000800 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe f9b7 	bl	8000800 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e03d      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x46a>
 80024ac:	e035      	b.n	800251a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_OscConfig+0x4cc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe f9a4 	bl	8000800 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe f9a0 	bl	8000800 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e026      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x498>
 80024da:	e01e      	b.n	800251a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e019      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
 80024f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x500>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d0      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800258e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e073      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7fe f8f2 	bl	8000800 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe f8ee 	bl	8000800 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e053      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d210      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1cc>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f850 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08003b9c 	.word	0x08003b9c
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b490      	push	{r4, r7}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002704:	1d3c      	adds	r4, r7, #4
 8002706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800270c:	f240 2301 	movw	r3, #513	; 0x201
 8002710:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x40>
 8002736:	2b08      	cmp	r3, #8
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x46>
 800273a:	e02b      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800273e:	623b      	str	r3, [r7, #32]
      break;
 8002740:	e02b      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3328      	adds	r3, #40	; 0x28
 800274c:	443b      	add	r3, r7
 800274e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002752:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0c5b      	lsrs	r3, r3, #17
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	3328      	adds	r3, #40	; 0x28
 800276a:	443b      	add	r3, r7
 800276c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002770:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002776:	fb03 f202 	mul.w	r2, r3, r2
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	e004      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	623b      	str	r3, [r7, #32]
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002796:	623b      	str	r3, [r7, #32]
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	6a3b      	ldr	r3, [r7, #32]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc90      	pop	{r4, r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	08003b8c 	.word	0x08003b8c
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	003d0900 	.word	0x003d0900

080027b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027bc:	4b02      	ldr	r3, [pc, #8]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff2 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08003bac 	.word	0x08003bac

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0adb      	lsrs	r3, r3, #11
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	08003bac 	.word	0x08003bac

0800281c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <RCC_Delay+0x34>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <RCC_Delay+0x38>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0a5b      	lsrs	r3, r3, #9
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002838:	bf00      	nop
  }
  while (Delay --);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	60fa      	str	r2, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f9      	bne.n	8002838 <RCC_Delay+0x1c>
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000000 	.word	0x20000000
 8002854:	10624dd3 	.word	0x10624dd3

08002858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e03f      	b.n	80028ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd fef4 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800289a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fc25 	bl	80030ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	; 0x28
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	d17c      	bne.n	8002a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_UART_Transmit+0x2c>
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e075      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_UART_Transmit+0x3e>
 800292c:	2302      	movs	r3, #2
 800292e:	e06e      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2221      	movs	r2, #33	; 0x21
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002946:	f7fd ff5b 	bl	8000800 <HAL_GetTick>
 800294a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002960:	d108      	bne.n	8002974 <HAL_UART_Transmit+0x82>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e003      	b.n	800297c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002984:	e02a      	b.n	80029dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa11 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e036      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3302      	adds	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	e007      	b.n	80029ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1cf      	bne.n	8002986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f9e1 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e006      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_UART_IRQHandler+0x52>
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa99 	bl	8002f9a <UART_Receive_IT>
      return;
 8002a68:	e17b      	b.n	8002d62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80b1 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x1bc>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_UART_IRQHandler+0x70>
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a6 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x90>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xb0>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0202 	orr.w	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_UART_IRQHandler+0xd0>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00f      	beq.n	8002b12 <HAL_UART_IRQHandler+0xfa>
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <HAL_UART_IRQHandler+0xee>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0208 	orr.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 811e 	beq.w	8002d58 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_UART_IRQHandler+0x11e>
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa32 	bl	8002f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_UART_IRQHandler+0x146>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d031      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f974 	bl	8002e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d023      	beq.n	8002bba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4a76      	ldr	r2, [pc, #472]	; (8002d68 <HAL_UART_IRQHandler+0x350>)
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd ffa8 	bl	8000aec <HAL_DMA_Abort_IT>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	e00e      	b.n	8002bd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8ec 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e00a      	b.n	8002bd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8e8 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e006      	b.n	8002bd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8e4 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bce:	e0c3      	b.n	8002d58 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	bf00      	nop
    return;
 8002bd2:	e0c1      	b.n	8002d58 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 80a1 	bne.w	8002d20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 809b 	beq.w	8002d20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8095 	beq.w	8002d20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04e      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c24:	8a3b      	ldrh	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8098 	beq.w	8002d5c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c30:	8a3a      	ldrh	r2, [r7, #16]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	f080 8092 	bcs.w	8002d5c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8a3a      	ldrh	r2, [r7, #16]
 8002c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d02b      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0210 	bic.w	r2, r2, #16
 8002c94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd feeb 	bl	8000a76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f876 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cb6:	e051      	b.n	8002d5c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d047      	beq.n	8002d60 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002cd0:	8a7b      	ldrh	r3, [r7, #18]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d044      	beq.n	8002d60 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ce4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0210 	bic.w	r2, r2, #16
 8002d12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d14:	8a7b      	ldrh	r3, [r7, #18]
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f842 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d1e:	e01f      	b.n	8002d60 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_UART_IRQHandler+0x324>
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8c9 	bl	8002ecc <UART_Transmit_IT>
    return;
 8002d3a:	e012      	b.n	8002d62 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <HAL_UART_IRQHandler+0x34a>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f90a 	bl	8002f6a <UART_EndTransmit_IT>
    return;
 8002d56:	e004      	b.n	8002d62 <HAL_UART_IRQHandler+0x34a>
    return;
 8002d58:	bf00      	nop
 8002d5a:	e002      	b.n	8002d62 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d60:	bf00      	nop
  }
}
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	08002ea5 	.word	0x08002ea5

08002d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	e02c      	b.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d028      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd8:	f7fd fd12 	bl	8000800 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d21d      	bcs.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002df6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e00f      	b.n	8002e44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d0c3      	beq.n	8002dca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0210 	bic.w	r2, r2, #16
 8002e8a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff66 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b21      	cmp	r3, #33	; 0x21
 8002ede:	d13e      	bne.n	8002f5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d114      	bne.n	8002f14 <UART_Transmit_IT+0x48>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d110      	bne.n	8002f14 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]
 8002f12:	e008      	b.n	8002f26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6211      	str	r1, [r2, #32]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff feee 	bl	8002d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b22      	cmp	r3, #34	; 0x22
 8002fac:	f040 8099 	bne.w	80030e2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	d117      	bne.n	8002fea <UART_Receive_IT+0x50>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe8:	e026      	b.n	8003038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	d007      	beq.n	800300e <UART_Receive_IT+0x74>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <UART_Receive_IT+0x82>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e008      	b.n	800302e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003028:	b2da      	uxtb	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4619      	mov	r1, r3
 8003046:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003048:	2b00      	cmp	r3, #0
 800304a:	d148      	bne.n	80030de <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0220 	bic.w	r2, r2, #32
 800305a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	2b01      	cmp	r3, #1
 800308a:	d123      	bne.n	80030d4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0210 	bic.w	r2, r2, #16
 80030a0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d10a      	bne.n	80030c6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe68 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
 80030d2:	e002      	b.n	80030da <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fe52 	bl	8002d7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e002      	b.n	80030e4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003126:	f023 030c 	bic.w	r3, r3, #12
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	430b      	orrs	r3, r1
 8003132:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <UART_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d103      	bne.n	800315c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7ff fb4e 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	e002      	b.n	8003162 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7ff fb36 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8003160:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <UART_SetConfig+0x118>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	0119      	lsls	r1, r3, #4
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f2f3 	udiv	r2, r2, r3
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <UART_SetConfig+0x118>)
 800319a:	fba3 0302 	umull	r0, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2064      	movs	r0, #100	; 0x64
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <UART_SetConfig+0x118>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	4419      	add	r1, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <UART_SetConfig+0x118>)
 80031d2:	fba3 0302 	umull	r0, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2064      	movs	r0, #100	; 0x64
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a07      	ldr	r2, [pc, #28]	; (8003204 <UART_SetConfig+0x118>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	440a      	add	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40013800 	.word	0x40013800
 8003204:	51eb851f 	.word	0x51eb851f

08003208 <__errno>:
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <__errno+0x8>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	2600      	movs	r6, #0
 8003218:	4d0c      	ldr	r5, [pc, #48]	; (800324c <__libc_init_array+0x38>)
 800321a:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	f000 fc9c 	bl	8003b60 <_init>
 8003228:	2600      	movs	r6, #0
 800322a:	4d0a      	ldr	r5, [pc, #40]	; (8003254 <__libc_init_array+0x40>)
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__libc_init_array+0x44>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08003be8 	.word	0x08003be8
 8003250:	08003be8 	.word	0x08003be8
 8003254:	08003be8 	.word	0x08003be8
 8003258:	08003bec 	.word	0x08003bec

0800325c <memset>:
 800325c:	4603      	mov	r3, r0
 800325e:	4402      	add	r2, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <siprintf>:
 800326c:	b40e      	push	{r1, r2, r3}
 800326e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003272:	b500      	push	{lr}
 8003274:	b09c      	sub	sp, #112	; 0x70
 8003276:	ab1d      	add	r3, sp, #116	; 0x74
 8003278:	9002      	str	r0, [sp, #8]
 800327a:	9006      	str	r0, [sp, #24]
 800327c:	9107      	str	r1, [sp, #28]
 800327e:	9104      	str	r1, [sp, #16]
 8003280:	4808      	ldr	r0, [pc, #32]	; (80032a4 <siprintf+0x38>)
 8003282:	4909      	ldr	r1, [pc, #36]	; (80032a8 <siprintf+0x3c>)
 8003284:	f853 2b04 	ldr.w	r2, [r3], #4
 8003288:	9105      	str	r1, [sp, #20]
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	a902      	add	r1, sp, #8
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f000 f868 	bl	8003364 <_svfiprintf_r>
 8003294:	2200      	movs	r2, #0
 8003296:	9b02      	ldr	r3, [sp, #8]
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	b01c      	add	sp, #112	; 0x70
 800329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a0:	b003      	add	sp, #12
 80032a2:	4770      	bx	lr
 80032a4:	2000000c 	.word	0x2000000c
 80032a8:	ffff0208 	.word	0xffff0208

080032ac <__ssputs_r>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	688e      	ldr	r6, [r1, #8]
 80032b2:	4682      	mov	sl, r0
 80032b4:	429e      	cmp	r6, r3
 80032b6:	460c      	mov	r4, r1
 80032b8:	4690      	mov	r8, r2
 80032ba:	461f      	mov	r7, r3
 80032bc:	d838      	bhi.n	8003330 <__ssputs_r+0x84>
 80032be:	898a      	ldrh	r2, [r1, #12]
 80032c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c4:	d032      	beq.n	800332c <__ssputs_r+0x80>
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	6909      	ldr	r1, [r1, #16]
 80032ca:	3301      	adds	r3, #1
 80032cc:	eba5 0901 	sub.w	r9, r5, r1
 80032d0:	6965      	ldr	r5, [r4, #20]
 80032d2:	444b      	add	r3, r9
 80032d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032dc:	106d      	asrs	r5, r5, #1
 80032de:	429d      	cmp	r5, r3
 80032e0:	bf38      	it	cc
 80032e2:	461d      	movcc	r5, r3
 80032e4:	0553      	lsls	r3, r2, #21
 80032e6:	d531      	bpl.n	800334c <__ssputs_r+0xa0>
 80032e8:	4629      	mov	r1, r5
 80032ea:	f000 fb6f 	bl	80039cc <_malloc_r>
 80032ee:	4606      	mov	r6, r0
 80032f0:	b950      	cbnz	r0, 8003308 <__ssputs_r+0x5c>
 80032f2:	230c      	movs	r3, #12
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f8ca 3000 	str.w	r3, [sl]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	464a      	mov	r2, r9
 800330a:	6921      	ldr	r1, [r4, #16]
 800330c:	f000 face 	bl	80038ac <memcpy>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	6126      	str	r6, [r4, #16]
 800331e:	444e      	add	r6, r9
 8003320:	6026      	str	r6, [r4, #0]
 8003322:	463e      	mov	r6, r7
 8003324:	6165      	str	r5, [r4, #20]
 8003326:	eba5 0509 	sub.w	r5, r5, r9
 800332a:	60a5      	str	r5, [r4, #8]
 800332c:	42be      	cmp	r6, r7
 800332e:	d900      	bls.n	8003332 <__ssputs_r+0x86>
 8003330:	463e      	mov	r6, r7
 8003332:	4632      	mov	r2, r6
 8003334:	4641      	mov	r1, r8
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	f000 fac6 	bl	80038c8 <memmove>
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	2000      	movs	r0, #0
 8003340:	1b9b      	subs	r3, r3, r6
 8003342:	60a3      	str	r3, [r4, #8]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	4433      	add	r3, r6
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	e7db      	b.n	8003304 <__ssputs_r+0x58>
 800334c:	462a      	mov	r2, r5
 800334e:	f000 fbb1 	bl	8003ab4 <_realloc_r>
 8003352:	4606      	mov	r6, r0
 8003354:	2800      	cmp	r0, #0
 8003356:	d1e1      	bne.n	800331c <__ssputs_r+0x70>
 8003358:	4650      	mov	r0, sl
 800335a:	6921      	ldr	r1, [r4, #16]
 800335c:	f000 face 	bl	80038fc <_free_r>
 8003360:	e7c7      	b.n	80032f2 <__ssputs_r+0x46>
	...

08003364 <_svfiprintf_r>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	4698      	mov	r8, r3
 800336a:	898b      	ldrh	r3, [r1, #12]
 800336c:	4607      	mov	r7, r0
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	460d      	mov	r5, r1
 8003372:	4614      	mov	r4, r2
 8003374:	b09d      	sub	sp, #116	; 0x74
 8003376:	d50e      	bpl.n	8003396 <_svfiprintf_r+0x32>
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b963      	cbnz	r3, 8003396 <_svfiprintf_r+0x32>
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	f000 fb25 	bl	80039cc <_malloc_r>
 8003382:	6028      	str	r0, [r5, #0]
 8003384:	6128      	str	r0, [r5, #16]
 8003386:	b920      	cbnz	r0, 8003392 <_svfiprintf_r+0x2e>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	e0d1      	b.n	8003536 <_svfiprintf_r+0x1d2>
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	616b      	str	r3, [r5, #20]
 8003396:	2300      	movs	r3, #0
 8003398:	9309      	str	r3, [sp, #36]	; 0x24
 800339a:	2320      	movs	r3, #32
 800339c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a0:	2330      	movs	r3, #48	; 0x30
 80033a2:	f04f 0901 	mov.w	r9, #1
 80033a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003550 <_svfiprintf_r+0x1ec>
 80033ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b2:	4623      	mov	r3, r4
 80033b4:	469a      	mov	sl, r3
 80033b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ba:	b10a      	cbz	r2, 80033c0 <_svfiprintf_r+0x5c>
 80033bc:	2a25      	cmp	r2, #37	; 0x25
 80033be:	d1f9      	bne.n	80033b4 <_svfiprintf_r+0x50>
 80033c0:	ebba 0b04 	subs.w	fp, sl, r4
 80033c4:	d00b      	beq.n	80033de <_svfiprintf_r+0x7a>
 80033c6:	465b      	mov	r3, fp
 80033c8:	4622      	mov	r2, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	4638      	mov	r0, r7
 80033ce:	f7ff ff6d 	bl	80032ac <__ssputs_r>
 80033d2:	3001      	adds	r0, #1
 80033d4:	f000 80aa 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033da:	445a      	add	r2, fp
 80033dc:	9209      	str	r2, [sp, #36]	; 0x24
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a2 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033e8:	2300      	movs	r3, #0
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f2:	f10a 0a01 	add.w	sl, sl, #1
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	9307      	str	r3, [sp, #28]
 80033fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033fe:	931a      	str	r3, [sp, #104]	; 0x68
 8003400:	4654      	mov	r4, sl
 8003402:	2205      	movs	r2, #5
 8003404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003408:	4851      	ldr	r0, [pc, #324]	; (8003550 <_svfiprintf_r+0x1ec>)
 800340a:	f000 fa41 	bl	8003890 <memchr>
 800340e:	9a04      	ldr	r2, [sp, #16]
 8003410:	b9d8      	cbnz	r0, 800344a <_svfiprintf_r+0xe6>
 8003412:	06d0      	lsls	r0, r2, #27
 8003414:	bf44      	itt	mi
 8003416:	2320      	movmi	r3, #32
 8003418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341c:	0711      	lsls	r1, r2, #28
 800341e:	bf44      	itt	mi
 8003420:	232b      	movmi	r3, #43	; 0x2b
 8003422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003426:	f89a 3000 	ldrb.w	r3, [sl]
 800342a:	2b2a      	cmp	r3, #42	; 0x2a
 800342c:	d015      	beq.n	800345a <_svfiprintf_r+0xf6>
 800342e:	4654      	mov	r4, sl
 8003430:	2000      	movs	r0, #0
 8003432:	f04f 0c0a 	mov.w	ip, #10
 8003436:	9a07      	ldr	r2, [sp, #28]
 8003438:	4621      	mov	r1, r4
 800343a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800343e:	3b30      	subs	r3, #48	; 0x30
 8003440:	2b09      	cmp	r3, #9
 8003442:	d94e      	bls.n	80034e2 <_svfiprintf_r+0x17e>
 8003444:	b1b0      	cbz	r0, 8003474 <_svfiprintf_r+0x110>
 8003446:	9207      	str	r2, [sp, #28]
 8003448:	e014      	b.n	8003474 <_svfiprintf_r+0x110>
 800344a:	eba0 0308 	sub.w	r3, r0, r8
 800344e:	fa09 f303 	lsl.w	r3, r9, r3
 8003452:	4313      	orrs	r3, r2
 8003454:	46a2      	mov	sl, r4
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	e7d2      	b.n	8003400 <_svfiprintf_r+0x9c>
 800345a:	9b03      	ldr	r3, [sp, #12]
 800345c:	1d19      	adds	r1, r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	9103      	str	r1, [sp, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfbb      	ittet	lt
 8003466:	425b      	neglt	r3, r3
 8003468:	f042 0202 	orrlt.w	r2, r2, #2
 800346c:	9307      	strge	r3, [sp, #28]
 800346e:	9307      	strlt	r3, [sp, #28]
 8003470:	bfb8      	it	lt
 8003472:	9204      	strlt	r2, [sp, #16]
 8003474:	7823      	ldrb	r3, [r4, #0]
 8003476:	2b2e      	cmp	r3, #46	; 0x2e
 8003478:	d10c      	bne.n	8003494 <_svfiprintf_r+0x130>
 800347a:	7863      	ldrb	r3, [r4, #1]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d135      	bne.n	80034ec <_svfiprintf_r+0x188>
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	3402      	adds	r4, #2
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	9203      	str	r2, [sp, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfb8      	it	lt
 800348e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003554 <_svfiprintf_r+0x1f0>
 8003498:	2203      	movs	r2, #3
 800349a:	4650      	mov	r0, sl
 800349c:	7821      	ldrb	r1, [r4, #0]
 800349e:	f000 f9f7 	bl	8003890 <memchr>
 80034a2:	b140      	cbz	r0, 80034b6 <_svfiprintf_r+0x152>
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	eba0 000a 	sub.w	r0, r0, sl
 80034aa:	fa03 f000 	lsl.w	r0, r3, r0
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	3401      	adds	r4, #1
 80034b2:	4303      	orrs	r3, r0
 80034b4:	9304      	str	r3, [sp, #16]
 80034b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ba:	2206      	movs	r2, #6
 80034bc:	4826      	ldr	r0, [pc, #152]	; (8003558 <_svfiprintf_r+0x1f4>)
 80034be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c2:	f000 f9e5 	bl	8003890 <memchr>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d038      	beq.n	800353c <_svfiprintf_r+0x1d8>
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <_svfiprintf_r+0x1f8>)
 80034cc:	bb1b      	cbnz	r3, 8003516 <_svfiprintf_r+0x1b2>
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	3307      	adds	r3, #7
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	3308      	adds	r3, #8
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034dc:	4433      	add	r3, r6
 80034de:	9309      	str	r3, [sp, #36]	; 0x24
 80034e0:	e767      	b.n	80033b2 <_svfiprintf_r+0x4e>
 80034e2:	460c      	mov	r4, r1
 80034e4:	2001      	movs	r0, #1
 80034e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ea:	e7a5      	b.n	8003438 <_svfiprintf_r+0xd4>
 80034ec:	2300      	movs	r3, #0
 80034ee:	f04f 0c0a 	mov.w	ip, #10
 80034f2:	4619      	mov	r1, r3
 80034f4:	3401      	adds	r4, #1
 80034f6:	9305      	str	r3, [sp, #20]
 80034f8:	4620      	mov	r0, r4
 80034fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fe:	3a30      	subs	r2, #48	; 0x30
 8003500:	2a09      	cmp	r2, #9
 8003502:	d903      	bls.n	800350c <_svfiprintf_r+0x1a8>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0c5      	beq.n	8003494 <_svfiprintf_r+0x130>
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	e7c3      	b.n	8003494 <_svfiprintf_r+0x130>
 800350c:	4604      	mov	r4, r0
 800350e:	2301      	movs	r3, #1
 8003510:	fb0c 2101 	mla	r1, ip, r1, r2
 8003514:	e7f0      	b.n	80034f8 <_svfiprintf_r+0x194>
 8003516:	ab03      	add	r3, sp, #12
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	462a      	mov	r2, r5
 800351c:	4638      	mov	r0, r7
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <_svfiprintf_r+0x1fc>)
 8003520:	a904      	add	r1, sp, #16
 8003522:	f3af 8000 	nop.w
 8003526:	1c42      	adds	r2, r0, #1
 8003528:	4606      	mov	r6, r0
 800352a:	d1d6      	bne.n	80034da <_svfiprintf_r+0x176>
 800352c:	89ab      	ldrh	r3, [r5, #12]
 800352e:	065b      	lsls	r3, r3, #25
 8003530:	f53f af2c 	bmi.w	800338c <_svfiprintf_r+0x28>
 8003534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003536:	b01d      	add	sp, #116	; 0x74
 8003538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	ab03      	add	r3, sp, #12
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	462a      	mov	r2, r5
 8003542:	4638      	mov	r0, r7
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <_svfiprintf_r+0x1fc>)
 8003546:	a904      	add	r1, sp, #16
 8003548:	f000 f87c 	bl	8003644 <_printf_i>
 800354c:	e7eb      	b.n	8003526 <_svfiprintf_r+0x1c2>
 800354e:	bf00      	nop
 8003550:	08003bb4 	.word	0x08003bb4
 8003554:	08003bba 	.word	0x08003bba
 8003558:	08003bbe 	.word	0x08003bbe
 800355c:	00000000 	.word	0x00000000
 8003560:	080032ad 	.word	0x080032ad

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4616      	mov	r6, r2
 800356a:	4699      	mov	r9, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	4607      	mov	r7, r0
 8003572:	4293      	cmp	r3, r2
 8003574:	bfb8      	it	lt
 8003576:	4613      	movlt	r3, r2
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800357e:	460c      	mov	r4, r1
 8003580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003584:	b10a      	cbz	r2, 800358a <_printf_common+0x26>
 8003586:	3301      	adds	r3, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	0699      	lsls	r1, r3, #26
 800358e:	bf42      	ittt	mi
 8003590:	6833      	ldrmi	r3, [r6, #0]
 8003592:	3302      	addmi	r3, #2
 8003594:	6033      	strmi	r3, [r6, #0]
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	f015 0506 	ands.w	r5, r5, #6
 800359c:	d106      	bne.n	80035ac <_printf_common+0x48>
 800359e:	f104 0a19 	add.w	sl, r4, #25
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dc28      	bgt.n	80035fe <_printf_common+0x9a>
 80035ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b0:	1e13      	subs	r3, r2, #0
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	0692      	lsls	r2, r2, #26
 80035ba:	d42d      	bmi.n	8003618 <_printf_common+0xb4>
 80035bc:	4649      	mov	r1, r9
 80035be:	4638      	mov	r0, r7
 80035c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d020      	beq.n	800360c <_printf_common+0xa8>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	68e5      	ldr	r5, [r4, #12]
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf18      	it	ne
 80035d6:	2500      	movne	r5, #0
 80035d8:	6832      	ldr	r2, [r6, #0]
 80035da:	f04f 0600 	mov.w	r6, #0
 80035de:	68a3      	ldr	r3, [r4, #8]
 80035e0:	bf08      	it	eq
 80035e2:	1aad      	subeq	r5, r5, r2
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	bf08      	it	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfc4      	itt	gt
 80035f0:	1a9b      	subgt	r3, r3, r2
 80035f2:	18ed      	addgt	r5, r5, r3
 80035f4:	341a      	adds	r4, #26
 80035f6:	42b5      	cmp	r5, r6
 80035f8:	d11a      	bne.n	8003630 <_printf_common+0xcc>
 80035fa:	2000      	movs	r0, #0
 80035fc:	e008      	b.n	8003610 <_printf_common+0xac>
 80035fe:	2301      	movs	r3, #1
 8003600:	4652      	mov	r2, sl
 8003602:	4649      	mov	r1, r9
 8003604:	4638      	mov	r0, r7
 8003606:	47c0      	blx	r8
 8003608:	3001      	adds	r0, #1
 800360a:	d103      	bne.n	8003614 <_printf_common+0xb0>
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003614:	3501      	adds	r5, #1
 8003616:	e7c4      	b.n	80035a2 <_printf_common+0x3e>
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	18e1      	adds	r1, r4, r3
 800361c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003626:	4422      	add	r2, r4
 8003628:	3302      	adds	r3, #2
 800362a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800362e:	e7c5      	b.n	80035bc <_printf_common+0x58>
 8003630:	2301      	movs	r3, #1
 8003632:	4622      	mov	r2, r4
 8003634:	4649      	mov	r1, r9
 8003636:	4638      	mov	r0, r7
 8003638:	47c0      	blx	r8
 800363a:	3001      	adds	r0, #1
 800363c:	d0e6      	beq.n	800360c <_printf_common+0xa8>
 800363e:	3601      	adds	r6, #1
 8003640:	e7d9      	b.n	80035f6 <_printf_common+0x92>
	...

08003644 <_printf_i>:
 8003644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	7e0f      	ldrb	r7, [r1, #24]
 800364a:	4691      	mov	r9, r2
 800364c:	2f78      	cmp	r7, #120	; 0x78
 800364e:	4680      	mov	r8, r0
 8003650:	460c      	mov	r4, r1
 8003652:	469a      	mov	sl, r3
 8003654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800365a:	d807      	bhi.n	800366c <_printf_i+0x28>
 800365c:	2f62      	cmp	r7, #98	; 0x62
 800365e:	d80a      	bhi.n	8003676 <_printf_i+0x32>
 8003660:	2f00      	cmp	r7, #0
 8003662:	f000 80d9 	beq.w	8003818 <_printf_i+0x1d4>
 8003666:	2f58      	cmp	r7, #88	; 0x58
 8003668:	f000 80a4 	beq.w	80037b4 <_printf_i+0x170>
 800366c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003674:	e03a      	b.n	80036ec <_printf_i+0xa8>
 8003676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800367a:	2b15      	cmp	r3, #21
 800367c:	d8f6      	bhi.n	800366c <_printf_i+0x28>
 800367e:	a101      	add	r1, pc, #4	; (adr r1, 8003684 <_printf_i+0x40>)
 8003680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036f1 	.word	0x080036f1
 800368c:	0800366d 	.word	0x0800366d
 8003690:	0800366d 	.word	0x0800366d
 8003694:	0800366d 	.word	0x0800366d
 8003698:	0800366d 	.word	0x0800366d
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	0800366d 	.word	0x0800366d
 80036a4:	0800366d 	.word	0x0800366d
 80036a8:	0800366d 	.word	0x0800366d
 80036ac:	0800366d 	.word	0x0800366d
 80036b0:	080037ff 	.word	0x080037ff
 80036b4:	08003721 	.word	0x08003721
 80036b8:	080037e1 	.word	0x080037e1
 80036bc:	0800366d 	.word	0x0800366d
 80036c0:	0800366d 	.word	0x0800366d
 80036c4:	08003821 	.word	0x08003821
 80036c8:	0800366d 	.word	0x0800366d
 80036cc:	08003721 	.word	0x08003721
 80036d0:	0800366d 	.word	0x0800366d
 80036d4:	0800366d 	.word	0x0800366d
 80036d8:	080037e9 	.word	0x080037e9
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	602a      	str	r2, [r5, #0]
 80036e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0a4      	b.n	800383a <_printf_i+0x1f6>
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	6829      	ldr	r1, [r5, #0]
 80036f4:	0606      	lsls	r6, r0, #24
 80036f6:	f101 0304 	add.w	r3, r1, #4
 80036fa:	d50a      	bpl.n	8003712 <_printf_i+0xce>
 80036fc:	680e      	ldr	r6, [r1, #0]
 80036fe:	602b      	str	r3, [r5, #0]
 8003700:	2e00      	cmp	r6, #0
 8003702:	da03      	bge.n	800370c <_printf_i+0xc8>
 8003704:	232d      	movs	r3, #45	; 0x2d
 8003706:	4276      	negs	r6, r6
 8003708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370c:	230a      	movs	r3, #10
 800370e:	485e      	ldr	r0, [pc, #376]	; (8003888 <_printf_i+0x244>)
 8003710:	e019      	b.n	8003746 <_printf_i+0x102>
 8003712:	680e      	ldr	r6, [r1, #0]
 8003714:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003718:	602b      	str	r3, [r5, #0]
 800371a:	bf18      	it	ne
 800371c:	b236      	sxthne	r6, r6
 800371e:	e7ef      	b.n	8003700 <_printf_i+0xbc>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	1d19      	adds	r1, r3, #4
 8003726:	6029      	str	r1, [r5, #0]
 8003728:	0601      	lsls	r1, r0, #24
 800372a:	d501      	bpl.n	8003730 <_printf_i+0xec>
 800372c:	681e      	ldr	r6, [r3, #0]
 800372e:	e002      	b.n	8003736 <_printf_i+0xf2>
 8003730:	0646      	lsls	r6, r0, #25
 8003732:	d5fb      	bpl.n	800372c <_printf_i+0xe8>
 8003734:	881e      	ldrh	r6, [r3, #0]
 8003736:	2f6f      	cmp	r7, #111	; 0x6f
 8003738:	bf0c      	ite	eq
 800373a:	2308      	moveq	r3, #8
 800373c:	230a      	movne	r3, #10
 800373e:	4852      	ldr	r0, [pc, #328]	; (8003888 <_printf_i+0x244>)
 8003740:	2100      	movs	r1, #0
 8003742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003746:	6865      	ldr	r5, [r4, #4]
 8003748:	2d00      	cmp	r5, #0
 800374a:	bfa8      	it	ge
 800374c:	6821      	ldrge	r1, [r4, #0]
 800374e:	60a5      	str	r5, [r4, #8]
 8003750:	bfa4      	itt	ge
 8003752:	f021 0104 	bicge.w	r1, r1, #4
 8003756:	6021      	strge	r1, [r4, #0]
 8003758:	b90e      	cbnz	r6, 800375e <_printf_i+0x11a>
 800375a:	2d00      	cmp	r5, #0
 800375c:	d04d      	beq.n	80037fa <_printf_i+0x1b6>
 800375e:	4615      	mov	r5, r2
 8003760:	fbb6 f1f3 	udiv	r1, r6, r3
 8003764:	fb03 6711 	mls	r7, r3, r1, r6
 8003768:	5dc7      	ldrb	r7, [r0, r7]
 800376a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800376e:	4637      	mov	r7, r6
 8003770:	42bb      	cmp	r3, r7
 8003772:	460e      	mov	r6, r1
 8003774:	d9f4      	bls.n	8003760 <_printf_i+0x11c>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d10b      	bne.n	8003792 <_printf_i+0x14e>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	07de      	lsls	r6, r3, #31
 800377e:	d508      	bpl.n	8003792 <_printf_i+0x14e>
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	6861      	ldr	r1, [r4, #4]
 8003784:	4299      	cmp	r1, r3
 8003786:	bfde      	ittt	le
 8003788:	2330      	movle	r3, #48	; 0x30
 800378a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800378e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003792:	1b52      	subs	r2, r2, r5
 8003794:	6122      	str	r2, [r4, #16]
 8003796:	464b      	mov	r3, r9
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f8cd a000 	str.w	sl, [sp]
 80037a0:	aa03      	add	r2, sp, #12
 80037a2:	f7ff fedf 	bl	8003564 <_printf_common>
 80037a6:	3001      	adds	r0, #1
 80037a8:	d14c      	bne.n	8003844 <_printf_i+0x200>
 80037aa:	f04f 30ff 	mov.w	r0, #4294967295
 80037ae:	b004      	add	sp, #16
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	4834      	ldr	r0, [pc, #208]	; (8003888 <_printf_i+0x244>)
 80037b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037ba:	6829      	ldr	r1, [r5, #0]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f851 6b04 	ldr.w	r6, [r1], #4
 80037c2:	6029      	str	r1, [r5, #0]
 80037c4:	061d      	lsls	r5, r3, #24
 80037c6:	d514      	bpl.n	80037f2 <_printf_i+0x1ae>
 80037c8:	07df      	lsls	r7, r3, #31
 80037ca:	bf44      	itt	mi
 80037cc:	f043 0320 	orrmi.w	r3, r3, #32
 80037d0:	6023      	strmi	r3, [r4, #0]
 80037d2:	b91e      	cbnz	r6, 80037dc <_printf_i+0x198>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	2310      	movs	r3, #16
 80037de:	e7af      	b.n	8003740 <_printf_i+0xfc>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f043 0320 	orr.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2378      	movs	r3, #120	; 0x78
 80037ea:	4828      	ldr	r0, [pc, #160]	; (800388c <_printf_i+0x248>)
 80037ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037f0:	e7e3      	b.n	80037ba <_printf_i+0x176>
 80037f2:	0659      	lsls	r1, r3, #25
 80037f4:	bf48      	it	mi
 80037f6:	b2b6      	uxthmi	r6, r6
 80037f8:	e7e6      	b.n	80037c8 <_printf_i+0x184>
 80037fa:	4615      	mov	r5, r2
 80037fc:	e7bb      	b.n	8003776 <_printf_i+0x132>
 80037fe:	682b      	ldr	r3, [r5, #0]
 8003800:	6826      	ldr	r6, [r4, #0]
 8003802:	1d18      	adds	r0, r3, #4
 8003804:	6961      	ldr	r1, [r4, #20]
 8003806:	6028      	str	r0, [r5, #0]
 8003808:	0635      	lsls	r5, r6, #24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	d501      	bpl.n	8003812 <_printf_i+0x1ce>
 800380e:	6019      	str	r1, [r3, #0]
 8003810:	e002      	b.n	8003818 <_printf_i+0x1d4>
 8003812:	0670      	lsls	r0, r6, #25
 8003814:	d5fb      	bpl.n	800380e <_printf_i+0x1ca>
 8003816:	8019      	strh	r1, [r3, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	4615      	mov	r5, r2
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	e7ba      	b.n	8003796 <_printf_i+0x152>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	602a      	str	r2, [r5, #0]
 8003828:	681d      	ldr	r5, [r3, #0]
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f82f 	bl	8003890 <memchr>
 8003832:	b108      	cbz	r0, 8003838 <_printf_i+0x1f4>
 8003834:	1b40      	subs	r0, r0, r5
 8003836:	6060      	str	r0, [r4, #4]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2300      	movs	r3, #0
 800383e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003842:	e7a8      	b.n	8003796 <_printf_i+0x152>
 8003844:	462a      	mov	r2, r5
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	47d0      	blx	sl
 800384e:	3001      	adds	r0, #1
 8003850:	d0ab      	beq.n	80037aa <_printf_i+0x166>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	079b      	lsls	r3, r3, #30
 8003856:	d413      	bmi.n	8003880 <_printf_i+0x23c>
 8003858:	68e0      	ldr	r0, [r4, #12]
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	4298      	cmp	r0, r3
 800385e:	bfb8      	it	lt
 8003860:	4618      	movlt	r0, r3
 8003862:	e7a4      	b.n	80037ae <_printf_i+0x16a>
 8003864:	2301      	movs	r3, #1
 8003866:	4632      	mov	r2, r6
 8003868:	4649      	mov	r1, r9
 800386a:	4640      	mov	r0, r8
 800386c:	47d0      	blx	sl
 800386e:	3001      	adds	r0, #1
 8003870:	d09b      	beq.n	80037aa <_printf_i+0x166>
 8003872:	3501      	adds	r5, #1
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	9903      	ldr	r1, [sp, #12]
 8003878:	1a5b      	subs	r3, r3, r1
 800387a:	42ab      	cmp	r3, r5
 800387c:	dcf2      	bgt.n	8003864 <_printf_i+0x220>
 800387e:	e7eb      	b.n	8003858 <_printf_i+0x214>
 8003880:	2500      	movs	r5, #0
 8003882:	f104 0619 	add.w	r6, r4, #25
 8003886:	e7f5      	b.n	8003874 <_printf_i+0x230>
 8003888:	08003bc5 	.word	0x08003bc5
 800388c:	08003bd6 	.word	0x08003bd6

08003890 <memchr>:
 8003890:	4603      	mov	r3, r0
 8003892:	b510      	push	{r4, lr}
 8003894:	b2c9      	uxtb	r1, r1
 8003896:	4402      	add	r2, r0
 8003898:	4293      	cmp	r3, r2
 800389a:	4618      	mov	r0, r3
 800389c:	d101      	bne.n	80038a2 <memchr+0x12>
 800389e:	2000      	movs	r0, #0
 80038a0:	e003      	b.n	80038aa <memchr+0x1a>
 80038a2:	7804      	ldrb	r4, [r0, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	428c      	cmp	r4, r1
 80038a8:	d1f6      	bne.n	8003898 <memchr+0x8>
 80038aa:	bd10      	pop	{r4, pc}

080038ac <memcpy>:
 80038ac:	440a      	add	r2, r1
 80038ae:	4291      	cmp	r1, r2
 80038b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b4:	d100      	bne.n	80038b8 <memcpy+0xc>
 80038b6:	4770      	bx	lr
 80038b8:	b510      	push	{r4, lr}
 80038ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038be:	4291      	cmp	r1, r2
 80038c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c4:	d1f9      	bne.n	80038ba <memcpy+0xe>
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <memmove>:
 80038c8:	4288      	cmp	r0, r1
 80038ca:	b510      	push	{r4, lr}
 80038cc:	eb01 0402 	add.w	r4, r1, r2
 80038d0:	d902      	bls.n	80038d8 <memmove+0x10>
 80038d2:	4284      	cmp	r4, r0
 80038d4:	4623      	mov	r3, r4
 80038d6:	d807      	bhi.n	80038e8 <memmove+0x20>
 80038d8:	1e43      	subs	r3, r0, #1
 80038da:	42a1      	cmp	r1, r4
 80038dc:	d008      	beq.n	80038f0 <memmove+0x28>
 80038de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038e6:	e7f8      	b.n	80038da <memmove+0x12>
 80038e8:	4601      	mov	r1, r0
 80038ea:	4402      	add	r2, r0
 80038ec:	428a      	cmp	r2, r1
 80038ee:	d100      	bne.n	80038f2 <memmove+0x2a>
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038fa:	e7f7      	b.n	80038ec <memmove+0x24>

080038fc <_free_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4605      	mov	r5, r0
 8003900:	2900      	cmp	r1, #0
 8003902:	d040      	beq.n	8003986 <_free_r+0x8a>
 8003904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003908:	1f0c      	subs	r4, r1, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfb8      	it	lt
 800390e:	18e4      	addlt	r4, r4, r3
 8003910:	f000 f910 	bl	8003b34 <__malloc_lock>
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <_free_r+0x8c>)
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	b933      	cbnz	r3, 8003928 <_free_r+0x2c>
 800391a:	6063      	str	r3, [r4, #4]
 800391c:	6014      	str	r4, [r2, #0]
 800391e:	4628      	mov	r0, r5
 8003920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003924:	f000 b90c 	b.w	8003b40 <__malloc_unlock>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d908      	bls.n	800393e <_free_r+0x42>
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	1821      	adds	r1, r4, r0
 8003930:	428b      	cmp	r3, r1
 8003932:	bf01      	itttt	eq
 8003934:	6819      	ldreq	r1, [r3, #0]
 8003936:	685b      	ldreq	r3, [r3, #4]
 8003938:	1809      	addeq	r1, r1, r0
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	e7ed      	b.n	800391a <_free_r+0x1e>
 800393e:	461a      	mov	r2, r3
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b10b      	cbz	r3, 8003948 <_free_r+0x4c>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d9fa      	bls.n	800393e <_free_r+0x42>
 8003948:	6811      	ldr	r1, [r2, #0]
 800394a:	1850      	adds	r0, r2, r1
 800394c:	42a0      	cmp	r0, r4
 800394e:	d10b      	bne.n	8003968 <_free_r+0x6c>
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	4401      	add	r1, r0
 8003954:	1850      	adds	r0, r2, r1
 8003956:	4283      	cmp	r3, r0
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	d1e0      	bne.n	800391e <_free_r+0x22>
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4401      	add	r1, r0
 8003962:	6011      	str	r1, [r2, #0]
 8003964:	6053      	str	r3, [r2, #4]
 8003966:	e7da      	b.n	800391e <_free_r+0x22>
 8003968:	d902      	bls.n	8003970 <_free_r+0x74>
 800396a:	230c      	movs	r3, #12
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	e7d6      	b.n	800391e <_free_r+0x22>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	1821      	adds	r1, r4, r0
 8003974:	428b      	cmp	r3, r1
 8003976:	bf01      	itttt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	1809      	addeq	r1, r1, r0
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	6054      	str	r4, [r2, #4]
 8003984:	e7cb      	b.n	800391e <_free_r+0x22>
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	2000012c 	.word	0x2000012c

0800398c <sbrk_aligned>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4e0e      	ldr	r6, [pc, #56]	; (80039c8 <sbrk_aligned+0x3c>)
 8003990:	460c      	mov	r4, r1
 8003992:	6831      	ldr	r1, [r6, #0]
 8003994:	4605      	mov	r5, r0
 8003996:	b911      	cbnz	r1, 800399e <sbrk_aligned+0x12>
 8003998:	f000 f8bc 	bl	8003b14 <_sbrk_r>
 800399c:	6030      	str	r0, [r6, #0]
 800399e:	4621      	mov	r1, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 f8b7 	bl	8003b14 <_sbrk_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d00a      	beq.n	80039c0 <sbrk_aligned+0x34>
 80039aa:	1cc4      	adds	r4, r0, #3
 80039ac:	f024 0403 	bic.w	r4, r4, #3
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d007      	beq.n	80039c4 <sbrk_aligned+0x38>
 80039b4:	1a21      	subs	r1, r4, r0
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f8ac 	bl	8003b14 <_sbrk_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d101      	bne.n	80039c4 <sbrk_aligned+0x38>
 80039c0:	f04f 34ff 	mov.w	r4, #4294967295
 80039c4:	4620      	mov	r0, r4
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	20000130 	.word	0x20000130

080039cc <_malloc_r>:
 80039cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d0:	1ccd      	adds	r5, r1, #3
 80039d2:	f025 0503 	bic.w	r5, r5, #3
 80039d6:	3508      	adds	r5, #8
 80039d8:	2d0c      	cmp	r5, #12
 80039da:	bf38      	it	cc
 80039dc:	250c      	movcc	r5, #12
 80039de:	2d00      	cmp	r5, #0
 80039e0:	4607      	mov	r7, r0
 80039e2:	db01      	blt.n	80039e8 <_malloc_r+0x1c>
 80039e4:	42a9      	cmp	r1, r5
 80039e6:	d905      	bls.n	80039f4 <_malloc_r+0x28>
 80039e8:	230c      	movs	r3, #12
 80039ea:	2600      	movs	r6, #0
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4630      	mov	r0, r6
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f4:	4e2e      	ldr	r6, [pc, #184]	; (8003ab0 <_malloc_r+0xe4>)
 80039f6:	f000 f89d 	bl	8003b34 <__malloc_lock>
 80039fa:	6833      	ldr	r3, [r6, #0]
 80039fc:	461c      	mov	r4, r3
 80039fe:	bb34      	cbnz	r4, 8003a4e <_malloc_r+0x82>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4638      	mov	r0, r7
 8003a04:	f7ff ffc2 	bl	800398c <sbrk_aligned>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	d14d      	bne.n	8003aaa <_malloc_r+0xde>
 8003a0e:	6834      	ldr	r4, [r6, #0]
 8003a10:	4626      	mov	r6, r4
 8003a12:	2e00      	cmp	r6, #0
 8003a14:	d140      	bne.n	8003a98 <_malloc_r+0xcc>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4631      	mov	r1, r6
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	eb04 0803 	add.w	r8, r4, r3
 8003a20:	f000 f878 	bl	8003b14 <_sbrk_r>
 8003a24:	4580      	cmp	r8, r0
 8003a26:	d13a      	bne.n	8003a9e <_malloc_r+0xd2>
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	3503      	adds	r5, #3
 8003a2c:	1a6d      	subs	r5, r5, r1
 8003a2e:	f025 0503 	bic.w	r5, r5, #3
 8003a32:	3508      	adds	r5, #8
 8003a34:	2d0c      	cmp	r5, #12
 8003a36:	bf38      	it	cc
 8003a38:	250c      	movcc	r5, #12
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7ff ffa5 	bl	800398c <sbrk_aligned>
 8003a42:	3001      	adds	r0, #1
 8003a44:	d02b      	beq.n	8003a9e <_malloc_r+0xd2>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	442b      	add	r3, r5
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	e00e      	b.n	8003a6c <_malloc_r+0xa0>
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	1b52      	subs	r2, r2, r5
 8003a52:	d41e      	bmi.n	8003a92 <_malloc_r+0xc6>
 8003a54:	2a0b      	cmp	r2, #11
 8003a56:	d916      	bls.n	8003a86 <_malloc_r+0xba>
 8003a58:	1961      	adds	r1, r4, r5
 8003a5a:	42a3      	cmp	r3, r4
 8003a5c:	6025      	str	r5, [r4, #0]
 8003a5e:	bf18      	it	ne
 8003a60:	6059      	strne	r1, [r3, #4]
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	bf08      	it	eq
 8003a66:	6031      	streq	r1, [r6, #0]
 8003a68:	5162      	str	r2, [r4, r5]
 8003a6a:	604b      	str	r3, [r1, #4]
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f104 060b 	add.w	r6, r4, #11
 8003a72:	f000 f865 	bl	8003b40 <__malloc_unlock>
 8003a76:	f026 0607 	bic.w	r6, r6, #7
 8003a7a:	1d23      	adds	r3, r4, #4
 8003a7c:	1af2      	subs	r2, r6, r3
 8003a7e:	d0b6      	beq.n	80039ee <_malloc_r+0x22>
 8003a80:	1b9b      	subs	r3, r3, r6
 8003a82:	50a3      	str	r3, [r4, r2]
 8003a84:	e7b3      	b.n	80039ee <_malloc_r+0x22>
 8003a86:	6862      	ldr	r2, [r4, #4]
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	bf0c      	ite	eq
 8003a8c:	6032      	streq	r2, [r6, #0]
 8003a8e:	605a      	strne	r2, [r3, #4]
 8003a90:	e7ec      	b.n	8003a6c <_malloc_r+0xa0>
 8003a92:	4623      	mov	r3, r4
 8003a94:	6864      	ldr	r4, [r4, #4]
 8003a96:	e7b2      	b.n	80039fe <_malloc_r+0x32>
 8003a98:	4634      	mov	r4, r6
 8003a9a:	6876      	ldr	r6, [r6, #4]
 8003a9c:	e7b9      	b.n	8003a12 <_malloc_r+0x46>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	f000 f84c 	bl	8003b40 <__malloc_unlock>
 8003aa8:	e7a1      	b.n	80039ee <_malloc_r+0x22>
 8003aaa:	6025      	str	r5, [r4, #0]
 8003aac:	e7de      	b.n	8003a6c <_malloc_r+0xa0>
 8003aae:	bf00      	nop
 8003ab0:	2000012c 	.word	0x2000012c

08003ab4 <_realloc_r>:
 8003ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab8:	4680      	mov	r8, r0
 8003aba:	4614      	mov	r4, r2
 8003abc:	460e      	mov	r6, r1
 8003abe:	b921      	cbnz	r1, 8003aca <_realloc_r+0x16>
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac6:	f7ff bf81 	b.w	80039cc <_malloc_r>
 8003aca:	b92a      	cbnz	r2, 8003ad8 <_realloc_r+0x24>
 8003acc:	f7ff ff16 	bl	80038fc <_free_r>
 8003ad0:	4625      	mov	r5, r4
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad8:	f000 f838 	bl	8003b4c <_malloc_usable_size_r>
 8003adc:	4284      	cmp	r4, r0
 8003ade:	4607      	mov	r7, r0
 8003ae0:	d802      	bhi.n	8003ae8 <_realloc_r+0x34>
 8003ae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ae6:	d812      	bhi.n	8003b0e <_realloc_r+0x5a>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4640      	mov	r0, r8
 8003aec:	f7ff ff6e 	bl	80039cc <_malloc_r>
 8003af0:	4605      	mov	r5, r0
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0ed      	beq.n	8003ad2 <_realloc_r+0x1e>
 8003af6:	42bc      	cmp	r4, r7
 8003af8:	4622      	mov	r2, r4
 8003afa:	4631      	mov	r1, r6
 8003afc:	bf28      	it	cs
 8003afe:	463a      	movcs	r2, r7
 8003b00:	f7ff fed4 	bl	80038ac <memcpy>
 8003b04:	4631      	mov	r1, r6
 8003b06:	4640      	mov	r0, r8
 8003b08:	f7ff fef8 	bl	80038fc <_free_r>
 8003b0c:	e7e1      	b.n	8003ad2 <_realloc_r+0x1e>
 8003b0e:	4635      	mov	r5, r6
 8003b10:	e7df      	b.n	8003ad2 <_realloc_r+0x1e>
	...

08003b14 <_sbrk_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	2300      	movs	r3, #0
 8003b18:	4d05      	ldr	r5, [pc, #20]	; (8003b30 <_sbrk_r+0x1c>)
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7fc fd3e 	bl	80005a0 <_sbrk>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_sbrk_r+0x1a>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_sbrk_r+0x1a>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000134 	.word	0x20000134

08003b34 <__malloc_lock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	; (8003b3c <__malloc_lock+0x8>)
 8003b36:	f000 b811 	b.w	8003b5c <__retarget_lock_acquire_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000138 	.word	0x20000138

08003b40 <__malloc_unlock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	; (8003b48 <__malloc_unlock+0x8>)
 8003b42:	f000 b80c 	b.w	8003b5e <__retarget_lock_release_recursive>
 8003b46:	bf00      	nop
 8003b48:	20000138 	.word	0x20000138

08003b4c <_malloc_usable_size_r>:
 8003b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b50:	1f18      	subs	r0, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbc      	itt	lt
 8003b56:	580b      	ldrlt	r3, [r1, r0]
 8003b58:	18c0      	addlt	r0, r0, r3
 8003b5a:	4770      	bx	lr

08003b5c <__retarget_lock_acquire_recursive>:
 8003b5c:	4770      	bx	lr

08003b5e <__retarget_lock_release_recursive>:
 8003b5e:	4770      	bx	lr

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
