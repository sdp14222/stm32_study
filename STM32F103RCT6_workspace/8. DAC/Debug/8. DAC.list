
8. DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040dc  080040dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040dc  080040dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040dc  080040dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080040f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080040f0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf13  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f3  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4c0  00000000  00000000  0002f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec01  00000000  00000000  00049e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a419  00000000  00000000  00058a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2e52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000f2ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003ccc 	.word	0x08003ccc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003ccc 	.word	0x08003ccc

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_DAC_Init+0x4c>)
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MX_DAC_Init+0x50>)
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_DAC_Init+0x4c>)
 800086e:	f000 fc30 	bl	80010d2 <HAL_DAC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000878:	f000 f93e 	bl	8000af8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_DAC_Init+0x4c>)
 800088c:	f000 fcb8 	bl	8001200 <HAL_DAC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000896:	f000 f92f 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	40007400 	.word	0x40007400

080008ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_DAC_MspInit+0x6c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d121      	bne.n	8000910 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008d6:	61d3      	str	r3, [r2, #28]
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008fc:	2310      	movs	r3, #16
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	2303      	movs	r3, #3
 8000902:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_DAC_MspInit+0x74>)
 800090c:	f000 fe08 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40007400 	.word	0x40007400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800

08000924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x40>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <MX_GPIO_Init+0x40>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_GPIO_Init+0x40>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_GPIO_Init+0x40>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <MX_GPIO_Init+0x40>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_GPIO_Init+0x40>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fa41 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f819 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f7ff ffd5 	bl	8000924 <MX_GPIO_Init>
  MX_DAC_Init();
 800097a:	f7ff ff6d 	bl	8000858 <MX_DAC_Init>
  MX_USART1_UART_Init();
 800097e:	f000 f99d 	bl	8000cbc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000982:	f000 f933 	bl	8000bec <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000986:	f000 f854 	bl	8000a32 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <main+0x38>)
 800098c:	f001 fbc6 	bl	800211c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <main+0x3c>)
 8000994:	f000 fbbf 	bl	8001116 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dacVal = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	80fb      	strh	r3, [r7, #6]
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x34>
 800099e:	bf00      	nop
 80009a0:	20000040 	.word	0x20000040
 80009a4:	20000028 	.word	0x20000028

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b090      	sub	sp, #64	; 0x40
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	2228      	movs	r2, #40	; 0x28
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fbae 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ff29 	bl	8001848 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009fc:	f000 f87c 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f996 	bl	8001d4c <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a26:	f000 f867 	bl	8000af8 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2025      	movs	r0, #37	; 0x25
 8000a3c:	f000 fb13 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a40:	2025      	movs	r0, #37	; 0x25
 8000a42:	f000 fb2c 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 fb0b 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a50:	201c      	movs	r0, #28
 8000a52:	f000 fb24 	bl	800109e <HAL_NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;

	if(htim->Instance == TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a6c:	d135      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		// 50Hz sin파 출력 : 0~4094
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (sinf(2 * 3.1415926535f * 50 * cnt / 1000.f) + 1) * 2047);
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fc90 	bl	8000398 <__aeabi_i2f>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	491b      	ldr	r1, [pc, #108]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcdf 	bl	8000440 <__aeabi_fmul>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4919      	ldr	r1, [pc, #100]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd8e 	bl	80005a8 <__aeabi_fdiv>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fb4a 	bl	8003128 <sinf>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fbc8 	bl	8000230 <__addsf3>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4913      	ldr	r1, [pc, #76]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fccb 	bl	8000440 <__aeabi_fmul>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff feb3 	bl	8000818 <__aeabi_f2uiz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	480e      	ldr	r0, [pc, #56]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000aba:	f000 fb7d 	bl	80011b8 <HAL_DAC_SetValue>
		cnt++;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ac8:	801a      	strh	r2, [r3, #0]
		if(cnt > 999) cnt = 0;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ad2:	d302      	bcc.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	801a      	strh	r2, [r3, #0]
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000003c 	.word	0x2000003c
 8000ae8:	439d1463 	.word	0x439d1463
 8000aec:	447a0000 	.word	0x447a0000
 8000af0:	44ffe000 	.word	0x44ffe000
 8000af4:	20000028 	.word	0x20000028

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x5c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_MspInit+0x60>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_MspInit+0x60>)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f967 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM2_IRQHandler+0x10>)
 8000bbe:	f001 fb0d 	bl	80021dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000040 	.word	0x20000040

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f001 fecf 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000088 	.word	0x20000088

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c12:	2209      	movs	r2, #9
 8000c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200-1;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c1e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c32:	f001 fa23 	bl	800207c <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c3c:	f7ff ff5c 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c4e:	f001 fbcd 	bl	80023ec <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c58:	f7ff ff4e 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c6a:	f001 fdb7 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f7ff ff40 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000040 	.word	0x20000040

08000c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d10b      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_TIM_Base_MspInit+0x34>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_TIM_Base_MspInit+0x34>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_TIM_Base_MspInit+0x34>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000

08000cbc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART1_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	f001 fdf0 	bl	80028d8 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f7ff fefb 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000088 	.word	0x20000088
 8000d0c:	40013800 	.word	0x40013800

08000d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d131      	bne.n	8000d94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_UART_MspInit+0x94>)
 8000d76:	f000 fbd3 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0x94>)
 8000d90:	f000 fbc6 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010800 	.word	0x40010800

08000da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dce:	f7ff ff07 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 f97d 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fdc7 	bl	8000968 <main>
  bx lr
 8000dda:	4770      	bx	lr
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de4:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8000de8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dec:	200000d0 	.word	0x200000d0

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f923 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe78 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f93b 	bl	80010ba <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f903 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200000cc 	.word	0x200000cc

08000ea4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <HAL_GetTick+0x10>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	200000cc 	.word	0x200000cc

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4906      	ldr	r1, [pc, #24]	; (8000f50 <__NVIC_EnableIRQ+0x34>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff90 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff2d 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff42 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff90 	bl	8000fa8 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5f 	bl	8000f54 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff35 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e014      	b.n	800110e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fbd9 	bl	80008ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2202      	movs	r2, #2
 80010fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_DAC_Start+0x16>
 8001128:	2302      	movs	r3, #2
 800112a:	e040      	b.n	80011ae <HAL_DAC_Start+0x98>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2201      	movs	r2, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001160:	2b3c      	cmp	r3, #60	; 0x3c
 8001162:	d11d      	bne.n	80011a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	e014      	b.n	80011a0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	213c      	movs	r1, #60	; 0x3c
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	429a      	cmp	r2, r3
 800118e:	d107      	bne.n	80011a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0202 	orr.w	r2, r2, #2
 800119e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	3308      	adds	r3, #8
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e004      	b.n	80011ec <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	3314      	adds	r3, #20
 80011ea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	461a      	mov	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	795b      	ldrb	r3, [r3, #5]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_DAC_ConfigChannel+0x18>
 8001214:	2302      	movs	r3, #2
 8001216:	e03c      	b.n	8001292 <HAL_DAC_ConfigChannel+0x92>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2202      	movs	r2, #2
 8001222:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4013      	ands	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	22c0      	movs	r2, #192	; 0xc0
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d008      	beq.n	80012c4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2204      	movs	r2, #4
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e020      	b.n	8001306 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020e 	bic.w	r2, r2, #14
 80012d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001322:	2b02      	cmp	r3, #2
 8001324:	d005      	beq.n	8001332 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2204      	movs	r2, #4
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e0d6      	b.n	80014e0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b64      	ldr	r3, [pc, #400]	; (80014ec <HAL_DMA_Abort_IT+0x1dc>)
 800135a:	429a      	cmp	r2, r3
 800135c:	d958      	bls.n	8001410 <HAL_DMA_Abort_IT+0x100>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d04f      	beq.n	8001408 <HAL_DMA_Abort_IT+0xf8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a61      	ldr	r2, [pc, #388]	; (80014f4 <HAL_DMA_Abort_IT+0x1e4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d048      	beq.n	8001404 <HAL_DMA_Abort_IT+0xf4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a60      	ldr	r2, [pc, #384]	; (80014f8 <HAL_DMA_Abort_IT+0x1e8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d040      	beq.n	80013fe <HAL_DMA_Abort_IT+0xee>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <HAL_DMA_Abort_IT+0x1ec>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d038      	beq.n	80013f8 <HAL_DMA_Abort_IT+0xe8>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a5d      	ldr	r2, [pc, #372]	; (8001500 <HAL_DMA_Abort_IT+0x1f0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d030      	beq.n	80013f2 <HAL_DMA_Abort_IT+0xe2>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_DMA_Abort_IT+0x1f4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d028      	beq.n	80013ec <HAL_DMA_Abort_IT+0xdc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a53      	ldr	r2, [pc, #332]	; (80014ec <HAL_DMA_Abort_IT+0x1dc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d020      	beq.n	80013e6 <HAL_DMA_Abort_IT+0xd6>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_DMA_Abort_IT+0x1f8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_DMA_Abort_IT+0xd2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_DMA_Abort_IT+0x1fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d012      	beq.n	80013de <HAL_DMA_Abort_IT+0xce>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_DMA_Abort_IT+0x200>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00a      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a53      	ldr	r2, [pc, #332]	; (8001514 <HAL_DMA_Abort_IT+0x204>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d102      	bne.n	80013d2 <HAL_DMA_Abort_IT+0xc2>
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	e01b      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	e018      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	e015      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013de:	2310      	movs	r3, #16
 80013e0:	e013      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e011      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ea:	e00e      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f0:	e00b      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	e008      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	e005      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 80013fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001402:	e002      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 8001404:	2310      	movs	r3, #16
 8001406:	e000      	b.n	800140a <HAL_DMA_Abort_IT+0xfa>
 8001408:	2301      	movs	r3, #1
 800140a:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_DMA_Abort_IT+0x208>)
 800140c:	6053      	str	r3, [r2, #4]
 800140e:	e057      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1b0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a36      	ldr	r2, [pc, #216]	; (80014f0 <HAL_DMA_Abort_IT+0x1e0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d04f      	beq.n	80014ba <HAL_DMA_Abort_IT+0x1aa>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <HAL_DMA_Abort_IT+0x1e4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d048      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x1a6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <HAL_DMA_Abort_IT+0x1e8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d040      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x1a0>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_DMA_Abort_IT+0x1ec>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d038      	beq.n	80014aa <HAL_DMA_Abort_IT+0x19a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a30      	ldr	r2, [pc, #192]	; (8001500 <HAL_DMA_Abort_IT+0x1f0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d030      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x194>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_DMA_Abort_IT+0x1f4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d028      	beq.n	800149e <HAL_DMA_Abort_IT+0x18e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_DMA_Abort_IT+0x1dc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d020      	beq.n	8001498 <HAL_DMA_Abort_IT+0x188>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <HAL_DMA_Abort_IT+0x1f8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d019      	beq.n	8001494 <HAL_DMA_Abort_IT+0x184>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <HAL_DMA_Abort_IT+0x1fc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d012      	beq.n	8001490 <HAL_DMA_Abort_IT+0x180>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_DMA_Abort_IT+0x200>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00a      	beq.n	800148a <HAL_DMA_Abort_IT+0x17a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <HAL_DMA_Abort_IT+0x204>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d102      	bne.n	8001484 <HAL_DMA_Abort_IT+0x174>
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	e01b      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	e018      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 800148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148e:	e015      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 8001490:	2310      	movs	r3, #16
 8001492:	e013      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 8001494:	2301      	movs	r3, #1
 8001496:	e011      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 8001498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149c:	e00e      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 800149e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a2:	e00b      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 80014a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a8:	e008      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	e005      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	e002      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 80014b6:	2310      	movs	r3, #16
 80014b8:	e000      	b.n	80014bc <HAL_DMA_Abort_IT+0x1ac>
 80014ba:	2301      	movs	r3, #1
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_DMA_Abort_IT+0x20c>)
 80014be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
    } 
  }
  return status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020080 	.word	0x40020080
 80014f0:	40020008 	.word	0x40020008
 80014f4:	4002001c 	.word	0x4002001c
 80014f8:	40020030 	.word	0x40020030
 80014fc:	40020044 	.word	0x40020044
 8001500:	40020058 	.word	0x40020058
 8001504:	4002006c 	.word	0x4002006c
 8001508:	40020408 	.word	0x40020408
 800150c:	4002041c 	.word	0x4002041c
 8001510:	40020430 	.word	0x40020430
 8001514:	40020444 	.word	0x40020444
 8001518:	40020400 	.word	0x40020400
 800151c:	40020000 	.word	0x40020000

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e179      	b.n	8001828 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001534:	2201      	movs	r2, #1
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8168 	bne.w	8001822 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a96      	ldr	r2, [pc, #600]	; (80017b0 <HAL_GPIO_Init+0x290>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d05e      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800155c:	4a94      	ldr	r2, [pc, #592]	; (80017b0 <HAL_GPIO_Init+0x290>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d875      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001562:	4a94      	ldr	r2, [pc, #592]	; (80017b4 <HAL_GPIO_Init+0x294>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d058      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001568:	4a92      	ldr	r2, [pc, #584]	; (80017b4 <HAL_GPIO_Init+0x294>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d86f      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800156e:	4a92      	ldr	r2, [pc, #584]	; (80017b8 <HAL_GPIO_Init+0x298>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d052      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001574:	4a90      	ldr	r2, [pc, #576]	; (80017b8 <HAL_GPIO_Init+0x298>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d869      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800157a:	4a90      	ldr	r2, [pc, #576]	; (80017bc <HAL_GPIO_Init+0x29c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04c      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001580:	4a8e      	ldr	r2, [pc, #568]	; (80017bc <HAL_GPIO_Init+0x29c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d863      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001586:	4a8e      	ldr	r2, [pc, #568]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d046      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800158c:	4a8c      	ldr	r2, [pc, #560]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d85d      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d82a      	bhi.n	80015ec <HAL_GPIO_Init+0xcc>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d859      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_GPIO_Init+0x80>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	080015f5 	.word	0x080015f5
 80015a8:	08001607 	.word	0x08001607
 80015ac:	08001649 	.word	0x08001649
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	0800164f 	.word	0x0800164f
 80015b8:	0800164f 	.word	0x0800164f
 80015bc:	0800164f 	.word	0x0800164f
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	0800164f 	.word	0x0800164f
 80015c8:	0800164f 	.word	0x0800164f
 80015cc:	0800164f 	.word	0x0800164f
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	0800164f 	.word	0x0800164f
 80015dc:	0800164f 	.word	0x0800164f
 80015e0:	0800164f 	.word	0x0800164f
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001611 	.word	0x08001611
 80015ec:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f2:	e02c      	b.n	800164e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e029      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	3304      	adds	r3, #4
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e024      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3308      	adds	r3, #8
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e01f      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	330c      	adds	r3, #12
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e01a      	b.n	8001650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001622:	2304      	movs	r3, #4
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e013      	b.n	8001650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	611a      	str	r2, [r3, #16]
          break;
 800163a:	e009      	b.n	8001650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	615a      	str	r2, [r3, #20]
          break;
 8001646:	e003      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x130>
          break;
 800164e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d801      	bhi.n	800165a <HAL_GPIO_Init+0x13a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e001      	b.n	800165e <HAL_GPIO_Init+0x13e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d802      	bhi.n	800166c <HAL_GPIO_Init+0x14c>
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x152>
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3b08      	subs	r3, #8
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	210f      	movs	r1, #15
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	6a39      	ldr	r1, [r7, #32]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80c1 	beq.w	8001822 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b8:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01f      	beq.n	8001724 <HAL_GPIO_Init+0x204>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <HAL_GPIO_Init+0x2b4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d019      	beq.n	8001720 <HAL_GPIO_Init+0x200>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3a      	ldr	r2, [pc, #232]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1fc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_GPIO_Init+0x2bc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1f8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x2c0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1f4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a37      	ldr	r2, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x2c4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1f0>
 800170c:	2305      	movs	r3, #5
 800170e:	e00a      	b.n	8001726 <HAL_GPIO_Init+0x206>
 8001710:	2306      	movs	r3, #6
 8001712:	e008      	b.n	8001726 <HAL_GPIO_Init+0x206>
 8001714:	2304      	movs	r3, #4
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x206>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x206>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x206>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x206>
 8001724:	2300      	movs	r3, #0
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001736:	4925      	ldr	r1, [pc, #148]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4924      	ldr	r1, [pc, #144]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4920      	ldr	r1, [pc, #128]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001768:	4013      	ands	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	491a      	ldr	r1, [pc, #104]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	4916      	ldr	r1, [pc, #88]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 8001790:	4013      	ands	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d025      	beq.n	80017ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4910      	ldr	r1, [pc, #64]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
 80017ac:	e025      	b.n	80017fa <HAL_GPIO_Init+0x2da>
 80017ae:	bf00      	nop
 80017b0:	10320000 	.word	0x10320000
 80017b4:	10310000 	.word	0x10310000
 80017b8:	10220000 	.word	0x10220000
 80017bc:	10210000 	.word	0x10210000
 80017c0:	10120000 	.word	0x10120000
 80017c4:	10110000 	.word	0x10110000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40010800 	.word	0x40010800
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40011400 	.word	0x40011400
 80017e0:	40011800 	.word	0x40011800
 80017e4:	40011c00 	.word	0x40011c00
 80017e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_GPIO_Init+0x324>)
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_GPIO_Init+0x324>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
 8001812:	e006      	b.n	8001822 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_GPIO_Init+0x324>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4909      	ldr	r1, [pc, #36]	; (8001844 <HAL_GPIO_Init+0x324>)
 800181e:	4013      	ands	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f ae7e 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	372c      	adds	r7, #44	; 0x2c
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e272      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8087 	beq.w	8001976 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d00c      	beq.n	800188e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001874:	4b8f      	ldr	r3, [pc, #572]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d112      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5e>
 8001880:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188c:	d10b      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d06c      	beq.n	8001974 <HAL_RCC_OscConfig+0x12c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d168      	bne.n	8001974 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e24c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x76>
 80018b0:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a7f      	ldr	r2, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e02e      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x98>
 80018c6:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7a      	ldr	r2, [pc, #488]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a77      	ldr	r2, [pc, #476]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xbc>
 80018ea:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a71      	ldr	r2, [pc, #452]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 8001904:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6a      	ldr	r2, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a67      	ldr	r2, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fabe 	bl	8000ea4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff faba 	bl	8000ea4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e200      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xe4>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff faaa 	bl	8000ea4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff faa6 	bl	8000ea4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e1ec      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x10c>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d063      	beq.n	8001a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d11c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x18c>
 800199a:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1c0      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4939      	ldr	r1, [pc, #228]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e03a      	b.n	8001a4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa5f 	bl	8000ea4 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff fa5b 	bl	8000ea4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1a1      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4927      	ldr	r1, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fa3e 	bl	8000ea4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fa3a 	bl	8000ea4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e180      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03a      	beq.n	8001acc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d019      	beq.n	8001a92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa1e 	bl	8000ea4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fa1a 	bl	8000ea4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e160      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 fad8 	bl	8002040 <RCC_Delay>
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fa04 	bl	8000ea4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fa00 	bl	8000ea4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d908      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e146      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	42420000 	.word	0x42420000
 8001abc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e9      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a6 	beq.w	8001c26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a87      	ldr	r2, [pc, #540]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b82      	ldr	r3, [pc, #520]	; (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b12:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7e      	ldr	r2, [pc, #504]	; (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f9c1 	bl	8000ea4 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff f9bd 	bl	8000ea4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e103      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e02d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x334>
 8001b62:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a69      	ldr	r2, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a66      	ldr	r2, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	e01c      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x356>
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a60      	ldr	r2, [pc, #384]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a5a      	ldr	r2, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a57      	ldr	r2, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d015      	beq.n	8001bea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f971 	bl	8000ea4 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff f96d 	bl	8000ea4 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0b1      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ee      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f95b 	bl	8000ea4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f957 	bl	8000ea4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e09b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d061      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d146      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f92b 	bl	8000ea4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff f927 	bl	8000ea4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e06d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d108      	bne.n	8001c8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4921      	ldr	r1, [pc, #132]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a19      	ldr	r1, [r3, #32]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	491b      	ldr	r1, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f8fb 	bl	8000ea4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f8f7 	bl	8000ea4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e03d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46a>
 8001cd0:	e035      	b.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f8e4 	bl	8000ea4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f8e0 	bl	8000ea4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e026      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x498>
 8001cfe:	e01e      	b.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e019      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x500>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0d0      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d910      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4965      	ldr	r1, [pc, #404]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0b8      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da8:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001db2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d040      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e073      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06b      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f023 0203 	bic.w	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4936      	ldr	r1, [pc, #216]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f832 	bl	8000ea4 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e44:	f7ff f82e 	bl	8000ea4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e053      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 020c 	and.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1eb      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d210      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	4922      	ldr	r1, [pc, #136]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e032      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4916      	ldr	r1, [pc, #88]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eda:	f000 f821 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	490a      	ldr	r1, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1cc>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff90 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003cf4 	.word	0x08003cf4
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b490      	push	{r4, r7}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xac>)
 8001f28:	1d3c      	adds	r4, r7, #4
 8001f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f30:	f240 2301 	movw	r3, #513	; 0x201
 8001f34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x46>
 8001f5e:	e02b      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	e02b      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3328      	adds	r3, #40	; 0x28
 8001f70:	443b      	add	r3, r7
 8001f72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c5b      	lsrs	r3, r3, #17
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	3328      	adds	r3, #40	; 0x28
 8001f8e:	443b      	add	r3, r7
 8001f90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f9a:	fb03 f202 	mul.w	r2, r3, r2
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	e004      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	623b      	str	r3, [r7, #32]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fba:	623b      	str	r3, [r7, #32]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc90      	pop	{r4, r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	08003ce4 	.word	0x08003ce4
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	003d0900 	.word	0x003d0900

08001fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff4:	f7ff fff2 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	08003d04 	.word	0x08003d04

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff ffde 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0adb      	lsrs	r3, r3, #11
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08003d04 	.word	0x08003d04

08002040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <RCC_Delay+0x34>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <RCC_Delay+0x38>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a5b      	lsrs	r3, r3, #9
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800205c:	bf00      	nop
  }
  while (Delay --);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <RCC_Delay+0x1c>
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000000 	.word	0x20000000
 8002078:	10624dd3 	.word	0x10624dd3

0800207c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e041      	b.n	8002112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fdee 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f000 fa7e 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d001      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e044      	b.n	80021be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_TIM_Base_Start_IT+0xac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_TIM_Base_Start_IT+0xb0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d00e      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_TIM_Base_Start_IT+0xb8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d010      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	e007      	b.n	80021bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40013400 	.word	0x40013400
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00

080021dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f9b1 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9a4 	bl	8002574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9b3 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0204 	mvn.w	r2, #4
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f987 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f97a 	bl	8002574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f989 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b08      	cmp	r3, #8
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0208 	mvn.w	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f95d 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f950 	bl	8002574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f95f 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0210 	mvn.w	r2, #16
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2208      	movs	r2, #8
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f933 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f926 	bl	8002574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f935 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0201 	mvn.w	r2, #1
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fb7e 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa9d 	bl	80028c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b40      	cmp	r3, #64	; 0x40
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8f9 	bl	80025aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0220 	mvn.w	r2, #32
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa68 	bl	80028b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_ConfigClockSource+0x18>
 8002400:	2302      	movs	r3, #2
 8002402:	e0b3      	b.n	800256c <HAL_TIM_ConfigClockSource+0x180>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d03e      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xd0>
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	f200 8087 	bhi.w	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	f000 8085 	beq.w	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d87f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d01a      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xa2>
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d87b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d050      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x116>
 8002460:	2b60      	cmp	r3, #96	; 0x60
 8002462:	d877      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d03c      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002468:	2b50      	cmp	r3, #80	; 0x50
 800246a:	d873      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d058      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x136>
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d86f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d064      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d86b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d060      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d867      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05c      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002488:	2b10      	cmp	r3, #16
 800248a:	d05a      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800248c:	e062      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f000 f97e 	bl	800279e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
      break;
 80024ba:	e04e      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f000 f967 	bl	800279e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e03b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f000 f8de 	bl	80026b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	; 0x50
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f935 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002500:	e02b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f8fc 	bl	800270c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f925 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002520:	e01b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8be 	bl	80026b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f915 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002540:	e00b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 f90c 	bl	800276a <TIM_ITRx_SetConfig>
        break;
 8002552:	e002      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a33      	ldr	r2, [pc, #204]	; (800269c <TIM_Base_SetConfig+0xe0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <TIM_Base_SetConfig+0xe4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <TIM_Base_SetConfig+0xe8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <TIM_Base_SetConfig+0xec>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <TIM_Base_SetConfig+0xf0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <TIM_Base_SetConfig+0xe0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <TIM_Base_SetConfig+0x82>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <TIM_Base_SetConfig+0xe4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00f      	beq.n	800263e <TIM_Base_SetConfig+0x82>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0x82>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <TIM_Base_SetConfig+0xe8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x82>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <TIM_Base_SetConfig+0xec>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x82>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <TIM_Base_SetConfig+0xf0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <TIM_Base_SetConfig+0xe0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_Base_SetConfig+0xc8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <TIM_Base_SetConfig+0xe4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d103      	bne.n	800268c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40013400 	.word	0x40013400
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40000800 	.word	0x40000800
 80026ac:	40000c00 	.word	0x40000c00

080026b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 030a 	bic.w	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f023 0210 	bic.w	r2, r3, #16
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	621a      	str	r2, [r3, #32]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	609a      	str	r2, [r3, #8]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e050      	b.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d00e      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40013400 	.word	0x40013400
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00

080028b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fa06 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fb49 	bl	8002fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x52>
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa4f 	bl	8002e62 <UART_Receive_IT>
      return;
 80029c4:	e17b      	b.n	8002cbe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80b1 	beq.w	8002b30 <HAL_UART_IRQHandler+0x1bc>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_UART_IRQHandler+0x70>
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80a6 	beq.w	8002b30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_UART_IRQHandler+0x90>
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_UART_IRQHandler+0xb0>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_UART_IRQHandler+0xd0>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00f      	beq.n	8002a6e <HAL_UART_IRQHandler+0xfa>
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_UART_IRQHandler+0xee>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0208 	orr.w	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 811e 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_UART_IRQHandler+0x11e>
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9e8 	bl	8002e62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_UART_IRQHandler+0x146>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d031      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f92a 	bl	8002d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d023      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002adc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a76      	ldr	r2, [pc, #472]	; (8002cc4 <HAL_UART_IRQHandler+0x350>)
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fc0c 	bl	8001310 <HAL_DMA_Abort_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	e00e      	b.n	8002b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8ec 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e00a      	b.n	8002b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8e8 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	e006      	b.n	8002b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8e4 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b2a:	e0c3      	b.n	8002cb4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	bf00      	nop
    return;
 8002b2e:	e0c1      	b.n	8002cb4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 80a1 	bne.w	8002c7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 809b 	beq.w	8002c7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8095 	beq.w	8002c7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04e      	beq.n	8002c14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b80:	8a3b      	ldrh	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8098 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b8c:	8a3a      	ldrh	r2, [r7, #16]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	f080 8092 	bcs.w	8002cb8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8a3a      	ldrh	r2, [r7, #16]
 8002b98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d02b      	beq.n	8002bfc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb50 	bl	800129c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f876 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c12:	e051      	b.n	8002cb8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d047      	beq.n	8002cbc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0210 	bic.w	r2, r2, #16
 8002c6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f842 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c7a:	e01f      	b.n	8002cbc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_UART_IRQHandler+0x324>
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f87f 	bl	8002d94 <UART_Transmit_IT>
    return;
 8002c96:	e012      	b.n	8002cbe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_UART_IRQHandler+0x34a>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8c0 	bl	8002e32 <UART_EndTransmit_IT>
    return;
 8002cb2:	e004      	b.n	8002cbe <HAL_UART_IRQHandler+0x34a>
    return;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <HAL_UART_IRQHandler+0x34a>
      return;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_UART_IRQHandler+0x34a>
      return;
 8002cbc:	bf00      	nop
  }
}
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	08002d6d 	.word	0x08002d6d

08002cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff ffb0 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b21      	cmp	r3, #33	; 0x21
 8002da6:	d13e      	bne.n	8002e26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d114      	bne.n	8002ddc <UART_Transmit_IT+0x48>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d110      	bne.n	8002ddc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e008      	b.n	8002dee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	1c59      	adds	r1, r3, #1
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6211      	str	r1, [r2, #32]
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ff38 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b22      	cmp	r3, #34	; 0x22
 8002e74:	f040 8099 	bne.w	8002faa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d117      	bne.n	8002eb2 <UART_Receive_IT+0x50>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb0:	e026      	b.n	8002f00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d007      	beq.n	8002ed6 <UART_Receive_IT+0x74>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <UART_Receive_IT+0x82>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e008      	b.n	8002ef6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d148      	bne.n	8002fa6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0220 	bic.w	r2, r2, #32
 8002f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d123      	bne.n	8002f9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d10a      	bne.n	8002f8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff feb2 	bl	8002cfe <HAL_UARTEx_RxEventCallback>
 8002f9a:	e002      	b.n	8002fa2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fe9c 	bl	8002cda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fee:	f023 030c 	bic.w	r3, r3, #12
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <UART_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7fe fffc 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	e002      	b.n	800302a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7fe ffe4 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a22      	ldr	r2, [pc, #136]	; (80030cc <UART_SetConfig+0x118>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	0119      	lsls	r1, r3, #4
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <UART_SetConfig+0x118>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	4419      	add	r1, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <UART_SetConfig+0x118>)
 800309a:	fba3 0302 	umull	r0, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2064      	movs	r0, #100	; 0x64
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <UART_SetConfig+0x118>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	440a      	add	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013800 	.word	0x40013800
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	2600      	movs	r6, #0
 80030d4:	4d0c      	ldr	r5, [pc, #48]	; (8003108 <__libc_init_array+0x38>)
 80030d6:	4c0d      	ldr	r4, [pc, #52]	; (800310c <__libc_init_array+0x3c>)
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	42a6      	cmp	r6, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	f000 fdf4 	bl	8003ccc <_init>
 80030e4:	2600      	movs	r6, #0
 80030e6:	4d0a      	ldr	r5, [pc, #40]	; (8003110 <__libc_init_array+0x40>)
 80030e8:	4c0a      	ldr	r4, [pc, #40]	; (8003114 <__libc_init_array+0x44>)
 80030ea:	1b64      	subs	r4, r4, r5
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f8:	4798      	blx	r3
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003102:	4798      	blx	r3
 8003104:	3601      	adds	r6, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	080040dc 	.word	0x080040dc
 800310c:	080040dc 	.word	0x080040dc
 8003110:	080040dc 	.word	0x080040dc
 8003114:	080040e0 	.word	0x080040e0

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <sinf>:
 8003128:	b507      	push	{r0, r1, r2, lr}
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <sinf+0x70>)
 800312c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003130:	4293      	cmp	r3, r2
 8003132:	4601      	mov	r1, r0
 8003134:	dc06      	bgt.n	8003144 <sinf+0x1c>
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	b003      	add	sp, #12
 800313c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003140:	f000 bcbc 	b.w	8003abc <__kernel_sinf>
 8003144:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003148:	db04      	blt.n	8003154 <sinf+0x2c>
 800314a:	f7fd f86f 	bl	800022c <__aeabi_fsub>
 800314e:	b003      	add	sp, #12
 8003150:	f85d fb04 	ldr.w	pc, [sp], #4
 8003154:	4669      	mov	r1, sp
 8003156:	f000 f821 	bl	800319c <__ieee754_rem_pio2f>
 800315a:	f000 0003 	and.w	r0, r0, #3
 800315e:	2801      	cmp	r0, #1
 8003160:	d008      	beq.n	8003174 <sinf+0x4c>
 8003162:	2802      	cmp	r0, #2
 8003164:	d00b      	beq.n	800317e <sinf+0x56>
 8003166:	b990      	cbnz	r0, 800318e <sinf+0x66>
 8003168:	2201      	movs	r2, #1
 800316a:	9901      	ldr	r1, [sp, #4]
 800316c:	9800      	ldr	r0, [sp, #0]
 800316e:	f000 fca5 	bl	8003abc <__kernel_sinf>
 8003172:	e7ec      	b.n	800314e <sinf+0x26>
 8003174:	9901      	ldr	r1, [sp, #4]
 8003176:	9800      	ldr	r0, [sp, #0]
 8003178:	f000 f96e 	bl	8003458 <__kernel_cosf>
 800317c:	e7e7      	b.n	800314e <sinf+0x26>
 800317e:	2201      	movs	r2, #1
 8003180:	9901      	ldr	r1, [sp, #4]
 8003182:	9800      	ldr	r0, [sp, #0]
 8003184:	f000 fc9a 	bl	8003abc <__kernel_sinf>
 8003188:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800318c:	e7df      	b.n	800314e <sinf+0x26>
 800318e:	9901      	ldr	r1, [sp, #4]
 8003190:	9800      	ldr	r0, [sp, #0]
 8003192:	f000 f961 	bl	8003458 <__kernel_cosf>
 8003196:	e7f7      	b.n	8003188 <sinf+0x60>
 8003198:	3f490fd8 	.word	0x3f490fd8

0800319c <__ieee754_rem_pio2f>:
 800319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a0:	4aa0      	ldr	r2, [pc, #640]	; (8003424 <__ieee754_rem_pio2f+0x288>)
 80031a2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80031a6:	4296      	cmp	r6, r2
 80031a8:	460c      	mov	r4, r1
 80031aa:	4682      	mov	sl, r0
 80031ac:	b087      	sub	sp, #28
 80031ae:	dc04      	bgt.n	80031ba <__ieee754_rem_pio2f+0x1e>
 80031b0:	2300      	movs	r3, #0
 80031b2:	6008      	str	r0, [r1, #0]
 80031b4:	604b      	str	r3, [r1, #4]
 80031b6:	2500      	movs	r5, #0
 80031b8:	e01a      	b.n	80031f0 <__ieee754_rem_pio2f+0x54>
 80031ba:	4a9b      	ldr	r2, [pc, #620]	; (8003428 <__ieee754_rem_pio2f+0x28c>)
 80031bc:	4296      	cmp	r6, r2
 80031be:	dc4b      	bgt.n	8003258 <__ieee754_rem_pio2f+0xbc>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	499a      	ldr	r1, [pc, #616]	; (800342c <__ieee754_rem_pio2f+0x290>)
 80031c4:	4f9a      	ldr	r7, [pc, #616]	; (8003430 <__ieee754_rem_pio2f+0x294>)
 80031c6:	f026 060f 	bic.w	r6, r6, #15
 80031ca:	dd23      	ble.n	8003214 <__ieee754_rem_pio2f+0x78>
 80031cc:	f7fd f82e 	bl	800022c <__aeabi_fsub>
 80031d0:	42be      	cmp	r6, r7
 80031d2:	4605      	mov	r5, r0
 80031d4:	d010      	beq.n	80031f8 <__ieee754_rem_pio2f+0x5c>
 80031d6:	4997      	ldr	r1, [pc, #604]	; (8003434 <__ieee754_rem_pio2f+0x298>)
 80031d8:	f7fd f828 	bl	800022c <__aeabi_fsub>
 80031dc:	4601      	mov	r1, r0
 80031de:	6020      	str	r0, [r4, #0]
 80031e0:	4628      	mov	r0, r5
 80031e2:	f7fd f823 	bl	800022c <__aeabi_fsub>
 80031e6:	4993      	ldr	r1, [pc, #588]	; (8003434 <__ieee754_rem_pio2f+0x298>)
 80031e8:	f7fd f820 	bl	800022c <__aeabi_fsub>
 80031ec:	2501      	movs	r5, #1
 80031ee:	6060      	str	r0, [r4, #4]
 80031f0:	4628      	mov	r0, r5
 80031f2:	b007      	add	sp, #28
 80031f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f8:	498f      	ldr	r1, [pc, #572]	; (8003438 <__ieee754_rem_pio2f+0x29c>)
 80031fa:	f7fd f817 	bl	800022c <__aeabi_fsub>
 80031fe:	498f      	ldr	r1, [pc, #572]	; (800343c <__ieee754_rem_pio2f+0x2a0>)
 8003200:	4605      	mov	r5, r0
 8003202:	f7fd f813 	bl	800022c <__aeabi_fsub>
 8003206:	4601      	mov	r1, r0
 8003208:	6020      	str	r0, [r4, #0]
 800320a:	4628      	mov	r0, r5
 800320c:	f7fd f80e 	bl	800022c <__aeabi_fsub>
 8003210:	498a      	ldr	r1, [pc, #552]	; (800343c <__ieee754_rem_pio2f+0x2a0>)
 8003212:	e7e9      	b.n	80031e8 <__ieee754_rem_pio2f+0x4c>
 8003214:	f7fd f80c 	bl	8000230 <__addsf3>
 8003218:	42be      	cmp	r6, r7
 800321a:	4605      	mov	r5, r0
 800321c:	d00e      	beq.n	800323c <__ieee754_rem_pio2f+0xa0>
 800321e:	4985      	ldr	r1, [pc, #532]	; (8003434 <__ieee754_rem_pio2f+0x298>)
 8003220:	f7fd f806 	bl	8000230 <__addsf3>
 8003224:	4601      	mov	r1, r0
 8003226:	6020      	str	r0, [r4, #0]
 8003228:	4628      	mov	r0, r5
 800322a:	f7fc ffff 	bl	800022c <__aeabi_fsub>
 800322e:	4981      	ldr	r1, [pc, #516]	; (8003434 <__ieee754_rem_pio2f+0x298>)
 8003230:	f7fc fffe 	bl	8000230 <__addsf3>
 8003234:	f04f 35ff 	mov.w	r5, #4294967295
 8003238:	6060      	str	r0, [r4, #4]
 800323a:	e7d9      	b.n	80031f0 <__ieee754_rem_pio2f+0x54>
 800323c:	497e      	ldr	r1, [pc, #504]	; (8003438 <__ieee754_rem_pio2f+0x29c>)
 800323e:	f7fc fff7 	bl	8000230 <__addsf3>
 8003242:	497e      	ldr	r1, [pc, #504]	; (800343c <__ieee754_rem_pio2f+0x2a0>)
 8003244:	4605      	mov	r5, r0
 8003246:	f7fc fff3 	bl	8000230 <__addsf3>
 800324a:	4601      	mov	r1, r0
 800324c:	6020      	str	r0, [r4, #0]
 800324e:	4628      	mov	r0, r5
 8003250:	f7fc ffec 	bl	800022c <__aeabi_fsub>
 8003254:	4979      	ldr	r1, [pc, #484]	; (800343c <__ieee754_rem_pio2f+0x2a0>)
 8003256:	e7eb      	b.n	8003230 <__ieee754_rem_pio2f+0x94>
 8003258:	4a79      	ldr	r2, [pc, #484]	; (8003440 <__ieee754_rem_pio2f+0x2a4>)
 800325a:	4296      	cmp	r6, r2
 800325c:	f300 8091 	bgt.w	8003382 <__ieee754_rem_pio2f+0x1e6>
 8003260:	f000 fca2 	bl	8003ba8 <fabsf>
 8003264:	4977      	ldr	r1, [pc, #476]	; (8003444 <__ieee754_rem_pio2f+0x2a8>)
 8003266:	4607      	mov	r7, r0
 8003268:	f7fd f8ea 	bl	8000440 <__aeabi_fmul>
 800326c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003270:	f7fc ffde 	bl	8000230 <__addsf3>
 8003274:	f7fd faaa 	bl	80007cc <__aeabi_f2iz>
 8003278:	4605      	mov	r5, r0
 800327a:	f7fd f88d 	bl	8000398 <__aeabi_i2f>
 800327e:	496b      	ldr	r1, [pc, #428]	; (800342c <__ieee754_rem_pio2f+0x290>)
 8003280:	4681      	mov	r9, r0
 8003282:	f7fd f8dd 	bl	8000440 <__aeabi_fmul>
 8003286:	4601      	mov	r1, r0
 8003288:	4638      	mov	r0, r7
 800328a:	f7fc ffcf 	bl	800022c <__aeabi_fsub>
 800328e:	4969      	ldr	r1, [pc, #420]	; (8003434 <__ieee754_rem_pio2f+0x298>)
 8003290:	4680      	mov	r8, r0
 8003292:	4648      	mov	r0, r9
 8003294:	f7fd f8d4 	bl	8000440 <__aeabi_fmul>
 8003298:	2d1f      	cmp	r5, #31
 800329a:	4607      	mov	r7, r0
 800329c:	dc0c      	bgt.n	80032b8 <__ieee754_rem_pio2f+0x11c>
 800329e:	4a6a      	ldr	r2, [pc, #424]	; (8003448 <__ieee754_rem_pio2f+0x2ac>)
 80032a0:	1e69      	subs	r1, r5, #1
 80032a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80032a6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <__ieee754_rem_pio2f+0x11c>
 80032ae:	4639      	mov	r1, r7
 80032b0:	4640      	mov	r0, r8
 80032b2:	f7fc ffbb 	bl	800022c <__aeabi_fsub>
 80032b6:	e00b      	b.n	80032d0 <__ieee754_rem_pio2f+0x134>
 80032b8:	4639      	mov	r1, r7
 80032ba:	4640      	mov	r0, r8
 80032bc:	f7fc ffb6 	bl	800022c <__aeabi_fsub>
 80032c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80032c4:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80032c8:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80032cc:	2e08      	cmp	r6, #8
 80032ce:	dc01      	bgt.n	80032d4 <__ieee754_rem_pio2f+0x138>
 80032d0:	6020      	str	r0, [r4, #0]
 80032d2:	e026      	b.n	8003322 <__ieee754_rem_pio2f+0x186>
 80032d4:	4958      	ldr	r1, [pc, #352]	; (8003438 <__ieee754_rem_pio2f+0x29c>)
 80032d6:	4648      	mov	r0, r9
 80032d8:	f7fd f8b2 	bl	8000440 <__aeabi_fmul>
 80032dc:	4607      	mov	r7, r0
 80032de:	4601      	mov	r1, r0
 80032e0:	4640      	mov	r0, r8
 80032e2:	f7fc ffa3 	bl	800022c <__aeabi_fsub>
 80032e6:	4601      	mov	r1, r0
 80032e8:	4606      	mov	r6, r0
 80032ea:	4640      	mov	r0, r8
 80032ec:	f7fc ff9e 	bl	800022c <__aeabi_fsub>
 80032f0:	4639      	mov	r1, r7
 80032f2:	f7fc ff9b 	bl	800022c <__aeabi_fsub>
 80032f6:	4607      	mov	r7, r0
 80032f8:	4950      	ldr	r1, [pc, #320]	; (800343c <__ieee754_rem_pio2f+0x2a0>)
 80032fa:	4648      	mov	r0, r9
 80032fc:	f7fd f8a0 	bl	8000440 <__aeabi_fmul>
 8003300:	4639      	mov	r1, r7
 8003302:	f7fc ff93 	bl	800022c <__aeabi_fsub>
 8003306:	4601      	mov	r1, r0
 8003308:	4607      	mov	r7, r0
 800330a:	4630      	mov	r0, r6
 800330c:	f7fc ff8e 	bl	800022c <__aeabi_fsub>
 8003310:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003314:	ebab 0b03 	sub.w	fp, fp, r3
 8003318:	f1bb 0f19 	cmp.w	fp, #25
 800331c:	dc16      	bgt.n	800334c <__ieee754_rem_pio2f+0x1b0>
 800331e:	46b0      	mov	r8, r6
 8003320:	6020      	str	r0, [r4, #0]
 8003322:	6826      	ldr	r6, [r4, #0]
 8003324:	4640      	mov	r0, r8
 8003326:	4631      	mov	r1, r6
 8003328:	f7fc ff80 	bl	800022c <__aeabi_fsub>
 800332c:	4639      	mov	r1, r7
 800332e:	f7fc ff7d 	bl	800022c <__aeabi_fsub>
 8003332:	f1ba 0f00 	cmp.w	sl, #0
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	f6bf af5a 	bge.w	80031f0 <__ieee754_rem_pio2f+0x54>
 800333c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003340:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003344:	6026      	str	r6, [r4, #0]
 8003346:	6060      	str	r0, [r4, #4]
 8003348:	426d      	negs	r5, r5
 800334a:	e751      	b.n	80031f0 <__ieee754_rem_pio2f+0x54>
 800334c:	493f      	ldr	r1, [pc, #252]	; (800344c <__ieee754_rem_pio2f+0x2b0>)
 800334e:	4648      	mov	r0, r9
 8003350:	f7fd f876 	bl	8000440 <__aeabi_fmul>
 8003354:	4607      	mov	r7, r0
 8003356:	4601      	mov	r1, r0
 8003358:	4630      	mov	r0, r6
 800335a:	f7fc ff67 	bl	800022c <__aeabi_fsub>
 800335e:	4601      	mov	r1, r0
 8003360:	4680      	mov	r8, r0
 8003362:	4630      	mov	r0, r6
 8003364:	f7fc ff62 	bl	800022c <__aeabi_fsub>
 8003368:	4639      	mov	r1, r7
 800336a:	f7fc ff5f 	bl	800022c <__aeabi_fsub>
 800336e:	4606      	mov	r6, r0
 8003370:	4937      	ldr	r1, [pc, #220]	; (8003450 <__ieee754_rem_pio2f+0x2b4>)
 8003372:	4648      	mov	r0, r9
 8003374:	f7fd f864 	bl	8000440 <__aeabi_fmul>
 8003378:	4631      	mov	r1, r6
 800337a:	f7fc ff57 	bl	800022c <__aeabi_fsub>
 800337e:	4607      	mov	r7, r0
 8003380:	e795      	b.n	80032ae <__ieee754_rem_pio2f+0x112>
 8003382:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003386:	db05      	blt.n	8003394 <__ieee754_rem_pio2f+0x1f8>
 8003388:	4601      	mov	r1, r0
 800338a:	f7fc ff4f 	bl	800022c <__aeabi_fsub>
 800338e:	6060      	str	r0, [r4, #4]
 8003390:	6020      	str	r0, [r4, #0]
 8003392:	e710      	b.n	80031b6 <__ieee754_rem_pio2f+0x1a>
 8003394:	15f7      	asrs	r7, r6, #23
 8003396:	3f86      	subs	r7, #134	; 0x86
 8003398:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800339c:	4630      	mov	r0, r6
 800339e:	f7fd fa15 	bl	80007cc <__aeabi_f2iz>
 80033a2:	f7fc fff9 	bl	8000398 <__aeabi_i2f>
 80033a6:	4601      	mov	r1, r0
 80033a8:	9003      	str	r0, [sp, #12]
 80033aa:	4630      	mov	r0, r6
 80033ac:	f7fc ff3e 	bl	800022c <__aeabi_fsub>
 80033b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80033b4:	f7fd f844 	bl	8000440 <__aeabi_fmul>
 80033b8:	4606      	mov	r6, r0
 80033ba:	f7fd fa07 	bl	80007cc <__aeabi_f2iz>
 80033be:	f7fc ffeb 	bl	8000398 <__aeabi_i2f>
 80033c2:	4601      	mov	r1, r0
 80033c4:	9004      	str	r0, [sp, #16]
 80033c6:	4605      	mov	r5, r0
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7fc ff2f 	bl	800022c <__aeabi_fsub>
 80033ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80033d2:	f7fd f835 	bl	8000440 <__aeabi_fmul>
 80033d6:	2100      	movs	r1, #0
 80033d8:	9005      	str	r0, [sp, #20]
 80033da:	f7fd f9c5 	bl	8000768 <__aeabi_fcmpeq>
 80033de:	b1f0      	cbz	r0, 800341e <__ieee754_rem_pio2f+0x282>
 80033e0:	2100      	movs	r1, #0
 80033e2:	4628      	mov	r0, r5
 80033e4:	f7fd f9c0 	bl	8000768 <__aeabi_fcmpeq>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2302      	moveq	r3, #2
 80033f0:	4a18      	ldr	r2, [pc, #96]	; (8003454 <__ieee754_rem_pio2f+0x2b8>)
 80033f2:	4621      	mov	r1, r4
 80033f4:	9201      	str	r2, [sp, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	a803      	add	r0, sp, #12
 80033fa:	9200      	str	r2, [sp, #0]
 80033fc:	463a      	mov	r2, r7
 80033fe:	f000 f8ab 	bl	8003558 <__kernel_rem_pio2f>
 8003402:	f1ba 0f00 	cmp.w	sl, #0
 8003406:	4605      	mov	r5, r0
 8003408:	f6bf aef2 	bge.w	80031f0 <__ieee754_rem_pio2f+0x54>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	e794      	b.n	8003348 <__ieee754_rem_pio2f+0x1ac>
 800341e:	2303      	movs	r3, #3
 8003420:	e7e6      	b.n	80033f0 <__ieee754_rem_pio2f+0x254>
 8003422:	bf00      	nop
 8003424:	3f490fd8 	.word	0x3f490fd8
 8003428:	4016cbe3 	.word	0x4016cbe3
 800342c:	3fc90f80 	.word	0x3fc90f80
 8003430:	3fc90fd0 	.word	0x3fc90fd0
 8003434:	37354443 	.word	0x37354443
 8003438:	37354400 	.word	0x37354400
 800343c:	2e85a308 	.word	0x2e85a308
 8003440:	43490f80 	.word	0x43490f80
 8003444:	3f22f984 	.word	0x3f22f984
 8003448:	08003d0c 	.word	0x08003d0c
 800344c:	2e85a300 	.word	0x2e85a300
 8003450:	248d3132 	.word	0x248d3132
 8003454:	08003d8c 	.word	0x08003d8c

08003458 <__kernel_cosf>:
 8003458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003460:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003464:	4606      	mov	r6, r0
 8003466:	4688      	mov	r8, r1
 8003468:	da03      	bge.n	8003472 <__kernel_cosf+0x1a>
 800346a:	f7fd f9af 	bl	80007cc <__aeabi_f2iz>
 800346e:	2800      	cmp	r0, #0
 8003470:	d05c      	beq.n	800352c <__kernel_cosf+0xd4>
 8003472:	4631      	mov	r1, r6
 8003474:	4630      	mov	r0, r6
 8003476:	f7fc ffe3 	bl	8000440 <__aeabi_fmul>
 800347a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800347e:	4605      	mov	r5, r0
 8003480:	f7fc ffde 	bl	8000440 <__aeabi_fmul>
 8003484:	492b      	ldr	r1, [pc, #172]	; (8003534 <__kernel_cosf+0xdc>)
 8003486:	4607      	mov	r7, r0
 8003488:	4628      	mov	r0, r5
 800348a:	f7fc ffd9 	bl	8000440 <__aeabi_fmul>
 800348e:	492a      	ldr	r1, [pc, #168]	; (8003538 <__kernel_cosf+0xe0>)
 8003490:	f7fc fece 	bl	8000230 <__addsf3>
 8003494:	4629      	mov	r1, r5
 8003496:	f7fc ffd3 	bl	8000440 <__aeabi_fmul>
 800349a:	4928      	ldr	r1, [pc, #160]	; (800353c <__kernel_cosf+0xe4>)
 800349c:	f7fc fec6 	bl	800022c <__aeabi_fsub>
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fc ffcd 	bl	8000440 <__aeabi_fmul>
 80034a6:	4926      	ldr	r1, [pc, #152]	; (8003540 <__kernel_cosf+0xe8>)
 80034a8:	f7fc fec2 	bl	8000230 <__addsf3>
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fc ffc7 	bl	8000440 <__aeabi_fmul>
 80034b2:	4924      	ldr	r1, [pc, #144]	; (8003544 <__kernel_cosf+0xec>)
 80034b4:	f7fc feba 	bl	800022c <__aeabi_fsub>
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fc ffc1 	bl	8000440 <__aeabi_fmul>
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <__kernel_cosf+0xf0>)
 80034c0:	f7fc feb6 	bl	8000230 <__addsf3>
 80034c4:	4629      	mov	r1, r5
 80034c6:	f7fc ffbb 	bl	8000440 <__aeabi_fmul>
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc ffb8 	bl	8000440 <__aeabi_fmul>
 80034d0:	4641      	mov	r1, r8
 80034d2:	4605      	mov	r5, r0
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fc ffb3 	bl	8000440 <__aeabi_fmul>
 80034da:	4601      	mov	r1, r0
 80034dc:	4628      	mov	r0, r5
 80034de:	f7fc fea5 	bl	800022c <__aeabi_fsub>
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <__kernel_cosf+0xf4>)
 80034e4:	4605      	mov	r5, r0
 80034e6:	429c      	cmp	r4, r3
 80034e8:	dc0a      	bgt.n	8003500 <__kernel_cosf+0xa8>
 80034ea:	4601      	mov	r1, r0
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7fc fe9d 	bl	800022c <__aeabi_fsub>
 80034f2:	4601      	mov	r1, r0
 80034f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80034f8:	f7fc fe98 	bl	800022c <__aeabi_fsub>
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <__kernel_cosf+0xf8>)
 8003502:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003506:	429c      	cmp	r4, r3
 8003508:	bfcc      	ite	gt
 800350a:	4c12      	ldrgt	r4, [pc, #72]	; (8003554 <__kernel_cosf+0xfc>)
 800350c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003510:	4621      	mov	r1, r4
 8003512:	f7fc fe8b 	bl	800022c <__aeabi_fsub>
 8003516:	4621      	mov	r1, r4
 8003518:	4606      	mov	r6, r0
 800351a:	4638      	mov	r0, r7
 800351c:	f7fc fe86 	bl	800022c <__aeabi_fsub>
 8003520:	4629      	mov	r1, r5
 8003522:	f7fc fe83 	bl	800022c <__aeabi_fsub>
 8003526:	4601      	mov	r1, r0
 8003528:	4630      	mov	r0, r6
 800352a:	e7e5      	b.n	80034f8 <__kernel_cosf+0xa0>
 800352c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003530:	e7e4      	b.n	80034fc <__kernel_cosf+0xa4>
 8003532:	bf00      	nop
 8003534:	ad47d74e 	.word	0xad47d74e
 8003538:	310f74f6 	.word	0x310f74f6
 800353c:	3493f27c 	.word	0x3493f27c
 8003540:	37d00d01 	.word	0x37d00d01
 8003544:	3ab60b61 	.word	0x3ab60b61
 8003548:	3d2aaaab 	.word	0x3d2aaaab
 800354c:	3e999999 	.word	0x3e999999
 8003550:	3f480000 	.word	0x3f480000
 8003554:	3e900000 	.word	0x3e900000

08003558 <__kernel_rem_pio2f>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	b0db      	sub	sp, #364	; 0x16c
 800355e:	9202      	str	r2, [sp, #8]
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003564:	4bb2      	ldr	r3, [pc, #712]	; (8003830 <__kernel_rem_pio2f+0x2d8>)
 8003566:	9005      	str	r0, [sp, #20]
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	9100      	str	r1, [sp, #0]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	9b04      	ldr	r3, [sp, #16]
 8003572:	3b01      	subs	r3, #1
 8003574:	9303      	str	r3, [sp, #12]
 8003576:	9b02      	ldr	r3, [sp, #8]
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	f2c0 809b 	blt.w	80036b4 <__kernel_rem_pio2f+0x15c>
 800357e:	1edc      	subs	r4, r3, #3
 8003580:	bf48      	it	mi
 8003582:	1d1c      	addmi	r4, r3, #4
 8003584:	10e4      	asrs	r4, r4, #3
 8003586:	2500      	movs	r5, #0
 8003588:	f04f 0b00 	mov.w	fp, #0
 800358c:	1c67      	adds	r7, r4, #1
 800358e:	00fb      	lsls	r3, r7, #3
 8003590:	9306      	str	r3, [sp, #24]
 8003592:	9b02      	ldr	r3, [sp, #8]
 8003594:	9a03      	ldr	r2, [sp, #12]
 8003596:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800359a:	9b01      	ldr	r3, [sp, #4]
 800359c:	eba4 0802 	sub.w	r8, r4, r2
 80035a0:	eb03 0902 	add.w	r9, r3, r2
 80035a4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80035a6:	ae1e      	add	r6, sp, #120	; 0x78
 80035a8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80035ac:	454d      	cmp	r5, r9
 80035ae:	f340 8083 	ble.w	80036b8 <__kernel_rem_pio2f+0x160>
 80035b2:	9a04      	ldr	r2, [sp, #16]
 80035b4:	ab1e      	add	r3, sp, #120	; 0x78
 80035b6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80035ba:	f04f 0900 	mov.w	r9, #0
 80035be:	2300      	movs	r3, #0
 80035c0:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 80035c4:	9a01      	ldr	r2, [sp, #4]
 80035c6:	4591      	cmp	r9, r2
 80035c8:	f340 809e 	ble.w	8003708 <__kernel_rem_pio2f+0x1b0>
 80035cc:	4613      	mov	r3, r2
 80035ce:	aa0a      	add	r2, sp, #40	; 0x28
 80035d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035d4:	9308      	str	r3, [sp, #32]
 80035d6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80035d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80035dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80035e0:	9307      	str	r3, [sp, #28]
 80035e2:	ac0a      	add	r4, sp, #40	; 0x28
 80035e4:	4626      	mov	r6, r4
 80035e6:	46c3      	mov	fp, r8
 80035e8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80035ec:	ab5a      	add	r3, sp, #360	; 0x168
 80035ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80035f2:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80035f6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80035fa:	f1bb 0f00 	cmp.w	fp, #0
 80035fe:	f300 8088 	bgt.w	8003712 <__kernel_rem_pio2f+0x1ba>
 8003602:	4639      	mov	r1, r7
 8003604:	4628      	mov	r0, r5
 8003606:	f000 fb15 	bl	8003c34 <scalbnf>
 800360a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800360e:	4605      	mov	r5, r0
 8003610:	f7fc ff16 	bl	8000440 <__aeabi_fmul>
 8003614:	f000 facc 	bl	8003bb0 <floorf>
 8003618:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800361c:	f7fc ff10 	bl	8000440 <__aeabi_fmul>
 8003620:	4601      	mov	r1, r0
 8003622:	4628      	mov	r0, r5
 8003624:	f7fc fe02 	bl	800022c <__aeabi_fsub>
 8003628:	4605      	mov	r5, r0
 800362a:	f7fd f8cf 	bl	80007cc <__aeabi_f2iz>
 800362e:	4606      	mov	r6, r0
 8003630:	f7fc feb2 	bl	8000398 <__aeabi_i2f>
 8003634:	4601      	mov	r1, r0
 8003636:	4628      	mov	r0, r5
 8003638:	f7fc fdf8 	bl	800022c <__aeabi_fsub>
 800363c:	2f00      	cmp	r7, #0
 800363e:	4681      	mov	r9, r0
 8003640:	f340 8086 	ble.w	8003750 <__kernel_rem_pio2f+0x1f8>
 8003644:	f108 32ff 	add.w	r2, r8, #4294967295
 8003648:	ab0a      	add	r3, sp, #40	; 0x28
 800364a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800364e:	f1c7 0108 	rsb	r1, r7, #8
 8003652:	fa45 f301 	asr.w	r3, r5, r1
 8003656:	441e      	add	r6, r3
 8003658:	408b      	lsls	r3, r1
 800365a:	1aed      	subs	r5, r5, r3
 800365c:	f1c7 0007 	rsb	r0, r7, #7
 8003660:	ab0a      	add	r3, sp, #40	; 0x28
 8003662:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003666:	4105      	asrs	r5, r0
 8003668:	2d00      	cmp	r5, #0
 800366a:	dd7f      	ble.n	800376c <__kernel_rem_pio2f+0x214>
 800366c:	2200      	movs	r2, #0
 800366e:	4692      	mov	sl, r2
 8003670:	3601      	adds	r6, #1
 8003672:	4590      	cmp	r8, r2
 8003674:	f300 80b0 	bgt.w	80037d8 <__kernel_rem_pio2f+0x280>
 8003678:	2f00      	cmp	r7, #0
 800367a:	dd05      	ble.n	8003688 <__kernel_rem_pio2f+0x130>
 800367c:	2f01      	cmp	r7, #1
 800367e:	f000 80bd 	beq.w	80037fc <__kernel_rem_pio2f+0x2a4>
 8003682:	2f02      	cmp	r7, #2
 8003684:	f000 80c5 	beq.w	8003812 <__kernel_rem_pio2f+0x2ba>
 8003688:	2d02      	cmp	r5, #2
 800368a:	d16f      	bne.n	800376c <__kernel_rem_pio2f+0x214>
 800368c:	4649      	mov	r1, r9
 800368e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003692:	f7fc fdcb 	bl	800022c <__aeabi_fsub>
 8003696:	4681      	mov	r9, r0
 8003698:	f1ba 0f00 	cmp.w	sl, #0
 800369c:	d066      	beq.n	800376c <__kernel_rem_pio2f+0x214>
 800369e:	4639      	mov	r1, r7
 80036a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036a4:	f000 fac6 	bl	8003c34 <scalbnf>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4648      	mov	r0, r9
 80036ac:	f7fc fdbe 	bl	800022c <__aeabi_fsub>
 80036b0:	4681      	mov	r9, r0
 80036b2:	e05b      	b.n	800376c <__kernel_rem_pio2f+0x214>
 80036b4:	2400      	movs	r4, #0
 80036b6:	e766      	b.n	8003586 <__kernel_rem_pio2f+0x2e>
 80036b8:	eb18 0f05 	cmn.w	r8, r5
 80036bc:	d407      	bmi.n	80036ce <__kernel_rem_pio2f+0x176>
 80036be:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80036c2:	f7fc fe69 	bl	8000398 <__aeabi_i2f>
 80036c6:	f846 0b04 	str.w	r0, [r6], #4
 80036ca:	3501      	adds	r5, #1
 80036cc:	e76e      	b.n	80035ac <__kernel_rem_pio2f+0x54>
 80036ce:	4658      	mov	r0, fp
 80036d0:	e7f9      	b.n	80036c6 <__kernel_rem_pio2f+0x16e>
 80036d2:	9307      	str	r3, [sp, #28]
 80036d4:	9b05      	ldr	r3, [sp, #20]
 80036d6:	f8da 1000 	ldr.w	r1, [sl]
 80036da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80036de:	f7fc feaf 	bl	8000440 <__aeabi_fmul>
 80036e2:	4601      	mov	r1, r0
 80036e4:	4630      	mov	r0, r6
 80036e6:	f7fc fda3 	bl	8000230 <__addsf3>
 80036ea:	4606      	mov	r6, r0
 80036ec:	9b07      	ldr	r3, [sp, #28]
 80036ee:	f108 0801 	add.w	r8, r8, #1
 80036f2:	9a03      	ldr	r2, [sp, #12]
 80036f4:	f1aa 0a04 	sub.w	sl, sl, #4
 80036f8:	4590      	cmp	r8, r2
 80036fa:	ddea      	ble.n	80036d2 <__kernel_rem_pio2f+0x17a>
 80036fc:	f84b 6b04 	str.w	r6, [fp], #4
 8003700:	f109 0901 	add.w	r9, r9, #1
 8003704:	3504      	adds	r5, #4
 8003706:	e75d      	b.n	80035c4 <__kernel_rem_pio2f+0x6c>
 8003708:	46aa      	mov	sl, r5
 800370a:	461e      	mov	r6, r3
 800370c:	f04f 0800 	mov.w	r8, #0
 8003710:	e7ef      	b.n	80036f2 <__kernel_rem_pio2f+0x19a>
 8003712:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8003716:	4628      	mov	r0, r5
 8003718:	f7fc fe92 	bl	8000440 <__aeabi_fmul>
 800371c:	f7fd f856 	bl	80007cc <__aeabi_f2iz>
 8003720:	f7fc fe3a 	bl	8000398 <__aeabi_i2f>
 8003724:	4649      	mov	r1, r9
 8003726:	9009      	str	r0, [sp, #36]	; 0x24
 8003728:	f7fc fe8a 	bl	8000440 <__aeabi_fmul>
 800372c:	4601      	mov	r1, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f7fc fd7c 	bl	800022c <__aeabi_fsub>
 8003734:	f7fd f84a 	bl	80007cc <__aeabi_f2iz>
 8003738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800373e:	f846 0b04 	str.w	r0, [r6], #4
 8003742:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fd72 	bl	8000230 <__addsf3>
 800374c:	4605      	mov	r5, r0
 800374e:	e754      	b.n	80035fa <__kernel_rem_pio2f+0xa2>
 8003750:	d106      	bne.n	8003760 <__kernel_rem_pio2f+0x208>
 8003752:	f108 33ff 	add.w	r3, r8, #4294967295
 8003756:	aa0a      	add	r2, sp, #40	; 0x28
 8003758:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800375c:	11ed      	asrs	r5, r5, #7
 800375e:	e783      	b.n	8003668 <__kernel_rem_pio2f+0x110>
 8003760:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003764:	f7fd f81e 	bl	80007a4 <__aeabi_fcmpge>
 8003768:	4605      	mov	r5, r0
 800376a:	bb98      	cbnz	r0, 80037d4 <__kernel_rem_pio2f+0x27c>
 800376c:	2100      	movs	r1, #0
 800376e:	4648      	mov	r0, r9
 8003770:	f7fc fffa 	bl	8000768 <__aeabi_fcmpeq>
 8003774:	2800      	cmp	r0, #0
 8003776:	f000 8098 	beq.w	80038aa <__kernel_rem_pio2f+0x352>
 800377a:	f108 34ff 	add.w	r4, r8, #4294967295
 800377e:	4623      	mov	r3, r4
 8003780:	2200      	movs	r2, #0
 8003782:	9901      	ldr	r1, [sp, #4]
 8003784:	428b      	cmp	r3, r1
 8003786:	da4c      	bge.n	8003822 <__kernel_rem_pio2f+0x2ca>
 8003788:	2a00      	cmp	r2, #0
 800378a:	d07a      	beq.n	8003882 <__kernel_rem_pio2f+0x32a>
 800378c:	ab0a      	add	r3, sp, #40	; 0x28
 800378e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003792:	3f08      	subs	r7, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8086 	beq.w	80038a6 <__kernel_rem_pio2f+0x34e>
 800379a:	4639      	mov	r1, r7
 800379c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80037a0:	f000 fa48 	bl	8003c34 <scalbnf>
 80037a4:	46a2      	mov	sl, r4
 80037a6:	4681      	mov	r9, r0
 80037a8:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80037ac:	af46      	add	r7, sp, #280	; 0x118
 80037ae:	f1ba 0f00 	cmp.w	sl, #0
 80037b2:	f280 80af 	bge.w	8003914 <__kernel_rem_pio2f+0x3bc>
 80037b6:	4627      	mov	r7, r4
 80037b8:	2200      	movs	r2, #0
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	f2c0 80d9 	blt.w	8003972 <__kernel_rem_pio2f+0x41a>
 80037c0:	a946      	add	r1, sp, #280	; 0x118
 80037c2:	4690      	mov	r8, r2
 80037c4:	f04f 0a00 	mov.w	sl, #0
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <__kernel_rem_pio2f+0x2dc>)
 80037ca:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80037ce:	eba4 0907 	sub.w	r9, r4, r7
 80037d2:	e0c2      	b.n	800395a <__kernel_rem_pio2f+0x402>
 80037d4:	2502      	movs	r5, #2
 80037d6:	e749      	b.n	800366c <__kernel_rem_pio2f+0x114>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f1ba 0f00 	cmp.w	sl, #0
 80037de:	d108      	bne.n	80037f2 <__kernel_rem_pio2f+0x29a>
 80037e0:	b11b      	cbz	r3, 80037ea <__kernel_rem_pio2f+0x292>
 80037e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2301      	movs	r3, #1
 80037ea:	469a      	mov	sl, r3
 80037ec:	3201      	adds	r2, #1
 80037ee:	3404      	adds	r4, #4
 80037f0:	e73f      	b.n	8003672 <__kernel_rem_pio2f+0x11a>
 80037f2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	4653      	mov	r3, sl
 80037fa:	e7f6      	b.n	80037ea <__kernel_rem_pio2f+0x292>
 80037fc:	f108 32ff 	add.w	r2, r8, #4294967295
 8003800:	ab0a      	add	r3, sp, #40	; 0x28
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380a:	a90a      	add	r1, sp, #40	; 0x28
 800380c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003810:	e73a      	b.n	8003688 <__kernel_rem_pio2f+0x130>
 8003812:	f108 32ff 	add.w	r2, r8, #4294967295
 8003816:	ab0a      	add	r3, sp, #40	; 0x28
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	e7f3      	b.n	800380a <__kernel_rem_pio2f+0x2b2>
 8003822:	a90a      	add	r1, sp, #40	; 0x28
 8003824:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003828:	3b01      	subs	r3, #1
 800382a:	430a      	orrs	r2, r1
 800382c:	e7a9      	b.n	8003782 <__kernel_rem_pio2f+0x22a>
 800382e:	bf00      	nop
 8003830:	080040d0 	.word	0x080040d0
 8003834:	080040a4 	.word	0x080040a4
 8003838:	3301      	adds	r3, #1
 800383a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800383e:	2900      	cmp	r1, #0
 8003840:	d0fa      	beq.n	8003838 <__kernel_rem_pio2f+0x2e0>
 8003842:	9a04      	ldr	r2, [sp, #16]
 8003844:	f108 0501 	add.w	r5, r8, #1
 8003848:	eb08 0402 	add.w	r4, r8, r2
 800384c:	aa1e      	add	r2, sp, #120	; 0x78
 800384e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003852:	4498      	add	r8, r3
 8003854:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8003858:	45a8      	cmp	r8, r5
 800385a:	f6ff aec2 	blt.w	80035e2 <__kernel_rem_pio2f+0x8a>
 800385e:	9b07      	ldr	r3, [sp, #28]
 8003860:	46a3      	mov	fp, r4
 8003862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003866:	f7fc fd97 	bl	8000398 <__aeabi_i2f>
 800386a:	f04f 0a00 	mov.w	sl, #0
 800386e:	2600      	movs	r6, #0
 8003870:	6020      	str	r0, [r4, #0]
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	459a      	cmp	sl, r3
 8003876:	dd07      	ble.n	8003888 <__kernel_rem_pio2f+0x330>
 8003878:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800387c:	3404      	adds	r4, #4
 800387e:	3501      	adds	r5, #1
 8003880:	e7ea      	b.n	8003858 <__kernel_rem_pio2f+0x300>
 8003882:	2301      	movs	r3, #1
 8003884:	9a08      	ldr	r2, [sp, #32]
 8003886:	e7d8      	b.n	800383a <__kernel_rem_pio2f+0x2e2>
 8003888:	9b05      	ldr	r3, [sp, #20]
 800388a:	f85b 0904 	ldr.w	r0, [fp], #-4
 800388e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8003892:	f7fc fdd5 	bl	8000440 <__aeabi_fmul>
 8003896:	4601      	mov	r1, r0
 8003898:	4630      	mov	r0, r6
 800389a:	f7fc fcc9 	bl	8000230 <__addsf3>
 800389e:	f10a 0a01 	add.w	sl, sl, #1
 80038a2:	4606      	mov	r6, r0
 80038a4:	e7e5      	b.n	8003872 <__kernel_rem_pio2f+0x31a>
 80038a6:	3c01      	subs	r4, #1
 80038a8:	e770      	b.n	800378c <__kernel_rem_pio2f+0x234>
 80038aa:	9b06      	ldr	r3, [sp, #24]
 80038ac:	9a02      	ldr	r2, [sp, #8]
 80038ae:	4648      	mov	r0, r9
 80038b0:	1a99      	subs	r1, r3, r2
 80038b2:	f000 f9bf 	bl	8003c34 <scalbnf>
 80038b6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80038ba:	4604      	mov	r4, r0
 80038bc:	f7fc ff72 	bl	80007a4 <__aeabi_fcmpge>
 80038c0:	b300      	cbz	r0, 8003904 <__kernel_rem_pio2f+0x3ac>
 80038c2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fc fdba 	bl	8000440 <__aeabi_fmul>
 80038cc:	f7fc ff7e 	bl	80007cc <__aeabi_f2iz>
 80038d0:	f7fc fd62 	bl	8000398 <__aeabi_i2f>
 80038d4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80038d8:	4681      	mov	r9, r0
 80038da:	f7fc fdb1 	bl	8000440 <__aeabi_fmul>
 80038de:	4601      	mov	r1, r0
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7fc fca3 	bl	800022c <__aeabi_fsub>
 80038e6:	f7fc ff71 	bl	80007cc <__aeabi_f2iz>
 80038ea:	ab0a      	add	r3, sp, #40	; 0x28
 80038ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80038f0:	4648      	mov	r0, r9
 80038f2:	f7fc ff6b 	bl	80007cc <__aeabi_f2iz>
 80038f6:	f108 0401 	add.w	r4, r8, #1
 80038fa:	ab0a      	add	r3, sp, #40	; 0x28
 80038fc:	3708      	adds	r7, #8
 80038fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003902:	e74a      	b.n	800379a <__kernel_rem_pio2f+0x242>
 8003904:	4620      	mov	r0, r4
 8003906:	f7fc ff61 	bl	80007cc <__aeabi_f2iz>
 800390a:	ab0a      	add	r3, sp, #40	; 0x28
 800390c:	4644      	mov	r4, r8
 800390e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003912:	e742      	b.n	800379a <__kernel_rem_pio2f+0x242>
 8003914:	ab0a      	add	r3, sp, #40	; 0x28
 8003916:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800391a:	f7fc fd3d 	bl	8000398 <__aeabi_i2f>
 800391e:	4649      	mov	r1, r9
 8003920:	f7fc fd8e 	bl	8000440 <__aeabi_fmul>
 8003924:	4641      	mov	r1, r8
 8003926:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800392a:	4648      	mov	r0, r9
 800392c:	f7fc fd88 	bl	8000440 <__aeabi_fmul>
 8003930:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003934:	4681      	mov	r9, r0
 8003936:	e73a      	b.n	80037ae <__kernel_rem_pio2f+0x256>
 8003938:	f853 0b04 	ldr.w	r0, [r3], #4
 800393c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8003940:	9203      	str	r2, [sp, #12]
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	f7fc fd7c 	bl	8000440 <__aeabi_fmul>
 8003948:	4601      	mov	r1, r0
 800394a:	4640      	mov	r0, r8
 800394c:	f7fc fc70 	bl	8000230 <__addsf3>
 8003950:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003954:	4680      	mov	r8, r0
 8003956:	f10a 0a01 	add.w	sl, sl, #1
 800395a:	9901      	ldr	r1, [sp, #4]
 800395c:	458a      	cmp	sl, r1
 800395e:	dc01      	bgt.n	8003964 <__kernel_rem_pio2f+0x40c>
 8003960:	45ca      	cmp	sl, r9
 8003962:	dde9      	ble.n	8003938 <__kernel_rem_pio2f+0x3e0>
 8003964:	ab5a      	add	r3, sp, #360	; 0x168
 8003966:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800396a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800396e:	3f01      	subs	r7, #1
 8003970:	e723      	b.n	80037ba <__kernel_rem_pio2f+0x262>
 8003972:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8003974:	2b02      	cmp	r3, #2
 8003976:	dc07      	bgt.n	8003988 <__kernel_rem_pio2f+0x430>
 8003978:	2b00      	cmp	r3, #0
 800397a:	dc4d      	bgt.n	8003a18 <__kernel_rem_pio2f+0x4c0>
 800397c:	d02e      	beq.n	80039dc <__kernel_rem_pio2f+0x484>
 800397e:	f006 0007 	and.w	r0, r6, #7
 8003982:	b05b      	add	sp, #364	; 0x16c
 8003984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003988:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800398a:	2b03      	cmp	r3, #3
 800398c:	d1f7      	bne.n	800397e <__kernel_rem_pio2f+0x426>
 800398e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8003992:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8003996:	46b8      	mov	r8, r7
 8003998:	46a2      	mov	sl, r4
 800399a:	f1ba 0f00 	cmp.w	sl, #0
 800399e:	dc48      	bgt.n	8003a32 <__kernel_rem_pio2f+0x4da>
 80039a0:	46a1      	mov	r9, r4
 80039a2:	f1b9 0f01 	cmp.w	r9, #1
 80039a6:	dc5f      	bgt.n	8003a68 <__kernel_rem_pio2f+0x510>
 80039a8:	2000      	movs	r0, #0
 80039aa:	2c01      	cmp	r4, #1
 80039ac:	dc75      	bgt.n	8003a9a <__kernel_rem_pio2f+0x542>
 80039ae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80039b0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d177      	bne.n	8003aa6 <__kernel_rem_pio2f+0x54e>
 80039b6:	9900      	ldr	r1, [sp, #0]
 80039b8:	600a      	str	r2, [r1, #0]
 80039ba:	460a      	mov	r2, r1
 80039bc:	604b      	str	r3, [r1, #4]
 80039be:	6090      	str	r0, [r2, #8]
 80039c0:	e7dd      	b.n	800397e <__kernel_rem_pio2f+0x426>
 80039c2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80039c6:	f7fc fc33 	bl	8000230 <__addsf3>
 80039ca:	3c01      	subs	r4, #1
 80039cc:	2c00      	cmp	r4, #0
 80039ce:	daf8      	bge.n	80039c2 <__kernel_rem_pio2f+0x46a>
 80039d0:	b10d      	cbz	r5, 80039d6 <__kernel_rem_pio2f+0x47e>
 80039d2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80039d6:	9b00      	ldr	r3, [sp, #0]
 80039d8:	6018      	str	r0, [r3, #0]
 80039da:	e7d0      	b.n	800397e <__kernel_rem_pio2f+0x426>
 80039dc:	2000      	movs	r0, #0
 80039de:	af32      	add	r7, sp, #200	; 0xc8
 80039e0:	e7f4      	b.n	80039cc <__kernel_rem_pio2f+0x474>
 80039e2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80039e6:	f7fc fc23 	bl	8000230 <__addsf3>
 80039ea:	3f01      	subs	r7, #1
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	daf8      	bge.n	80039e2 <__kernel_rem_pio2f+0x48a>
 80039f0:	b1bd      	cbz	r5, 8003a22 <__kernel_rem_pio2f+0x4ca>
 80039f2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80039f6:	9a00      	ldr	r2, [sp, #0]
 80039f8:	4601      	mov	r1, r0
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80039fe:	f7fc fc15 	bl	800022c <__aeabi_fsub>
 8003a02:	2701      	movs	r7, #1
 8003a04:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8003a08:	42bc      	cmp	r4, r7
 8003a0a:	da0c      	bge.n	8003a26 <__kernel_rem_pio2f+0x4ce>
 8003a0c:	b10d      	cbz	r5, 8003a12 <__kernel_rem_pio2f+0x4ba>
 8003a0e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003a12:	9b00      	ldr	r3, [sp, #0]
 8003a14:	6058      	str	r0, [r3, #4]
 8003a16:	e7b2      	b.n	800397e <__kernel_rem_pio2f+0x426>
 8003a18:	4627      	mov	r7, r4
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8003a20:	e7e4      	b.n	80039ec <__kernel_rem_pio2f+0x494>
 8003a22:	4603      	mov	r3, r0
 8003a24:	e7e7      	b.n	80039f6 <__kernel_rem_pio2f+0x49e>
 8003a26:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8003a2a:	f7fc fc01 	bl	8000230 <__addsf3>
 8003a2e:	3701      	adds	r7, #1
 8003a30:	e7ea      	b.n	8003a08 <__kernel_rem_pio2f+0x4b0>
 8003a32:	f8d8 3000 	ldr.w	r3, [r8]
 8003a36:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	f7fc fbf5 	bl	8000230 <__addsf3>
 8003a46:	9a01      	ldr	r2, [sp, #4]
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4681      	mov	r9, r0
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fc fbed 	bl	800022c <__aeabi_fsub>
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fc fbe9 	bl	8000230 <__addsf3>
 8003a5e:	f848 0904 	str.w	r0, [r8], #-4
 8003a62:	f8c8 9000 	str.w	r9, [r8]
 8003a66:	e798      	b.n	800399a <__kernel_rem_pio2f+0x442>
 8003a68:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8003a6c:	f8d7 a000 	ldr.w	sl, [r7]
 8003a70:	4618      	mov	r0, r3
 8003a72:	4651      	mov	r1, sl
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f7fc fbdb 	bl	8000230 <__addsf3>
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4680      	mov	r8, r0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fbd3 	bl	800022c <__aeabi_fsub>
 8003a86:	4651      	mov	r1, sl
 8003a88:	f7fc fbd2 	bl	8000230 <__addsf3>
 8003a8c:	f847 0904 	str.w	r0, [r7], #-4
 8003a90:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a94:	f8c7 8000 	str.w	r8, [r7]
 8003a98:	e783      	b.n	80039a2 <__kernel_rem_pio2f+0x44a>
 8003a9a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8003a9e:	f7fc fbc7 	bl	8000230 <__addsf3>
 8003aa2:	3c01      	subs	r4, #1
 8003aa4:	e781      	b.n	80039aa <__kernel_rem_pio2f+0x452>
 8003aa6:	9900      	ldr	r1, [sp, #0]
 8003aa8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003aac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ab0:	600a      	str	r2, [r1, #0]
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003aba:	e780      	b.n	80039be <__kernel_rem_pio2f+0x466>

08003abc <__kernel_sinf>:
 8003abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003ac4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003ac8:	4604      	mov	r4, r0
 8003aca:	460f      	mov	r7, r1
 8003acc:	4691      	mov	r9, r2
 8003ace:	da03      	bge.n	8003ad8 <__kernel_sinf+0x1c>
 8003ad0:	f7fc fe7c 	bl	80007cc <__aeabi_f2iz>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d035      	beq.n	8003b44 <__kernel_sinf+0x88>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7fc fcb0 	bl	8000440 <__aeabi_fmul>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f7fc fcab 	bl	8000440 <__aeabi_fmul>
 8003aea:	4929      	ldr	r1, [pc, #164]	; (8003b90 <__kernel_sinf+0xd4>)
 8003aec:	4606      	mov	r6, r0
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7fc fca6 	bl	8000440 <__aeabi_fmul>
 8003af4:	4927      	ldr	r1, [pc, #156]	; (8003b94 <__kernel_sinf+0xd8>)
 8003af6:	f7fc fb99 	bl	800022c <__aeabi_fsub>
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fca0 	bl	8000440 <__aeabi_fmul>
 8003b00:	4925      	ldr	r1, [pc, #148]	; (8003b98 <__kernel_sinf+0xdc>)
 8003b02:	f7fc fb95 	bl	8000230 <__addsf3>
 8003b06:	4629      	mov	r1, r5
 8003b08:	f7fc fc9a 	bl	8000440 <__aeabi_fmul>
 8003b0c:	4923      	ldr	r1, [pc, #140]	; (8003b9c <__kernel_sinf+0xe0>)
 8003b0e:	f7fc fb8d 	bl	800022c <__aeabi_fsub>
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fc94 	bl	8000440 <__aeabi_fmul>
 8003b18:	4921      	ldr	r1, [pc, #132]	; (8003ba0 <__kernel_sinf+0xe4>)
 8003b1a:	f7fc fb89 	bl	8000230 <__addsf3>
 8003b1e:	4680      	mov	r8, r0
 8003b20:	f1b9 0f00 	cmp.w	r9, #0
 8003b24:	d111      	bne.n	8003b4a <__kernel_sinf+0x8e>
 8003b26:	4601      	mov	r1, r0
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f7fc fc89 	bl	8000440 <__aeabi_fmul>
 8003b2e:	491d      	ldr	r1, [pc, #116]	; (8003ba4 <__kernel_sinf+0xe8>)
 8003b30:	f7fc fb7c 	bl	800022c <__aeabi_fsub>
 8003b34:	4631      	mov	r1, r6
 8003b36:	f7fc fc83 	bl	8000440 <__aeabi_fmul>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7fc fb77 	bl	8000230 <__addsf3>
 8003b42:	4604      	mov	r4, r0
 8003b44:	4620      	mov	r0, r4
 8003b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f7fc fc76 	bl	8000440 <__aeabi_fmul>
 8003b54:	4641      	mov	r1, r8
 8003b56:	4681      	mov	r9, r0
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f7fc fc71 	bl	8000440 <__aeabi_fmul>
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4648      	mov	r0, r9
 8003b62:	f7fc fb63 	bl	800022c <__aeabi_fsub>
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fc6a 	bl	8000440 <__aeabi_fmul>
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc fb5d 	bl	800022c <__aeabi_fsub>
 8003b72:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__kernel_sinf+0xe8>)
 8003b74:	4605      	mov	r5, r0
 8003b76:	4630      	mov	r0, r6
 8003b78:	f7fc fc62 	bl	8000440 <__aeabi_fmul>
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f7fc fb56 	bl	8000230 <__addsf3>
 8003b84:	4601      	mov	r1, r0
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7fc fb50 	bl	800022c <__aeabi_fsub>
 8003b8c:	e7d9      	b.n	8003b42 <__kernel_sinf+0x86>
 8003b8e:	bf00      	nop
 8003b90:	2f2ec9d3 	.word	0x2f2ec9d3
 8003b94:	32d72f34 	.word	0x32d72f34
 8003b98:	3638ef1b 	.word	0x3638ef1b
 8003b9c:	39500d01 	.word	0x39500d01
 8003ba0:	3c088889 	.word	0x3c088889
 8003ba4:	3e2aaaab 	.word	0x3e2aaaab

08003ba8 <fabsf>:
 8003ba8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003bac:	4770      	bx	lr
	...

08003bb0 <floorf>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8003bb6:	3d7f      	subs	r5, #127	; 0x7f
 8003bb8:	2d16      	cmp	r5, #22
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003bc2:	dc26      	bgt.n	8003c12 <floorf+0x62>
 8003bc4:	2d00      	cmp	r5, #0
 8003bc6:	da0e      	bge.n	8003be6 <floorf+0x36>
 8003bc8:	4917      	ldr	r1, [pc, #92]	; (8003c28 <floorf+0x78>)
 8003bca:	f7fc fb31 	bl	8000230 <__addsf3>
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f7fc fdf2 	bl	80007b8 <__aeabi_fcmpgt>
 8003bd4:	b128      	cbz	r0, 8003be2 <floorf+0x32>
 8003bd6:	2c00      	cmp	r4, #0
 8003bd8:	da23      	bge.n	8003c22 <floorf+0x72>
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <floorf+0x7c>)
 8003bdc:	2e00      	cmp	r6, #0
 8003bde:	bf18      	it	ne
 8003be0:	461c      	movne	r4, r3
 8003be2:	4621      	mov	r1, r4
 8003be4:	e01b      	b.n	8003c1e <floorf+0x6e>
 8003be6:	4e12      	ldr	r6, [pc, #72]	; (8003c30 <floorf+0x80>)
 8003be8:	412e      	asrs	r6, r5
 8003bea:	4230      	tst	r0, r6
 8003bec:	d017      	beq.n	8003c1e <floorf+0x6e>
 8003bee:	490e      	ldr	r1, [pc, #56]	; (8003c28 <floorf+0x78>)
 8003bf0:	f7fc fb1e 	bl	8000230 <__addsf3>
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f7fc fddf 	bl	80007b8 <__aeabi_fcmpgt>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0f1      	beq.n	8003be2 <floorf+0x32>
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	bfbe      	ittt	lt
 8003c02:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003c06:	fa43 f505 	asrlt.w	r5, r3, r5
 8003c0a:	1964      	addlt	r4, r4, r5
 8003c0c:	ea24 0406 	bic.w	r4, r4, r6
 8003c10:	e7e7      	b.n	8003be2 <floorf+0x32>
 8003c12:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003c16:	d302      	bcc.n	8003c1e <floorf+0x6e>
 8003c18:	f7fc fb0a 	bl	8000230 <__addsf3>
 8003c1c:	4601      	mov	r1, r0
 8003c1e:	4608      	mov	r0, r1
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	2400      	movs	r4, #0
 8003c24:	e7dd      	b.n	8003be2 <floorf+0x32>
 8003c26:	bf00      	nop
 8003c28:	7149f2ca 	.word	0x7149f2ca
 8003c2c:	bf800000 	.word	0xbf800000
 8003c30:	007fffff 	.word	0x007fffff

08003c34 <scalbnf>:
 8003c34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460d      	mov	r5, r1
 8003c3e:	4604      	mov	r4, r0
 8003c40:	d02a      	beq.n	8003c98 <scalbnf+0x64>
 8003c42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003c46:	d304      	bcc.n	8003c52 <scalbnf+0x1e>
 8003c48:	4601      	mov	r1, r0
 8003c4a:	f7fc faf1 	bl	8000230 <__addsf3>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	e022      	b.n	8003c98 <scalbnf+0x64>
 8003c52:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8003c56:	d117      	bne.n	8003c88 <scalbnf+0x54>
 8003c58:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8003c5c:	f7fc fbf0 	bl	8000440 <__aeabi_fmul>
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <scalbnf+0x8c>)
 8003c62:	4603      	mov	r3, r0
 8003c64:	4295      	cmp	r5, r2
 8003c66:	db0b      	blt.n	8003c80 <scalbnf+0x4c>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8003c6e:	3a19      	subs	r2, #25
 8003c70:	442a      	add	r2, r5
 8003c72:	2afe      	cmp	r2, #254	; 0xfe
 8003c74:	dd0a      	ble.n	8003c8c <scalbnf+0x58>
 8003c76:	4913      	ldr	r1, [pc, #76]	; (8003cc4 <scalbnf+0x90>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f361 001e 	bfi	r0, r1, #0, #31
 8003c7e:	e000      	b.n	8003c82 <scalbnf+0x4e>
 8003c80:	4911      	ldr	r1, [pc, #68]	; (8003cc8 <scalbnf+0x94>)
 8003c82:	f7fc fbdd 	bl	8000440 <__aeabi_fmul>
 8003c86:	e7e2      	b.n	8003c4e <scalbnf+0x1a>
 8003c88:	0dd2      	lsrs	r2, r2, #23
 8003c8a:	e7f1      	b.n	8003c70 <scalbnf+0x3c>
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	dd05      	ble.n	8003c9c <scalbnf+0x68>
 8003c90:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8003c94:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	f112 0f16 	cmn.w	r2, #22
 8003ca0:	da05      	bge.n	8003cae <scalbnf+0x7a>
 8003ca2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003ca6:	4295      	cmp	r5, r2
 8003ca8:	dce5      	bgt.n	8003c76 <scalbnf+0x42>
 8003caa:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <scalbnf+0x94>)
 8003cac:	e7e4      	b.n	8003c78 <scalbnf+0x44>
 8003cae:	3219      	adds	r2, #25
 8003cb0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8003cb4:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8003cb8:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8003cbc:	e7e1      	b.n	8003c82 <scalbnf+0x4e>
 8003cbe:	bf00      	nop
 8003cc0:	ffff3cb0 	.word	0xffff3cb0
 8003cc4:	7149f2ca 	.word	0x7149f2ca
 8003cc8:	0da24260 	.word	0x0da24260

08003ccc <_init>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr

08003cd8 <_fini>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr
