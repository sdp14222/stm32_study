
8. DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b2c  08004b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08004ba4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004ba4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c356  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  0002c3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7fa  00000000  00000000  0002ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0e8  00000000  00000000  0004a722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8fb  00000000  00000000  0005980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  000f4158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080046e4 	.word	0x080046e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080046e4 	.word	0x080046e4

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_DAC_Init+0x4c>)
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MX_DAC_Init+0x50>)
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_DAC_Init+0x4c>)
 800086e:	f000 fc78 	bl	8001162 <HAL_DAC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000878:	f000 f950 	bl	8000b1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_DAC_Init+0x4c>)
 800088c:	f000 fd00 	bl	8001290 <HAL_DAC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000896:	f000 f941 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	40007400 	.word	0x40007400

080008ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_DAC_MspInit+0x6c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d121      	bne.n	8000910 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008d6:	61d3      	str	r3, [r2, #28]
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_DAC_MspInit+0x70>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008fc:	2310      	movs	r3, #16
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	2303      	movs	r3, #3
 8000902:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_DAC_MspInit+0x74>)
 800090c:	f000 fe50 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40007400 	.word	0x40007400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800

08000924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x40>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <MX_GPIO_Init+0x40>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_GPIO_Init+0x40>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_GPIO_Init+0x40>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <MX_GPIO_Init+0x40>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_GPIO_Init+0x40>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fa89 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f819 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f7ff ffd5 	bl	8000924 <MX_GPIO_Init>
  MX_DAC_Init();
 800097a:	f7ff ff6d 	bl	8000858 <MX_DAC_Init>
  MX_USART1_UART_Init();
 800097e:	f000 f9e5 	bl	8000d4c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000982:	f000 f97b 	bl	8000c7c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000986:	f000 f854 	bl	8000a32 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <main+0x38>)
 800098c:	f001 fc0e 	bl	80021ac <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <main+0x3c>)
 8000994:	f000 fc07 	bl	80011a6 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dacVal = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	80fb      	strh	r3, [r7, #6]
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x34>
 800099e:	bf00      	nop
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b090      	sub	sp, #64	; 0x40
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	2228      	movs	r2, #40	; 0x28
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fc40 	bl	800323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ff71 	bl	80018d8 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009fc:	f000 f88e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f9de 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a26:	f000 f879 	bl	8000b1c <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2025      	movs	r0, #37	; 0x25
 8000a3c:	f000 fb5b 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a40:	2025      	movs	r0, #37	; 0x25
 8000a42:	f000 fb74 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 fb53 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a50:	201c      	movs	r0, #28
 8000a52:	f000 fb6c 	bl	800112e <HAL_NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	static char str[20];

	if(htim->Instance == TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a6c:	d141      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x96>
	{
		// 50Hz sin파 출력 : 0~4094
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (sinf(2 * 3.1415926535f * 50 * cnt / 1000.f) + 1) * 2047);
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fc90 	bl	8000398 <__aeabi_i2f>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcdf 	bl	8000440 <__aeabi_fmul>
 8000a82:	4603      	mov	r3, r0
 8000a84:	491f      	ldr	r1, [pc, #124]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd8e 	bl	80005a8 <__aeabi_fdiv>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 f856 	bl	8003b40 <sinf>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fbc8 	bl	8000230 <__addsf3>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4919      	ldr	r1, [pc, #100]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fccb 	bl	8000440 <__aeabi_fmul>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff feb3 	bl	8000818 <__aeabi_f2uiz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4814      	ldr	r0, [pc, #80]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aba:	f000 fbc5 	bl	8001248 <HAL_DAC_SetValue>
		sprintf(str, "%d\n", cnt);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4912      	ldr	r1, [pc, #72]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ac8:	f002 fbc0 	bl	800324c <siprintf>
		HAL_UART_Transmit_IT(&huart1, str, sizeof(str));
 8000acc:	2214      	movs	r2, #20
 8000ace:	4911      	ldr	r1, [pc, #68]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ad2:	f001 ff96 	bl	8002a02 <HAL_UART_Transmit_IT>
		cnt++;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ae0:	801a      	strh	r2, [r3, #0]
		if(cnt > 999) cnt = 0;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aea:	d302      	bcc.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x96>
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	801a      	strh	r2, [r3, #0]
	}
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000a0 	.word	0x200000a0
 8000b00:	439d1463 	.word	0x439d1463
 8000b04:	447a0000 	.word	0x447a0000
 8000b08:	44ffe000 	.word	0x44ffe000
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	080046fc 	.word	0x080046fc
 8000b14:	200000a4 	.word	0x200000a4
 8000b18:	20000104 	.word	0x20000104

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_MspInit+0x60>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_MspInit+0x60>)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010000 	.word	0x40010000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd2:	f000 f99d 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f001 fb43 	bl	800226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000bc 	.word	0x200000bc

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART1_IRQHandler+0x10>)
 8000bf6:	f001 ff49 	bl	8002a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000104 	.word	0x20000104

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f002 fad8 	bl	80031e8 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000c000 	.word	0x2000c000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200000b8 	.word	0x200000b8
 8000c6c:	20000160 	.word	0x20000160

08000c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000ca2:	2209      	movs	r2, #9
 8000ca4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200-1;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cae:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cc2:	f001 fa23 	bl	800210c <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ccc:	f7ff ff26 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cde:	f001 fbcd 	bl	800247c <HAL_TIM_ConfigClockSource>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f7ff ff18 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cfa:	f001 fdb7 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d04:	f7ff ff0a 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000bc 	.word	0x200000bc

08000d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d10b      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_TIM_Base_MspInit+0x34>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000

08000d4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART1_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d84:	f001 fdf0 	bl	8002968 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f7ff fec5 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000104 	.word	0x20000104
 8000d9c:	40013800 	.word	0x40013800

08000da0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_UART_MspInit+0x8c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d131      	bne.n	8000e24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_UART_MspInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <HAL_UART_MspInit+0x94>)
 8000e06:	f000 fbd3 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_MspInit+0x94>)
 8000e20:	f000 fbc6 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5e:	f7ff ff07 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f002 f9c7 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fd7f 	bl	8000968 <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e74:	08004b34 	.word	0x08004b34
  ldr r2, =_sbss
 8000e78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e7c:	2000015c 	.word	0x2000015c

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f923 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe42 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f93b 	bl	800114a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f903 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x20>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000148 	.word	0x20000148

08000f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000148 	.word	0x20000148

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <__NVIC_EnableIRQ+0x34>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2d 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff42 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff35 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e014      	b.n	800119e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fb91 	bl	80008ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	795b      	ldrb	r3, [r3, #5]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_DAC_Start+0x16>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e040      	b.n	800123e <HAL_DAC_Start+0x98>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2202      	movs	r2, #2
 80011c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2201      	movs	r2, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80011f0:	2b3c      	cmp	r3, #60	; 0x3c
 80011f2:	d11d      	bne.n	8001230 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	e014      	b.n	8001230 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	213c      	movs	r1, #60	; 0x3c
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	429a      	cmp	r2, r3
 800121e:	d107      	bne.n	8001230 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0202 	orr.w	r2, r2, #2
 800122e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	3308      	adds	r3, #8
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e004      	b.n	800127c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	3314      	adds	r3, #20
 800127a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	461a      	mov	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_DAC_ConfigChannel+0x18>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e03c      	b.n	8001322 <HAL_DAC_ConfigChannel+0x92>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2202      	movs	r2, #2
 80012b2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4013      	ands	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	22c0      	movs	r2, #192	; 0xc0
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800133e:	2b02      	cmp	r3, #2
 8001340:	d008      	beq.n	8001354 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2204      	movs	r2, #4
 8001346:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e020      	b.n	8001396 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020e 	bic.w	r2, r2, #14
 8001362:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	2101      	movs	r1, #1
 800137e:	fa01 f202 	lsl.w	r2, r1, r2
 8001382:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d005      	beq.n	80013c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2204      	movs	r2, #4
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e0d6      	b.n	8001570 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 020e 	bic.w	r2, r2, #14
 80013d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_DMA_Abort_IT+0x1dc>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d958      	bls.n	80014a0 <HAL_DMA_Abort_IT+0x100>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_DMA_Abort_IT+0x1e0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d04f      	beq.n	8001498 <HAL_DMA_Abort_IT+0xf8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a61      	ldr	r2, [pc, #388]	; (8001584 <HAL_DMA_Abort_IT+0x1e4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d048      	beq.n	8001494 <HAL_DMA_Abort_IT+0xf4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a60      	ldr	r2, [pc, #384]	; (8001588 <HAL_DMA_Abort_IT+0x1e8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d040      	beq.n	800148e <HAL_DMA_Abort_IT+0xee>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_DMA_Abort_IT+0x1ec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d038      	beq.n	8001488 <HAL_DMA_Abort_IT+0xe8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <HAL_DMA_Abort_IT+0x1f0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d030      	beq.n	8001482 <HAL_DMA_Abort_IT+0xe2>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_DMA_Abort_IT+0x1f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d028      	beq.n	800147c <HAL_DMA_Abort_IT+0xdc>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a53      	ldr	r2, [pc, #332]	; (800157c <HAL_DMA_Abort_IT+0x1dc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d020      	beq.n	8001476 <HAL_DMA_Abort_IT+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a57      	ldr	r2, [pc, #348]	; (8001598 <HAL_DMA_Abort_IT+0x1f8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_DMA_Abort_IT+0xd2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a56      	ldr	r2, [pc, #344]	; (800159c <HAL_DMA_Abort_IT+0x1fc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d012      	beq.n	800146e <HAL_DMA_Abort_IT+0xce>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <HAL_DMA_Abort_IT+0x200>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00a      	beq.n	8001468 <HAL_DMA_Abort_IT+0xc8>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_DMA_Abort_IT+0x204>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d102      	bne.n	8001462 <HAL_DMA_Abort_IT+0xc2>
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	e01b      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	e018      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146c:	e015      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 800146e:	2310      	movs	r3, #16
 8001470:	e013      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001472:	2301      	movs	r3, #1
 8001474:	e011      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147a:	e00e      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 800147c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001480:	e00b      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001486:	e008      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	e005      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	e002      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001494:	2310      	movs	r3, #16
 8001496:	e000      	b.n	800149a <HAL_DMA_Abort_IT+0xfa>
 8001498:	2301      	movs	r3, #1
 800149a:	4a43      	ldr	r2, [pc, #268]	; (80015a8 <HAL_DMA_Abort_IT+0x208>)
 800149c:	6053      	str	r3, [r2, #4]
 800149e:	e057      	b.n	8001550 <HAL_DMA_Abort_IT+0x1b0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_DMA_Abort_IT+0x1e0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04f      	beq.n	800154a <HAL_DMA_Abort_IT+0x1aa>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a35      	ldr	r2, [pc, #212]	; (8001584 <HAL_DMA_Abort_IT+0x1e4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d048      	beq.n	8001546 <HAL_DMA_Abort_IT+0x1a6>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a33      	ldr	r2, [pc, #204]	; (8001588 <HAL_DMA_Abort_IT+0x1e8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d040      	beq.n	8001540 <HAL_DMA_Abort_IT+0x1a0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_DMA_Abort_IT+0x1ec>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d038      	beq.n	800153a <HAL_DMA_Abort_IT+0x19a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_DMA_Abort_IT+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d030      	beq.n	8001534 <HAL_DMA_Abort_IT+0x194>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_DMA_Abort_IT+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d028      	beq.n	800152e <HAL_DMA_Abort_IT+0x18e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_DMA_Abort_IT+0x1dc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d020      	beq.n	8001528 <HAL_DMA_Abort_IT+0x188>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <HAL_DMA_Abort_IT+0x1f8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_DMA_Abort_IT+0x184>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_DMA_Abort_IT+0x1fc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_Abort_IT+0x180>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_DMA_Abort_IT+0x200>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00a      	beq.n	800151a <HAL_DMA_Abort_IT+0x17a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_DMA_Abort_IT+0x204>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d102      	bne.n	8001514 <HAL_DMA_Abort_IT+0x174>
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	e01b      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	e018      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 800151a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151e:	e015      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001520:	2310      	movs	r3, #16
 8001522:	e013      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001524:	2301      	movs	r3, #1
 8001526:	e011      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800152c:	e00e      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 800152e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001532:	e00b      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	e008      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	e005      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001544:	e002      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 8001546:	2310      	movs	r3, #16
 8001548:	e000      	b.n	800154c <HAL_DMA_Abort_IT+0x1ac>
 800154a:	2301      	movs	r3, #1
 800154c:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_DMA_Abort_IT+0x20c>)
 800154e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
    } 
  }
  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020080 	.word	0x40020080
 8001580:	40020008 	.word	0x40020008
 8001584:	4002001c 	.word	0x4002001c
 8001588:	40020030 	.word	0x40020030
 800158c:	40020044 	.word	0x40020044
 8001590:	40020058 	.word	0x40020058
 8001594:	4002006c 	.word	0x4002006c
 8001598:	40020408 	.word	0x40020408
 800159c:	4002041c 	.word	0x4002041c
 80015a0:	40020430 	.word	0x40020430
 80015a4:	40020444 	.word	0x40020444
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e179      	b.n	80018b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c4:	2201      	movs	r2, #1
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8168 	bne.w	80018b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a96      	ldr	r2, [pc, #600]	; (8001840 <HAL_GPIO_Init+0x290>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d05e      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015ec:	4a94      	ldr	r2, [pc, #592]	; (8001840 <HAL_GPIO_Init+0x290>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d875      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015f2:	4a94      	ldr	r2, [pc, #592]	; (8001844 <HAL_GPIO_Init+0x294>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d058      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 80015f8:	4a92      	ldr	r2, [pc, #584]	; (8001844 <HAL_GPIO_Init+0x294>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d86f      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 80015fe:	4a92      	ldr	r2, [pc, #584]	; (8001848 <HAL_GPIO_Init+0x298>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d052      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001604:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_GPIO_Init+0x298>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d869      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800160a:	4a90      	ldr	r2, [pc, #576]	; (800184c <HAL_GPIO_Init+0x29c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d04c      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 8001610:	4a8e      	ldr	r2, [pc, #568]	; (800184c <HAL_GPIO_Init+0x29c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d863      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001616:	4a8e      	ldr	r2, [pc, #568]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d046      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
 800161c:	4a8c      	ldr	r2, [pc, #560]	; (8001850 <HAL_GPIO_Init+0x2a0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d85d      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d82a      	bhi.n	800167c <HAL_GPIO_Init+0xcc>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d859      	bhi.n	80016de <HAL_GPIO_Init+0x12e>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_GPIO_Init+0x80>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	080016ab 	.word	0x080016ab
 8001634:	08001685 	.word	0x08001685
 8001638:	08001697 	.word	0x08001697
 800163c:	080016d9 	.word	0x080016d9
 8001640:	080016df 	.word	0x080016df
 8001644:	080016df 	.word	0x080016df
 8001648:	080016df 	.word	0x080016df
 800164c:	080016df 	.word	0x080016df
 8001650:	080016df 	.word	0x080016df
 8001654:	080016df 	.word	0x080016df
 8001658:	080016df 	.word	0x080016df
 800165c:	080016df 	.word	0x080016df
 8001660:	080016df 	.word	0x080016df
 8001664:	080016df 	.word	0x080016df
 8001668:	080016df 	.word	0x080016df
 800166c:	080016df 	.word	0x080016df
 8001670:	080016df 	.word	0x080016df
 8001674:	0800168d 	.word	0x0800168d
 8001678:	080016a1 	.word	0x080016a1
 800167c:	4a75      	ldr	r2, [pc, #468]	; (8001854 <HAL_GPIO_Init+0x2a4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001682:	e02c      	b.n	80016de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e029      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	3304      	adds	r3, #4
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e024      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	3308      	adds	r3, #8
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e01f      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	330c      	adds	r3, #12
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e01a      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b2:	2304      	movs	r3, #4
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e013      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	611a      	str	r2, [r3, #16]
          break;
 80016ca:	e009      	b.n	80016e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	615a      	str	r2, [r3, #20]
          break;
 80016d6:	e003      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x130>
          break;
 80016de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2bff      	cmp	r3, #255	; 0xff
 80016e4:	d801      	bhi.n	80016ea <HAL_GPIO_Init+0x13a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_Init+0x13e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d802      	bhi.n	80016fc <HAL_GPIO_Init+0x14c>
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x152>
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	3b08      	subs	r3, #8
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	210f      	movs	r1, #15
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	401a      	ands	r2, r3
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80c1 	beq.w	80018b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001730:	4b49      	ldr	r3, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a48      	ldr	r2, [pc, #288]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_GPIO_Init+0x2a8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001748:	4a44      	ldr	r2, [pc, #272]	; (800185c <HAL_GPIO_Init+0x2ac>)
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_GPIO_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d01f      	beq.n	80017b4 <HAL_GPIO_Init+0x204>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <HAL_GPIO_Init+0x2b4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d019      	beq.n	80017b0 <HAL_GPIO_Init+0x200>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3a      	ldr	r2, [pc, #232]	; (8001868 <HAL_GPIO_Init+0x2b8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1fc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a39      	ldr	r2, [pc, #228]	; (800186c <HAL_GPIO_Init+0x2bc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1f8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_GPIO_Init+0x2c0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1f4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a37      	ldr	r2, [pc, #220]	; (8001874 <HAL_GPIO_Init+0x2c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1f0>
 800179c:	2305      	movs	r3, #5
 800179e:	e00a      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017a0:	2306      	movs	r3, #6
 80017a2:	e008      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_GPIO_Init+0x206>
 80017b4:	2300      	movs	r3, #0
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c6:	4925      	ldr	r1, [pc, #148]	; (800185c <HAL_GPIO_Init+0x2ac>)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4924      	ldr	r1, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4920      	ldr	r1, [pc, #128]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	491a      	ldr	r1, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001820:	4013      	ands	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d025      	beq.n	800187c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4910      	ldr	r1, [pc, #64]	; (8001878 <HAL_GPIO_Init+0x2c8>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
 800183c:	e025      	b.n	800188a <HAL_GPIO_Init+0x2da>
 800183e:	bf00      	nop
 8001840:	10320000 	.word	0x10320000
 8001844:	10310000 	.word	0x10310000
 8001848:	10220000 	.word	0x10220000
 800184c:	10210000 	.word	0x10210000
 8001850:	10120000 	.word	0x10120000
 8001854:	10110000 	.word	0x10110000
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000
 8001860:	40010800 	.word	0x40010800
 8001864:	40010c00 	.word	0x40010c00
 8001868:	40011000 	.word	0x40011000
 800186c:	40011400 	.word	0x40011400
 8001870:	40011800 	.word	0x40011800
 8001874:	40011c00 	.word	0x40011c00
 8001878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_GPIO_Init+0x324>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <HAL_GPIO_Init+0x324>)
 8001886:	4013      	ands	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_GPIO_Init+0x324>)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_GPIO_Init+0x324>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_GPIO_Init+0x324>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <HAL_GPIO_Init+0x324>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f ae7e 	bne.w	80015c4 <HAL_GPIO_Init+0x14>
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e272      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8087 	beq.w	8001a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b04      	cmp	r3, #4
 8001902:	d00c      	beq.n	800191e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d112      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
 8001910:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d10b      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x12c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d168      	bne.n	8001a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e24c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x76>
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7f      	ldr	r2, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e02e      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0xbc>
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a71      	ldr	r2, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001994:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fabe 	bl	8000f34 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff faba 	bl	8000f34 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e200      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0xe4>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff faaa 	bl	8000f34 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff faa6 	bl	8000f34 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1ec      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x10c>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a1e:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4939      	ldr	r1, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa5f 	bl	8000f34 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fa5b 	bl	8000f34 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1a1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4927      	ldr	r1, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fa3e 	bl	8000f34 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fa3a 	bl	8000f34 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e180      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d03a      	beq.n	8001b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d019      	beq.n	8001b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa1e 	bl	8000f34 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fa1a 	bl	8000f34 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e160      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f000 fad8 	bl	80020d0 <RCC_Delay>
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fa04 	bl	8000f34 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fa00 	bl	8000f34 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d908      	bls.n	8001b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e146      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420000 	.word	0x42420000
 8001b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e9      	bne.n	8001b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a6 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b85      	ldr	r3, [pc, #532]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f9c1 	bl	8000f34 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7ff f9bd 	bl	8000f34 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e103      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e02d      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x334>
 8001bf2:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a66      	ldr	r2, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	e01c      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x356>
 8001c14:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a5d      	ldr	r2, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a57      	ldr	r2, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f971 	bl	8000f34 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f96d 	bl	8000f34 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0b1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ee      	beq.n	8001c56 <HAL_RCC_OscConfig+0x37e>
 8001c78:	e014      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f95b 	bl	8000f34 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff f957 	bl	8000f34 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e09b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8087 	beq.w	8001dce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d061      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d146      	bne.n	8001d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff f92b 	bl	8000f34 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f927 	bl	8000f34 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e06d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d108      	bne.n	8001d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4921      	ldr	r1, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a19      	ldr	r1, [r3, #32]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f8fb 	bl	8000f34 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f8f7 	bl	8000f34 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e03d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
 8001d60:	e035      	b.n	8001dce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f8e4 	bl	8000f34 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f8e0 	bl	8000f34 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e026      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x498>
 8001d8e:	e01e      	b.n	8001dce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e019      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x500>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0d0      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0b8      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07f      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e073      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7ff f832 	bl	8000f34 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7ff f82e 	bl	8000f34 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e053      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d210      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e032      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4916      	ldr	r1, [pc, #88]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6a:	f000 f821 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490a      	ldr	r1, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ff90 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08004710 	.word	0x08004710
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b490      	push	{r4, r7}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_RCC_GetSysClockFreq+0xac>)
 8001fb8:	1d3c      	adds	r4, r7, #4
 8001fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc0:	f240 2301 	movw	r3, #513	; 0x201
 8001fc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x46>
 8001fee:	e02b      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff2:	623b      	str	r3, [r7, #32]
      break;
 8001ff4:	e02b      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3328      	adds	r3, #40	; 0x28
 8002000:	443b      	add	r3, r7
 8002002:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002006:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	3328      	adds	r3, #40	; 0x28
 800201e:	443b      	add	r3, r7
 8002020:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002024:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb4>)
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	e004      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	623b      	str	r3, [r7, #32]
      break;
 8002046:	e002      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204a:	623b      	str	r3, [r7, #32]
      break;
 800204c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204e:	6a3b      	ldr	r3, [r7, #32]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bc90      	pop	{r4, r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	08004700 	.word	0x08004700
 8002060:	40021000 	.word	0x40021000
 8002064:	007a1200 	.word	0x007a1200
 8002068:	003d0900 	.word	0x003d0900

0800206c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <HAL_RCC_GetHCLKFreq+0x10>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002084:	f7ff fff2 	bl	800206c <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08004720 	.word	0x08004720

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ac:	f7ff ffde 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0adb      	lsrs	r3, r3, #11
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004720 	.word	0x08004720

080020d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <RCC_Delay+0x34>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <RCC_Delay+0x38>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a5b      	lsrs	r3, r3, #9
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ec:	bf00      	nop
  }
  while (Delay --);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <RCC_Delay+0x1c>
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000000 	.word	0x20000000
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e041      	b.n	80021a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fdee 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f000 fa7e 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d001      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e044      	b.n	800224e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_TIM_Base_Start_IT+0xac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d018      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x6c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_TIM_Base_Start_IT+0xb0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x6c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d00e      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x6c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_TIM_Base_Start_IT+0xb4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x6c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_TIM_Base_Start_IT+0xb8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x6c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_TIM_Base_Start_IT+0xbc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d111      	bne.n	800223c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b06      	cmp	r3, #6
 8002228:	d010      	beq.n	800224c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223a:	e007      	b.n	800224c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40013400 	.word	0x40013400
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00

0800226c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0202 	mvn.w	r2, #2
 8002298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9b1 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9a4 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f9b3 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0204 	mvn.w	r2, #4
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f987 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f97a 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f989 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f95d 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f950 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f95f 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2208      	movs	r2, #8
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f933 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f926 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f935 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0201 	mvn.w	r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fb36 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa9d 	bl	8002956 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8f9 	bl	800263a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0220 	mvn.w	r2, #32
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa68 	bl	8002944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e0b3      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x180>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024cc:	d03e      	beq.n	800254c <HAL_TIM_ConfigClockSource+0xd0>
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	f200 8087 	bhi.w	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	f000 8085 	beq.w	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d87f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d01a      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xa2>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d87b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d050      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x116>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d877      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d03c      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xf6>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d873      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d058      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x136>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d86f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d064      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002508:	2b30      	cmp	r3, #48	; 0x30
 800250a:	d86b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d060      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d867      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002518:	2b10      	cmp	r3, #16
 800251a:	d05a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800251c:	e062      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f000 f97e 	bl	800282e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002540:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
      break;
 800254a:	e04e      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f000 f967 	bl	800282e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256e:	609a      	str	r2, [r3, #8]
      break;
 8002570:	e03b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8de 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2150      	movs	r1, #80	; 0x50
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f935 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 8002590:	e02b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f8fc 	bl	800279c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2160      	movs	r1, #96	; 0x60
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f925 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 80025b0:	e01b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f8be 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f915 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 80025d0:	e00b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f000 f90c 	bl	80027fa <TIM_ITRx_SetConfig>
        break;
 80025e2:	e002      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025e4:	bf00      	nop
 80025e6:	e000      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <TIM_Base_SetConfig+0xe0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <TIM_Base_SetConfig+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00f      	beq.n	800268c <TIM_Base_SetConfig+0x40>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d00b      	beq.n	800268c <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <TIM_Base_SetConfig+0xe8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d007      	beq.n	800268c <TIM_Base_SetConfig+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <TIM_Base_SetConfig+0xec>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_Base_SetConfig+0x40>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <TIM_Base_SetConfig+0xf0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d108      	bne.n	800269e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <TIM_Base_SetConfig+0xe0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <TIM_Base_SetConfig+0x82>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00f      	beq.n	80026ce <TIM_Base_SetConfig+0x82>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x82>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <TIM_Base_SetConfig+0xe8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x82>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <TIM_Base_SetConfig+0xec>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x82>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <TIM_Base_SetConfig+0xf0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <TIM_Base_SetConfig+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0xc8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <TIM_Base_SetConfig+0xe4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40013400 	.word	0x40013400
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800
 800273c:	40000c00 	.word	0x40000c00

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 0210 	bic.w	r2, r3, #16
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	621a      	str	r2, [r3, #32]
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	f043 0307 	orr.w	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	431a      	orrs	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e050      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40013400 	.word	0x40013400
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00

08002944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e03f      	b.n	80029fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fa06 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fb8d 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d130      	bne.n	8002a7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Transmit_IT+0x26>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e029      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Transmit_IT+0x38>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e022      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	; 0x21
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_UART_IRQHandler+0x52>
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa4f 	bl	8002f7a <UART_Receive_IT>
      return;
 8002adc:	e17b      	b.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80b1 	beq.w	8002c48 <HAL_UART_IRQHandler+0x1bc>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_UART_IRQHandler+0x70>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a6 	beq.w	8002c48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_UART_IRQHandler+0x90>
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_UART_IRQHandler+0xb0>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0202 	orr.w	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_UART_IRQHandler+0xd0>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <HAL_UART_IRQHandler+0xfa>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_UART_IRQHandler+0xee>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0208 	orr.w	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 811e 	beq.w	8002dcc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_UART_IRQHandler+0x11e>
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9e8 	bl	8002f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x146>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d031      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f92a 	bl	8002e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d023      	beq.n	8002c2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4a76      	ldr	r2, [pc, #472]	; (8002ddc <HAL_UART_IRQHandler+0x350>)
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fbc8 	bl	80013a0 <HAL_DMA_Abort_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c20:	4610      	mov	r0, r2
 8002c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00e      	b.n	8002c44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8ec 	bl	8002e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00a      	b.n	8002c44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8e8 	bl	8002e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e006      	b.n	8002c44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8e4 	bl	8002e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c42:	e0c3      	b.n	8002dcc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	bf00      	nop
    return;
 8002c46:	e0c1      	b.n	8002dcc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 80a1 	bne.w	8002d94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 809b 	beq.w	8002d94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8095 	beq.w	8002d94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04e      	beq.n	8002d2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c98:	8a3b      	ldrh	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8098 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca4:	8a3a      	ldrh	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	f080 8092 	bcs.w	8002dd0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8a3a      	ldrh	r2, [r7, #16]
 8002cb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d02b      	beq.n	8002d14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0210 	bic.w	r2, r2, #16
 8002d08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fb0c 	bl	800132c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f876 	bl	8002e16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d2a:	e051      	b.n	8002dd0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d047      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d044      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0210 	bic.w	r2, r2, #16
 8002d86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d88:	8a7b      	ldrh	r3, [r7, #18]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f842 	bl	8002e16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d92:	e01f      	b.n	8002dd4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_UART_IRQHandler+0x324>
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f87f 	bl	8002eac <UART_Transmit_IT>
    return;
 8002dae:	e012      	b.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8c0 	bl	8002f4a <UART_EndTransmit_IT>
    return;
 8002dca:	e004      	b.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002dd4:	bf00      	nop
  }
}
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	08002e85 	.word	0x08002e85

08002de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0210 	bic.w	r2, r2, #16
 8002e6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ffb0 	bl	8002e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b21      	cmp	r3, #33	; 0x21
 8002ebe:	d13e      	bne.n	8002f3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	d114      	bne.n	8002ef4 <UART_Transmit_IT+0x48>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d110      	bne.n	8002ef4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	621a      	str	r2, [r3, #32]
 8002ef2:	e008      	b.n	8002f06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	1c59      	adds	r1, r3, #1
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6211      	str	r1, [r2, #32]
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4619      	mov	r1, r3
 8002f14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff38 	bl	8002de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b22      	cmp	r3, #34	; 0x22
 8002f8c:	f040 8099 	bne.w	80030c2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d117      	bne.n	8002fca <UART_Receive_IT+0x50>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d113      	bne.n	8002fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	1c9a      	adds	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc8:	e026      	b.n	8003018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d007      	beq.n	8002fee <UART_Receive_IT+0x74>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <UART_Receive_IT+0x82>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	e008      	b.n	800300e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4619      	mov	r1, r3
 8003026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003028:	2b00      	cmp	r3, #0
 800302a:	d148      	bne.n	80030be <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0220 	bic.w	r2, r2, #32
 800303a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800304a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b01      	cmp	r3, #1
 800306a:	d123      	bne.n	80030b4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0210 	bic.w	r2, r2, #16
 8003080:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d10a      	bne.n	80030a6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff feb2 	bl	8002e16 <HAL_UARTEx_RxEventCallback>
 80030b2:	e002      	b.n	80030ba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fe9c 	bl	8002df2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e002      	b.n	80030c4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003106:	f023 030c 	bic.w	r3, r3, #12
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	430b      	orrs	r3, r1
 8003112:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <UART_SetConfig+0x114>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d103      	bne.n	800313c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe ffb8 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	e002      	b.n	8003142 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7fe ffa0 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003140:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009a      	lsls	r2, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <UART_SetConfig+0x118>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	0119      	lsls	r1, r3, #4
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <UART_SetConfig+0x118>)
 800317a:	fba3 0302 	umull	r0, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	4419      	add	r1, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <UART_SetConfig+0x118>)
 80031b2:	fba3 0302 	umull	r0, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2064      	movs	r0, #100	; 0x64
 80031ba:	fb00 f303 	mul.w	r3, r0, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <UART_SetConfig+0x118>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	440a      	add	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40013800 	.word	0x40013800
 80031e4:	51eb851f 	.word	0x51eb851f

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2600      	movs	r6, #0
 80031f8:	4d0c      	ldr	r5, [pc, #48]	; (800322c <__libc_init_array+0x38>)
 80031fa:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	f001 fa6e 	bl	80046e4 <_init>
 8003208:	2600      	movs	r6, #0
 800320a:	4d0a      	ldr	r5, [pc, #40]	; (8003234 <__libc_init_array+0x40>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	; (8003238 <__libc_init_array+0x44>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08004b2c 	.word	0x08004b2c
 8003230:	08004b2c 	.word	0x08004b2c
 8003234:	08004b2c 	.word	0x08004b2c
 8003238:	08004b30 	.word	0x08004b30

0800323c <memset>:
 800323c:	4603      	mov	r3, r0
 800323e:	4402      	add	r2, r0
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <memset+0xa>
 8003244:	4770      	bx	lr
 8003246:	f803 1b01 	strb.w	r1, [r3], #1
 800324a:	e7f9      	b.n	8003240 <memset+0x4>

0800324c <siprintf>:
 800324c:	b40e      	push	{r1, r2, r3}
 800324e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003252:	b500      	push	{lr}
 8003254:	b09c      	sub	sp, #112	; 0x70
 8003256:	ab1d      	add	r3, sp, #116	; 0x74
 8003258:	9002      	str	r0, [sp, #8]
 800325a:	9006      	str	r0, [sp, #24]
 800325c:	9107      	str	r1, [sp, #28]
 800325e:	9104      	str	r1, [sp, #16]
 8003260:	4808      	ldr	r0, [pc, #32]	; (8003284 <siprintf+0x38>)
 8003262:	4909      	ldr	r1, [pc, #36]	; (8003288 <siprintf+0x3c>)
 8003264:	f853 2b04 	ldr.w	r2, [r3], #4
 8003268:	9105      	str	r1, [sp, #20]
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	a902      	add	r1, sp, #8
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	f000 f868 	bl	8003344 <_svfiprintf_r>
 8003274:	2200      	movs	r2, #0
 8003276:	9b02      	ldr	r3, [sp, #8]
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	b01c      	add	sp, #112	; 0x70
 800327c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003280:	b003      	add	sp, #12
 8003282:	4770      	bx	lr
 8003284:	2000000c 	.word	0x2000000c
 8003288:	ffff0208 	.word	0xffff0208

0800328c <__ssputs_r>:
 800328c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003290:	688e      	ldr	r6, [r1, #8]
 8003292:	4682      	mov	sl, r0
 8003294:	429e      	cmp	r6, r3
 8003296:	460c      	mov	r4, r1
 8003298:	4690      	mov	r8, r2
 800329a:	461f      	mov	r7, r3
 800329c:	d838      	bhi.n	8003310 <__ssputs_r+0x84>
 800329e:	898a      	ldrh	r2, [r1, #12]
 80032a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032a4:	d032      	beq.n	800330c <__ssputs_r+0x80>
 80032a6:	6825      	ldr	r5, [r4, #0]
 80032a8:	6909      	ldr	r1, [r1, #16]
 80032aa:	3301      	adds	r3, #1
 80032ac:	eba5 0901 	sub.w	r9, r5, r1
 80032b0:	6965      	ldr	r5, [r4, #20]
 80032b2:	444b      	add	r3, r9
 80032b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032bc:	106d      	asrs	r5, r5, #1
 80032be:	429d      	cmp	r5, r3
 80032c0:	bf38      	it	cc
 80032c2:	461d      	movcc	r5, r3
 80032c4:	0553      	lsls	r3, r2, #21
 80032c6:	d531      	bpl.n	800332c <__ssputs_r+0xa0>
 80032c8:	4629      	mov	r1, r5
 80032ca:	f000 fb6f 	bl	80039ac <_malloc_r>
 80032ce:	4606      	mov	r6, r0
 80032d0:	b950      	cbnz	r0, 80032e8 <__ssputs_r+0x5c>
 80032d2:	230c      	movs	r3, #12
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	f8ca 3000 	str.w	r3, [sl]
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e8:	464a      	mov	r2, r9
 80032ea:	6921      	ldr	r1, [r4, #16]
 80032ec:	f000 face 	bl	800388c <memcpy>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	6126      	str	r6, [r4, #16]
 80032fe:	444e      	add	r6, r9
 8003300:	6026      	str	r6, [r4, #0]
 8003302:	463e      	mov	r6, r7
 8003304:	6165      	str	r5, [r4, #20]
 8003306:	eba5 0509 	sub.w	r5, r5, r9
 800330a:	60a5      	str	r5, [r4, #8]
 800330c:	42be      	cmp	r6, r7
 800330e:	d900      	bls.n	8003312 <__ssputs_r+0x86>
 8003310:	463e      	mov	r6, r7
 8003312:	4632      	mov	r2, r6
 8003314:	4641      	mov	r1, r8
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	f000 fac6 	bl	80038a8 <memmove>
 800331c:	68a3      	ldr	r3, [r4, #8]
 800331e:	2000      	movs	r0, #0
 8003320:	1b9b      	subs	r3, r3, r6
 8003322:	60a3      	str	r3, [r4, #8]
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	4433      	add	r3, r6
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	e7db      	b.n	80032e4 <__ssputs_r+0x58>
 800332c:	462a      	mov	r2, r5
 800332e:	f000 fbb1 	bl	8003a94 <_realloc_r>
 8003332:	4606      	mov	r6, r0
 8003334:	2800      	cmp	r0, #0
 8003336:	d1e1      	bne.n	80032fc <__ssputs_r+0x70>
 8003338:	4650      	mov	r0, sl
 800333a:	6921      	ldr	r1, [r4, #16]
 800333c:	f000 face 	bl	80038dc <_free_r>
 8003340:	e7c7      	b.n	80032d2 <__ssputs_r+0x46>
	...

08003344 <_svfiprintf_r>:
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	4698      	mov	r8, r3
 800334a:	898b      	ldrh	r3, [r1, #12]
 800334c:	4607      	mov	r7, r0
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	460d      	mov	r5, r1
 8003352:	4614      	mov	r4, r2
 8003354:	b09d      	sub	sp, #116	; 0x74
 8003356:	d50e      	bpl.n	8003376 <_svfiprintf_r+0x32>
 8003358:	690b      	ldr	r3, [r1, #16]
 800335a:	b963      	cbnz	r3, 8003376 <_svfiprintf_r+0x32>
 800335c:	2140      	movs	r1, #64	; 0x40
 800335e:	f000 fb25 	bl	80039ac <_malloc_r>
 8003362:	6028      	str	r0, [r5, #0]
 8003364:	6128      	str	r0, [r5, #16]
 8003366:	b920      	cbnz	r0, 8003372 <_svfiprintf_r+0x2e>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	e0d1      	b.n	8003516 <_svfiprintf_r+0x1d2>
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	616b      	str	r3, [r5, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	9309      	str	r3, [sp, #36]	; 0x24
 800337a:	2320      	movs	r3, #32
 800337c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003380:	2330      	movs	r3, #48	; 0x30
 8003382:	f04f 0901 	mov.w	r9, #1
 8003386:	f8cd 800c 	str.w	r8, [sp, #12]
 800338a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003530 <_svfiprintf_r+0x1ec>
 800338e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003392:	4623      	mov	r3, r4
 8003394:	469a      	mov	sl, r3
 8003396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800339a:	b10a      	cbz	r2, 80033a0 <_svfiprintf_r+0x5c>
 800339c:	2a25      	cmp	r2, #37	; 0x25
 800339e:	d1f9      	bne.n	8003394 <_svfiprintf_r+0x50>
 80033a0:	ebba 0b04 	subs.w	fp, sl, r4
 80033a4:	d00b      	beq.n	80033be <_svfiprintf_r+0x7a>
 80033a6:	465b      	mov	r3, fp
 80033a8:	4622      	mov	r2, r4
 80033aa:	4629      	mov	r1, r5
 80033ac:	4638      	mov	r0, r7
 80033ae:	f7ff ff6d 	bl	800328c <__ssputs_r>
 80033b2:	3001      	adds	r0, #1
 80033b4:	f000 80aa 	beq.w	800350c <_svfiprintf_r+0x1c8>
 80033b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ba:	445a      	add	r2, fp
 80033bc:	9209      	str	r2, [sp, #36]	; 0x24
 80033be:	f89a 3000 	ldrb.w	r3, [sl]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a2 	beq.w	800350c <_svfiprintf_r+0x1c8>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d2:	f10a 0a01 	add.w	sl, sl, #1
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	9307      	str	r3, [sp, #28]
 80033da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033de:	931a      	str	r3, [sp, #104]	; 0x68
 80033e0:	4654      	mov	r4, sl
 80033e2:	2205      	movs	r2, #5
 80033e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e8:	4851      	ldr	r0, [pc, #324]	; (8003530 <_svfiprintf_r+0x1ec>)
 80033ea:	f000 fa41 	bl	8003870 <memchr>
 80033ee:	9a04      	ldr	r2, [sp, #16]
 80033f0:	b9d8      	cbnz	r0, 800342a <_svfiprintf_r+0xe6>
 80033f2:	06d0      	lsls	r0, r2, #27
 80033f4:	bf44      	itt	mi
 80033f6:	2320      	movmi	r3, #32
 80033f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033fc:	0711      	lsls	r1, r2, #28
 80033fe:	bf44      	itt	mi
 8003400:	232b      	movmi	r3, #43	; 0x2b
 8003402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003406:	f89a 3000 	ldrb.w	r3, [sl]
 800340a:	2b2a      	cmp	r3, #42	; 0x2a
 800340c:	d015      	beq.n	800343a <_svfiprintf_r+0xf6>
 800340e:	4654      	mov	r4, sl
 8003410:	2000      	movs	r0, #0
 8003412:	f04f 0c0a 	mov.w	ip, #10
 8003416:	9a07      	ldr	r2, [sp, #28]
 8003418:	4621      	mov	r1, r4
 800341a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800341e:	3b30      	subs	r3, #48	; 0x30
 8003420:	2b09      	cmp	r3, #9
 8003422:	d94e      	bls.n	80034c2 <_svfiprintf_r+0x17e>
 8003424:	b1b0      	cbz	r0, 8003454 <_svfiprintf_r+0x110>
 8003426:	9207      	str	r2, [sp, #28]
 8003428:	e014      	b.n	8003454 <_svfiprintf_r+0x110>
 800342a:	eba0 0308 	sub.w	r3, r0, r8
 800342e:	fa09 f303 	lsl.w	r3, r9, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	46a2      	mov	sl, r4
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	e7d2      	b.n	80033e0 <_svfiprintf_r+0x9c>
 800343a:	9b03      	ldr	r3, [sp, #12]
 800343c:	1d19      	adds	r1, r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	9103      	str	r1, [sp, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbb      	ittet	lt
 8003446:	425b      	neglt	r3, r3
 8003448:	f042 0202 	orrlt.w	r2, r2, #2
 800344c:	9307      	strge	r3, [sp, #28]
 800344e:	9307      	strlt	r3, [sp, #28]
 8003450:	bfb8      	it	lt
 8003452:	9204      	strlt	r2, [sp, #16]
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	2b2e      	cmp	r3, #46	; 0x2e
 8003458:	d10c      	bne.n	8003474 <_svfiprintf_r+0x130>
 800345a:	7863      	ldrb	r3, [r4, #1]
 800345c:	2b2a      	cmp	r3, #42	; 0x2a
 800345e:	d135      	bne.n	80034cc <_svfiprintf_r+0x188>
 8003460:	9b03      	ldr	r3, [sp, #12]
 8003462:	3402      	adds	r4, #2
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	9203      	str	r2, [sp, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfb8      	it	lt
 800346e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003472:	9305      	str	r3, [sp, #20]
 8003474:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003534 <_svfiprintf_r+0x1f0>
 8003478:	2203      	movs	r2, #3
 800347a:	4650      	mov	r0, sl
 800347c:	7821      	ldrb	r1, [r4, #0]
 800347e:	f000 f9f7 	bl	8003870 <memchr>
 8003482:	b140      	cbz	r0, 8003496 <_svfiprintf_r+0x152>
 8003484:	2340      	movs	r3, #64	; 0x40
 8003486:	eba0 000a 	sub.w	r0, r0, sl
 800348a:	fa03 f000 	lsl.w	r0, r3, r0
 800348e:	9b04      	ldr	r3, [sp, #16]
 8003490:	3401      	adds	r4, #1
 8003492:	4303      	orrs	r3, r0
 8003494:	9304      	str	r3, [sp, #16]
 8003496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349a:	2206      	movs	r2, #6
 800349c:	4826      	ldr	r0, [pc, #152]	; (8003538 <_svfiprintf_r+0x1f4>)
 800349e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034a2:	f000 f9e5 	bl	8003870 <memchr>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d038      	beq.n	800351c <_svfiprintf_r+0x1d8>
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <_svfiprintf_r+0x1f8>)
 80034ac:	bb1b      	cbnz	r3, 80034f6 <_svfiprintf_r+0x1b2>
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	3307      	adds	r3, #7
 80034b2:	f023 0307 	bic.w	r3, r3, #7
 80034b6:	3308      	adds	r3, #8
 80034b8:	9303      	str	r3, [sp, #12]
 80034ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034bc:	4433      	add	r3, r6
 80034be:	9309      	str	r3, [sp, #36]	; 0x24
 80034c0:	e767      	b.n	8003392 <_svfiprintf_r+0x4e>
 80034c2:	460c      	mov	r4, r1
 80034c4:	2001      	movs	r0, #1
 80034c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ca:	e7a5      	b.n	8003418 <_svfiprintf_r+0xd4>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f04f 0c0a 	mov.w	ip, #10
 80034d2:	4619      	mov	r1, r3
 80034d4:	3401      	adds	r4, #1
 80034d6:	9305      	str	r3, [sp, #20]
 80034d8:	4620      	mov	r0, r4
 80034da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034de:	3a30      	subs	r2, #48	; 0x30
 80034e0:	2a09      	cmp	r2, #9
 80034e2:	d903      	bls.n	80034ec <_svfiprintf_r+0x1a8>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0c5      	beq.n	8003474 <_svfiprintf_r+0x130>
 80034e8:	9105      	str	r1, [sp, #20]
 80034ea:	e7c3      	b.n	8003474 <_svfiprintf_r+0x130>
 80034ec:	4604      	mov	r4, r0
 80034ee:	2301      	movs	r3, #1
 80034f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f4:	e7f0      	b.n	80034d8 <_svfiprintf_r+0x194>
 80034f6:	ab03      	add	r3, sp, #12
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	462a      	mov	r2, r5
 80034fc:	4638      	mov	r0, r7
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <_svfiprintf_r+0x1fc>)
 8003500:	a904      	add	r1, sp, #16
 8003502:	f3af 8000 	nop.w
 8003506:	1c42      	adds	r2, r0, #1
 8003508:	4606      	mov	r6, r0
 800350a:	d1d6      	bne.n	80034ba <_svfiprintf_r+0x176>
 800350c:	89ab      	ldrh	r3, [r5, #12]
 800350e:	065b      	lsls	r3, r3, #25
 8003510:	f53f af2c 	bmi.w	800336c <_svfiprintf_r+0x28>
 8003514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003516:	b01d      	add	sp, #116	; 0x74
 8003518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351c:	ab03      	add	r3, sp, #12
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	462a      	mov	r2, r5
 8003522:	4638      	mov	r0, r7
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <_svfiprintf_r+0x1fc>)
 8003526:	a904      	add	r1, sp, #16
 8003528:	f000 f87c 	bl	8003624 <_printf_i>
 800352c:	e7eb      	b.n	8003506 <_svfiprintf_r+0x1c2>
 800352e:	bf00      	nop
 8003530:	08004728 	.word	0x08004728
 8003534:	0800472e 	.word	0x0800472e
 8003538:	08004732 	.word	0x08004732
 800353c:	00000000 	.word	0x00000000
 8003540:	0800328d 	.word	0x0800328d

08003544 <_printf_common>:
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	4616      	mov	r6, r2
 800354a:	4699      	mov	r9, r3
 800354c:	688a      	ldr	r2, [r1, #8]
 800354e:	690b      	ldr	r3, [r1, #16]
 8003550:	4607      	mov	r7, r0
 8003552:	4293      	cmp	r3, r2
 8003554:	bfb8      	it	lt
 8003556:	4613      	movlt	r3, r2
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800355e:	460c      	mov	r4, r1
 8003560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003564:	b10a      	cbz	r2, 800356a <_printf_common+0x26>
 8003566:	3301      	adds	r3, #1
 8003568:	6033      	str	r3, [r6, #0]
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	0699      	lsls	r1, r3, #26
 800356e:	bf42      	ittt	mi
 8003570:	6833      	ldrmi	r3, [r6, #0]
 8003572:	3302      	addmi	r3, #2
 8003574:	6033      	strmi	r3, [r6, #0]
 8003576:	6825      	ldr	r5, [r4, #0]
 8003578:	f015 0506 	ands.w	r5, r5, #6
 800357c:	d106      	bne.n	800358c <_printf_common+0x48>
 800357e:	f104 0a19 	add.w	sl, r4, #25
 8003582:	68e3      	ldr	r3, [r4, #12]
 8003584:	6832      	ldr	r2, [r6, #0]
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	42ab      	cmp	r3, r5
 800358a:	dc28      	bgt.n	80035de <_printf_common+0x9a>
 800358c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003590:	1e13      	subs	r3, r2, #0
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	bf18      	it	ne
 8003596:	2301      	movne	r3, #1
 8003598:	0692      	lsls	r2, r2, #26
 800359a:	d42d      	bmi.n	80035f8 <_printf_common+0xb4>
 800359c:	4649      	mov	r1, r9
 800359e:	4638      	mov	r0, r7
 80035a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a4:	47c0      	blx	r8
 80035a6:	3001      	adds	r0, #1
 80035a8:	d020      	beq.n	80035ec <_printf_common+0xa8>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	68e5      	ldr	r5, [r4, #12]
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	bf18      	it	ne
 80035b6:	2500      	movne	r5, #0
 80035b8:	6832      	ldr	r2, [r6, #0]
 80035ba:	f04f 0600 	mov.w	r6, #0
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	bf08      	it	eq
 80035c2:	1aad      	subeq	r5, r5, r2
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	bf08      	it	eq
 80035c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bfc4      	itt	gt
 80035d0:	1a9b      	subgt	r3, r3, r2
 80035d2:	18ed      	addgt	r5, r5, r3
 80035d4:	341a      	adds	r4, #26
 80035d6:	42b5      	cmp	r5, r6
 80035d8:	d11a      	bne.n	8003610 <_printf_common+0xcc>
 80035da:	2000      	movs	r0, #0
 80035dc:	e008      	b.n	80035f0 <_printf_common+0xac>
 80035de:	2301      	movs	r3, #1
 80035e0:	4652      	mov	r2, sl
 80035e2:	4649      	mov	r1, r9
 80035e4:	4638      	mov	r0, r7
 80035e6:	47c0      	blx	r8
 80035e8:	3001      	adds	r0, #1
 80035ea:	d103      	bne.n	80035f4 <_printf_common+0xb0>
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	3501      	adds	r5, #1
 80035f6:	e7c4      	b.n	8003582 <_printf_common+0x3e>
 80035f8:	2030      	movs	r0, #48	; 0x30
 80035fa:	18e1      	adds	r1, r4, r3
 80035fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003606:	4422      	add	r2, r4
 8003608:	3302      	adds	r3, #2
 800360a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800360e:	e7c5      	b.n	800359c <_printf_common+0x58>
 8003610:	2301      	movs	r3, #1
 8003612:	4622      	mov	r2, r4
 8003614:	4649      	mov	r1, r9
 8003616:	4638      	mov	r0, r7
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d0e6      	beq.n	80035ec <_printf_common+0xa8>
 800361e:	3601      	adds	r6, #1
 8003620:	e7d9      	b.n	80035d6 <_printf_common+0x92>
	...

08003624 <_printf_i>:
 8003624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	7e0f      	ldrb	r7, [r1, #24]
 800362a:	4691      	mov	r9, r2
 800362c:	2f78      	cmp	r7, #120	; 0x78
 800362e:	4680      	mov	r8, r0
 8003630:	460c      	mov	r4, r1
 8003632:	469a      	mov	sl, r3
 8003634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800363a:	d807      	bhi.n	800364c <_printf_i+0x28>
 800363c:	2f62      	cmp	r7, #98	; 0x62
 800363e:	d80a      	bhi.n	8003656 <_printf_i+0x32>
 8003640:	2f00      	cmp	r7, #0
 8003642:	f000 80d9 	beq.w	80037f8 <_printf_i+0x1d4>
 8003646:	2f58      	cmp	r7, #88	; 0x58
 8003648:	f000 80a4 	beq.w	8003794 <_printf_i+0x170>
 800364c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003654:	e03a      	b.n	80036cc <_printf_i+0xa8>
 8003656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800365a:	2b15      	cmp	r3, #21
 800365c:	d8f6      	bhi.n	800364c <_printf_i+0x28>
 800365e:	a101      	add	r1, pc, #4	; (adr r1, 8003664 <_printf_i+0x40>)
 8003660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036d1 	.word	0x080036d1
 800366c:	0800364d 	.word	0x0800364d
 8003670:	0800364d 	.word	0x0800364d
 8003674:	0800364d 	.word	0x0800364d
 8003678:	0800364d 	.word	0x0800364d
 800367c:	080036d1 	.word	0x080036d1
 8003680:	0800364d 	.word	0x0800364d
 8003684:	0800364d 	.word	0x0800364d
 8003688:	0800364d 	.word	0x0800364d
 800368c:	0800364d 	.word	0x0800364d
 8003690:	080037df 	.word	0x080037df
 8003694:	08003701 	.word	0x08003701
 8003698:	080037c1 	.word	0x080037c1
 800369c:	0800364d 	.word	0x0800364d
 80036a0:	0800364d 	.word	0x0800364d
 80036a4:	08003801 	.word	0x08003801
 80036a8:	0800364d 	.word	0x0800364d
 80036ac:	08003701 	.word	0x08003701
 80036b0:	0800364d 	.word	0x0800364d
 80036b4:	0800364d 	.word	0x0800364d
 80036b8:	080037c9 	.word	0x080037c9
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	602a      	str	r2, [r5, #0]
 80036c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0a4      	b.n	800381a <_printf_i+0x1f6>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	6829      	ldr	r1, [r5, #0]
 80036d4:	0606      	lsls	r6, r0, #24
 80036d6:	f101 0304 	add.w	r3, r1, #4
 80036da:	d50a      	bpl.n	80036f2 <_printf_i+0xce>
 80036dc:	680e      	ldr	r6, [r1, #0]
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	2e00      	cmp	r6, #0
 80036e2:	da03      	bge.n	80036ec <_printf_i+0xc8>
 80036e4:	232d      	movs	r3, #45	; 0x2d
 80036e6:	4276      	negs	r6, r6
 80036e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ec:	230a      	movs	r3, #10
 80036ee:	485e      	ldr	r0, [pc, #376]	; (8003868 <_printf_i+0x244>)
 80036f0:	e019      	b.n	8003726 <_printf_i+0x102>
 80036f2:	680e      	ldr	r6, [r1, #0]
 80036f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036f8:	602b      	str	r3, [r5, #0]
 80036fa:	bf18      	it	ne
 80036fc:	b236      	sxthne	r6, r6
 80036fe:	e7ef      	b.n	80036e0 <_printf_i+0xbc>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	1d19      	adds	r1, r3, #4
 8003706:	6029      	str	r1, [r5, #0]
 8003708:	0601      	lsls	r1, r0, #24
 800370a:	d501      	bpl.n	8003710 <_printf_i+0xec>
 800370c:	681e      	ldr	r6, [r3, #0]
 800370e:	e002      	b.n	8003716 <_printf_i+0xf2>
 8003710:	0646      	lsls	r6, r0, #25
 8003712:	d5fb      	bpl.n	800370c <_printf_i+0xe8>
 8003714:	881e      	ldrh	r6, [r3, #0]
 8003716:	2f6f      	cmp	r7, #111	; 0x6f
 8003718:	bf0c      	ite	eq
 800371a:	2308      	moveq	r3, #8
 800371c:	230a      	movne	r3, #10
 800371e:	4852      	ldr	r0, [pc, #328]	; (8003868 <_printf_i+0x244>)
 8003720:	2100      	movs	r1, #0
 8003722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003726:	6865      	ldr	r5, [r4, #4]
 8003728:	2d00      	cmp	r5, #0
 800372a:	bfa8      	it	ge
 800372c:	6821      	ldrge	r1, [r4, #0]
 800372e:	60a5      	str	r5, [r4, #8]
 8003730:	bfa4      	itt	ge
 8003732:	f021 0104 	bicge.w	r1, r1, #4
 8003736:	6021      	strge	r1, [r4, #0]
 8003738:	b90e      	cbnz	r6, 800373e <_printf_i+0x11a>
 800373a:	2d00      	cmp	r5, #0
 800373c:	d04d      	beq.n	80037da <_printf_i+0x1b6>
 800373e:	4615      	mov	r5, r2
 8003740:	fbb6 f1f3 	udiv	r1, r6, r3
 8003744:	fb03 6711 	mls	r7, r3, r1, r6
 8003748:	5dc7      	ldrb	r7, [r0, r7]
 800374a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800374e:	4637      	mov	r7, r6
 8003750:	42bb      	cmp	r3, r7
 8003752:	460e      	mov	r6, r1
 8003754:	d9f4      	bls.n	8003740 <_printf_i+0x11c>
 8003756:	2b08      	cmp	r3, #8
 8003758:	d10b      	bne.n	8003772 <_printf_i+0x14e>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	07de      	lsls	r6, r3, #31
 800375e:	d508      	bpl.n	8003772 <_printf_i+0x14e>
 8003760:	6923      	ldr	r3, [r4, #16]
 8003762:	6861      	ldr	r1, [r4, #4]
 8003764:	4299      	cmp	r1, r3
 8003766:	bfde      	ittt	le
 8003768:	2330      	movle	r3, #48	; 0x30
 800376a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800376e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003772:	1b52      	subs	r2, r2, r5
 8003774:	6122      	str	r2, [r4, #16]
 8003776:	464b      	mov	r3, r9
 8003778:	4621      	mov	r1, r4
 800377a:	4640      	mov	r0, r8
 800377c:	f8cd a000 	str.w	sl, [sp]
 8003780:	aa03      	add	r2, sp, #12
 8003782:	f7ff fedf 	bl	8003544 <_printf_common>
 8003786:	3001      	adds	r0, #1
 8003788:	d14c      	bne.n	8003824 <_printf_i+0x200>
 800378a:	f04f 30ff 	mov.w	r0, #4294967295
 800378e:	b004      	add	sp, #16
 8003790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003794:	4834      	ldr	r0, [pc, #208]	; (8003868 <_printf_i+0x244>)
 8003796:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800379a:	6829      	ldr	r1, [r5, #0]
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f851 6b04 	ldr.w	r6, [r1], #4
 80037a2:	6029      	str	r1, [r5, #0]
 80037a4:	061d      	lsls	r5, r3, #24
 80037a6:	d514      	bpl.n	80037d2 <_printf_i+0x1ae>
 80037a8:	07df      	lsls	r7, r3, #31
 80037aa:	bf44      	itt	mi
 80037ac:	f043 0320 	orrmi.w	r3, r3, #32
 80037b0:	6023      	strmi	r3, [r4, #0]
 80037b2:	b91e      	cbnz	r6, 80037bc <_printf_i+0x198>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f023 0320 	bic.w	r3, r3, #32
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	2310      	movs	r3, #16
 80037be:	e7af      	b.n	8003720 <_printf_i+0xfc>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	6023      	str	r3, [r4, #0]
 80037c8:	2378      	movs	r3, #120	; 0x78
 80037ca:	4828      	ldr	r0, [pc, #160]	; (800386c <_printf_i+0x248>)
 80037cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037d0:	e7e3      	b.n	800379a <_printf_i+0x176>
 80037d2:	0659      	lsls	r1, r3, #25
 80037d4:	bf48      	it	mi
 80037d6:	b2b6      	uxthmi	r6, r6
 80037d8:	e7e6      	b.n	80037a8 <_printf_i+0x184>
 80037da:	4615      	mov	r5, r2
 80037dc:	e7bb      	b.n	8003756 <_printf_i+0x132>
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	6826      	ldr	r6, [r4, #0]
 80037e2:	1d18      	adds	r0, r3, #4
 80037e4:	6961      	ldr	r1, [r4, #20]
 80037e6:	6028      	str	r0, [r5, #0]
 80037e8:	0635      	lsls	r5, r6, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	d501      	bpl.n	80037f2 <_printf_i+0x1ce>
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	e002      	b.n	80037f8 <_printf_i+0x1d4>
 80037f2:	0670      	lsls	r0, r6, #25
 80037f4:	d5fb      	bpl.n	80037ee <_printf_i+0x1ca>
 80037f6:	8019      	strh	r1, [r3, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4615      	mov	r5, r2
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	e7ba      	b.n	8003776 <_printf_i+0x152>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	2100      	movs	r1, #0
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	602a      	str	r2, [r5, #0]
 8003808:	681d      	ldr	r5, [r3, #0]
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f82f 	bl	8003870 <memchr>
 8003812:	b108      	cbz	r0, 8003818 <_printf_i+0x1f4>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	6060      	str	r0, [r4, #4]
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	2300      	movs	r3, #0
 800381e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003822:	e7a8      	b.n	8003776 <_printf_i+0x152>
 8003824:	462a      	mov	r2, r5
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	47d0      	blx	sl
 800382e:	3001      	adds	r0, #1
 8003830:	d0ab      	beq.n	800378a <_printf_i+0x166>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	079b      	lsls	r3, r3, #30
 8003836:	d413      	bmi.n	8003860 <_printf_i+0x23c>
 8003838:	68e0      	ldr	r0, [r4, #12]
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	4298      	cmp	r0, r3
 800383e:	bfb8      	it	lt
 8003840:	4618      	movlt	r0, r3
 8003842:	e7a4      	b.n	800378e <_printf_i+0x16a>
 8003844:	2301      	movs	r3, #1
 8003846:	4632      	mov	r2, r6
 8003848:	4649      	mov	r1, r9
 800384a:	4640      	mov	r0, r8
 800384c:	47d0      	blx	sl
 800384e:	3001      	adds	r0, #1
 8003850:	d09b      	beq.n	800378a <_printf_i+0x166>
 8003852:	3501      	adds	r5, #1
 8003854:	68e3      	ldr	r3, [r4, #12]
 8003856:	9903      	ldr	r1, [sp, #12]
 8003858:	1a5b      	subs	r3, r3, r1
 800385a:	42ab      	cmp	r3, r5
 800385c:	dcf2      	bgt.n	8003844 <_printf_i+0x220>
 800385e:	e7eb      	b.n	8003838 <_printf_i+0x214>
 8003860:	2500      	movs	r5, #0
 8003862:	f104 0619 	add.w	r6, r4, #25
 8003866:	e7f5      	b.n	8003854 <_printf_i+0x230>
 8003868:	08004739 	.word	0x08004739
 800386c:	0800474a 	.word	0x0800474a

08003870 <memchr>:
 8003870:	4603      	mov	r3, r0
 8003872:	b510      	push	{r4, lr}
 8003874:	b2c9      	uxtb	r1, r1
 8003876:	4402      	add	r2, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	4618      	mov	r0, r3
 800387c:	d101      	bne.n	8003882 <memchr+0x12>
 800387e:	2000      	movs	r0, #0
 8003880:	e003      	b.n	800388a <memchr+0x1a>
 8003882:	7804      	ldrb	r4, [r0, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	428c      	cmp	r4, r1
 8003888:	d1f6      	bne.n	8003878 <memchr+0x8>
 800388a:	bd10      	pop	{r4, pc}

0800388c <memcpy>:
 800388c:	440a      	add	r2, r1
 800388e:	4291      	cmp	r1, r2
 8003890:	f100 33ff 	add.w	r3, r0, #4294967295
 8003894:	d100      	bne.n	8003898 <memcpy+0xc>
 8003896:	4770      	bx	lr
 8003898:	b510      	push	{r4, lr}
 800389a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389e:	4291      	cmp	r1, r2
 80038a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a4:	d1f9      	bne.n	800389a <memcpy+0xe>
 80038a6:	bd10      	pop	{r4, pc}

080038a8 <memmove>:
 80038a8:	4288      	cmp	r0, r1
 80038aa:	b510      	push	{r4, lr}
 80038ac:	eb01 0402 	add.w	r4, r1, r2
 80038b0:	d902      	bls.n	80038b8 <memmove+0x10>
 80038b2:	4284      	cmp	r4, r0
 80038b4:	4623      	mov	r3, r4
 80038b6:	d807      	bhi.n	80038c8 <memmove+0x20>
 80038b8:	1e43      	subs	r3, r0, #1
 80038ba:	42a1      	cmp	r1, r4
 80038bc:	d008      	beq.n	80038d0 <memmove+0x28>
 80038be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038c6:	e7f8      	b.n	80038ba <memmove+0x12>
 80038c8:	4601      	mov	r1, r0
 80038ca:	4402      	add	r2, r0
 80038cc:	428a      	cmp	r2, r1
 80038ce:	d100      	bne.n	80038d2 <memmove+0x2a>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038da:	e7f7      	b.n	80038cc <memmove+0x24>

080038dc <_free_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4605      	mov	r5, r0
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d040      	beq.n	8003966 <_free_r+0x8a>
 80038e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e8:	1f0c      	subs	r4, r1, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfb8      	it	lt
 80038ee:	18e4      	addlt	r4, r4, r3
 80038f0:	f000 f910 	bl	8003b14 <__malloc_lock>
 80038f4:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <_free_r+0x8c>)
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	b933      	cbnz	r3, 8003908 <_free_r+0x2c>
 80038fa:	6063      	str	r3, [r4, #4]
 80038fc:	6014      	str	r4, [r2, #0]
 80038fe:	4628      	mov	r0, r5
 8003900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003904:	f000 b90c 	b.w	8003b20 <__malloc_unlock>
 8003908:	42a3      	cmp	r3, r4
 800390a:	d908      	bls.n	800391e <_free_r+0x42>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	1821      	adds	r1, r4, r0
 8003910:	428b      	cmp	r3, r1
 8003912:	bf01      	itttt	eq
 8003914:	6819      	ldreq	r1, [r3, #0]
 8003916:	685b      	ldreq	r3, [r3, #4]
 8003918:	1809      	addeq	r1, r1, r0
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	e7ed      	b.n	80038fa <_free_r+0x1e>
 800391e:	461a      	mov	r2, r3
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b10b      	cbz	r3, 8003928 <_free_r+0x4c>
 8003924:	42a3      	cmp	r3, r4
 8003926:	d9fa      	bls.n	800391e <_free_r+0x42>
 8003928:	6811      	ldr	r1, [r2, #0]
 800392a:	1850      	adds	r0, r2, r1
 800392c:	42a0      	cmp	r0, r4
 800392e:	d10b      	bne.n	8003948 <_free_r+0x6c>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	4401      	add	r1, r0
 8003934:	1850      	adds	r0, r2, r1
 8003936:	4283      	cmp	r3, r0
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	d1e0      	bne.n	80038fe <_free_r+0x22>
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4401      	add	r1, r0
 8003942:	6011      	str	r1, [r2, #0]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	e7da      	b.n	80038fe <_free_r+0x22>
 8003948:	d902      	bls.n	8003950 <_free_r+0x74>
 800394a:	230c      	movs	r3, #12
 800394c:	602b      	str	r3, [r5, #0]
 800394e:	e7d6      	b.n	80038fe <_free_r+0x22>
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	1821      	adds	r1, r4, r0
 8003954:	428b      	cmp	r3, r1
 8003956:	bf01      	itttt	eq
 8003958:	6819      	ldreq	r1, [r3, #0]
 800395a:	685b      	ldreq	r3, [r3, #4]
 800395c:	1809      	addeq	r1, r1, r0
 800395e:	6021      	streq	r1, [r4, #0]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	6054      	str	r4, [r2, #4]
 8003964:	e7cb      	b.n	80038fe <_free_r+0x22>
 8003966:	bd38      	pop	{r3, r4, r5, pc}
 8003968:	2000014c 	.word	0x2000014c

0800396c <sbrk_aligned>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4e0e      	ldr	r6, [pc, #56]	; (80039a8 <sbrk_aligned+0x3c>)
 8003970:	460c      	mov	r4, r1
 8003972:	6831      	ldr	r1, [r6, #0]
 8003974:	4605      	mov	r5, r0
 8003976:	b911      	cbnz	r1, 800397e <sbrk_aligned+0x12>
 8003978:	f000 f8bc 	bl	8003af4 <_sbrk_r>
 800397c:	6030      	str	r0, [r6, #0]
 800397e:	4621      	mov	r1, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f8b7 	bl	8003af4 <_sbrk_r>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	d00a      	beq.n	80039a0 <sbrk_aligned+0x34>
 800398a:	1cc4      	adds	r4, r0, #3
 800398c:	f024 0403 	bic.w	r4, r4, #3
 8003990:	42a0      	cmp	r0, r4
 8003992:	d007      	beq.n	80039a4 <sbrk_aligned+0x38>
 8003994:	1a21      	subs	r1, r4, r0
 8003996:	4628      	mov	r0, r5
 8003998:	f000 f8ac 	bl	8003af4 <_sbrk_r>
 800399c:	3001      	adds	r0, #1
 800399e:	d101      	bne.n	80039a4 <sbrk_aligned+0x38>
 80039a0:	f04f 34ff 	mov.w	r4, #4294967295
 80039a4:	4620      	mov	r0, r4
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	20000150 	.word	0x20000150

080039ac <_malloc_r>:
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b0:	1ccd      	adds	r5, r1, #3
 80039b2:	f025 0503 	bic.w	r5, r5, #3
 80039b6:	3508      	adds	r5, #8
 80039b8:	2d0c      	cmp	r5, #12
 80039ba:	bf38      	it	cc
 80039bc:	250c      	movcc	r5, #12
 80039be:	2d00      	cmp	r5, #0
 80039c0:	4607      	mov	r7, r0
 80039c2:	db01      	blt.n	80039c8 <_malloc_r+0x1c>
 80039c4:	42a9      	cmp	r1, r5
 80039c6:	d905      	bls.n	80039d4 <_malloc_r+0x28>
 80039c8:	230c      	movs	r3, #12
 80039ca:	2600      	movs	r6, #0
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4630      	mov	r0, r6
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d4:	4e2e      	ldr	r6, [pc, #184]	; (8003a90 <_malloc_r+0xe4>)
 80039d6:	f000 f89d 	bl	8003b14 <__malloc_lock>
 80039da:	6833      	ldr	r3, [r6, #0]
 80039dc:	461c      	mov	r4, r3
 80039de:	bb34      	cbnz	r4, 8003a2e <_malloc_r+0x82>
 80039e0:	4629      	mov	r1, r5
 80039e2:	4638      	mov	r0, r7
 80039e4:	f7ff ffc2 	bl	800396c <sbrk_aligned>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	4604      	mov	r4, r0
 80039ec:	d14d      	bne.n	8003a8a <_malloc_r+0xde>
 80039ee:	6834      	ldr	r4, [r6, #0]
 80039f0:	4626      	mov	r6, r4
 80039f2:	2e00      	cmp	r6, #0
 80039f4:	d140      	bne.n	8003a78 <_malloc_r+0xcc>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	4631      	mov	r1, r6
 80039fa:	4638      	mov	r0, r7
 80039fc:	eb04 0803 	add.w	r8, r4, r3
 8003a00:	f000 f878 	bl	8003af4 <_sbrk_r>
 8003a04:	4580      	cmp	r8, r0
 8003a06:	d13a      	bne.n	8003a7e <_malloc_r+0xd2>
 8003a08:	6821      	ldr	r1, [r4, #0]
 8003a0a:	3503      	adds	r5, #3
 8003a0c:	1a6d      	subs	r5, r5, r1
 8003a0e:	f025 0503 	bic.w	r5, r5, #3
 8003a12:	3508      	adds	r5, #8
 8003a14:	2d0c      	cmp	r5, #12
 8003a16:	bf38      	it	cc
 8003a18:	250c      	movcc	r5, #12
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f7ff ffa5 	bl	800396c <sbrk_aligned>
 8003a22:	3001      	adds	r0, #1
 8003a24:	d02b      	beq.n	8003a7e <_malloc_r+0xd2>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	442b      	add	r3, r5
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e00e      	b.n	8003a4c <_malloc_r+0xa0>
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	1b52      	subs	r2, r2, r5
 8003a32:	d41e      	bmi.n	8003a72 <_malloc_r+0xc6>
 8003a34:	2a0b      	cmp	r2, #11
 8003a36:	d916      	bls.n	8003a66 <_malloc_r+0xba>
 8003a38:	1961      	adds	r1, r4, r5
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	6025      	str	r5, [r4, #0]
 8003a3e:	bf18      	it	ne
 8003a40:	6059      	strne	r1, [r3, #4]
 8003a42:	6863      	ldr	r3, [r4, #4]
 8003a44:	bf08      	it	eq
 8003a46:	6031      	streq	r1, [r6, #0]
 8003a48:	5162      	str	r2, [r4, r5]
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f104 060b 	add.w	r6, r4, #11
 8003a52:	f000 f865 	bl	8003b20 <__malloc_unlock>
 8003a56:	f026 0607 	bic.w	r6, r6, #7
 8003a5a:	1d23      	adds	r3, r4, #4
 8003a5c:	1af2      	subs	r2, r6, r3
 8003a5e:	d0b6      	beq.n	80039ce <_malloc_r+0x22>
 8003a60:	1b9b      	subs	r3, r3, r6
 8003a62:	50a3      	str	r3, [r4, r2]
 8003a64:	e7b3      	b.n	80039ce <_malloc_r+0x22>
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	bf0c      	ite	eq
 8003a6c:	6032      	streq	r2, [r6, #0]
 8003a6e:	605a      	strne	r2, [r3, #4]
 8003a70:	e7ec      	b.n	8003a4c <_malloc_r+0xa0>
 8003a72:	4623      	mov	r3, r4
 8003a74:	6864      	ldr	r4, [r4, #4]
 8003a76:	e7b2      	b.n	80039de <_malloc_r+0x32>
 8003a78:	4634      	mov	r4, r6
 8003a7a:	6876      	ldr	r6, [r6, #4]
 8003a7c:	e7b9      	b.n	80039f2 <_malloc_r+0x46>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	4638      	mov	r0, r7
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	f000 f84c 	bl	8003b20 <__malloc_unlock>
 8003a88:	e7a1      	b.n	80039ce <_malloc_r+0x22>
 8003a8a:	6025      	str	r5, [r4, #0]
 8003a8c:	e7de      	b.n	8003a4c <_malloc_r+0xa0>
 8003a8e:	bf00      	nop
 8003a90:	2000014c 	.word	0x2000014c

08003a94 <_realloc_r>:
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	4680      	mov	r8, r0
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	460e      	mov	r6, r1
 8003a9e:	b921      	cbnz	r1, 8003aaa <_realloc_r+0x16>
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa6:	f7ff bf81 	b.w	80039ac <_malloc_r>
 8003aaa:	b92a      	cbnz	r2, 8003ab8 <_realloc_r+0x24>
 8003aac:	f7ff ff16 	bl	80038dc <_free_r>
 8003ab0:	4625      	mov	r5, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	f000 f838 	bl	8003b2c <_malloc_usable_size_r>
 8003abc:	4284      	cmp	r4, r0
 8003abe:	4607      	mov	r7, r0
 8003ac0:	d802      	bhi.n	8003ac8 <_realloc_r+0x34>
 8003ac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ac6:	d812      	bhi.n	8003aee <_realloc_r+0x5a>
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4640      	mov	r0, r8
 8003acc:	f7ff ff6e 	bl	80039ac <_malloc_r>
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0ed      	beq.n	8003ab2 <_realloc_r+0x1e>
 8003ad6:	42bc      	cmp	r4, r7
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4631      	mov	r1, r6
 8003adc:	bf28      	it	cs
 8003ade:	463a      	movcs	r2, r7
 8003ae0:	f7ff fed4 	bl	800388c <memcpy>
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7ff fef8 	bl	80038dc <_free_r>
 8003aec:	e7e1      	b.n	8003ab2 <_realloc_r+0x1e>
 8003aee:	4635      	mov	r5, r6
 8003af0:	e7df      	b.n	8003ab2 <_realloc_r+0x1e>
	...

08003af4 <_sbrk_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	2300      	movs	r3, #0
 8003af8:	4d05      	ldr	r5, [pc, #20]	; (8003b10 <_sbrk_r+0x1c>)
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fd f880 	bl	8000c04 <_sbrk>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_sbrk_r+0x1a>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_sbrk_r+0x1a>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20000154 	.word	0x20000154

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_lock+0x8>)
 8003b16:	f000 b811 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000158 	.word	0x20000158

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f000 b80c 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000158 	.word	0x20000158

08003b2c <_malloc_usable_size_r>:
 8003b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b30:	1f18      	subs	r0, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbc      	itt	lt
 8003b36:	580b      	ldrlt	r3, [r1, r0]
 8003b38:	18c0      	addlt	r0, r0, r3
 8003b3a:	4770      	bx	lr

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <sinf>:
 8003b40:	b507      	push	{r0, r1, r2, lr}
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <sinf+0x70>)
 8003b44:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	dc06      	bgt.n	8003b5c <sinf+0x1c>
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	b003      	add	sp, #12
 8003b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b58:	f000 bcbc 	b.w	80044d4 <__kernel_sinf>
 8003b5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003b60:	db04      	blt.n	8003b6c <sinf+0x2c>
 8003b62:	f7fc fb63 	bl	800022c <__aeabi_fsub>
 8003b66:	b003      	add	sp, #12
 8003b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b6c:	4669      	mov	r1, sp
 8003b6e:	f000 f821 	bl	8003bb4 <__ieee754_rem_pio2f>
 8003b72:	f000 0003 	and.w	r0, r0, #3
 8003b76:	2801      	cmp	r0, #1
 8003b78:	d008      	beq.n	8003b8c <sinf+0x4c>
 8003b7a:	2802      	cmp	r0, #2
 8003b7c:	d00b      	beq.n	8003b96 <sinf+0x56>
 8003b7e:	b990      	cbnz	r0, 8003ba6 <sinf+0x66>
 8003b80:	2201      	movs	r2, #1
 8003b82:	9901      	ldr	r1, [sp, #4]
 8003b84:	9800      	ldr	r0, [sp, #0]
 8003b86:	f000 fca5 	bl	80044d4 <__kernel_sinf>
 8003b8a:	e7ec      	b.n	8003b66 <sinf+0x26>
 8003b8c:	9901      	ldr	r1, [sp, #4]
 8003b8e:	9800      	ldr	r0, [sp, #0]
 8003b90:	f000 f96e 	bl	8003e70 <__kernel_cosf>
 8003b94:	e7e7      	b.n	8003b66 <sinf+0x26>
 8003b96:	2201      	movs	r2, #1
 8003b98:	9901      	ldr	r1, [sp, #4]
 8003b9a:	9800      	ldr	r0, [sp, #0]
 8003b9c:	f000 fc9a 	bl	80044d4 <__kernel_sinf>
 8003ba0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003ba4:	e7df      	b.n	8003b66 <sinf+0x26>
 8003ba6:	9901      	ldr	r1, [sp, #4]
 8003ba8:	9800      	ldr	r0, [sp, #0]
 8003baa:	f000 f961 	bl	8003e70 <__kernel_cosf>
 8003bae:	e7f7      	b.n	8003ba0 <sinf+0x60>
 8003bb0:	3f490fd8 	.word	0x3f490fd8

08003bb4 <__ieee754_rem_pio2f>:
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	4aa0      	ldr	r2, [pc, #640]	; (8003e3c <__ieee754_rem_pio2f+0x288>)
 8003bba:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003bbe:	4296      	cmp	r6, r2
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	4682      	mov	sl, r0
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	dc04      	bgt.n	8003bd2 <__ieee754_rem_pio2f+0x1e>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6008      	str	r0, [r1, #0]
 8003bcc:	604b      	str	r3, [r1, #4]
 8003bce:	2500      	movs	r5, #0
 8003bd0:	e01a      	b.n	8003c08 <__ieee754_rem_pio2f+0x54>
 8003bd2:	4a9b      	ldr	r2, [pc, #620]	; (8003e40 <__ieee754_rem_pio2f+0x28c>)
 8003bd4:	4296      	cmp	r6, r2
 8003bd6:	dc4b      	bgt.n	8003c70 <__ieee754_rem_pio2f+0xbc>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	499a      	ldr	r1, [pc, #616]	; (8003e44 <__ieee754_rem_pio2f+0x290>)
 8003bdc:	4f9a      	ldr	r7, [pc, #616]	; (8003e48 <__ieee754_rem_pio2f+0x294>)
 8003bde:	f026 060f 	bic.w	r6, r6, #15
 8003be2:	dd23      	ble.n	8003c2c <__ieee754_rem_pio2f+0x78>
 8003be4:	f7fc fb22 	bl	800022c <__aeabi_fsub>
 8003be8:	42be      	cmp	r6, r7
 8003bea:	4605      	mov	r5, r0
 8003bec:	d010      	beq.n	8003c10 <__ieee754_rem_pio2f+0x5c>
 8003bee:	4997      	ldr	r1, [pc, #604]	; (8003e4c <__ieee754_rem_pio2f+0x298>)
 8003bf0:	f7fc fb1c 	bl	800022c <__aeabi_fsub>
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	6020      	str	r0, [r4, #0]
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f7fc fb17 	bl	800022c <__aeabi_fsub>
 8003bfe:	4993      	ldr	r1, [pc, #588]	; (8003e4c <__ieee754_rem_pio2f+0x298>)
 8003c00:	f7fc fb14 	bl	800022c <__aeabi_fsub>
 8003c04:	2501      	movs	r5, #1
 8003c06:	6060      	str	r0, [r4, #4]
 8003c08:	4628      	mov	r0, r5
 8003c0a:	b007      	add	sp, #28
 8003c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c10:	498f      	ldr	r1, [pc, #572]	; (8003e50 <__ieee754_rem_pio2f+0x29c>)
 8003c12:	f7fc fb0b 	bl	800022c <__aeabi_fsub>
 8003c16:	498f      	ldr	r1, [pc, #572]	; (8003e54 <__ieee754_rem_pio2f+0x2a0>)
 8003c18:	4605      	mov	r5, r0
 8003c1a:	f7fc fb07 	bl	800022c <__aeabi_fsub>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	6020      	str	r0, [r4, #0]
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7fc fb02 	bl	800022c <__aeabi_fsub>
 8003c28:	498a      	ldr	r1, [pc, #552]	; (8003e54 <__ieee754_rem_pio2f+0x2a0>)
 8003c2a:	e7e9      	b.n	8003c00 <__ieee754_rem_pio2f+0x4c>
 8003c2c:	f7fc fb00 	bl	8000230 <__addsf3>
 8003c30:	42be      	cmp	r6, r7
 8003c32:	4605      	mov	r5, r0
 8003c34:	d00e      	beq.n	8003c54 <__ieee754_rem_pio2f+0xa0>
 8003c36:	4985      	ldr	r1, [pc, #532]	; (8003e4c <__ieee754_rem_pio2f+0x298>)
 8003c38:	f7fc fafa 	bl	8000230 <__addsf3>
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	6020      	str	r0, [r4, #0]
 8003c40:	4628      	mov	r0, r5
 8003c42:	f7fc faf3 	bl	800022c <__aeabi_fsub>
 8003c46:	4981      	ldr	r1, [pc, #516]	; (8003e4c <__ieee754_rem_pio2f+0x298>)
 8003c48:	f7fc faf2 	bl	8000230 <__addsf3>
 8003c4c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c50:	6060      	str	r0, [r4, #4]
 8003c52:	e7d9      	b.n	8003c08 <__ieee754_rem_pio2f+0x54>
 8003c54:	497e      	ldr	r1, [pc, #504]	; (8003e50 <__ieee754_rem_pio2f+0x29c>)
 8003c56:	f7fc faeb 	bl	8000230 <__addsf3>
 8003c5a:	497e      	ldr	r1, [pc, #504]	; (8003e54 <__ieee754_rem_pio2f+0x2a0>)
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	f7fc fae7 	bl	8000230 <__addsf3>
 8003c62:	4601      	mov	r1, r0
 8003c64:	6020      	str	r0, [r4, #0]
 8003c66:	4628      	mov	r0, r5
 8003c68:	f7fc fae0 	bl	800022c <__aeabi_fsub>
 8003c6c:	4979      	ldr	r1, [pc, #484]	; (8003e54 <__ieee754_rem_pio2f+0x2a0>)
 8003c6e:	e7eb      	b.n	8003c48 <__ieee754_rem_pio2f+0x94>
 8003c70:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <__ieee754_rem_pio2f+0x2a4>)
 8003c72:	4296      	cmp	r6, r2
 8003c74:	f300 8091 	bgt.w	8003d9a <__ieee754_rem_pio2f+0x1e6>
 8003c78:	f000 fca2 	bl	80045c0 <fabsf>
 8003c7c:	4977      	ldr	r1, [pc, #476]	; (8003e5c <__ieee754_rem_pio2f+0x2a8>)
 8003c7e:	4607      	mov	r7, r0
 8003c80:	f7fc fbde 	bl	8000440 <__aeabi_fmul>
 8003c84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c88:	f7fc fad2 	bl	8000230 <__addsf3>
 8003c8c:	f7fc fd9e 	bl	80007cc <__aeabi_f2iz>
 8003c90:	4605      	mov	r5, r0
 8003c92:	f7fc fb81 	bl	8000398 <__aeabi_i2f>
 8003c96:	496b      	ldr	r1, [pc, #428]	; (8003e44 <__ieee754_rem_pio2f+0x290>)
 8003c98:	4681      	mov	r9, r0
 8003c9a:	f7fc fbd1 	bl	8000440 <__aeabi_fmul>
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7fc fac3 	bl	800022c <__aeabi_fsub>
 8003ca6:	4969      	ldr	r1, [pc, #420]	; (8003e4c <__ieee754_rem_pio2f+0x298>)
 8003ca8:	4680      	mov	r8, r0
 8003caa:	4648      	mov	r0, r9
 8003cac:	f7fc fbc8 	bl	8000440 <__aeabi_fmul>
 8003cb0:	2d1f      	cmp	r5, #31
 8003cb2:	4607      	mov	r7, r0
 8003cb4:	dc0c      	bgt.n	8003cd0 <__ieee754_rem_pio2f+0x11c>
 8003cb6:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <__ieee754_rem_pio2f+0x2ac>)
 8003cb8:	1e69      	subs	r1, r5, #1
 8003cba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003cbe:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <__ieee754_rem_pio2f+0x11c>
 8003cc6:	4639      	mov	r1, r7
 8003cc8:	4640      	mov	r0, r8
 8003cca:	f7fc faaf 	bl	800022c <__aeabi_fsub>
 8003cce:	e00b      	b.n	8003ce8 <__ieee754_rem_pio2f+0x134>
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f7fc faaa 	bl	800022c <__aeabi_fsub>
 8003cd8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003cdc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8003ce0:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8003ce4:	2e08      	cmp	r6, #8
 8003ce6:	dc01      	bgt.n	8003cec <__ieee754_rem_pio2f+0x138>
 8003ce8:	6020      	str	r0, [r4, #0]
 8003cea:	e026      	b.n	8003d3a <__ieee754_rem_pio2f+0x186>
 8003cec:	4958      	ldr	r1, [pc, #352]	; (8003e50 <__ieee754_rem_pio2f+0x29c>)
 8003cee:	4648      	mov	r0, r9
 8003cf0:	f7fc fba6 	bl	8000440 <__aeabi_fmul>
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	f7fc fa97 	bl	800022c <__aeabi_fsub>
 8003cfe:	4601      	mov	r1, r0
 8003d00:	4606      	mov	r6, r0
 8003d02:	4640      	mov	r0, r8
 8003d04:	f7fc fa92 	bl	800022c <__aeabi_fsub>
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fa8f 	bl	800022c <__aeabi_fsub>
 8003d0e:	4607      	mov	r7, r0
 8003d10:	4950      	ldr	r1, [pc, #320]	; (8003e54 <__ieee754_rem_pio2f+0x2a0>)
 8003d12:	4648      	mov	r0, r9
 8003d14:	f7fc fb94 	bl	8000440 <__aeabi_fmul>
 8003d18:	4639      	mov	r1, r7
 8003d1a:	f7fc fa87 	bl	800022c <__aeabi_fsub>
 8003d1e:	4601      	mov	r1, r0
 8003d20:	4607      	mov	r7, r0
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7fc fa82 	bl	800022c <__aeabi_fsub>
 8003d28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003d2c:	ebab 0b03 	sub.w	fp, fp, r3
 8003d30:	f1bb 0f19 	cmp.w	fp, #25
 8003d34:	dc16      	bgt.n	8003d64 <__ieee754_rem_pio2f+0x1b0>
 8003d36:	46b0      	mov	r8, r6
 8003d38:	6020      	str	r0, [r4, #0]
 8003d3a:	6826      	ldr	r6, [r4, #0]
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4631      	mov	r1, r6
 8003d40:	f7fc fa74 	bl	800022c <__aeabi_fsub>
 8003d44:	4639      	mov	r1, r7
 8003d46:	f7fc fa71 	bl	800022c <__aeabi_fsub>
 8003d4a:	f1ba 0f00 	cmp.w	sl, #0
 8003d4e:	6060      	str	r0, [r4, #4]
 8003d50:	f6bf af5a 	bge.w	8003c08 <__ieee754_rem_pio2f+0x54>
 8003d54:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003d58:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003d5c:	6026      	str	r6, [r4, #0]
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	426d      	negs	r5, r5
 8003d62:	e751      	b.n	8003c08 <__ieee754_rem_pio2f+0x54>
 8003d64:	493f      	ldr	r1, [pc, #252]	; (8003e64 <__ieee754_rem_pio2f+0x2b0>)
 8003d66:	4648      	mov	r0, r9
 8003d68:	f7fc fb6a 	bl	8000440 <__aeabi_fmul>
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4630      	mov	r0, r6
 8003d72:	f7fc fa5b 	bl	800022c <__aeabi_fsub>
 8003d76:	4601      	mov	r1, r0
 8003d78:	4680      	mov	r8, r0
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f7fc fa56 	bl	800022c <__aeabi_fsub>
 8003d80:	4639      	mov	r1, r7
 8003d82:	f7fc fa53 	bl	800022c <__aeabi_fsub>
 8003d86:	4606      	mov	r6, r0
 8003d88:	4937      	ldr	r1, [pc, #220]	; (8003e68 <__ieee754_rem_pio2f+0x2b4>)
 8003d8a:	4648      	mov	r0, r9
 8003d8c:	f7fc fb58 	bl	8000440 <__aeabi_fmul>
 8003d90:	4631      	mov	r1, r6
 8003d92:	f7fc fa4b 	bl	800022c <__aeabi_fsub>
 8003d96:	4607      	mov	r7, r0
 8003d98:	e795      	b.n	8003cc6 <__ieee754_rem_pio2f+0x112>
 8003d9a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003d9e:	db05      	blt.n	8003dac <__ieee754_rem_pio2f+0x1f8>
 8003da0:	4601      	mov	r1, r0
 8003da2:	f7fc fa43 	bl	800022c <__aeabi_fsub>
 8003da6:	6060      	str	r0, [r4, #4]
 8003da8:	6020      	str	r0, [r4, #0]
 8003daa:	e710      	b.n	8003bce <__ieee754_rem_pio2f+0x1a>
 8003dac:	15f7      	asrs	r7, r6, #23
 8003dae:	3f86      	subs	r7, #134	; 0x86
 8003db0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8003db4:	4630      	mov	r0, r6
 8003db6:	f7fc fd09 	bl	80007cc <__aeabi_f2iz>
 8003dba:	f7fc faed 	bl	8000398 <__aeabi_i2f>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	9003      	str	r0, [sp, #12]
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7fc fa32 	bl	800022c <__aeabi_fsub>
 8003dc8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003dcc:	f7fc fb38 	bl	8000440 <__aeabi_fmul>
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	f7fc fcfb 	bl	80007cc <__aeabi_f2iz>
 8003dd6:	f7fc fadf 	bl	8000398 <__aeabi_i2f>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	9004      	str	r0, [sp, #16]
 8003dde:	4605      	mov	r5, r0
 8003de0:	4630      	mov	r0, r6
 8003de2:	f7fc fa23 	bl	800022c <__aeabi_fsub>
 8003de6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003dea:	f7fc fb29 	bl	8000440 <__aeabi_fmul>
 8003dee:	2100      	movs	r1, #0
 8003df0:	9005      	str	r0, [sp, #20]
 8003df2:	f7fc fcb9 	bl	8000768 <__aeabi_fcmpeq>
 8003df6:	b1f0      	cbz	r0, 8003e36 <__ieee754_rem_pio2f+0x282>
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f7fc fcb4 	bl	8000768 <__aeabi_fcmpeq>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2302      	moveq	r3, #2
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <__ieee754_rem_pio2f+0x2b8>)
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	9201      	str	r2, [sp, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	a803      	add	r0, sp, #12
 8003e12:	9200      	str	r2, [sp, #0]
 8003e14:	463a      	mov	r2, r7
 8003e16:	f000 f8ab 	bl	8003f70 <__kernel_rem_pio2f>
 8003e1a:	f1ba 0f00 	cmp.w	sl, #0
 8003e1e:	4605      	mov	r5, r0
 8003e20:	f6bf aef2 	bge.w	8003c08 <__ieee754_rem_pio2f+0x54>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	e794      	b.n	8003d60 <__ieee754_rem_pio2f+0x1ac>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e7e6      	b.n	8003e08 <__ieee754_rem_pio2f+0x254>
 8003e3a:	bf00      	nop
 8003e3c:	3f490fd8 	.word	0x3f490fd8
 8003e40:	4016cbe3 	.word	0x4016cbe3
 8003e44:	3fc90f80 	.word	0x3fc90f80
 8003e48:	3fc90fd0 	.word	0x3fc90fd0
 8003e4c:	37354443 	.word	0x37354443
 8003e50:	37354400 	.word	0x37354400
 8003e54:	2e85a308 	.word	0x2e85a308
 8003e58:	43490f80 	.word	0x43490f80
 8003e5c:	3f22f984 	.word	0x3f22f984
 8003e60:	0800475c 	.word	0x0800475c
 8003e64:	2e85a300 	.word	0x2e85a300
 8003e68:	248d3132 	.word	0x248d3132
 8003e6c:	080047dc 	.word	0x080047dc

08003e70 <__kernel_cosf>:
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003e78:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	da03      	bge.n	8003e8a <__kernel_cosf+0x1a>
 8003e82:	f7fc fca3 	bl	80007cc <__aeabi_f2iz>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d05c      	beq.n	8003f44 <__kernel_cosf+0xd4>
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7fc fad7 	bl	8000440 <__aeabi_fmul>
 8003e92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e96:	4605      	mov	r5, r0
 8003e98:	f7fc fad2 	bl	8000440 <__aeabi_fmul>
 8003e9c:	492b      	ldr	r1, [pc, #172]	; (8003f4c <__kernel_cosf+0xdc>)
 8003e9e:	4607      	mov	r7, r0
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f7fc facd 	bl	8000440 <__aeabi_fmul>
 8003ea6:	492a      	ldr	r1, [pc, #168]	; (8003f50 <__kernel_cosf+0xe0>)
 8003ea8:	f7fc f9c2 	bl	8000230 <__addsf3>
 8003eac:	4629      	mov	r1, r5
 8003eae:	f7fc fac7 	bl	8000440 <__aeabi_fmul>
 8003eb2:	4928      	ldr	r1, [pc, #160]	; (8003f54 <__kernel_cosf+0xe4>)
 8003eb4:	f7fc f9ba 	bl	800022c <__aeabi_fsub>
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fc fac1 	bl	8000440 <__aeabi_fmul>
 8003ebe:	4926      	ldr	r1, [pc, #152]	; (8003f58 <__kernel_cosf+0xe8>)
 8003ec0:	f7fc f9b6 	bl	8000230 <__addsf3>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7fc fabb 	bl	8000440 <__aeabi_fmul>
 8003eca:	4924      	ldr	r1, [pc, #144]	; (8003f5c <__kernel_cosf+0xec>)
 8003ecc:	f7fc f9ae 	bl	800022c <__aeabi_fsub>
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc fab5 	bl	8000440 <__aeabi_fmul>
 8003ed6:	4922      	ldr	r1, [pc, #136]	; (8003f60 <__kernel_cosf+0xf0>)
 8003ed8:	f7fc f9aa 	bl	8000230 <__addsf3>
 8003edc:	4629      	mov	r1, r5
 8003ede:	f7fc faaf 	bl	8000440 <__aeabi_fmul>
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f7fc faac 	bl	8000440 <__aeabi_fmul>
 8003ee8:	4641      	mov	r1, r8
 8003eea:	4605      	mov	r5, r0
 8003eec:	4630      	mov	r0, r6
 8003eee:	f7fc faa7 	bl	8000440 <__aeabi_fmul>
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f7fc f999 	bl	800022c <__aeabi_fsub>
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <__kernel_cosf+0xf4>)
 8003efc:	4605      	mov	r5, r0
 8003efe:	429c      	cmp	r4, r3
 8003f00:	dc0a      	bgt.n	8003f18 <__kernel_cosf+0xa8>
 8003f02:	4601      	mov	r1, r0
 8003f04:	4638      	mov	r0, r7
 8003f06:	f7fc f991 	bl	800022c <__aeabi_fsub>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f10:	f7fc f98c 	bl	800022c <__aeabi_fsub>
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <__kernel_cosf+0xf8>)
 8003f1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	bfcc      	ite	gt
 8003f22:	4c12      	ldrgt	r4, [pc, #72]	; (8003f6c <__kernel_cosf+0xfc>)
 8003f24:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003f28:	4621      	mov	r1, r4
 8003f2a:	f7fc f97f 	bl	800022c <__aeabi_fsub>
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4606      	mov	r6, r0
 8003f32:	4638      	mov	r0, r7
 8003f34:	f7fc f97a 	bl	800022c <__aeabi_fsub>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc f977 	bl	800022c <__aeabi_fsub>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4630      	mov	r0, r6
 8003f42:	e7e5      	b.n	8003f10 <__kernel_cosf+0xa0>
 8003f44:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f48:	e7e4      	b.n	8003f14 <__kernel_cosf+0xa4>
 8003f4a:	bf00      	nop
 8003f4c:	ad47d74e 	.word	0xad47d74e
 8003f50:	310f74f6 	.word	0x310f74f6
 8003f54:	3493f27c 	.word	0x3493f27c
 8003f58:	37d00d01 	.word	0x37d00d01
 8003f5c:	3ab60b61 	.word	0x3ab60b61
 8003f60:	3d2aaaab 	.word	0x3d2aaaab
 8003f64:	3e999999 	.word	0x3e999999
 8003f68:	3f480000 	.word	0x3f480000
 8003f6c:	3e900000 	.word	0x3e900000

08003f70 <__kernel_rem_pio2f>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	b0db      	sub	sp, #364	; 0x16c
 8003f76:	9202      	str	r2, [sp, #8]
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003f7c:	4bb2      	ldr	r3, [pc, #712]	; (8004248 <__kernel_rem_pio2f+0x2d8>)
 8003f7e:	9005      	str	r0, [sp, #20]
 8003f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f84:	9100      	str	r1, [sp, #0]
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	9303      	str	r3, [sp, #12]
 8003f8e:	9b02      	ldr	r3, [sp, #8]
 8003f90:	1d1a      	adds	r2, r3, #4
 8003f92:	f2c0 809b 	blt.w	80040cc <__kernel_rem_pio2f+0x15c>
 8003f96:	1edc      	subs	r4, r3, #3
 8003f98:	bf48      	it	mi
 8003f9a:	1d1c      	addmi	r4, r3, #4
 8003f9c:	10e4      	asrs	r4, r4, #3
 8003f9e:	2500      	movs	r5, #0
 8003fa0:	f04f 0b00 	mov.w	fp, #0
 8003fa4:	1c67      	adds	r7, r4, #1
 8003fa6:	00fb      	lsls	r3, r7, #3
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	9b02      	ldr	r3, [sp, #8]
 8003fac:	9a03      	ldr	r2, [sp, #12]
 8003fae:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8003fb2:	9b01      	ldr	r3, [sp, #4]
 8003fb4:	eba4 0802 	sub.w	r8, r4, r2
 8003fb8:	eb03 0902 	add.w	r9, r3, r2
 8003fbc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003fbe:	ae1e      	add	r6, sp, #120	; 0x78
 8003fc0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003fc4:	454d      	cmp	r5, r9
 8003fc6:	f340 8083 	ble.w	80040d0 <__kernel_rem_pio2f+0x160>
 8003fca:	9a04      	ldr	r2, [sp, #16]
 8003fcc:	ab1e      	add	r3, sp, #120	; 0x78
 8003fce:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003fd2:	f04f 0900 	mov.w	r9, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8003fdc:	9a01      	ldr	r2, [sp, #4]
 8003fde:	4591      	cmp	r9, r2
 8003fe0:	f340 809e 	ble.w	8004120 <__kernel_rem_pio2f+0x1b0>
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	aa0a      	add	r2, sp, #40	; 0x28
 8003fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fec:	9308      	str	r3, [sp, #32]
 8003fee:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003ff0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003ff4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ff8:	9307      	str	r3, [sp, #28]
 8003ffa:	ac0a      	add	r4, sp, #40	; 0x28
 8003ffc:	4626      	mov	r6, r4
 8003ffe:	46c3      	mov	fp, r8
 8004000:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8004004:	ab5a      	add	r3, sp, #360	; 0x168
 8004006:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800400a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800400e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8004012:	f1bb 0f00 	cmp.w	fp, #0
 8004016:	f300 8088 	bgt.w	800412a <__kernel_rem_pio2f+0x1ba>
 800401a:	4639      	mov	r1, r7
 800401c:	4628      	mov	r0, r5
 800401e:	f000 fb15 	bl	800464c <scalbnf>
 8004022:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8004026:	4605      	mov	r5, r0
 8004028:	f7fc fa0a 	bl	8000440 <__aeabi_fmul>
 800402c:	f000 facc 	bl	80045c8 <floorf>
 8004030:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8004034:	f7fc fa04 	bl	8000440 <__aeabi_fmul>
 8004038:	4601      	mov	r1, r0
 800403a:	4628      	mov	r0, r5
 800403c:	f7fc f8f6 	bl	800022c <__aeabi_fsub>
 8004040:	4605      	mov	r5, r0
 8004042:	f7fc fbc3 	bl	80007cc <__aeabi_f2iz>
 8004046:	4606      	mov	r6, r0
 8004048:	f7fc f9a6 	bl	8000398 <__aeabi_i2f>
 800404c:	4601      	mov	r1, r0
 800404e:	4628      	mov	r0, r5
 8004050:	f7fc f8ec 	bl	800022c <__aeabi_fsub>
 8004054:	2f00      	cmp	r7, #0
 8004056:	4681      	mov	r9, r0
 8004058:	f340 8086 	ble.w	8004168 <__kernel_rem_pio2f+0x1f8>
 800405c:	f108 32ff 	add.w	r2, r8, #4294967295
 8004060:	ab0a      	add	r3, sp, #40	; 0x28
 8004062:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8004066:	f1c7 0108 	rsb	r1, r7, #8
 800406a:	fa45 f301 	asr.w	r3, r5, r1
 800406e:	441e      	add	r6, r3
 8004070:	408b      	lsls	r3, r1
 8004072:	1aed      	subs	r5, r5, r3
 8004074:	f1c7 0007 	rsb	r0, r7, #7
 8004078:	ab0a      	add	r3, sp, #40	; 0x28
 800407a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800407e:	4105      	asrs	r5, r0
 8004080:	2d00      	cmp	r5, #0
 8004082:	dd7f      	ble.n	8004184 <__kernel_rem_pio2f+0x214>
 8004084:	2200      	movs	r2, #0
 8004086:	4692      	mov	sl, r2
 8004088:	3601      	adds	r6, #1
 800408a:	4590      	cmp	r8, r2
 800408c:	f300 80b0 	bgt.w	80041f0 <__kernel_rem_pio2f+0x280>
 8004090:	2f00      	cmp	r7, #0
 8004092:	dd05      	ble.n	80040a0 <__kernel_rem_pio2f+0x130>
 8004094:	2f01      	cmp	r7, #1
 8004096:	f000 80bd 	beq.w	8004214 <__kernel_rem_pio2f+0x2a4>
 800409a:	2f02      	cmp	r7, #2
 800409c:	f000 80c5 	beq.w	800422a <__kernel_rem_pio2f+0x2ba>
 80040a0:	2d02      	cmp	r5, #2
 80040a2:	d16f      	bne.n	8004184 <__kernel_rem_pio2f+0x214>
 80040a4:	4649      	mov	r1, r9
 80040a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040aa:	f7fc f8bf 	bl	800022c <__aeabi_fsub>
 80040ae:	4681      	mov	r9, r0
 80040b0:	f1ba 0f00 	cmp.w	sl, #0
 80040b4:	d066      	beq.n	8004184 <__kernel_rem_pio2f+0x214>
 80040b6:	4639      	mov	r1, r7
 80040b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040bc:	f000 fac6 	bl	800464c <scalbnf>
 80040c0:	4601      	mov	r1, r0
 80040c2:	4648      	mov	r0, r9
 80040c4:	f7fc f8b2 	bl	800022c <__aeabi_fsub>
 80040c8:	4681      	mov	r9, r0
 80040ca:	e05b      	b.n	8004184 <__kernel_rem_pio2f+0x214>
 80040cc:	2400      	movs	r4, #0
 80040ce:	e766      	b.n	8003f9e <__kernel_rem_pio2f+0x2e>
 80040d0:	eb18 0f05 	cmn.w	r8, r5
 80040d4:	d407      	bmi.n	80040e6 <__kernel_rem_pio2f+0x176>
 80040d6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80040da:	f7fc f95d 	bl	8000398 <__aeabi_i2f>
 80040de:	f846 0b04 	str.w	r0, [r6], #4
 80040e2:	3501      	adds	r5, #1
 80040e4:	e76e      	b.n	8003fc4 <__kernel_rem_pio2f+0x54>
 80040e6:	4658      	mov	r0, fp
 80040e8:	e7f9      	b.n	80040de <__kernel_rem_pio2f+0x16e>
 80040ea:	9307      	str	r3, [sp, #28]
 80040ec:	9b05      	ldr	r3, [sp, #20]
 80040ee:	f8da 1000 	ldr.w	r1, [sl]
 80040f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80040f6:	f7fc f9a3 	bl	8000440 <__aeabi_fmul>
 80040fa:	4601      	mov	r1, r0
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7fc f897 	bl	8000230 <__addsf3>
 8004102:	4606      	mov	r6, r0
 8004104:	9b07      	ldr	r3, [sp, #28]
 8004106:	f108 0801 	add.w	r8, r8, #1
 800410a:	9a03      	ldr	r2, [sp, #12]
 800410c:	f1aa 0a04 	sub.w	sl, sl, #4
 8004110:	4590      	cmp	r8, r2
 8004112:	ddea      	ble.n	80040ea <__kernel_rem_pio2f+0x17a>
 8004114:	f84b 6b04 	str.w	r6, [fp], #4
 8004118:	f109 0901 	add.w	r9, r9, #1
 800411c:	3504      	adds	r5, #4
 800411e:	e75d      	b.n	8003fdc <__kernel_rem_pio2f+0x6c>
 8004120:	46aa      	mov	sl, r5
 8004122:	461e      	mov	r6, r3
 8004124:	f04f 0800 	mov.w	r8, #0
 8004128:	e7ef      	b.n	800410a <__kernel_rem_pio2f+0x19a>
 800412a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800412e:	4628      	mov	r0, r5
 8004130:	f7fc f986 	bl	8000440 <__aeabi_fmul>
 8004134:	f7fc fb4a 	bl	80007cc <__aeabi_f2iz>
 8004138:	f7fc f92e 	bl	8000398 <__aeabi_i2f>
 800413c:	4649      	mov	r1, r9
 800413e:	9009      	str	r0, [sp, #36]	; 0x24
 8004140:	f7fc f97e 	bl	8000440 <__aeabi_fmul>
 8004144:	4601      	mov	r1, r0
 8004146:	4628      	mov	r0, r5
 8004148:	f7fc f870 	bl	800022c <__aeabi_fsub>
 800414c:	f7fc fb3e 	bl	80007cc <__aeabi_f2iz>
 8004150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004152:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004156:	f846 0b04 	str.w	r0, [r6], #4
 800415a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f866 	bl	8000230 <__addsf3>
 8004164:	4605      	mov	r5, r0
 8004166:	e754      	b.n	8004012 <__kernel_rem_pio2f+0xa2>
 8004168:	d106      	bne.n	8004178 <__kernel_rem_pio2f+0x208>
 800416a:	f108 33ff 	add.w	r3, r8, #4294967295
 800416e:	aa0a      	add	r2, sp, #40	; 0x28
 8004170:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004174:	11ed      	asrs	r5, r5, #7
 8004176:	e783      	b.n	8004080 <__kernel_rem_pio2f+0x110>
 8004178:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800417c:	f7fc fb12 	bl	80007a4 <__aeabi_fcmpge>
 8004180:	4605      	mov	r5, r0
 8004182:	bb98      	cbnz	r0, 80041ec <__kernel_rem_pio2f+0x27c>
 8004184:	2100      	movs	r1, #0
 8004186:	4648      	mov	r0, r9
 8004188:	f7fc faee 	bl	8000768 <__aeabi_fcmpeq>
 800418c:	2800      	cmp	r0, #0
 800418e:	f000 8098 	beq.w	80042c2 <__kernel_rem_pio2f+0x352>
 8004192:	f108 34ff 	add.w	r4, r8, #4294967295
 8004196:	4623      	mov	r3, r4
 8004198:	2200      	movs	r2, #0
 800419a:	9901      	ldr	r1, [sp, #4]
 800419c:	428b      	cmp	r3, r1
 800419e:	da4c      	bge.n	800423a <__kernel_rem_pio2f+0x2ca>
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d07a      	beq.n	800429a <__kernel_rem_pio2f+0x32a>
 80041a4:	ab0a      	add	r3, sp, #40	; 0x28
 80041a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80041aa:	3f08      	subs	r7, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8086 	beq.w	80042be <__kernel_rem_pio2f+0x34e>
 80041b2:	4639      	mov	r1, r7
 80041b4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80041b8:	f000 fa48 	bl	800464c <scalbnf>
 80041bc:	46a2      	mov	sl, r4
 80041be:	4681      	mov	r9, r0
 80041c0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80041c4:	af46      	add	r7, sp, #280	; 0x118
 80041c6:	f1ba 0f00 	cmp.w	sl, #0
 80041ca:	f280 80af 	bge.w	800432c <__kernel_rem_pio2f+0x3bc>
 80041ce:	4627      	mov	r7, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	2f00      	cmp	r7, #0
 80041d4:	f2c0 80d9 	blt.w	800438a <__kernel_rem_pio2f+0x41a>
 80041d8:	a946      	add	r1, sp, #280	; 0x118
 80041da:	4690      	mov	r8, r2
 80041dc:	f04f 0a00 	mov.w	sl, #0
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <__kernel_rem_pio2f+0x2dc>)
 80041e2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80041e6:	eba4 0907 	sub.w	r9, r4, r7
 80041ea:	e0c2      	b.n	8004372 <__kernel_rem_pio2f+0x402>
 80041ec:	2502      	movs	r5, #2
 80041ee:	e749      	b.n	8004084 <__kernel_rem_pio2f+0x114>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f1ba 0f00 	cmp.w	sl, #0
 80041f6:	d108      	bne.n	800420a <__kernel_rem_pio2f+0x29a>
 80041f8:	b11b      	cbz	r3, 8004202 <__kernel_rem_pio2f+0x292>
 80041fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	2301      	movs	r3, #1
 8004202:	469a      	mov	sl, r3
 8004204:	3201      	adds	r2, #1
 8004206:	3404      	adds	r4, #4
 8004208:	e73f      	b.n	800408a <__kernel_rem_pio2f+0x11a>
 800420a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	4653      	mov	r3, sl
 8004212:	e7f6      	b.n	8004202 <__kernel_rem_pio2f+0x292>
 8004214:	f108 32ff 	add.w	r2, r8, #4294967295
 8004218:	ab0a      	add	r3, sp, #40	; 0x28
 800421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004222:	a90a      	add	r1, sp, #40	; 0x28
 8004224:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004228:	e73a      	b.n	80040a0 <__kernel_rem_pio2f+0x130>
 800422a:	f108 32ff 	add.w	r2, r8, #4294967295
 800422e:	ab0a      	add	r3, sp, #40	; 0x28
 8004230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	e7f3      	b.n	8004222 <__kernel_rem_pio2f+0x2b2>
 800423a:	a90a      	add	r1, sp, #40	; 0x28
 800423c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004240:	3b01      	subs	r3, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	e7a9      	b.n	800419a <__kernel_rem_pio2f+0x22a>
 8004246:	bf00      	nop
 8004248:	08004b20 	.word	0x08004b20
 800424c:	08004af4 	.word	0x08004af4
 8004250:	3301      	adds	r3, #1
 8004252:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004256:	2900      	cmp	r1, #0
 8004258:	d0fa      	beq.n	8004250 <__kernel_rem_pio2f+0x2e0>
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	f108 0501 	add.w	r5, r8, #1
 8004260:	eb08 0402 	add.w	r4, r8, r2
 8004264:	aa1e      	add	r2, sp, #120	; 0x78
 8004266:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800426a:	4498      	add	r8, r3
 800426c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8004270:	45a8      	cmp	r8, r5
 8004272:	f6ff aec2 	blt.w	8003ffa <__kernel_rem_pio2f+0x8a>
 8004276:	9b07      	ldr	r3, [sp, #28]
 8004278:	46a3      	mov	fp, r4
 800427a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800427e:	f7fc f88b 	bl	8000398 <__aeabi_i2f>
 8004282:	f04f 0a00 	mov.w	sl, #0
 8004286:	2600      	movs	r6, #0
 8004288:	6020      	str	r0, [r4, #0]
 800428a:	9b03      	ldr	r3, [sp, #12]
 800428c:	459a      	cmp	sl, r3
 800428e:	dd07      	ble.n	80042a0 <__kernel_rem_pio2f+0x330>
 8004290:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8004294:	3404      	adds	r4, #4
 8004296:	3501      	adds	r5, #1
 8004298:	e7ea      	b.n	8004270 <__kernel_rem_pio2f+0x300>
 800429a:	2301      	movs	r3, #1
 800429c:	9a08      	ldr	r2, [sp, #32]
 800429e:	e7d8      	b.n	8004252 <__kernel_rem_pio2f+0x2e2>
 80042a0:	9b05      	ldr	r3, [sp, #20]
 80042a2:	f85b 0904 	ldr.w	r0, [fp], #-4
 80042a6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80042aa:	f7fc f8c9 	bl	8000440 <__aeabi_fmul>
 80042ae:	4601      	mov	r1, r0
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7fb ffbd 	bl	8000230 <__addsf3>
 80042b6:	f10a 0a01 	add.w	sl, sl, #1
 80042ba:	4606      	mov	r6, r0
 80042bc:	e7e5      	b.n	800428a <__kernel_rem_pio2f+0x31a>
 80042be:	3c01      	subs	r4, #1
 80042c0:	e770      	b.n	80041a4 <__kernel_rem_pio2f+0x234>
 80042c2:	9b06      	ldr	r3, [sp, #24]
 80042c4:	9a02      	ldr	r2, [sp, #8]
 80042c6:	4648      	mov	r0, r9
 80042c8:	1a99      	subs	r1, r3, r2
 80042ca:	f000 f9bf 	bl	800464c <scalbnf>
 80042ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80042d2:	4604      	mov	r4, r0
 80042d4:	f7fc fa66 	bl	80007a4 <__aeabi_fcmpge>
 80042d8:	b300      	cbz	r0, 800431c <__kernel_rem_pio2f+0x3ac>
 80042da:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80042de:	4620      	mov	r0, r4
 80042e0:	f7fc f8ae 	bl	8000440 <__aeabi_fmul>
 80042e4:	f7fc fa72 	bl	80007cc <__aeabi_f2iz>
 80042e8:	f7fc f856 	bl	8000398 <__aeabi_i2f>
 80042ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80042f0:	4681      	mov	r9, r0
 80042f2:	f7fc f8a5 	bl	8000440 <__aeabi_fmul>
 80042f6:	4601      	mov	r1, r0
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fb ff97 	bl	800022c <__aeabi_fsub>
 80042fe:	f7fc fa65 	bl	80007cc <__aeabi_f2iz>
 8004302:	ab0a      	add	r3, sp, #40	; 0x28
 8004304:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004308:	4648      	mov	r0, r9
 800430a:	f7fc fa5f 	bl	80007cc <__aeabi_f2iz>
 800430e:	f108 0401 	add.w	r4, r8, #1
 8004312:	ab0a      	add	r3, sp, #40	; 0x28
 8004314:	3708      	adds	r7, #8
 8004316:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800431a:	e74a      	b.n	80041b2 <__kernel_rem_pio2f+0x242>
 800431c:	4620      	mov	r0, r4
 800431e:	f7fc fa55 	bl	80007cc <__aeabi_f2iz>
 8004322:	ab0a      	add	r3, sp, #40	; 0x28
 8004324:	4644      	mov	r4, r8
 8004326:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800432a:	e742      	b.n	80041b2 <__kernel_rem_pio2f+0x242>
 800432c:	ab0a      	add	r3, sp, #40	; 0x28
 800432e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004332:	f7fc f831 	bl	8000398 <__aeabi_i2f>
 8004336:	4649      	mov	r1, r9
 8004338:	f7fc f882 	bl	8000440 <__aeabi_fmul>
 800433c:	4641      	mov	r1, r8
 800433e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8004342:	4648      	mov	r0, r9
 8004344:	f7fc f87c 	bl	8000440 <__aeabi_fmul>
 8004348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800434c:	4681      	mov	r9, r0
 800434e:	e73a      	b.n	80041c6 <__kernel_rem_pio2f+0x256>
 8004350:	f853 0b04 	ldr.w	r0, [r3], #4
 8004354:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004358:	9203      	str	r2, [sp, #12]
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	f7fc f870 	bl	8000440 <__aeabi_fmul>
 8004360:	4601      	mov	r1, r0
 8004362:	4640      	mov	r0, r8
 8004364:	f7fb ff64 	bl	8000230 <__addsf3>
 8004368:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800436c:	4680      	mov	r8, r0
 800436e:	f10a 0a01 	add.w	sl, sl, #1
 8004372:	9901      	ldr	r1, [sp, #4]
 8004374:	458a      	cmp	sl, r1
 8004376:	dc01      	bgt.n	800437c <__kernel_rem_pio2f+0x40c>
 8004378:	45ca      	cmp	sl, r9
 800437a:	dde9      	ble.n	8004350 <__kernel_rem_pio2f+0x3e0>
 800437c:	ab5a      	add	r3, sp, #360	; 0x168
 800437e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8004382:	f849 8ca0 	str.w	r8, [r9, #-160]
 8004386:	3f01      	subs	r7, #1
 8004388:	e723      	b.n	80041d2 <__kernel_rem_pio2f+0x262>
 800438a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800438c:	2b02      	cmp	r3, #2
 800438e:	dc07      	bgt.n	80043a0 <__kernel_rem_pio2f+0x430>
 8004390:	2b00      	cmp	r3, #0
 8004392:	dc4d      	bgt.n	8004430 <__kernel_rem_pio2f+0x4c0>
 8004394:	d02e      	beq.n	80043f4 <__kernel_rem_pio2f+0x484>
 8004396:	f006 0007 	and.w	r0, r6, #7
 800439a:	b05b      	add	sp, #364	; 0x16c
 800439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d1f7      	bne.n	8004396 <__kernel_rem_pio2f+0x426>
 80043a6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80043aa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80043ae:	46b8      	mov	r8, r7
 80043b0:	46a2      	mov	sl, r4
 80043b2:	f1ba 0f00 	cmp.w	sl, #0
 80043b6:	dc48      	bgt.n	800444a <__kernel_rem_pio2f+0x4da>
 80043b8:	46a1      	mov	r9, r4
 80043ba:	f1b9 0f01 	cmp.w	r9, #1
 80043be:	dc5f      	bgt.n	8004480 <__kernel_rem_pio2f+0x510>
 80043c0:	2000      	movs	r0, #0
 80043c2:	2c01      	cmp	r4, #1
 80043c4:	dc75      	bgt.n	80044b2 <__kernel_rem_pio2f+0x542>
 80043c6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80043c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	d177      	bne.n	80044be <__kernel_rem_pio2f+0x54e>
 80043ce:	9900      	ldr	r1, [sp, #0]
 80043d0:	600a      	str	r2, [r1, #0]
 80043d2:	460a      	mov	r2, r1
 80043d4:	604b      	str	r3, [r1, #4]
 80043d6:	6090      	str	r0, [r2, #8]
 80043d8:	e7dd      	b.n	8004396 <__kernel_rem_pio2f+0x426>
 80043da:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80043de:	f7fb ff27 	bl	8000230 <__addsf3>
 80043e2:	3c01      	subs	r4, #1
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	daf8      	bge.n	80043da <__kernel_rem_pio2f+0x46a>
 80043e8:	b10d      	cbz	r5, 80043ee <__kernel_rem_pio2f+0x47e>
 80043ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80043ee:	9b00      	ldr	r3, [sp, #0]
 80043f0:	6018      	str	r0, [r3, #0]
 80043f2:	e7d0      	b.n	8004396 <__kernel_rem_pio2f+0x426>
 80043f4:	2000      	movs	r0, #0
 80043f6:	af32      	add	r7, sp, #200	; 0xc8
 80043f8:	e7f4      	b.n	80043e4 <__kernel_rem_pio2f+0x474>
 80043fa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80043fe:	f7fb ff17 	bl	8000230 <__addsf3>
 8004402:	3f01      	subs	r7, #1
 8004404:	2f00      	cmp	r7, #0
 8004406:	daf8      	bge.n	80043fa <__kernel_rem_pio2f+0x48a>
 8004408:	b1bd      	cbz	r5, 800443a <__kernel_rem_pio2f+0x4ca>
 800440a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800440e:	9a00      	ldr	r2, [sp, #0]
 8004410:	4601      	mov	r1, r0
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8004416:	f7fb ff09 	bl	800022c <__aeabi_fsub>
 800441a:	2701      	movs	r7, #1
 800441c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004420:	42bc      	cmp	r4, r7
 8004422:	da0c      	bge.n	800443e <__kernel_rem_pio2f+0x4ce>
 8004424:	b10d      	cbz	r5, 800442a <__kernel_rem_pio2f+0x4ba>
 8004426:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	6058      	str	r0, [r3, #4]
 800442e:	e7b2      	b.n	8004396 <__kernel_rem_pio2f+0x426>
 8004430:	4627      	mov	r7, r4
 8004432:	2000      	movs	r0, #0
 8004434:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004438:	e7e4      	b.n	8004404 <__kernel_rem_pio2f+0x494>
 800443a:	4603      	mov	r3, r0
 800443c:	e7e7      	b.n	800440e <__kernel_rem_pio2f+0x49e>
 800443e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8004442:	f7fb fef5 	bl	8000230 <__addsf3>
 8004446:	3701      	adds	r7, #1
 8004448:	e7ea      	b.n	8004420 <__kernel_rem_pio2f+0x4b0>
 800444a:	f8d8 3000 	ldr.w	r3, [r8]
 800444e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	9201      	str	r2, [sp, #4]
 800445a:	f7fb fee9 	bl	8000230 <__addsf3>
 800445e:	9a01      	ldr	r2, [sp, #4]
 8004460:	4601      	mov	r1, r0
 8004462:	4681      	mov	r9, r0
 8004464:	4610      	mov	r0, r2
 8004466:	f7fb fee1 	bl	800022c <__aeabi_fsub>
 800446a:	9b02      	ldr	r3, [sp, #8]
 800446c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004470:	4619      	mov	r1, r3
 8004472:	f7fb fedd 	bl	8000230 <__addsf3>
 8004476:	f848 0904 	str.w	r0, [r8], #-4
 800447a:	f8c8 9000 	str.w	r9, [r8]
 800447e:	e798      	b.n	80043b2 <__kernel_rem_pio2f+0x442>
 8004480:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004484:	f8d7 a000 	ldr.w	sl, [r7]
 8004488:	4618      	mov	r0, r3
 800448a:	4651      	mov	r1, sl
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	f7fb fecf 	bl	8000230 <__addsf3>
 8004492:	9b01      	ldr	r3, [sp, #4]
 8004494:	4601      	mov	r1, r0
 8004496:	4680      	mov	r8, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f7fb fec7 	bl	800022c <__aeabi_fsub>
 800449e:	4651      	mov	r1, sl
 80044a0:	f7fb fec6 	bl	8000230 <__addsf3>
 80044a4:	f847 0904 	str.w	r0, [r7], #-4
 80044a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80044ac:	f8c7 8000 	str.w	r8, [r7]
 80044b0:	e783      	b.n	80043ba <__kernel_rem_pio2f+0x44a>
 80044b2:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80044b6:	f7fb febb 	bl	8000230 <__addsf3>
 80044ba:	3c01      	subs	r4, #1
 80044bc:	e781      	b.n	80043c2 <__kernel_rem_pio2f+0x452>
 80044be:	9900      	ldr	r1, [sp, #0]
 80044c0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80044c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044c8:	600a      	str	r2, [r1, #0]
 80044ca:	604b      	str	r3, [r1, #4]
 80044cc:	460a      	mov	r2, r1
 80044ce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80044d2:	e780      	b.n	80043d6 <__kernel_rem_pio2f+0x466>

080044d4 <__kernel_sinf>:
 80044d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80044dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80044e0:	4604      	mov	r4, r0
 80044e2:	460f      	mov	r7, r1
 80044e4:	4691      	mov	r9, r2
 80044e6:	da03      	bge.n	80044f0 <__kernel_sinf+0x1c>
 80044e8:	f7fc f970 	bl	80007cc <__aeabi_f2iz>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d035      	beq.n	800455c <__kernel_sinf+0x88>
 80044f0:	4621      	mov	r1, r4
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7fb ffa4 	bl	8000440 <__aeabi_fmul>
 80044f8:	4605      	mov	r5, r0
 80044fa:	4601      	mov	r1, r0
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7fb ff9f 	bl	8000440 <__aeabi_fmul>
 8004502:	4929      	ldr	r1, [pc, #164]	; (80045a8 <__kernel_sinf+0xd4>)
 8004504:	4606      	mov	r6, r0
 8004506:	4628      	mov	r0, r5
 8004508:	f7fb ff9a 	bl	8000440 <__aeabi_fmul>
 800450c:	4927      	ldr	r1, [pc, #156]	; (80045ac <__kernel_sinf+0xd8>)
 800450e:	f7fb fe8d 	bl	800022c <__aeabi_fsub>
 8004512:	4629      	mov	r1, r5
 8004514:	f7fb ff94 	bl	8000440 <__aeabi_fmul>
 8004518:	4925      	ldr	r1, [pc, #148]	; (80045b0 <__kernel_sinf+0xdc>)
 800451a:	f7fb fe89 	bl	8000230 <__addsf3>
 800451e:	4629      	mov	r1, r5
 8004520:	f7fb ff8e 	bl	8000440 <__aeabi_fmul>
 8004524:	4923      	ldr	r1, [pc, #140]	; (80045b4 <__kernel_sinf+0xe0>)
 8004526:	f7fb fe81 	bl	800022c <__aeabi_fsub>
 800452a:	4629      	mov	r1, r5
 800452c:	f7fb ff88 	bl	8000440 <__aeabi_fmul>
 8004530:	4921      	ldr	r1, [pc, #132]	; (80045b8 <__kernel_sinf+0xe4>)
 8004532:	f7fb fe7d 	bl	8000230 <__addsf3>
 8004536:	4680      	mov	r8, r0
 8004538:	f1b9 0f00 	cmp.w	r9, #0
 800453c:	d111      	bne.n	8004562 <__kernel_sinf+0x8e>
 800453e:	4601      	mov	r1, r0
 8004540:	4628      	mov	r0, r5
 8004542:	f7fb ff7d 	bl	8000440 <__aeabi_fmul>
 8004546:	491d      	ldr	r1, [pc, #116]	; (80045bc <__kernel_sinf+0xe8>)
 8004548:	f7fb fe70 	bl	800022c <__aeabi_fsub>
 800454c:	4631      	mov	r1, r6
 800454e:	f7fb ff77 	bl	8000440 <__aeabi_fmul>
 8004552:	4601      	mov	r1, r0
 8004554:	4620      	mov	r0, r4
 8004556:	f7fb fe6b 	bl	8000230 <__addsf3>
 800455a:	4604      	mov	r4, r0
 800455c:	4620      	mov	r0, r4
 800455e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004562:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004566:	4638      	mov	r0, r7
 8004568:	f7fb ff6a 	bl	8000440 <__aeabi_fmul>
 800456c:	4641      	mov	r1, r8
 800456e:	4681      	mov	r9, r0
 8004570:	4630      	mov	r0, r6
 8004572:	f7fb ff65 	bl	8000440 <__aeabi_fmul>
 8004576:	4601      	mov	r1, r0
 8004578:	4648      	mov	r0, r9
 800457a:	f7fb fe57 	bl	800022c <__aeabi_fsub>
 800457e:	4629      	mov	r1, r5
 8004580:	f7fb ff5e 	bl	8000440 <__aeabi_fmul>
 8004584:	4639      	mov	r1, r7
 8004586:	f7fb fe51 	bl	800022c <__aeabi_fsub>
 800458a:	490c      	ldr	r1, [pc, #48]	; (80045bc <__kernel_sinf+0xe8>)
 800458c:	4605      	mov	r5, r0
 800458e:	4630      	mov	r0, r6
 8004590:	f7fb ff56 	bl	8000440 <__aeabi_fmul>
 8004594:	4601      	mov	r1, r0
 8004596:	4628      	mov	r0, r5
 8004598:	f7fb fe4a 	bl	8000230 <__addsf3>
 800459c:	4601      	mov	r1, r0
 800459e:	4620      	mov	r0, r4
 80045a0:	f7fb fe44 	bl	800022c <__aeabi_fsub>
 80045a4:	e7d9      	b.n	800455a <__kernel_sinf+0x86>
 80045a6:	bf00      	nop
 80045a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80045ac:	32d72f34 	.word	0x32d72f34
 80045b0:	3638ef1b 	.word	0x3638ef1b
 80045b4:	39500d01 	.word	0x39500d01
 80045b8:	3c088889 	.word	0x3c088889
 80045bc:	3e2aaaab 	.word	0x3e2aaaab

080045c0 <fabsf>:
 80045c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80045c4:	4770      	bx	lr
	...

080045c8 <floorf>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80045ce:	3d7f      	subs	r5, #127	; 0x7f
 80045d0:	2d16      	cmp	r5, #22
 80045d2:	4601      	mov	r1, r0
 80045d4:	4604      	mov	r4, r0
 80045d6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80045da:	dc26      	bgt.n	800462a <floorf+0x62>
 80045dc:	2d00      	cmp	r5, #0
 80045de:	da0e      	bge.n	80045fe <floorf+0x36>
 80045e0:	4917      	ldr	r1, [pc, #92]	; (8004640 <floorf+0x78>)
 80045e2:	f7fb fe25 	bl	8000230 <__addsf3>
 80045e6:	2100      	movs	r1, #0
 80045e8:	f7fc f8e6 	bl	80007b8 <__aeabi_fcmpgt>
 80045ec:	b128      	cbz	r0, 80045fa <floorf+0x32>
 80045ee:	2c00      	cmp	r4, #0
 80045f0:	da23      	bge.n	800463a <floorf+0x72>
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <floorf+0x7c>)
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	bf18      	it	ne
 80045f8:	461c      	movne	r4, r3
 80045fa:	4621      	mov	r1, r4
 80045fc:	e01b      	b.n	8004636 <floorf+0x6e>
 80045fe:	4e12      	ldr	r6, [pc, #72]	; (8004648 <floorf+0x80>)
 8004600:	412e      	asrs	r6, r5
 8004602:	4230      	tst	r0, r6
 8004604:	d017      	beq.n	8004636 <floorf+0x6e>
 8004606:	490e      	ldr	r1, [pc, #56]	; (8004640 <floorf+0x78>)
 8004608:	f7fb fe12 	bl	8000230 <__addsf3>
 800460c:	2100      	movs	r1, #0
 800460e:	f7fc f8d3 	bl	80007b8 <__aeabi_fcmpgt>
 8004612:	2800      	cmp	r0, #0
 8004614:	d0f1      	beq.n	80045fa <floorf+0x32>
 8004616:	2c00      	cmp	r4, #0
 8004618:	bfbe      	ittt	lt
 800461a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800461e:	fa43 f505 	asrlt.w	r5, r3, r5
 8004622:	1964      	addlt	r4, r4, r5
 8004624:	ea24 0406 	bic.w	r4, r4, r6
 8004628:	e7e7      	b.n	80045fa <floorf+0x32>
 800462a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800462e:	d302      	bcc.n	8004636 <floorf+0x6e>
 8004630:	f7fb fdfe 	bl	8000230 <__addsf3>
 8004634:	4601      	mov	r1, r0
 8004636:	4608      	mov	r0, r1
 8004638:	bd70      	pop	{r4, r5, r6, pc}
 800463a:	2400      	movs	r4, #0
 800463c:	e7dd      	b.n	80045fa <floorf+0x32>
 800463e:	bf00      	nop
 8004640:	7149f2ca 	.word	0x7149f2ca
 8004644:	bf800000 	.word	0xbf800000
 8004648:	007fffff 	.word	0x007fffff

0800464c <scalbnf>:
 800464c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4603      	mov	r3, r0
 8004654:	460d      	mov	r5, r1
 8004656:	4604      	mov	r4, r0
 8004658:	d02a      	beq.n	80046b0 <scalbnf+0x64>
 800465a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800465e:	d304      	bcc.n	800466a <scalbnf+0x1e>
 8004660:	4601      	mov	r1, r0
 8004662:	f7fb fde5 	bl	8000230 <__addsf3>
 8004666:	4603      	mov	r3, r0
 8004668:	e022      	b.n	80046b0 <scalbnf+0x64>
 800466a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800466e:	d117      	bne.n	80046a0 <scalbnf+0x54>
 8004670:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8004674:	f7fb fee4 	bl	8000440 <__aeabi_fmul>
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <scalbnf+0x8c>)
 800467a:	4603      	mov	r3, r0
 800467c:	4295      	cmp	r5, r2
 800467e:	db0b      	blt.n	8004698 <scalbnf+0x4c>
 8004680:	4604      	mov	r4, r0
 8004682:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004686:	3a19      	subs	r2, #25
 8004688:	442a      	add	r2, r5
 800468a:	2afe      	cmp	r2, #254	; 0xfe
 800468c:	dd0a      	ble.n	80046a4 <scalbnf+0x58>
 800468e:	4913      	ldr	r1, [pc, #76]	; (80046dc <scalbnf+0x90>)
 8004690:	4618      	mov	r0, r3
 8004692:	f361 001e 	bfi	r0, r1, #0, #31
 8004696:	e000      	b.n	800469a <scalbnf+0x4e>
 8004698:	4911      	ldr	r1, [pc, #68]	; (80046e0 <scalbnf+0x94>)
 800469a:	f7fb fed1 	bl	8000440 <__aeabi_fmul>
 800469e:	e7e2      	b.n	8004666 <scalbnf+0x1a>
 80046a0:	0dd2      	lsrs	r2, r2, #23
 80046a2:	e7f1      	b.n	8004688 <scalbnf+0x3c>
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	dd05      	ble.n	80046b4 <scalbnf+0x68>
 80046a8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80046ac:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	f112 0f16 	cmn.w	r2, #22
 80046b8:	da05      	bge.n	80046c6 <scalbnf+0x7a>
 80046ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80046be:	4295      	cmp	r5, r2
 80046c0:	dce5      	bgt.n	800468e <scalbnf+0x42>
 80046c2:	4907      	ldr	r1, [pc, #28]	; (80046e0 <scalbnf+0x94>)
 80046c4:	e7e4      	b.n	8004690 <scalbnf+0x44>
 80046c6:	3219      	adds	r2, #25
 80046c8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80046cc:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80046d0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80046d4:	e7e1      	b.n	800469a <scalbnf+0x4e>
 80046d6:	bf00      	nop
 80046d8:	ffff3cb0 	.word	0xffff3cb0
 80046dc:	7149f2ca 	.word	0x7149f2ca
 80046e0:	0da24260 	.word	0x0da24260

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
