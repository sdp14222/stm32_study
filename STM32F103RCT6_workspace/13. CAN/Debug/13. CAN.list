
13. CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc0  08003cc0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc0  08003cc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003d38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003d38  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008562  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  000285fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198cd  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f90  00000000  00000000  00044aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093088  00000000  00000000  0004ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000e1b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c24 	.word	0x08003c24

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003c24 	.word	0x08003c24

08000224 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_CAN_Init+0x64>)
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <MX_CAN_Init+0x68>)
 800022c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_CAN_Init+0x64>)
 8000230:	2212      	movs	r2, #18
 8000232:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_CAN_Init+0x64>)
 8000242:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000246:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_CAN_Init+0x64>)
 800024a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800024e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_CAN_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_CAN_Init+0x64>)
 8000258:	2200      	movs	r2, #0
 800025a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_CAN_Init+0x64>)
 8000276:	f000 fc83 	bl	8000b80 <HAL_CAN_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000280:	f000 faa4 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000fc 	.word	0x200000fc
 800028c:	40006400 	.word	0x40006400

08000290 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a20      	ldr	r2, [pc, #128]	; (800032c <HAL_CAN_MspInit+0x9c>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d139      	bne.n	8000324 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ba:	61d3      	str	r3, [r2, #28]
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002f6:	f001 fd03 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000300:	2302      	movs	r3, #2
 8000302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000304:	2303      	movs	r3, #3
 8000306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 8000310:	f001 fcf6 	bl	8001d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	2015      	movs	r0, #21
 800031a:	f001 fb78 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800031e:	2015      	movs	r0, #21
 8000320:	f001 fb91 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000324:	bf00      	nop
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40006400 	.word	0x40006400
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800

08000338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <MX_GPIO_Init+0x40>)
 8000344:	f043 0320 	orr.w	r3, r3, #32
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <MX_GPIO_Init+0x40>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_GPIO_Init+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fb77 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f979 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ffd5 	bl	8000338 <MX_GPIO_Init>
  MX_CAN_Init();
 800038e:	f7ff ff49 	bl	8000224 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000392:	f000 facb 	bl	800092c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 8000396:	4b95      	ldr	r3, [pc, #596]	; (80005ec <main+0x270>)
 8000398:	f64f 6260 	movw	r2, #65120	; 0xfe60
 800039c:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 800039e:	4b93      	ldr	r3, [pc, #588]	; (80005ec <main+0x270>)
 80003a0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003a4:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 80003a6:	4b91      	ldr	r3, [pc, #580]	; (80005ec <main+0x270>)
 80003a8:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80003ac:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 80003ae:	4b8f      	ldr	r3, [pc, #572]	; (80005ec <main+0x270>)
 80003b0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003b4:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80003b6:	4b8d      	ldr	r3, [pc, #564]	; (80005ec <main+0x270>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80003bc:	4b8b      	ldr	r3, [pc, #556]	; (80005ec <main+0x270>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003c2:	4b8a      	ldr	r3, [pc, #552]	; (80005ec <main+0x270>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 80003c8:	4b88      	ldr	r3, [pc, #544]	; (80005ec <main+0x270>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 80003ce:	4b87      	ldr	r3, [pc, #540]	; (80005ec <main+0x270>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1);
 80003d4:	4985      	ldr	r1, [pc, #532]	; (80005ec <main+0x270>)
 80003d6:	4886      	ldr	r0, [pc, #536]	; (80005f0 <main+0x274>)
 80003d8:	f000 fccd 	bl	8000d76 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003dc:	2102      	movs	r1, #2
 80003de:	4884      	ldr	r0, [pc, #528]	; (80005f0 <main+0x274>)
 80003e0:	f000 fff5 	bl	80013ce <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan);
 80003e4:	4882      	ldr	r0, [pc, #520]	; (80005f0 <main+0x274>)
 80003e6:	f000 fd8f 	bl	8000f08 <HAL_CAN_Start>

  HAL_UART_Receive_IT(&huart1, &uart_rx_data, sizeof(uart_rx_data));
 80003ea:	2201      	movs	r2, #1
 80003ec:	4981      	ldr	r1, [pc, #516]	; (80005f4 <main+0x278>)
 80003ee:	4882      	ldr	r0, [pc, #520]	; (80005f8 <main+0x27c>)
 80003f0:	f002 fb13 	bl	8002a1a <HAL_UART_Receive_IT>

  char str[20] = {0};
 80003f4:	2300      	movs	r3, #0
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  while (1)
  {
	  if(can1_rx0_flag)
 8000404:	4b7d      	ldr	r3, [pc, #500]	; (80005fc <main+0x280>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d035      	beq.n	800047a <main+0xfe>
	  {
		  can1_rx0_flag = 0;
 800040e:	4b7b      	ldr	r3, [pc, #492]	; (80005fc <main+0x280>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "Rx ID: 0x%X\n", canRxHeader.StdId);
 8000414:	4b7a      	ldr	r3, [pc, #488]	; (8000600 <main+0x284>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	463b      	mov	r3, r7
 800041a:	497a      	ldr	r1, [pc, #488]	; (8000604 <main+0x288>)
 800041c:	4618      	mov	r0, r3
 800041e:	f002 ff87 	bl	8003330 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000422:	4639      	mov	r1, r7
 8000424:	230a      	movs	r3, #10
 8000426:	2214      	movs	r2, #20
 8000428:	4873      	ldr	r0, [pc, #460]	; (80005f8 <main+0x27c>)
 800042a:	f002 fa64 	bl	80028f6 <HAL_UART_Transmit>

		  for(int i = 0; i < 8; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
 8000432:	e014      	b.n	800045e <main+0xe2>
		  {
			  sprintf(str, "Rx Data[%d]: 0x%X\n", i, can1Rx0Data[i]);
 8000434:	4a74      	ldr	r2, [pc, #464]	; (8000608 <main+0x28c>)
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4638      	mov	r0, r7
 800043e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000440:	4972      	ldr	r1, [pc, #456]	; (800060c <main+0x290>)
 8000442:	f002 ff75 	bl	8003330 <siprintf>
			  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000446:	4639      	mov	r1, r7
 8000448:	230a      	movs	r3, #10
 800044a:	2214      	movs	r2, #20
 800044c:	486a      	ldr	r0, [pc, #424]	; (80005f8 <main+0x27c>)
 800044e:	f002 fa52 	bl	80028f6 <HAL_UART_Transmit>
			  HAL_Delay(10);
 8000452:	200a      	movs	r0, #10
 8000454:	f000 fb70 	bl	8000b38 <HAL_Delay>
		  for(int i = 0; i < 8; i++)
 8000458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045a:	3301      	adds	r3, #1
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
 800045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000460:	2b07      	cmp	r3, #7
 8000462:	dde7      	ble.n	8000434 <main+0xb8>
		  }
		  sprintf(str, "\n\n");
 8000464:	463b      	mov	r3, r7
 8000466:	496a      	ldr	r1, [pc, #424]	; (8000610 <main+0x294>)
 8000468:	4618      	mov	r0, r3
 800046a:	f002 ff61 	bl	8003330 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 800046e:	4639      	mov	r1, r7
 8000470:	230a      	movs	r3, #10
 8000472:	2214      	movs	r2, #20
 8000474:	4860      	ldr	r0, [pc, #384]	; (80005f8 <main+0x27c>)
 8000476:	f002 fa3e 	bl	80028f6 <HAL_UART_Transmit>
	  }

	  // flag1
	  if(SW1_flag)
 800047a:	4b66      	ldr	r3, [pc, #408]	; (8000614 <main+0x298>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d02f      	beq.n	80004e4 <main+0x168>
	  {
		  SW1_flag = 0;
 8000484:	4b63      	ldr	r3, [pc, #396]	; (8000614 <main+0x298>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x102;
 800048a:	4b63      	ldr	r3, [pc, #396]	; (8000618 <main+0x29c>)
 800048c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000490:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <main+0x29c>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000498:	4b5f      	ldr	r3, [pc, #380]	; (8000618 <main+0x29c>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 800049e:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <main+0x29c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80004a4:	2300      	movs	r3, #0
 80004a6:	623b      	str	r3, [r7, #32]
 80004a8:	e00d      	b.n	80004c6 <main+0x14a>
 80004aa:	4a5c      	ldr	r2, [pc, #368]	; (800061c <main+0x2a0>)
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	4413      	add	r3, r2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	b2d9      	uxtb	r1, r3
 80004b6:	4a59      	ldr	r2, [pc, #356]	; (800061c <main+0x2a0>)
 80004b8:	6a3b      	ldr	r3, [r7, #32]
 80004ba:	4413      	add	r3, r2
 80004bc:	460a      	mov	r2, r1
 80004be:	701a      	strb	r2, [r3, #0]
 80004c0:	6a3b      	ldr	r3, [r7, #32]
 80004c2:	3301      	adds	r3, #1
 80004c4:	623b      	str	r3, [r7, #32]
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	ddee      	ble.n	80004aa <main+0x12e>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80004cc:	4848      	ldr	r0, [pc, #288]	; (80005f0 <main+0x274>)
 80004ce:	f000 fe39 	bl	8001144 <HAL_CAN_GetTxMailboxesFreeLevel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	4a52      	ldr	r2, [pc, #328]	; (8000620 <main+0x2a4>)
 80004d6:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <main+0x2a4>)
 80004da:	4a50      	ldr	r2, [pc, #320]	; (800061c <main+0x2a0>)
 80004dc:	494e      	ldr	r1, [pc, #312]	; (8000618 <main+0x29c>)
 80004de:	4844      	ldr	r0, [pc, #272]	; (80005f0 <main+0x274>)
 80004e0:	f000 fd56 	bl	8000f90 <HAL_CAN_AddTxMessage>
	  }

	  // flag2
	  if(SW2_flag)
 80004e4:	4b4f      	ldr	r3, [pc, #316]	; (8000624 <main+0x2a8>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d02f      	beq.n	800054e <main+0x1d2>
	  {
		  SW2_flag = 0;
 80004ee:	4b4d      	ldr	r3, [pc, #308]	; (8000624 <main+0x2a8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x106 send
		  canTxHeader.StdId = 0x107;
 80004f4:	4b48      	ldr	r3, [pc, #288]	; (8000618 <main+0x29c>)
 80004f6:	f240 1207 	movw	r2, #263	; 0x107
 80004fa:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80004fc:	4b46      	ldr	r3, [pc, #280]	; (8000618 <main+0x29c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <main+0x29c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000508:	4b43      	ldr	r3, [pc, #268]	; (8000618 <main+0x29c>)
 800050a:	2208      	movs	r2, #8
 800050c:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
 8000512:	e00d      	b.n	8000530 <main+0x1b4>
 8000514:	4a41      	ldr	r2, [pc, #260]	; (800061c <main+0x2a0>)
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	4413      	add	r3, r2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	b2d9      	uxtb	r1, r3
 8000520:	4a3e      	ldr	r2, [pc, #248]	; (800061c <main+0x2a0>)
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	4413      	add	r3, r2
 8000526:	460a      	mov	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3301      	adds	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	2b07      	cmp	r3, #7
 8000534:	ddee      	ble.n	8000514 <main+0x198>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000536:	482e      	ldr	r0, [pc, #184]	; (80005f0 <main+0x274>)
 8000538:	f000 fe04 	bl	8001144 <HAL_CAN_GetTxMailboxesFreeLevel>
 800053c:	4603      	mov	r3, r0
 800053e:	4a38      	ldr	r2, [pc, #224]	; (8000620 <main+0x2a4>)
 8000540:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000542:	4b37      	ldr	r3, [pc, #220]	; (8000620 <main+0x2a4>)
 8000544:	4a35      	ldr	r2, [pc, #212]	; (800061c <main+0x2a0>)
 8000546:	4934      	ldr	r1, [pc, #208]	; (8000618 <main+0x29c>)
 8000548:	4829      	ldr	r0, [pc, #164]	; (80005f0 <main+0x274>)
 800054a:	f000 fd21 	bl	8000f90 <HAL_CAN_AddTxMessage>
	  }

	  // flag3
	  if(SW3_flag)
 800054e:	4b36      	ldr	r3, [pc, #216]	; (8000628 <main+0x2ac>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d02f      	beq.n	80005b8 <main+0x23c>
	  {
		  SW3_flag = 0;
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <main+0x2ac>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x10A send
		  canTxHeader.StdId = 0x10B;
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <main+0x29c>)
 8000560:	f240 120b 	movw	r2, #267	; 0x10b
 8000564:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <main+0x29c>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <main+0x29c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <main+0x29c>)
 8000574:	2208      	movs	r2, #8
 8000576:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	e00d      	b.n	800059a <main+0x21e>
 800057e:	4a27      	ldr	r2, [pc, #156]	; (800061c <main+0x2a0>)
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	b2d9      	uxtb	r1, r3
 800058a:	4a24      	ldr	r2, [pc, #144]	; (800061c <main+0x2a0>)
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	4413      	add	r3, r2
 8000590:	460a      	mov	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	3301      	adds	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	2b07      	cmp	r3, #7
 800059e:	ddee      	ble.n	800057e <main+0x202>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0x274>)
 80005a2:	f000 fdcf 	bl	8001144 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <main+0x2a4>)
 80005aa:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <main+0x2a4>)
 80005ae:	4a1b      	ldr	r2, [pc, #108]	; (800061c <main+0x2a0>)
 80005b0:	4919      	ldr	r1, [pc, #100]	; (8000618 <main+0x29c>)
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x274>)
 80005b4:	f000 fcec 	bl	8000f90 <HAL_CAN_AddTxMessage>
	  }

	  // flag4
	  if(SW4_flag)
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <main+0x2b0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f43f af20 	beq.w	8000404 <main+0x88>
	  {
		  SW4_flag = 0;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0x2b0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x10E;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x29c>)
 80005cc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80005d0:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x29c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <main+0x29c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <main+0x29c>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	e030      	b.n	800064c <main+0x2d0>
 80005ea:	bf00      	nop
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	200000fc 	.word	0x200000fc
 80005f4:	20000124 	.word	0x20000124
 80005f8:	20000130 	.word	0x20000130
 80005fc:	20000129 	.word	0x20000129
 8000600:	200000b4 	.word	0x200000b4
 8000604:	08003c3c 	.word	0x08003c3c
 8000608:	200000e8 	.word	0x200000e8
 800060c:	08003c4c 	.word	0x08003c4c
 8000610:	08003c60 	.word	0x08003c60
 8000614:	20000125 	.word	0x20000125
 8000618:	200000d0 	.word	0x200000d0
 800061c:	200000f4 	.word	0x200000f4
 8000620:	200000f0 	.word	0x200000f0
 8000624:	20000126 	.word	0x20000126
 8000628:	20000127 	.word	0x20000127
 800062c:	20000128 	.word	0x20000128
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <main+0x2f0>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b2d9      	uxtb	r1, r3
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <main+0x2f0>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	4413      	add	r3, r2
 8000642:	460a      	mov	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b07      	cmp	r3, #7
 8000650:	ddee      	ble.n	8000630 <main+0x2b4>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <main+0x2f4>)
 8000654:	f000 fd76 	bl	8001144 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000658:	4603      	mov	r3, r0
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <main+0x2f8>)
 800065c:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <main+0x2f8>)
 8000660:	4a02      	ldr	r2, [pc, #8]	; (800066c <main+0x2f0>)
 8000662:	4905      	ldr	r1, [pc, #20]	; (8000678 <main+0x2fc>)
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <main+0x2f4>)
 8000666:	f000 fc93 	bl	8000f90 <HAL_CAN_AddTxMessage>
	  if(can1_rx0_flag)
 800066a:	e6cb      	b.n	8000404 <main+0x88>
 800066c:	200000f4 	.word	0x200000f4
 8000670:	200000fc 	.word	0x200000fc
 8000674:	200000f0 	.word	0x200000f0
 8000678:	200000d0 	.word	0x200000d0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fe48 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fcaf 	bl	8002028 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d0:	f000 f87c 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 ff1c 	bl	800252c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fa:	f000 f867 	bl	80007cc <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3740      	adds	r7, #64	; 0x40
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_UART_RxCpltCallback+0x6c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d127      	bne.n	800076a <HAL_UART_RxCpltCallback+0x62>
	{
		HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	4916      	ldr	r1, [pc, #88]	; (8000778 <HAL_UART_RxCpltCallback+0x70>)
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <HAL_UART_RxCpltCallback+0x74>)
 8000720:	f002 f97b 	bl	8002a1a <HAL_UART_Receive_IT>

		if(uart_rx_data == '1')
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_UART_RxCpltCallback+0x70>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b31      	cmp	r3, #49	; 0x31
 800072c:	d103      	bne.n	8000736 <HAL_UART_RxCpltCallback+0x2e>
		{
			SW1_flag = 1;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_UART_RxCpltCallback+0x78>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
		else if(uart_rx_data == '4')
		{
			SW4_flag = 1;
		}
	}
}
 8000734:	e019      	b.n	800076a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data  == '2')
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_UART_RxCpltCallback+0x70>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b32      	cmp	r3, #50	; 0x32
 800073e:	d103      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x40>
			SW2_flag = 1;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_UART_RxCpltCallback+0x7c>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	e010      	b.n	800076a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '3')
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_UART_RxCpltCallback+0x70>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b33      	cmp	r3, #51	; 0x33
 8000750:	d103      	bne.n	800075a <HAL_UART_RxCpltCallback+0x52>
			SW3_flag = 1;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_UART_RxCpltCallback+0x80>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
}
 8000758:	e007      	b.n	800076a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '4')
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_UART_RxCpltCallback+0x70>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b34      	cmp	r3, #52	; 0x34
 8000762:	d102      	bne.n	800076a <HAL_UART_RxCpltCallback+0x62>
			SW4_flag = 1;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_UART_RxCpltCallback+0x84>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40013800 	.word	0x40013800
 8000778:	20000124 	.word	0x20000124
 800077c:	20000130 	.word	0x20000130
 8000780:	20000125 	.word	0x20000125
 8000784:	20000126 	.word	0x20000126
 8000788:	20000127 	.word	0x20000127
 800078c:	20000128 	.word	0x20000128

08000790 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d108      	bne.n	80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 80007a2:	1d38      	adds	r0, r7, #4
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	f000 fcff 	bl	80011ac <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
	}
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40006400 	.word	0x40006400
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	200000b4 	.word	0x200000b4
 80007c8:	20000129 	.word	0x20000129

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_MspInit+0x5c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x5c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x60>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_MspInit+0x60>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000882:	f000 f93d 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <CAN1_RX1_IRQHandler+0x10>)
 8000892:	f000 fdc1 	bl	8001418 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000fc 	.word	0x200000fc

080008a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <USART1_IRQHandler+0x10>)
 80008a6:	f002 f8e9 	bl	8002a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000130 	.word	0x20000130

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f002 fcf2 	bl	80032cc <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000c000 	.word	0x2000c000
 8000914:	00000400 	.word	0x00000400
 8000918:	2000012c 	.word	0x2000012c
 800091c:	20000188 	.word	0x20000188

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART1_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000964:	f001 ff7a 	bl	800285c <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f7ff ff2d 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000130 	.word	0x20000130
 800097c:	40013800 	.word	0x40013800

08000980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_UART_MspInit+0x9c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d139      	bne.n	8000a14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_UART_MspInit+0xa0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <HAL_UART_MspInit+0xa4>)
 80009e6:	f001 f98b 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <HAL_UART_MspInit+0xa4>)
 8000a00:	f001 f97e 	bl	8001d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2025      	movs	r0, #37	; 0x25
 8000a0a:	f001 f800 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a0e:	2025      	movs	r0, #37	; 0x25
 8000a10:	f001 f819 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010800 	.word	0x40010800

08000a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a4e:	f7ff ff67 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fc41 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fc91 	bl	800037c <main>
  bx lr
 8000a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a64:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8000a68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a6c:	20000188 	.word	0x20000188

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 ffb7 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fea2 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 ffcf 	bl	8001a62 <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 ff97 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000174 	.word	0x20000174

08000b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000174 	.word	0x20000174

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff0 	bl	8000b24 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffe0 	bl	8000b24 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e0ed      	b.n	8000d6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fb76 	bl	8000290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0201 	orr.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb4:	f7ff ffb6 	bl	8000b24 <HAL_GetTick>
 8000bb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bba:	e012      	b.n	8000be2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bbc:	f7ff ffb2 	bl	8000b24 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d90b      	bls.n	8000be2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2205      	movs	r2, #5
 8000bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0c5      	b.n	8000d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0e5      	beq.n	8000bbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0202 	bic.w	r2, r2, #2
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c00:	f7ff ff90 	bl	8000b24 <HAL_GetTick>
 8000c04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c06:	e012      	b.n	8000c2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c08:	f7ff ff8c 	bl	8000b24 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d90b      	bls.n	8000c2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2205      	movs	r2, #5
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e09f      	b.n	8000d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1e5      	bne.n	8000c08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7e1b      	ldrb	r3, [r3, #24]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d108      	bne.n	8000c56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e007      	b.n	8000c66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7e5b      	ldrb	r3, [r3, #25]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d108      	bne.n	8000c80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e007      	b.n	8000c90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e9b      	ldrb	r3, [r3, #26]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0220 	orr.w	r2, r2, #32
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0220 	bic.w	r2, r2, #32
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7edb      	ldrb	r3, [r3, #27]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0210 	bic.w	r2, r2, #16
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0210 	orr.w	r2, r2, #16
 8000ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7f1b      	ldrb	r3, [r3, #28]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d108      	bne.n	8000cfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0208 	orr.w	r2, r2, #8
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e007      	b.n	8000d0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0208 	bic.w	r2, r2, #8
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7f5b      	ldrb	r3, [r3, #29]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 0204 	orr.w	r2, r2, #4
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0204 	bic.w	r2, r2, #4
 8000d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	ea42 0103 	orr.w	r1, r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b087      	sub	sp, #28
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d8e:	7cfb      	ldrb	r3, [r7, #19]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d003      	beq.n	8000d9c <HAL_CAN_ConfigFilter+0x26>
 8000d94:	7cfb      	ldrb	r3, [r7, #19]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	f040 80aa 	bne.w	8000ef0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	2201      	movs	r2, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d123      	bne.n	8000e1e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	401a      	ands	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000df8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3248      	adds	r2, #72	; 0x48
 8000dfe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e14:	6979      	ldr	r1, [r7, #20]
 8000e16:	3348      	adds	r3, #72	; 0x48
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d122      	bne.n	8000e6c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3248      	adds	r2, #72	; 0x48
 8000e4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e62:	6979      	ldr	r1, [r7, #20]
 8000e64:	3348      	adds	r3, #72	; 0x48
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d109      	bne.n	8000e88 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e86:	e007      	b.n	8000e98 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000eb2:	e007      	b.n	8000ec4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ee2:	f023 0201 	bic.w	r2, r3, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e006      	b.n	8000efe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
  }
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d12e      	bne.n	8000f7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f34:	f7ff fdf6 	bl	8000b24 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f3a:	e012      	b.n	8000f62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3c:	f7ff fdf2 	bl	8000b24 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d90b      	bls.n	8000f62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e012      	b.n	8000f88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e5      	bne.n	8000f3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e006      	b.n	8000f88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
  }
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d003      	beq.n	8000fbc <HAL_CAN_AddTxMessage+0x2c>
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	f040 80b8 	bne.w	800112c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10a      	bne.n	8000fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80a0 	beq.w	800111c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	0e1b      	lsrs	r3, r3, #24
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d907      	bls.n	8000ffc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e09e      	b.n	800113a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	409a      	lsls	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	6809      	ldr	r1, [r1, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3318      	adds	r3, #24
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	440b      	add	r3, r1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e00f      	b.n	800104a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001034:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800103e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3318      	adds	r3, #24
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	440b      	add	r3, r1
 8001048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6819      	ldr	r1, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3318      	adds	r3, #24
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	440b      	add	r3, r1
 800105a:	3304      	adds	r3, #4
 800105c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	7d1b      	ldrb	r3, [r3, #20]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d111      	bne.n	800108a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3318      	adds	r3, #24
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	6811      	ldr	r1, [r2, #0]
 800107a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3318      	adds	r3, #24
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	440b      	add	r3, r1
 8001086:	3304      	adds	r3, #4
 8001088:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3307      	adds	r3, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	061a      	lsls	r2, r3, #24
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3306      	adds	r3, #6
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3305      	adds	r3, #5
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	4313      	orrs	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	3204      	adds	r2, #4
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4610      	mov	r0, r2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	ea43 0200 	orr.w	r2, r3, r0
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3303      	adds	r3, #3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	061a      	lsls	r2, r3, #24
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3302      	adds	r3, #2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3301      	adds	r3, #1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4313      	orrs	r3, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	4610      	mov	r0, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	6811      	ldr	r1, [r2, #0]
 80010e8:	ea43 0200 	orr.w	r2, r3, r0
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	440b      	add	r3, r1
 80010f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3318      	adds	r3, #24
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	6811      	ldr	r1, [r2, #0]
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3318      	adds	r3, #24
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	440b      	add	r3, r1
 8001116:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e00e      	b.n	800113a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e006      	b.n	800113a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
  }
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001156:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d002      	beq.n	8001164 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d11d      	bne.n	80011a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d003      	beq.n	80011d0 <HAL_CAN_GetRxMessage+0x24>
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	f040 80f3 	bne.w	80013b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d116      	bne.n	8001212 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0e7      	b.n	80013c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0d8      	b.n	80013c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	331b      	adds	r3, #27
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0204 	and.w	r2, r3, #4
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0d5b      	lsrs	r3, r3, #21
 8001240:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e00b      	b.n	8001262 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	331b      	adds	r3, #27
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	331b      	adds	r3, #27
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0202 	and.w	r2, r3, #2
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	3304      	adds	r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 020f 	and.w	r2, r3, #15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	331b      	adds	r3, #27
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	331b      	adds	r3, #27
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0a1a      	lsrs	r2, r3, #8
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0c1a      	lsrs	r2, r3, #16
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3302      	adds	r3, #2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4413      	add	r3, r2
 8001314:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0e1a      	lsrs	r2, r3, #24
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3303      	adds	r3, #3
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3304      	adds	r3, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0a1a      	lsrs	r2, r3, #8
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3305      	adds	r3, #5
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	4413      	add	r3, r2
 8001360:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0c1a      	lsrs	r2, r3, #16
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3306      	adds	r3, #6
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0e1a      	lsrs	r2, r3, #24
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3307      	adds	r3, #7
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e006      	b.n	80013c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d002      	beq.n	80013ec <HAL_CAN_ActivateNotification+0x1e>
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d109      	bne.n	8001400 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6959      	ldr	r1, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e006      	b.n	800140e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d07c      	beq.n	8001558 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f983 	bl	8001786 <HAL_CAN_TxMailbox0CompleteCallback>
 8001480:	e016      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	e00c      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e002      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f986 	bl	80017bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f962 	bl	8001798 <HAL_CAN_TxMailbox1CompleteCallback>
 80014d4:	e016      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e00c      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	e002      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f965 	bl	80017ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f941 	bl	80017aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001528:	e016      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	e00c      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	e002      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f944 	bl	80017e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2210      	movs	r2, #16
 800157a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f92a 	bl	80017f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff f8ea 	bl	8000790 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2210      	movs	r2, #16
 80015de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f90a 	bl	8001816 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8f2 	bl	8001804 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8f3 	bl	8001828 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2208      	movs	r2, #8
 800165c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f8eb 	bl	800183a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07b      	beq.n	8001766 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d072      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d043      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d03e      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016e6:	2b60      	cmp	r3, #96	; 0x60
 80016e8:	d02b      	beq.n	8001742 <HAL_CAN_IRQHandler+0x32a>
 80016ea:	2b60      	cmp	r3, #96	; 0x60
 80016ec:	d82e      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016ee:	2b50      	cmp	r3, #80	; 0x50
 80016f0:	d022      	beq.n	8001738 <HAL_CAN_IRQHandler+0x320>
 80016f2:	2b50      	cmp	r3, #80	; 0x50
 80016f4:	d82a      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016f6:	2b40      	cmp	r3, #64	; 0x40
 80016f8:	d019      	beq.n	800172e <HAL_CAN_IRQHandler+0x316>
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d826      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016fe:	2b30      	cmp	r3, #48	; 0x30
 8001700:	d010      	beq.n	8001724 <HAL_CAN_IRQHandler+0x30c>
 8001702:	2b30      	cmp	r3, #48	; 0x30
 8001704:	d822      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 8001706:	2b10      	cmp	r3, #16
 8001708:	d002      	beq.n	8001710 <HAL_CAN_IRQHandler+0x2f8>
 800170a:	2b20      	cmp	r3, #32
 800170c:	d005      	beq.n	800171a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800170e:	e01d      	b.n	800174c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001718:	e019      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001722:	e014      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800172c:	e00f      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001736:	e00a      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001740:	e005      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800174a:	e000      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            break;
 800174c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800175c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2204      	movs	r2, #4
 8001764:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f867 	bl	800184c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <__NVIC_EnableIRQ+0x34>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff90 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff2d 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff42 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff90 	bl	8001950 <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5f 	bl	80018fc <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff35 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e020      	b.n	8001ae4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020e 	bic.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d005      	beq.n	8001b12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e0d6      	b.n	8001cc0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 020e 	bic.w	r2, r2, #14
 8001b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_DMA_Abort_IT+0x1dc>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d958      	bls.n	8001bf0 <HAL_DMA_Abort_IT+0x100>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_DMA_Abort_IT+0x1e0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04f      	beq.n	8001be8 <HAL_DMA_Abort_IT+0xf8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a61      	ldr	r2, [pc, #388]	; (8001cd4 <HAL_DMA_Abort_IT+0x1e4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d048      	beq.n	8001be4 <HAL_DMA_Abort_IT+0xf4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a60      	ldr	r2, [pc, #384]	; (8001cd8 <HAL_DMA_Abort_IT+0x1e8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d040      	beq.n	8001bde <HAL_DMA_Abort_IT+0xee>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5e      	ldr	r2, [pc, #376]	; (8001cdc <HAL_DMA_Abort_IT+0x1ec>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d038      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xe8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <HAL_DMA_Abort_IT+0x1f0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d030      	beq.n	8001bd2 <HAL_DMA_Abort_IT+0xe2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_DMA_Abort_IT+0x1f4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d028      	beq.n	8001bcc <HAL_DMA_Abort_IT+0xdc>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_DMA_Abort_IT+0x1dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d020      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0xd6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a57      	ldr	r2, [pc, #348]	; (8001ce8 <HAL_DMA_Abort_IT+0x1f8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0xd2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a56      	ldr	r2, [pc, #344]	; (8001cec <HAL_DMA_Abort_IT+0x1fc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d012      	beq.n	8001bbe <HAL_DMA_Abort_IT+0xce>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <HAL_DMA_Abort_IT+0x200>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0xc8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a53      	ldr	r2, [pc, #332]	; (8001cf4 <HAL_DMA_Abort_IT+0x204>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <HAL_DMA_Abort_IT+0xc2>
 8001bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb0:	e01b      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb6:	e018      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbc:	e015      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	e013      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e011      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bca:	e00e      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bd0:	e00b      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd6:	e008      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	e005      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be2:	e002      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001be4:	2310      	movs	r3, #16
 8001be6:	e000      	b.n	8001bea <HAL_DMA_Abort_IT+0xfa>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_DMA_Abort_IT+0x208>)
 8001bec:	6053      	str	r3, [r2, #4]
 8001bee:	e057      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x1b0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_DMA_Abort_IT+0x1e0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d04f      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x1aa>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a35      	ldr	r2, [pc, #212]	; (8001cd4 <HAL_DMA_Abort_IT+0x1e4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d048      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x1a6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_DMA_Abort_IT+0x1e8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d040      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1a0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_DMA_Abort_IT+0x1ec>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d038      	beq.n	8001c8a <HAL_DMA_Abort_IT+0x19a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <HAL_DMA_Abort_IT+0x1f0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d030      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x194>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_DMA_Abort_IT+0x1f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d028      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x18e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_DMA_Abort_IT+0x1dc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d020      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x188>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <HAL_DMA_Abort_IT+0x1f8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d019      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x184>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_DMA_Abort_IT+0x1fc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d012      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x180>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_DMA_Abort_IT+0x200>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00a      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x17a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_DMA_Abort_IT+0x204>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d102      	bne.n	8001c64 <HAL_DMA_Abort_IT+0x174>
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	e01b      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c68:	e018      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	e015      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c70:	2310      	movs	r3, #16
 8001c72:	e013      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e011      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7c:	e00e      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c82:	e00b      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c88:	e008      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	e005      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	e002      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c96:	2310      	movs	r3, #16
 8001c98:	e000      	b.n	8001c9c <HAL_DMA_Abort_IT+0x1ac>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_DMA_Abort_IT+0x20c>)
 8001c9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
    } 
  }
  return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020080 	.word	0x40020080
 8001cd0:	40020008 	.word	0x40020008
 8001cd4:	4002001c 	.word	0x4002001c
 8001cd8:	40020030 	.word	0x40020030
 8001cdc:	40020044 	.word	0x40020044
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	4002006c 	.word	0x4002006c
 8001ce8:	40020408 	.word	0x40020408
 8001cec:	4002041c 	.word	0x4002041c
 8001cf0:	40020430 	.word	0x40020430
 8001cf4:	40020444 	.word	0x40020444
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e179      	b.n	8002008 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d14:	2201      	movs	r2, #1
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 8168 	bne.w	8002002 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_GPIO_Init+0x290>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d05e      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
 8001d3c:	4a94      	ldr	r2, [pc, #592]	; (8001f90 <HAL_GPIO_Init+0x290>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d875      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d42:	4a94      	ldr	r2, [pc, #592]	; (8001f94 <HAL_GPIO_Init+0x294>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d058      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_GPIO_Init+0x294>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d86f      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d052      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
 8001d54:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d869      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d5a:	4a90      	ldr	r2, [pc, #576]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04c      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
 8001d60:	4a8e      	ldr	r2, [pc, #568]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d863      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d66:	4a8e      	ldr	r2, [pc, #568]	; (8001fa0 <HAL_GPIO_Init+0x2a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d046      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
 8001d6c:	4a8c      	ldr	r2, [pc, #560]	; (8001fa0 <HAL_GPIO_Init+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d85d      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d82a      	bhi.n	8001dcc <HAL_GPIO_Init+0xcc>
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d859      	bhi.n	8001e2e <HAL_GPIO_Init+0x12e>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <HAL_GPIO_Init+0x80>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001dfb 	.word	0x08001dfb
 8001d84:	08001dd5 	.word	0x08001dd5
 8001d88:	08001de7 	.word	0x08001de7
 8001d8c:	08001e29 	.word	0x08001e29
 8001d90:	08001e2f 	.word	0x08001e2f
 8001d94:	08001e2f 	.word	0x08001e2f
 8001d98:	08001e2f 	.word	0x08001e2f
 8001d9c:	08001e2f 	.word	0x08001e2f
 8001da0:	08001e2f 	.word	0x08001e2f
 8001da4:	08001e2f 	.word	0x08001e2f
 8001da8:	08001e2f 	.word	0x08001e2f
 8001dac:	08001e2f 	.word	0x08001e2f
 8001db0:	08001e2f 	.word	0x08001e2f
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e2f 	.word	0x08001e2f
 8001dbc:	08001e2f 	.word	0x08001e2f
 8001dc0:	08001e2f 	.word	0x08001e2f
 8001dc4:	08001ddd 	.word	0x08001ddd
 8001dc8:	08001df1 	.word	0x08001df1
 8001dcc:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_GPIO_Init+0x2a4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dd2:	e02c      	b.n	8001e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e029      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	3304      	adds	r3, #4
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e024      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	3308      	adds	r3, #8
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e01f      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	330c      	adds	r3, #12
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e01a      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e02:	2304      	movs	r3, #4
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e013      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e10:	2308      	movs	r3, #8
 8001e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	611a      	str	r2, [r3, #16]
          break;
 8001e1a:	e009      	b.n	8001e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	615a      	str	r2, [r3, #20]
          break;
 8001e26:	e003      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x130>
          break;
 8001e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2bff      	cmp	r3, #255	; 0xff
 8001e34:	d801      	bhi.n	8001e3a <HAL_GPIO_Init+0x13a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	e001      	b.n	8001e3e <HAL_GPIO_Init+0x13e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d802      	bhi.n	8001e4c <HAL_GPIO_Init+0x14c>
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3b08      	subs	r3, #8
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	210f      	movs	r1, #15
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80c1 	beq.w	8002002 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e80:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2a8>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2a8>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_GPIO_Init+0x2a8>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e98:	4a44      	ldr	r2, [pc, #272]	; (8001fac <HAL_GPIO_Init+0x2ac>)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01f      	beq.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_GPIO_Init+0x2b4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d019      	beq.n	8001f00 <HAL_GPIO_Init+0x200>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_GPIO_Init+0x2b8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1fc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a39      	ldr	r2, [pc, #228]	; (8001fbc <HAL_GPIO_Init+0x2bc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <HAL_GPIO_Init+0x2c0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a37      	ldr	r2, [pc, #220]	; (8001fc4 <HAL_GPIO_Init+0x2c4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001eec:	2305      	movs	r3, #5
 8001eee:	e00a      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	e008      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x206>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	4925      	ldr	r1, [pc, #148]	; (8001fac <HAL_GPIO_Init+0x2ac>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4920      	ldr	r1, [pc, #128]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d025      	beq.n	8001fcc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4910      	ldr	r1, [pc, #64]	; (8001fc8 <HAL_GPIO_Init+0x2c8>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e025      	b.n	8001fda <HAL_GPIO_Init+0x2da>
 8001f8e:	bf00      	nop
 8001f90:	10320000 	.word	0x10320000
 8001f94:	10310000 	.word	0x10310000
 8001f98:	10220000 	.word	0x10220000
 8001f9c:	10210000 	.word	0x10210000
 8001fa0:	10120000 	.word	0x10120000
 8001fa4:	10110000 	.word	0x10110000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40011400 	.word	0x40011400
 8001fc0:	40011800 	.word	0x40011800
 8001fc4:	40011c00 	.word	0x40011c00
 8001fc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4913      	ldr	r1, [pc, #76]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	3301      	adds	r3, #1
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f ae7e 	bne.w	8001d14 <HAL_GPIO_Init+0x14>
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	372c      	adds	r7, #44	; 0x2c
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e272      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x12c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e24c      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x76>
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbc>
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a71      	ldr	r2, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020e4:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fd0e 	bl	8000b24 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe fd0a 	bl	8000b24 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e200      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe4>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fcfa 	bl	8000b24 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe fcf6 	bl	8000b24 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ec      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x10c>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c0      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4939      	ldr	r1, [pc, #228]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fcaf 	bl	8000b24 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7fe fcab 	bl	8000b24 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4927      	ldr	r1, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fc8e 	bl	8000b24 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7fe fc8a 	bl	8000b24 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e180      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03a      	beq.n	80022ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe fc6e 	bl	8000b24 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fc6a 	bl	8000b24 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e160      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fad8 	bl	8002820 <RCC_Delay>
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fc54 	bl	8000b24 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fc50 	bl	8000b24 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e146      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420000 	.word	0x42420000
 800229c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e9      	bne.n	8002280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a6 	beq.w	8002406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a87      	ldr	r2, [pc, #540]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fc11 	bl	8000b24 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fc0d 	bl	8000b24 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e103      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x334>
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x356>
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe fbc1 	bl	8000b24 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fbbd 	bl	8000b24 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0b1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x37e>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fbab 	bl	8000b24 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe fba7 	bl	8000b24 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e09b      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d061      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d146      	bne.n	80024b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fb7b 	bl	8000b24 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fb77 	bl	8000b24 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e06d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4921      	ldr	r1, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a19      	ldr	r1, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	430b      	orrs	r3, r1
 800247e:	491b      	ldr	r1, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fb4b 	bl	8000b24 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fb47 	bl	8000b24 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
 80024b0:	e035      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fb34 	bl	8000b24 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fb30 	bl	8000b24 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e026      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x498>
 80024de:	e01e      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e019      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x500>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe fa82 	bl	8000b24 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fa7e 	bl	8000b24 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe f9e0 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08003c74 	.word	0x08003c74
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002708:	1d3c      	adds	r4, r7, #4
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002710:	f240 2301 	movw	r3, #513	; 0x201
 8002714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x46>
 800273e:	e02b      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	e02b      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3328      	adds	r3, #40	; 0x28
 8002750:	443b      	add	r3, r7
 8002752:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002756:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	3328      	adds	r3, #40	; 0x28
 800276e:	443b      	add	r3, r7
 8002770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002774:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277a:	fb03 f202 	mul.w	r2, r3, r2
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e004      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	623b      	str	r3, [r7, #32]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279a:	623b      	str	r3, [r7, #32]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	6a3b      	ldr	r3, [r7, #32]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc90      	pop	{r4, r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	08003c64 	.word	0x08003c64
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	003d0900 	.word	0x003d0900

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <HAL_RCC_GetHCLKFreq+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d4:	f7ff fff2 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08003c84 	.word	0x08003c84

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027fc:	f7ff ffde 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK2Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08003c84 	.word	0x08003c84

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000000 	.word	0x20000000
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e03f      	b.n	80028ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f87c 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800289e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fc85 	bl	80031b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08a      	sub	sp, #40	; 0x28
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	d17c      	bne.n	8002a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_UART_Transmit+0x2c>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e075      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_UART_Transmit+0x3e>
 8002930:	2302      	movs	r3, #2
 8002932:	e06e      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800294a:	f7fe f8eb 	bl	8000b24 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002964:	d108      	bne.n	8002978 <HAL_UART_Transmit+0x82>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e003      	b.n	8002980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002988:	e02a      	b.n	80029e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa38 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e036      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	3302      	adds	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e007      	b.n	80029d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1cf      	bne.n	800298a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa08 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d11d      	bne.n	8002a70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_UART_Receive_IT+0x26>
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e016      	b.n	8002a72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Receive_IT+0x38>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e00f      	b.n	8002a72 <HAL_UART_Receive_IT+0x58>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa19 	bl	8002e9e <UART_Start_Receive_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_UART_IRQHandler+0x52>
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fac9 	bl	800305e <UART_Receive_IT>
      return;
 8002acc:	e17b      	b.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80b1 	beq.w	8002c38 <HAL_UART_IRQHandler+0x1bc>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_UART_IRQHandler+0x70>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80a6 	beq.w	8002c38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_UART_IRQHandler+0x90>
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_UART_IRQHandler+0xb0>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f043 0202 	orr.w	r2, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_UART_IRQHandler+0xd0>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <HAL_UART_IRQHandler+0xfa>
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <HAL_UART_IRQHandler+0xee>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0208 	orr.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 811e 	beq.w	8002dbc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_UART_IRQHandler+0x11e>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa62 	bl	800305e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x146>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d031      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9a4 	bl	8002f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	4a76      	ldr	r2, [pc, #472]	; (8002dcc <HAL_UART_IRQHandler+0x350>)
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe ff78 	bl	8001af0 <HAL_DMA_Abort_IT>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	e00e      	b.n	8002c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8e3 	bl	8002de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00a      	b.n	8002c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8df 	bl	8002de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e006      	b.n	8002c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8db 	bl	8002de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c32:	e0c3      	b.n	8002dbc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	bf00      	nop
    return;
 8002c36:	e0c1      	b.n	8002dbc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 80a1 	bne.w	8002d84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 809b 	beq.w	8002d84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8095 	beq.w	8002d84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04e      	beq.n	8002d1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c88:	8a3b      	ldrh	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8098 	beq.w	8002dc0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c94:	8a3a      	ldrh	r2, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f080 8092 	bcs.w	8002dc0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8a3a      	ldrh	r2, [r7, #16]
 8002ca0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d02b      	beq.n	8002d04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0210 	bic.w	r2, r2, #16
 8002cf8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe febb 	bl	8001a7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f86d 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d1a:	e051      	b.n	8002dc0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d047      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d34:	8a7b      	ldrh	r3, [r7, #18]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0210 	bic.w	r2, r2, #16
 8002d76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d78:	8a7b      	ldrh	r3, [r7, #18]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f839 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d82:	e01f      	b.n	8002dc4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_UART_IRQHandler+0x324>
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8f9 	bl	8002f90 <UART_Transmit_IT>
    return;
 8002d9e:	e012      	b.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f93a 	bl	800302e <UART_EndTransmit_IT>
    return;
 8002dba:	e004      	b.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002dbc:	bf00      	nop
 8002dbe:	e002      	b.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002dc4:	bf00      	nop
  }
}
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	08002f69 	.word	0x08002f69

08002dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	e02c      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d028      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	f7fd fe7b 	bl	8000b24 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d21d      	bcs.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e00f      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d0c3      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2222      	movs	r2, #34	; 0x22
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0210 	bic.w	r2, r2, #16
 8002f4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff2d 	bl	8002de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b21      	cmp	r3, #33	; 0x21
 8002fa2:	d13e      	bne.n	8003022 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fac:	d114      	bne.n	8002fd8 <UART_Transmit_IT+0x48>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d110      	bne.n	8002fd8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]
 8002fd6:	e008      	b.n	8002fea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	1c59      	adds	r1, r3, #1
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6211      	str	r1, [r2, #32]
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff febe 	bl	8002dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b22      	cmp	r3, #34	; 0x22
 8003070:	f040 8099 	bne.w	80031a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d117      	bne.n	80030ae <UART_Receive_IT+0x50>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d113      	bne.n	80030ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	b29a      	uxth	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	1c9a      	adds	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
 80030ac:	e026      	b.n	80030fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d007      	beq.n	80030d2 <UART_Receive_IT+0x74>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <UART_Receive_IT+0x82>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e008      	b.n	80030f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4619      	mov	r1, r3
 800310a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800310c:	2b00      	cmp	r3, #0
 800310e:	d148      	bne.n	80031a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0220 	bic.w	r2, r2, #32
 800311e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b01      	cmp	r3, #1
 800314e:	d123      	bne.n	8003198 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0210 	bic.w	r2, r2, #16
 8003164:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b10      	cmp	r3, #16
 8003172:	d10a      	bne.n	800318a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fe2f 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
 8003196:	e002      	b.n	800319e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd fab5 	bl	8000708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e002      	b.n	80031a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ea:	f023 030c 	bic.w	r3, r3, #12
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <UART_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d103      	bne.n	8003220 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff faee 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	e002      	b.n	8003226 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff fad6 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8003224:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	0119      	lsls	r1, r3, #4
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <UART_SetConfig+0x118>)
 800325e:	fba3 0302 	umull	r0, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2064      	movs	r0, #100	; 0x64
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <UART_SetConfig+0x118>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	4419      	add	r1, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <UART_SetConfig+0x118>)
 8003296:	fba3 0302 	umull	r0, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <UART_SetConfig+0x118>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	440a      	add	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40013800 	.word	0x40013800
 80032c8:	51eb851f 	.word	0x51eb851f

080032cc <__errno>:
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <__errno+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	f000 fc9c 	bl	8003c24 <_init>
 80032ec:	2600      	movs	r6, #0
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003cc0 	.word	0x08003cc0
 8003314:	08003cc0 	.word	0x08003cc0
 8003318:	08003cc0 	.word	0x08003cc0
 800331c:	08003cc4 	.word	0x08003cc4

08003320 <memset>:
 8003320:	4603      	mov	r3, r0
 8003322:	4402      	add	r2, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <siprintf>:
 8003330:	b40e      	push	{r1, r2, r3}
 8003332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003336:	b500      	push	{lr}
 8003338:	b09c      	sub	sp, #112	; 0x70
 800333a:	ab1d      	add	r3, sp, #116	; 0x74
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9006      	str	r0, [sp, #24]
 8003340:	9107      	str	r1, [sp, #28]
 8003342:	9104      	str	r1, [sp, #16]
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <siprintf+0x38>)
 8003346:	4909      	ldr	r1, [pc, #36]	; (800336c <siprintf+0x3c>)
 8003348:	f853 2b04 	ldr.w	r2, [r3], #4
 800334c:	9105      	str	r1, [sp, #20]
 800334e:	6800      	ldr	r0, [r0, #0]
 8003350:	a902      	add	r1, sp, #8
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f000 f868 	bl	8003428 <_svfiprintf_r>
 8003358:	2200      	movs	r2, #0
 800335a:	9b02      	ldr	r3, [sp, #8]
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	b01c      	add	sp, #112	; 0x70
 8003360:	f85d eb04 	ldr.w	lr, [sp], #4
 8003364:	b003      	add	sp, #12
 8003366:	4770      	bx	lr
 8003368:	2000000c 	.word	0x2000000c
 800336c:	ffff0208 	.word	0xffff0208

08003370 <__ssputs_r>:
 8003370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	688e      	ldr	r6, [r1, #8]
 8003376:	4682      	mov	sl, r0
 8003378:	429e      	cmp	r6, r3
 800337a:	460c      	mov	r4, r1
 800337c:	4690      	mov	r8, r2
 800337e:	461f      	mov	r7, r3
 8003380:	d838      	bhi.n	80033f4 <__ssputs_r+0x84>
 8003382:	898a      	ldrh	r2, [r1, #12]
 8003384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003388:	d032      	beq.n	80033f0 <__ssputs_r+0x80>
 800338a:	6825      	ldr	r5, [r4, #0]
 800338c:	6909      	ldr	r1, [r1, #16]
 800338e:	3301      	adds	r3, #1
 8003390:	eba5 0901 	sub.w	r9, r5, r1
 8003394:	6965      	ldr	r5, [r4, #20]
 8003396:	444b      	add	r3, r9
 8003398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800339c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033a0:	106d      	asrs	r5, r5, #1
 80033a2:	429d      	cmp	r5, r3
 80033a4:	bf38      	it	cc
 80033a6:	461d      	movcc	r5, r3
 80033a8:	0553      	lsls	r3, r2, #21
 80033aa:	d531      	bpl.n	8003410 <__ssputs_r+0xa0>
 80033ac:	4629      	mov	r1, r5
 80033ae:	f000 fb6f 	bl	8003a90 <_malloc_r>
 80033b2:	4606      	mov	r6, r0
 80033b4:	b950      	cbnz	r0, 80033cc <__ssputs_r+0x5c>
 80033b6:	230c      	movs	r3, #12
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f8ca 3000 	str.w	r3, [sl]
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033cc:	464a      	mov	r2, r9
 80033ce:	6921      	ldr	r1, [r4, #16]
 80033d0:	f000 face 	bl	8003970 <memcpy>
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	6126      	str	r6, [r4, #16]
 80033e2:	444e      	add	r6, r9
 80033e4:	6026      	str	r6, [r4, #0]
 80033e6:	463e      	mov	r6, r7
 80033e8:	6165      	str	r5, [r4, #20]
 80033ea:	eba5 0509 	sub.w	r5, r5, r9
 80033ee:	60a5      	str	r5, [r4, #8]
 80033f0:	42be      	cmp	r6, r7
 80033f2:	d900      	bls.n	80033f6 <__ssputs_r+0x86>
 80033f4:	463e      	mov	r6, r7
 80033f6:	4632      	mov	r2, r6
 80033f8:	4641      	mov	r1, r8
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f000 fac6 	bl	800398c <memmove>
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	2000      	movs	r0, #0
 8003404:	1b9b      	subs	r3, r3, r6
 8003406:	60a3      	str	r3, [r4, #8]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	4433      	add	r3, r6
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	e7db      	b.n	80033c8 <__ssputs_r+0x58>
 8003410:	462a      	mov	r2, r5
 8003412:	f000 fbb1 	bl	8003b78 <_realloc_r>
 8003416:	4606      	mov	r6, r0
 8003418:	2800      	cmp	r0, #0
 800341a:	d1e1      	bne.n	80033e0 <__ssputs_r+0x70>
 800341c:	4650      	mov	r0, sl
 800341e:	6921      	ldr	r1, [r4, #16]
 8003420:	f000 face 	bl	80039c0 <_free_r>
 8003424:	e7c7      	b.n	80033b6 <__ssputs_r+0x46>
	...

08003428 <_svfiprintf_r>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	4698      	mov	r8, r3
 800342e:	898b      	ldrh	r3, [r1, #12]
 8003430:	4607      	mov	r7, r0
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	460d      	mov	r5, r1
 8003436:	4614      	mov	r4, r2
 8003438:	b09d      	sub	sp, #116	; 0x74
 800343a:	d50e      	bpl.n	800345a <_svfiprintf_r+0x32>
 800343c:	690b      	ldr	r3, [r1, #16]
 800343e:	b963      	cbnz	r3, 800345a <_svfiprintf_r+0x32>
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	f000 fb25 	bl	8003a90 <_malloc_r>
 8003446:	6028      	str	r0, [r5, #0]
 8003448:	6128      	str	r0, [r5, #16]
 800344a:	b920      	cbnz	r0, 8003456 <_svfiprintf_r+0x2e>
 800344c:	230c      	movs	r3, #12
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	e0d1      	b.n	80035fa <_svfiprintf_r+0x1d2>
 8003456:	2340      	movs	r3, #64	; 0x40
 8003458:	616b      	str	r3, [r5, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	9309      	str	r3, [sp, #36]	; 0x24
 800345e:	2320      	movs	r3, #32
 8003460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003464:	2330      	movs	r3, #48	; 0x30
 8003466:	f04f 0901 	mov.w	r9, #1
 800346a:	f8cd 800c 	str.w	r8, [sp, #12]
 800346e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003614 <_svfiprintf_r+0x1ec>
 8003472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003476:	4623      	mov	r3, r4
 8003478:	469a      	mov	sl, r3
 800347a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347e:	b10a      	cbz	r2, 8003484 <_svfiprintf_r+0x5c>
 8003480:	2a25      	cmp	r2, #37	; 0x25
 8003482:	d1f9      	bne.n	8003478 <_svfiprintf_r+0x50>
 8003484:	ebba 0b04 	subs.w	fp, sl, r4
 8003488:	d00b      	beq.n	80034a2 <_svfiprintf_r+0x7a>
 800348a:	465b      	mov	r3, fp
 800348c:	4622      	mov	r2, r4
 800348e:	4629      	mov	r1, r5
 8003490:	4638      	mov	r0, r7
 8003492:	f7ff ff6d 	bl	8003370 <__ssputs_r>
 8003496:	3001      	adds	r0, #1
 8003498:	f000 80aa 	beq.w	80035f0 <_svfiprintf_r+0x1c8>
 800349c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349e:	445a      	add	r2, fp
 80034a0:	9209      	str	r2, [sp, #36]	; 0x24
 80034a2:	f89a 3000 	ldrb.w	r3, [sl]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a2 	beq.w	80035f0 <_svfiprintf_r+0x1c8>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f04f 32ff 	mov.w	r2, #4294967295
 80034b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b6:	f10a 0a01 	add.w	sl, sl, #1
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	9307      	str	r3, [sp, #28]
 80034be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034c2:	931a      	str	r3, [sp, #104]	; 0x68
 80034c4:	4654      	mov	r4, sl
 80034c6:	2205      	movs	r2, #5
 80034c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034cc:	4851      	ldr	r0, [pc, #324]	; (8003614 <_svfiprintf_r+0x1ec>)
 80034ce:	f000 fa41 	bl	8003954 <memchr>
 80034d2:	9a04      	ldr	r2, [sp, #16]
 80034d4:	b9d8      	cbnz	r0, 800350e <_svfiprintf_r+0xe6>
 80034d6:	06d0      	lsls	r0, r2, #27
 80034d8:	bf44      	itt	mi
 80034da:	2320      	movmi	r3, #32
 80034dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e0:	0711      	lsls	r1, r2, #28
 80034e2:	bf44      	itt	mi
 80034e4:	232b      	movmi	r3, #43	; 0x2b
 80034e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ea:	f89a 3000 	ldrb.w	r3, [sl]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d015      	beq.n	800351e <_svfiprintf_r+0xf6>
 80034f2:	4654      	mov	r4, sl
 80034f4:	2000      	movs	r0, #0
 80034f6:	f04f 0c0a 	mov.w	ip, #10
 80034fa:	9a07      	ldr	r2, [sp, #28]
 80034fc:	4621      	mov	r1, r4
 80034fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003502:	3b30      	subs	r3, #48	; 0x30
 8003504:	2b09      	cmp	r3, #9
 8003506:	d94e      	bls.n	80035a6 <_svfiprintf_r+0x17e>
 8003508:	b1b0      	cbz	r0, 8003538 <_svfiprintf_r+0x110>
 800350a:	9207      	str	r2, [sp, #28]
 800350c:	e014      	b.n	8003538 <_svfiprintf_r+0x110>
 800350e:	eba0 0308 	sub.w	r3, r0, r8
 8003512:	fa09 f303 	lsl.w	r3, r9, r3
 8003516:	4313      	orrs	r3, r2
 8003518:	46a2      	mov	sl, r4
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	e7d2      	b.n	80034c4 <_svfiprintf_r+0x9c>
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	1d19      	adds	r1, r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	9103      	str	r1, [sp, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	bfbb      	ittet	lt
 800352a:	425b      	neglt	r3, r3
 800352c:	f042 0202 	orrlt.w	r2, r2, #2
 8003530:	9307      	strge	r3, [sp, #28]
 8003532:	9307      	strlt	r3, [sp, #28]
 8003534:	bfb8      	it	lt
 8003536:	9204      	strlt	r2, [sp, #16]
 8003538:	7823      	ldrb	r3, [r4, #0]
 800353a:	2b2e      	cmp	r3, #46	; 0x2e
 800353c:	d10c      	bne.n	8003558 <_svfiprintf_r+0x130>
 800353e:	7863      	ldrb	r3, [r4, #1]
 8003540:	2b2a      	cmp	r3, #42	; 0x2a
 8003542:	d135      	bne.n	80035b0 <_svfiprintf_r+0x188>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	3402      	adds	r4, #2
 8003548:	1d1a      	adds	r2, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9203      	str	r2, [sp, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfb8      	it	lt
 8003552:	f04f 33ff 	movlt.w	r3, #4294967295
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003618 <_svfiprintf_r+0x1f0>
 800355c:	2203      	movs	r2, #3
 800355e:	4650      	mov	r0, sl
 8003560:	7821      	ldrb	r1, [r4, #0]
 8003562:	f000 f9f7 	bl	8003954 <memchr>
 8003566:	b140      	cbz	r0, 800357a <_svfiprintf_r+0x152>
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	eba0 000a 	sub.w	r0, r0, sl
 800356e:	fa03 f000 	lsl.w	r0, r3, r0
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	3401      	adds	r4, #1
 8003576:	4303      	orrs	r3, r0
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357e:	2206      	movs	r2, #6
 8003580:	4826      	ldr	r0, [pc, #152]	; (800361c <_svfiprintf_r+0x1f4>)
 8003582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003586:	f000 f9e5 	bl	8003954 <memchr>
 800358a:	2800      	cmp	r0, #0
 800358c:	d038      	beq.n	8003600 <_svfiprintf_r+0x1d8>
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <_svfiprintf_r+0x1f8>)
 8003590:	bb1b      	cbnz	r3, 80035da <_svfiprintf_r+0x1b2>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	3307      	adds	r3, #7
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	3308      	adds	r3, #8
 800359c:	9303      	str	r3, [sp, #12]
 800359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a0:	4433      	add	r3, r6
 80035a2:	9309      	str	r3, [sp, #36]	; 0x24
 80035a4:	e767      	b.n	8003476 <_svfiprintf_r+0x4e>
 80035a6:	460c      	mov	r4, r1
 80035a8:	2001      	movs	r0, #1
 80035aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ae:	e7a5      	b.n	80034fc <_svfiprintf_r+0xd4>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f04f 0c0a 	mov.w	ip, #10
 80035b6:	4619      	mov	r1, r3
 80035b8:	3401      	adds	r4, #1
 80035ba:	9305      	str	r3, [sp, #20]
 80035bc:	4620      	mov	r0, r4
 80035be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035c2:	3a30      	subs	r2, #48	; 0x30
 80035c4:	2a09      	cmp	r2, #9
 80035c6:	d903      	bls.n	80035d0 <_svfiprintf_r+0x1a8>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0c5      	beq.n	8003558 <_svfiprintf_r+0x130>
 80035cc:	9105      	str	r1, [sp, #20]
 80035ce:	e7c3      	b.n	8003558 <_svfiprintf_r+0x130>
 80035d0:	4604      	mov	r4, r0
 80035d2:	2301      	movs	r3, #1
 80035d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d8:	e7f0      	b.n	80035bc <_svfiprintf_r+0x194>
 80035da:	ab03      	add	r3, sp, #12
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	462a      	mov	r2, r5
 80035e0:	4638      	mov	r0, r7
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <_svfiprintf_r+0x1fc>)
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	f3af 8000 	nop.w
 80035ea:	1c42      	adds	r2, r0, #1
 80035ec:	4606      	mov	r6, r0
 80035ee:	d1d6      	bne.n	800359e <_svfiprintf_r+0x176>
 80035f0:	89ab      	ldrh	r3, [r5, #12]
 80035f2:	065b      	lsls	r3, r3, #25
 80035f4:	f53f af2c 	bmi.w	8003450 <_svfiprintf_r+0x28>
 80035f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035fa:	b01d      	add	sp, #116	; 0x74
 80035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003600:	ab03      	add	r3, sp, #12
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	462a      	mov	r2, r5
 8003606:	4638      	mov	r0, r7
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <_svfiprintf_r+0x1fc>)
 800360a:	a904      	add	r1, sp, #16
 800360c:	f000 f87c 	bl	8003708 <_printf_i>
 8003610:	e7eb      	b.n	80035ea <_svfiprintf_r+0x1c2>
 8003612:	bf00      	nop
 8003614:	08003c8c 	.word	0x08003c8c
 8003618:	08003c92 	.word	0x08003c92
 800361c:	08003c96 	.word	0x08003c96
 8003620:	00000000 	.word	0x00000000
 8003624:	08003371 	.word	0x08003371

08003628 <_printf_common>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	4616      	mov	r6, r2
 800362e:	4699      	mov	r9, r3
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	4607      	mov	r7, r0
 8003636:	4293      	cmp	r3, r2
 8003638:	bfb8      	it	lt
 800363a:	4613      	movlt	r3, r2
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003642:	460c      	mov	r4, r1
 8003644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003648:	b10a      	cbz	r2, 800364e <_printf_common+0x26>
 800364a:	3301      	adds	r3, #1
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0699      	lsls	r1, r3, #26
 8003652:	bf42      	ittt	mi
 8003654:	6833      	ldrmi	r3, [r6, #0]
 8003656:	3302      	addmi	r3, #2
 8003658:	6033      	strmi	r3, [r6, #0]
 800365a:	6825      	ldr	r5, [r4, #0]
 800365c:	f015 0506 	ands.w	r5, r5, #6
 8003660:	d106      	bne.n	8003670 <_printf_common+0x48>
 8003662:	f104 0a19 	add.w	sl, r4, #25
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	6832      	ldr	r2, [r6, #0]
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	42ab      	cmp	r3, r5
 800366e:	dc28      	bgt.n	80036c2 <_printf_common+0x9a>
 8003670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003674:	1e13      	subs	r3, r2, #0
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	bf18      	it	ne
 800367a:	2301      	movne	r3, #1
 800367c:	0692      	lsls	r2, r2, #26
 800367e:	d42d      	bmi.n	80036dc <_printf_common+0xb4>
 8003680:	4649      	mov	r1, r9
 8003682:	4638      	mov	r0, r7
 8003684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003688:	47c0      	blx	r8
 800368a:	3001      	adds	r0, #1
 800368c:	d020      	beq.n	80036d0 <_printf_common+0xa8>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	68e5      	ldr	r5, [r4, #12]
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf18      	it	ne
 800369a:	2500      	movne	r5, #0
 800369c:	6832      	ldr	r2, [r6, #0]
 800369e:	f04f 0600 	mov.w	r6, #0
 80036a2:	68a3      	ldr	r3, [r4, #8]
 80036a4:	bf08      	it	eq
 80036a6:	1aad      	subeq	r5, r5, r2
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	bf08      	it	eq
 80036ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfc4      	itt	gt
 80036b4:	1a9b      	subgt	r3, r3, r2
 80036b6:	18ed      	addgt	r5, r5, r3
 80036b8:	341a      	adds	r4, #26
 80036ba:	42b5      	cmp	r5, r6
 80036bc:	d11a      	bne.n	80036f4 <_printf_common+0xcc>
 80036be:	2000      	movs	r0, #0
 80036c0:	e008      	b.n	80036d4 <_printf_common+0xac>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4652      	mov	r2, sl
 80036c6:	4649      	mov	r1, r9
 80036c8:	4638      	mov	r0, r7
 80036ca:	47c0      	blx	r8
 80036cc:	3001      	adds	r0, #1
 80036ce:	d103      	bne.n	80036d8 <_printf_common+0xb0>
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d8:	3501      	adds	r5, #1
 80036da:	e7c4      	b.n	8003666 <_printf_common+0x3e>
 80036dc:	2030      	movs	r0, #48	; 0x30
 80036de:	18e1      	adds	r1, r4, r3
 80036e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ea:	4422      	add	r2, r4
 80036ec:	3302      	adds	r3, #2
 80036ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036f2:	e7c5      	b.n	8003680 <_printf_common+0x58>
 80036f4:	2301      	movs	r3, #1
 80036f6:	4622      	mov	r2, r4
 80036f8:	4649      	mov	r1, r9
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c0      	blx	r8
 80036fe:	3001      	adds	r0, #1
 8003700:	d0e6      	beq.n	80036d0 <_printf_common+0xa8>
 8003702:	3601      	adds	r6, #1
 8003704:	e7d9      	b.n	80036ba <_printf_common+0x92>
	...

08003708 <_printf_i>:
 8003708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	7e0f      	ldrb	r7, [r1, #24]
 800370e:	4691      	mov	r9, r2
 8003710:	2f78      	cmp	r7, #120	; 0x78
 8003712:	4680      	mov	r8, r0
 8003714:	460c      	mov	r4, r1
 8003716:	469a      	mov	sl, r3
 8003718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800371a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800371e:	d807      	bhi.n	8003730 <_printf_i+0x28>
 8003720:	2f62      	cmp	r7, #98	; 0x62
 8003722:	d80a      	bhi.n	800373a <_printf_i+0x32>
 8003724:	2f00      	cmp	r7, #0
 8003726:	f000 80d9 	beq.w	80038dc <_printf_i+0x1d4>
 800372a:	2f58      	cmp	r7, #88	; 0x58
 800372c:	f000 80a4 	beq.w	8003878 <_printf_i+0x170>
 8003730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003738:	e03a      	b.n	80037b0 <_printf_i+0xa8>
 800373a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800373e:	2b15      	cmp	r3, #21
 8003740:	d8f6      	bhi.n	8003730 <_printf_i+0x28>
 8003742:	a101      	add	r1, pc, #4	; (adr r1, 8003748 <_printf_i+0x40>)
 8003744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003748:	080037a1 	.word	0x080037a1
 800374c:	080037b5 	.word	0x080037b5
 8003750:	08003731 	.word	0x08003731
 8003754:	08003731 	.word	0x08003731
 8003758:	08003731 	.word	0x08003731
 800375c:	08003731 	.word	0x08003731
 8003760:	080037b5 	.word	0x080037b5
 8003764:	08003731 	.word	0x08003731
 8003768:	08003731 	.word	0x08003731
 800376c:	08003731 	.word	0x08003731
 8003770:	08003731 	.word	0x08003731
 8003774:	080038c3 	.word	0x080038c3
 8003778:	080037e5 	.word	0x080037e5
 800377c:	080038a5 	.word	0x080038a5
 8003780:	08003731 	.word	0x08003731
 8003784:	08003731 	.word	0x08003731
 8003788:	080038e5 	.word	0x080038e5
 800378c:	08003731 	.word	0x08003731
 8003790:	080037e5 	.word	0x080037e5
 8003794:	08003731 	.word	0x08003731
 8003798:	08003731 	.word	0x08003731
 800379c:	080038ad 	.word	0x080038ad
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	602a      	str	r2, [r5, #0]
 80037a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0a4      	b.n	80038fe <_printf_i+0x1f6>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	6829      	ldr	r1, [r5, #0]
 80037b8:	0606      	lsls	r6, r0, #24
 80037ba:	f101 0304 	add.w	r3, r1, #4
 80037be:	d50a      	bpl.n	80037d6 <_printf_i+0xce>
 80037c0:	680e      	ldr	r6, [r1, #0]
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	2e00      	cmp	r6, #0
 80037c6:	da03      	bge.n	80037d0 <_printf_i+0xc8>
 80037c8:	232d      	movs	r3, #45	; 0x2d
 80037ca:	4276      	negs	r6, r6
 80037cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d0:	230a      	movs	r3, #10
 80037d2:	485e      	ldr	r0, [pc, #376]	; (800394c <_printf_i+0x244>)
 80037d4:	e019      	b.n	800380a <_printf_i+0x102>
 80037d6:	680e      	ldr	r6, [r1, #0]
 80037d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	bf18      	it	ne
 80037e0:	b236      	sxthne	r6, r6
 80037e2:	e7ef      	b.n	80037c4 <_printf_i+0xbc>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	6820      	ldr	r0, [r4, #0]
 80037e8:	1d19      	adds	r1, r3, #4
 80037ea:	6029      	str	r1, [r5, #0]
 80037ec:	0601      	lsls	r1, r0, #24
 80037ee:	d501      	bpl.n	80037f4 <_printf_i+0xec>
 80037f0:	681e      	ldr	r6, [r3, #0]
 80037f2:	e002      	b.n	80037fa <_printf_i+0xf2>
 80037f4:	0646      	lsls	r6, r0, #25
 80037f6:	d5fb      	bpl.n	80037f0 <_printf_i+0xe8>
 80037f8:	881e      	ldrh	r6, [r3, #0]
 80037fa:	2f6f      	cmp	r7, #111	; 0x6f
 80037fc:	bf0c      	ite	eq
 80037fe:	2308      	moveq	r3, #8
 8003800:	230a      	movne	r3, #10
 8003802:	4852      	ldr	r0, [pc, #328]	; (800394c <_printf_i+0x244>)
 8003804:	2100      	movs	r1, #0
 8003806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380a:	6865      	ldr	r5, [r4, #4]
 800380c:	2d00      	cmp	r5, #0
 800380e:	bfa8      	it	ge
 8003810:	6821      	ldrge	r1, [r4, #0]
 8003812:	60a5      	str	r5, [r4, #8]
 8003814:	bfa4      	itt	ge
 8003816:	f021 0104 	bicge.w	r1, r1, #4
 800381a:	6021      	strge	r1, [r4, #0]
 800381c:	b90e      	cbnz	r6, 8003822 <_printf_i+0x11a>
 800381e:	2d00      	cmp	r5, #0
 8003820:	d04d      	beq.n	80038be <_printf_i+0x1b6>
 8003822:	4615      	mov	r5, r2
 8003824:	fbb6 f1f3 	udiv	r1, r6, r3
 8003828:	fb03 6711 	mls	r7, r3, r1, r6
 800382c:	5dc7      	ldrb	r7, [r0, r7]
 800382e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003832:	4637      	mov	r7, r6
 8003834:	42bb      	cmp	r3, r7
 8003836:	460e      	mov	r6, r1
 8003838:	d9f4      	bls.n	8003824 <_printf_i+0x11c>
 800383a:	2b08      	cmp	r3, #8
 800383c:	d10b      	bne.n	8003856 <_printf_i+0x14e>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	07de      	lsls	r6, r3, #31
 8003842:	d508      	bpl.n	8003856 <_printf_i+0x14e>
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	6861      	ldr	r1, [r4, #4]
 8003848:	4299      	cmp	r1, r3
 800384a:	bfde      	ittt	le
 800384c:	2330      	movle	r3, #48	; 0x30
 800384e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003852:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003856:	1b52      	subs	r2, r2, r5
 8003858:	6122      	str	r2, [r4, #16]
 800385a:	464b      	mov	r3, r9
 800385c:	4621      	mov	r1, r4
 800385e:	4640      	mov	r0, r8
 8003860:	f8cd a000 	str.w	sl, [sp]
 8003864:	aa03      	add	r2, sp, #12
 8003866:	f7ff fedf 	bl	8003628 <_printf_common>
 800386a:	3001      	adds	r0, #1
 800386c:	d14c      	bne.n	8003908 <_printf_i+0x200>
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	b004      	add	sp, #16
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	4834      	ldr	r0, [pc, #208]	; (800394c <_printf_i+0x244>)
 800387a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800387e:	6829      	ldr	r1, [r5, #0]
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f851 6b04 	ldr.w	r6, [r1], #4
 8003886:	6029      	str	r1, [r5, #0]
 8003888:	061d      	lsls	r5, r3, #24
 800388a:	d514      	bpl.n	80038b6 <_printf_i+0x1ae>
 800388c:	07df      	lsls	r7, r3, #31
 800388e:	bf44      	itt	mi
 8003890:	f043 0320 	orrmi.w	r3, r3, #32
 8003894:	6023      	strmi	r3, [r4, #0]
 8003896:	b91e      	cbnz	r6, 80038a0 <_printf_i+0x198>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f023 0320 	bic.w	r3, r3, #32
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	2310      	movs	r3, #16
 80038a2:	e7af      	b.n	8003804 <_printf_i+0xfc>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	f043 0320 	orr.w	r3, r3, #32
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	2378      	movs	r3, #120	; 0x78
 80038ae:	4828      	ldr	r0, [pc, #160]	; (8003950 <_printf_i+0x248>)
 80038b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038b4:	e7e3      	b.n	800387e <_printf_i+0x176>
 80038b6:	0659      	lsls	r1, r3, #25
 80038b8:	bf48      	it	mi
 80038ba:	b2b6      	uxthmi	r6, r6
 80038bc:	e7e6      	b.n	800388c <_printf_i+0x184>
 80038be:	4615      	mov	r5, r2
 80038c0:	e7bb      	b.n	800383a <_printf_i+0x132>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	6826      	ldr	r6, [r4, #0]
 80038c6:	1d18      	adds	r0, r3, #4
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	6028      	str	r0, [r5, #0]
 80038cc:	0635      	lsls	r5, r6, #24
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	d501      	bpl.n	80038d6 <_printf_i+0x1ce>
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	e002      	b.n	80038dc <_printf_i+0x1d4>
 80038d6:	0670      	lsls	r0, r6, #25
 80038d8:	d5fb      	bpl.n	80038d2 <_printf_i+0x1ca>
 80038da:	8019      	strh	r1, [r3, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	4615      	mov	r5, r2
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	e7ba      	b.n	800385a <_printf_i+0x152>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	2100      	movs	r1, #0
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	602a      	str	r2, [r5, #0]
 80038ec:	681d      	ldr	r5, [r3, #0]
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f82f 	bl	8003954 <memchr>
 80038f6:	b108      	cbz	r0, 80038fc <_printf_i+0x1f4>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	6060      	str	r0, [r4, #4]
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	2300      	movs	r3, #0
 8003902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003906:	e7a8      	b.n	800385a <_printf_i+0x152>
 8003908:	462a      	mov	r2, r5
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	47d0      	blx	sl
 8003912:	3001      	adds	r0, #1
 8003914:	d0ab      	beq.n	800386e <_printf_i+0x166>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	079b      	lsls	r3, r3, #30
 800391a:	d413      	bmi.n	8003944 <_printf_i+0x23c>
 800391c:	68e0      	ldr	r0, [r4, #12]
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	4298      	cmp	r0, r3
 8003922:	bfb8      	it	lt
 8003924:	4618      	movlt	r0, r3
 8003926:	e7a4      	b.n	8003872 <_printf_i+0x16a>
 8003928:	2301      	movs	r3, #1
 800392a:	4632      	mov	r2, r6
 800392c:	4649      	mov	r1, r9
 800392e:	4640      	mov	r0, r8
 8003930:	47d0      	blx	sl
 8003932:	3001      	adds	r0, #1
 8003934:	d09b      	beq.n	800386e <_printf_i+0x166>
 8003936:	3501      	adds	r5, #1
 8003938:	68e3      	ldr	r3, [r4, #12]
 800393a:	9903      	ldr	r1, [sp, #12]
 800393c:	1a5b      	subs	r3, r3, r1
 800393e:	42ab      	cmp	r3, r5
 8003940:	dcf2      	bgt.n	8003928 <_printf_i+0x220>
 8003942:	e7eb      	b.n	800391c <_printf_i+0x214>
 8003944:	2500      	movs	r5, #0
 8003946:	f104 0619 	add.w	r6, r4, #25
 800394a:	e7f5      	b.n	8003938 <_printf_i+0x230>
 800394c:	08003c9d 	.word	0x08003c9d
 8003950:	08003cae 	.word	0x08003cae

08003954 <memchr>:
 8003954:	4603      	mov	r3, r0
 8003956:	b510      	push	{r4, lr}
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	4402      	add	r2, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	4618      	mov	r0, r3
 8003960:	d101      	bne.n	8003966 <memchr+0x12>
 8003962:	2000      	movs	r0, #0
 8003964:	e003      	b.n	800396e <memchr+0x1a>
 8003966:	7804      	ldrb	r4, [r0, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	428c      	cmp	r4, r1
 800396c:	d1f6      	bne.n	800395c <memchr+0x8>
 800396e:	bd10      	pop	{r4, pc}

08003970 <memcpy>:
 8003970:	440a      	add	r2, r1
 8003972:	4291      	cmp	r1, r2
 8003974:	f100 33ff 	add.w	r3, r0, #4294967295
 8003978:	d100      	bne.n	800397c <memcpy+0xc>
 800397a:	4770      	bx	lr
 800397c:	b510      	push	{r4, lr}
 800397e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003982:	4291      	cmp	r1, r2
 8003984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003988:	d1f9      	bne.n	800397e <memcpy+0xe>
 800398a:	bd10      	pop	{r4, pc}

0800398c <memmove>:
 800398c:	4288      	cmp	r0, r1
 800398e:	b510      	push	{r4, lr}
 8003990:	eb01 0402 	add.w	r4, r1, r2
 8003994:	d902      	bls.n	800399c <memmove+0x10>
 8003996:	4284      	cmp	r4, r0
 8003998:	4623      	mov	r3, r4
 800399a:	d807      	bhi.n	80039ac <memmove+0x20>
 800399c:	1e43      	subs	r3, r0, #1
 800399e:	42a1      	cmp	r1, r4
 80039a0:	d008      	beq.n	80039b4 <memmove+0x28>
 80039a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039aa:	e7f8      	b.n	800399e <memmove+0x12>
 80039ac:	4601      	mov	r1, r0
 80039ae:	4402      	add	r2, r0
 80039b0:	428a      	cmp	r2, r1
 80039b2:	d100      	bne.n	80039b6 <memmove+0x2a>
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039be:	e7f7      	b.n	80039b0 <memmove+0x24>

080039c0 <_free_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d040      	beq.n	8003a4a <_free_r+0x8a>
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	18e4      	addlt	r4, r4, r3
 80039d4:	f000 f910 	bl	8003bf8 <__malloc_lock>
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <_free_r+0x8c>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	b933      	cbnz	r3, 80039ec <_free_r+0x2c>
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	6014      	str	r4, [r2, #0]
 80039e2:	4628      	mov	r0, r5
 80039e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e8:	f000 b90c 	b.w	8003c04 <__malloc_unlock>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf01      	itttt	eq
 80039f8:	6819      	ldreq	r1, [r3, #0]
 80039fa:	685b      	ldreq	r3, [r3, #4]
 80039fc:	1809      	addeq	r1, r1, r0
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	e7ed      	b.n	80039de <_free_r+0x1e>
 8003a02:	461a      	mov	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b10b      	cbz	r3, 8003a0c <_free_r+0x4c>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d9fa      	bls.n	8003a02 <_free_r+0x42>
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	1850      	adds	r0, r2, r1
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d10b      	bne.n	8003a2c <_free_r+0x6c>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	4401      	add	r1, r0
 8003a18:	1850      	adds	r0, r2, r1
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	d1e0      	bne.n	80039e2 <_free_r+0x22>
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4401      	add	r1, r0
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	e7da      	b.n	80039e2 <_free_r+0x22>
 8003a2c:	d902      	bls.n	8003a34 <_free_r+0x74>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	e7d6      	b.n	80039e2 <_free_r+0x22>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	1821      	adds	r1, r4, r0
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	bf01      	itttt	eq
 8003a3c:	6819      	ldreq	r1, [r3, #0]
 8003a3e:	685b      	ldreq	r3, [r3, #4]
 8003a40:	1809      	addeq	r1, r1, r0
 8003a42:	6021      	streq	r1, [r4, #0]
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6054      	str	r4, [r2, #4]
 8003a48:	e7cb      	b.n	80039e2 <_free_r+0x22>
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	20000178 	.word	0x20000178

08003a50 <sbrk_aligned>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0e      	ldr	r6, [pc, #56]	; (8003a8c <sbrk_aligned+0x3c>)
 8003a54:	460c      	mov	r4, r1
 8003a56:	6831      	ldr	r1, [r6, #0]
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b911      	cbnz	r1, 8003a62 <sbrk_aligned+0x12>
 8003a5c:	f000 f8bc 	bl	8003bd8 <_sbrk_r>
 8003a60:	6030      	str	r0, [r6, #0]
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f8b7 	bl	8003bd8 <_sbrk_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d00a      	beq.n	8003a84 <sbrk_aligned+0x34>
 8003a6e:	1cc4      	adds	r4, r0, #3
 8003a70:	f024 0403 	bic.w	r4, r4, #3
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d007      	beq.n	8003a88 <sbrk_aligned+0x38>
 8003a78:	1a21      	subs	r1, r4, r0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f8ac 	bl	8003bd8 <_sbrk_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d101      	bne.n	8003a88 <sbrk_aligned+0x38>
 8003a84:	f04f 34ff 	mov.w	r4, #4294967295
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	2000017c 	.word	0x2000017c

08003a90 <_malloc_r>:
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	1ccd      	adds	r5, r1, #3
 8003a96:	f025 0503 	bic.w	r5, r5, #3
 8003a9a:	3508      	adds	r5, #8
 8003a9c:	2d0c      	cmp	r5, #12
 8003a9e:	bf38      	it	cc
 8003aa0:	250c      	movcc	r5, #12
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	db01      	blt.n	8003aac <_malloc_r+0x1c>
 8003aa8:	42a9      	cmp	r1, r5
 8003aaa:	d905      	bls.n	8003ab8 <_malloc_r+0x28>
 8003aac:	230c      	movs	r3, #12
 8003aae:	2600      	movs	r6, #0
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	4e2e      	ldr	r6, [pc, #184]	; (8003b74 <_malloc_r+0xe4>)
 8003aba:	f000 f89d 	bl	8003bf8 <__malloc_lock>
 8003abe:	6833      	ldr	r3, [r6, #0]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	bb34      	cbnz	r4, 8003b12 <_malloc_r+0x82>
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7ff ffc2 	bl	8003a50 <sbrk_aligned>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	4604      	mov	r4, r0
 8003ad0:	d14d      	bne.n	8003b6e <_malloc_r+0xde>
 8003ad2:	6834      	ldr	r4, [r6, #0]
 8003ad4:	4626      	mov	r6, r4
 8003ad6:	2e00      	cmp	r6, #0
 8003ad8:	d140      	bne.n	8003b5c <_malloc_r+0xcc>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	4631      	mov	r1, r6
 8003ade:	4638      	mov	r0, r7
 8003ae0:	eb04 0803 	add.w	r8, r4, r3
 8003ae4:	f000 f878 	bl	8003bd8 <_sbrk_r>
 8003ae8:	4580      	cmp	r8, r0
 8003aea:	d13a      	bne.n	8003b62 <_malloc_r+0xd2>
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	3503      	adds	r5, #3
 8003af0:	1a6d      	subs	r5, r5, r1
 8003af2:	f025 0503 	bic.w	r5, r5, #3
 8003af6:	3508      	adds	r5, #8
 8003af8:	2d0c      	cmp	r5, #12
 8003afa:	bf38      	it	cc
 8003afc:	250c      	movcc	r5, #12
 8003afe:	4638      	mov	r0, r7
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7ff ffa5 	bl	8003a50 <sbrk_aligned>
 8003b06:	3001      	adds	r0, #1
 8003b08:	d02b      	beq.n	8003b62 <_malloc_r+0xd2>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	442b      	add	r3, r5
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	e00e      	b.n	8003b30 <_malloc_r+0xa0>
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	1b52      	subs	r2, r2, r5
 8003b16:	d41e      	bmi.n	8003b56 <_malloc_r+0xc6>
 8003b18:	2a0b      	cmp	r2, #11
 8003b1a:	d916      	bls.n	8003b4a <_malloc_r+0xba>
 8003b1c:	1961      	adds	r1, r4, r5
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	bf18      	it	ne
 8003b24:	6059      	strne	r1, [r3, #4]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	bf08      	it	eq
 8003b2a:	6031      	streq	r1, [r6, #0]
 8003b2c:	5162      	str	r2, [r4, r5]
 8003b2e:	604b      	str	r3, [r1, #4]
 8003b30:	4638      	mov	r0, r7
 8003b32:	f104 060b 	add.w	r6, r4, #11
 8003b36:	f000 f865 	bl	8003c04 <__malloc_unlock>
 8003b3a:	f026 0607 	bic.w	r6, r6, #7
 8003b3e:	1d23      	adds	r3, r4, #4
 8003b40:	1af2      	subs	r2, r6, r3
 8003b42:	d0b6      	beq.n	8003ab2 <_malloc_r+0x22>
 8003b44:	1b9b      	subs	r3, r3, r6
 8003b46:	50a3      	str	r3, [r4, r2]
 8003b48:	e7b3      	b.n	8003ab2 <_malloc_r+0x22>
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	bf0c      	ite	eq
 8003b50:	6032      	streq	r2, [r6, #0]
 8003b52:	605a      	strne	r2, [r3, #4]
 8003b54:	e7ec      	b.n	8003b30 <_malloc_r+0xa0>
 8003b56:	4623      	mov	r3, r4
 8003b58:	6864      	ldr	r4, [r4, #4]
 8003b5a:	e7b2      	b.n	8003ac2 <_malloc_r+0x32>
 8003b5c:	4634      	mov	r4, r6
 8003b5e:	6876      	ldr	r6, [r6, #4]
 8003b60:	e7b9      	b.n	8003ad6 <_malloc_r+0x46>
 8003b62:	230c      	movs	r3, #12
 8003b64:	4638      	mov	r0, r7
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	f000 f84c 	bl	8003c04 <__malloc_unlock>
 8003b6c:	e7a1      	b.n	8003ab2 <_malloc_r+0x22>
 8003b6e:	6025      	str	r5, [r4, #0]
 8003b70:	e7de      	b.n	8003b30 <_malloc_r+0xa0>
 8003b72:	bf00      	nop
 8003b74:	20000178 	.word	0x20000178

08003b78 <_realloc_r>:
 8003b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	4614      	mov	r4, r2
 8003b80:	460e      	mov	r6, r1
 8003b82:	b921      	cbnz	r1, 8003b8e <_realloc_r+0x16>
 8003b84:	4611      	mov	r1, r2
 8003b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8a:	f7ff bf81 	b.w	8003a90 <_malloc_r>
 8003b8e:	b92a      	cbnz	r2, 8003b9c <_realloc_r+0x24>
 8003b90:	f7ff ff16 	bl	80039c0 <_free_r>
 8003b94:	4625      	mov	r5, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9c:	f000 f838 	bl	8003c10 <_malloc_usable_size_r>
 8003ba0:	4284      	cmp	r4, r0
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	d802      	bhi.n	8003bac <_realloc_r+0x34>
 8003ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003baa:	d812      	bhi.n	8003bd2 <_realloc_r+0x5a>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff ff6e 	bl	8003a90 <_malloc_r>
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d0ed      	beq.n	8003b96 <_realloc_r+0x1e>
 8003bba:	42bc      	cmp	r4, r7
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	bf28      	it	cs
 8003bc2:	463a      	movcs	r2, r7
 8003bc4:	f7ff fed4 	bl	8003970 <memcpy>
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7ff fef8 	bl	80039c0 <_free_r>
 8003bd0:	e7e1      	b.n	8003b96 <_realloc_r+0x1e>
 8003bd2:	4635      	mov	r5, r6
 8003bd4:	e7df      	b.n	8003b96 <_realloc_r+0x1e>
	...

08003bd8 <_sbrk_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4d05      	ldr	r5, [pc, #20]	; (8003bf4 <_sbrk_r+0x1c>)
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fc fe66 	bl	80008b4 <_sbrk>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_sbrk_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_sbrk_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20000180 	.word	0x20000180

08003bf8 <__malloc_lock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	; (8003c00 <__malloc_lock+0x8>)
 8003bfa:	f000 b811 	b.w	8003c20 <__retarget_lock_acquire_recursive>
 8003bfe:	bf00      	nop
 8003c00:	20000184 	.word	0x20000184

08003c04 <__malloc_unlock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <__malloc_unlock+0x8>)
 8003c06:	f000 b80c 	b.w	8003c22 <__retarget_lock_release_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	20000184 	.word	0x20000184

08003c10 <_malloc_usable_size_r>:
 8003c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c14:	1f18      	subs	r0, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfbc      	itt	lt
 8003c1a:	580b      	ldrlt	r3, [r1, r0]
 8003c1c:	18c0      	addlt	r0, r0, r3
 8003c1e:	4770      	bx	lr

08003c20 <__retarget_lock_acquire_recursive>:
 8003c20:	4770      	bx	lr

08003c22 <__retarget_lock_release_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <_init>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr

08003c30 <_fini>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr
