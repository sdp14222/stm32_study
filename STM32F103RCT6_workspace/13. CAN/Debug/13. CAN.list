
13. CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003d58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003d58  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008564  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c16  00000000  00000000  000285fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198cd  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f94  00000000  00000000  00044a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093088  00000000  00000000  0004ea31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1ab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000e1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c3c 	.word	0x08003c3c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003c3c 	.word	0x08003c3c

08000224 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_CAN_Init+0x64>)
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <MX_CAN_Init+0x68>)
 800022c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_CAN_Init+0x64>)
 8000230:	2212      	movs	r2, #18
 8000232:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_CAN_Init+0x64>)
 8000242:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000246:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_CAN_Init+0x64>)
 800024a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800024e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_CAN_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_CAN_Init+0x64>)
 8000258:	2200      	movs	r2, #0
 800025a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_CAN_Init+0x64>)
 8000276:	f000 fc8f 	bl	8000b98 <HAL_CAN_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000280:	f000 fab0 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000fc 	.word	0x200000fc
 800028c:	40006400 	.word	0x40006400

08000290 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a20      	ldr	r2, [pc, #128]	; (800032c <HAL_CAN_MspInit+0x9c>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d139      	bne.n	8000324 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ba:	61d3      	str	r3, [r2, #28]
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002f6:	f001 fd0f 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000300:	2302      	movs	r3, #2
 8000302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000304:	2303      	movs	r3, #3
 8000306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 8000310:	f001 fd02 	bl	8001d18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	2015      	movs	r0, #21
 800031a:	f001 fb84 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800031e:	2015      	movs	r0, #21
 8000320:	f001 fb9d 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000324:	bf00      	nop
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40006400 	.word	0x40006400
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800

08000338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <MX_GPIO_Init+0x40>)
 8000344:	f043 0320 	orr.w	r3, r3, #32
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <MX_GPIO_Init+0x40>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_GPIO_Init+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fb83 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f985 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ffd5 	bl	8000338 <MX_GPIO_Init>
  MX_CAN_Init();
 800038e:	f7ff ff49 	bl	8000224 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000392:	f000 fad7 	bl	8000944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 8000396:	4b9a      	ldr	r3, [pc, #616]	; (8000600 <main+0x284>)
 8000398:	f64f 6260 	movw	r2, #65120	; 0xfe60
 800039c:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 800039e:	4b98      	ldr	r3, [pc, #608]	; (8000600 <main+0x284>)
 80003a0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003a4:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 80003a6:	4b96      	ldr	r3, [pc, #600]	; (8000600 <main+0x284>)
 80003a8:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80003ac:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 80003ae:	4b94      	ldr	r3, [pc, #592]	; (8000600 <main+0x284>)
 80003b0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003b4:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80003b6:	4b92      	ldr	r3, [pc, #584]	; (8000600 <main+0x284>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80003bc:	4b90      	ldr	r3, [pc, #576]	; (8000600 <main+0x284>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003c2:	4b8f      	ldr	r3, [pc, #572]	; (8000600 <main+0x284>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 80003c8:	4b8d      	ldr	r3, [pc, #564]	; (8000600 <main+0x284>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 80003ce:	4b8c      	ldr	r3, [pc, #560]	; (8000600 <main+0x284>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1);
 80003d4:	498a      	ldr	r1, [pc, #552]	; (8000600 <main+0x284>)
 80003d6:	488b      	ldr	r0, [pc, #556]	; (8000604 <main+0x288>)
 80003d8:	f000 fcd9 	bl	8000d8e <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003dc:	2102      	movs	r1, #2
 80003de:	4889      	ldr	r0, [pc, #548]	; (8000604 <main+0x288>)
 80003e0:	f001 f801 	bl	80013e6 <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan);
 80003e4:	4887      	ldr	r0, [pc, #540]	; (8000604 <main+0x288>)
 80003e6:	f000 fd9b 	bl	8000f20 <HAL_CAN_Start>
  HAL_UART_Receive_IT(&huart1, &uart_rx_data, sizeof(uart_rx_data));
 80003ea:	2201      	movs	r2, #1
 80003ec:	4986      	ldr	r1, [pc, #536]	; (8000608 <main+0x28c>)
 80003ee:	4887      	ldr	r0, [pc, #540]	; (800060c <main+0x290>)
 80003f0:	f002 fb1f 	bl	8002a32 <HAL_UART_Receive_IT>

  char str[20] = {0};
 80003f4:	2300      	movs	r3, #0
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

//	  sprintf(str, "hawawa\n");
//	  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
//	  HAL_Delay(1000);

	  if(can1_rx0_flag)
 8000404:	4b82      	ldr	r3, [pc, #520]	; (8000610 <main+0x294>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d035      	beq.n	800047a <main+0xfe>
	  {
		  can1_rx0_flag = 0;
 800040e:	4b80      	ldr	r3, [pc, #512]	; (8000610 <main+0x294>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "Rx ID: 0x%X\n", canRxHeader.StdId);
 8000414:	4b7f      	ldr	r3, [pc, #508]	; (8000614 <main+0x298>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	463b      	mov	r3, r7
 800041a:	497f      	ldr	r1, [pc, #508]	; (8000618 <main+0x29c>)
 800041c:	4618      	mov	r0, r3
 800041e:	f002 ff93 	bl	8003348 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000422:	4639      	mov	r1, r7
 8000424:	230a      	movs	r3, #10
 8000426:	2214      	movs	r2, #20
 8000428:	4878      	ldr	r0, [pc, #480]	; (800060c <main+0x290>)
 800042a:	f002 fa70 	bl	800290e <HAL_UART_Transmit>

		  for(int i = 0; i < 8; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
 8000432:	e014      	b.n	800045e <main+0xe2>
		  {
			  sprintf(str, "Rx Data[%d]: 0x%X\n", i, can1Rx0Data[i]);
 8000434:	4a79      	ldr	r2, [pc, #484]	; (800061c <main+0x2a0>)
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4638      	mov	r0, r7
 800043e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000440:	4977      	ldr	r1, [pc, #476]	; (8000620 <main+0x2a4>)
 8000442:	f002 ff81 	bl	8003348 <siprintf>
			  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000446:	4639      	mov	r1, r7
 8000448:	230a      	movs	r3, #10
 800044a:	2214      	movs	r2, #20
 800044c:	486f      	ldr	r0, [pc, #444]	; (800060c <main+0x290>)
 800044e:	f002 fa5e 	bl	800290e <HAL_UART_Transmit>
			  HAL_Delay(10);
 8000452:	200a      	movs	r0, #10
 8000454:	f000 fb7c 	bl	8000b50 <HAL_Delay>
		  for(int i = 0; i < 8; i++)
 8000458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045a:	3301      	adds	r3, #1
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
 800045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000460:	2b07      	cmp	r3, #7
 8000462:	dde7      	ble.n	8000434 <main+0xb8>
		  }
		  sprintf(str, "\n\n");
 8000464:	463b      	mov	r3, r7
 8000466:	496f      	ldr	r1, [pc, #444]	; (8000624 <main+0x2a8>)
 8000468:	4618      	mov	r0, r3
 800046a:	f002 ff6d 	bl	8003348 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 800046e:	4639      	mov	r1, r7
 8000470:	230a      	movs	r3, #10
 8000472:	2214      	movs	r2, #20
 8000474:	4865      	ldr	r0, [pc, #404]	; (800060c <main+0x290>)
 8000476:	f002 fa4a 	bl	800290e <HAL_UART_Transmit>
	  }

	  // flag1
	  if(SW1_flag)
 800047a:	4b6b      	ldr	r3, [pc, #428]	; (8000628 <main+0x2ac>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d03a      	beq.n	80004fa <main+0x17e>
	  {
		  sprintf(str, "hawawa\n");
 8000484:	463b      	mov	r3, r7
 8000486:	4969      	ldr	r1, [pc, #420]	; (800062c <main+0x2b0>)
 8000488:	4618      	mov	r0, r3
 800048a:	f002 ff5d 	bl	8003348 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 800048e:	4639      	mov	r1, r7
 8000490:	230a      	movs	r3, #10
 8000492:	2214      	movs	r2, #20
 8000494:	485d      	ldr	r0, [pc, #372]	; (800060c <main+0x290>)
 8000496:	f002 fa3a 	bl	800290e <HAL_UART_Transmit>

		  SW1_flag = 0;
 800049a:	4b63      	ldr	r3, [pc, #396]	; (8000628 <main+0x2ac>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x102;
 80004a0:	4b63      	ldr	r3, [pc, #396]	; (8000630 <main+0x2b4>)
 80004a2:	f44f 7281 	mov.w	r2, #258	; 0x102
 80004a6:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80004a8:	4b61      	ldr	r3, [pc, #388]	; (8000630 <main+0x2b4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80004ae:	4b60      	ldr	r3, [pc, #384]	; (8000630 <main+0x2b4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80004b4:	4b5e      	ldr	r3, [pc, #376]	; (8000630 <main+0x2b4>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
 80004be:	e00d      	b.n	80004dc <main+0x160>
 80004c0:	4a5c      	ldr	r2, [pc, #368]	; (8000634 <main+0x2b8>)
 80004c2:	6a3b      	ldr	r3, [r7, #32]
 80004c4:	4413      	add	r3, r2
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	b2d9      	uxtb	r1, r3
 80004cc:	4a59      	ldr	r2, [pc, #356]	; (8000634 <main+0x2b8>)
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	4413      	add	r3, r2
 80004d2:	460a      	mov	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	6a3b      	ldr	r3, [r7, #32]
 80004d8:	3301      	adds	r3, #1
 80004da:	623b      	str	r3, [r7, #32]
 80004dc:	6a3b      	ldr	r3, [r7, #32]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	ddee      	ble.n	80004c0 <main+0x144>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <main+0x288>)
 80004e4:	f000 fe3a 	bl	800115c <HAL_CAN_GetTxMailboxesFreeLevel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a53      	ldr	r2, [pc, #332]	; (8000638 <main+0x2bc>)
 80004ec:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80004ee:	4b52      	ldr	r3, [pc, #328]	; (8000638 <main+0x2bc>)
 80004f0:	4a50      	ldr	r2, [pc, #320]	; (8000634 <main+0x2b8>)
 80004f2:	494f      	ldr	r1, [pc, #316]	; (8000630 <main+0x2b4>)
 80004f4:	4843      	ldr	r0, [pc, #268]	; (8000604 <main+0x288>)
 80004f6:	f000 fd57 	bl	8000fa8 <HAL_CAN_AddTxMessage>
	  }

	  // flag2
	  if(SW2_flag)
 80004fa:	4b50      	ldr	r3, [pc, #320]	; (800063c <main+0x2c0>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d02f      	beq.n	8000564 <main+0x1e8>
	  {
		  SW2_flag = 0;
 8000504:	4b4d      	ldr	r3, [pc, #308]	; (800063c <main+0x2c0>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x106 send
		  canTxHeader.StdId = 0x107;
 800050a:	4b49      	ldr	r3, [pc, #292]	; (8000630 <main+0x2b4>)
 800050c:	f240 1207 	movw	r2, #263	; 0x107
 8000510:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000512:	4b47      	ldr	r3, [pc, #284]	; (8000630 <main+0x2b4>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000518:	4b45      	ldr	r3, [pc, #276]	; (8000630 <main+0x2b4>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 800051e:	4b44      	ldr	r3, [pc, #272]	; (8000630 <main+0x2b4>)
 8000520:	2208      	movs	r2, #8
 8000522:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
 8000528:	e00d      	b.n	8000546 <main+0x1ca>
 800052a:	4a42      	ldr	r2, [pc, #264]	; (8000634 <main+0x2b8>)
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	b2d9      	uxtb	r1, r3
 8000536:	4a3f      	ldr	r2, [pc, #252]	; (8000634 <main+0x2b8>)
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	4413      	add	r3, r2
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	3301      	adds	r3, #1
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	2b07      	cmp	r3, #7
 800054a:	ddee      	ble.n	800052a <main+0x1ae>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800054c:	482d      	ldr	r0, [pc, #180]	; (8000604 <main+0x288>)
 800054e:	f000 fe05 	bl	800115c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000552:	4603      	mov	r3, r0
 8000554:	4a38      	ldr	r2, [pc, #224]	; (8000638 <main+0x2bc>)
 8000556:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000558:	4b37      	ldr	r3, [pc, #220]	; (8000638 <main+0x2bc>)
 800055a:	4a36      	ldr	r2, [pc, #216]	; (8000634 <main+0x2b8>)
 800055c:	4934      	ldr	r1, [pc, #208]	; (8000630 <main+0x2b4>)
 800055e:	4829      	ldr	r0, [pc, #164]	; (8000604 <main+0x288>)
 8000560:	f000 fd22 	bl	8000fa8 <HAL_CAN_AddTxMessage>
	  }

	  // flag3
	  if(SW3_flag)
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <main+0x2c4>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d02f      	beq.n	80005ce <main+0x252>
	  {
		  SW3_flag = 0;
 800056e:	4b34      	ldr	r3, [pc, #208]	; (8000640 <main+0x2c4>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x10A send
		  canTxHeader.StdId = 0x10B;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <main+0x2b4>)
 8000576:	f240 120b 	movw	r2, #267	; 0x10b
 800057a:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <main+0x2b4>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <main+0x2b4>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <main+0x2b4>)
 800058a:	2208      	movs	r2, #8
 800058c:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	e00d      	b.n	80005b0 <main+0x234>
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <main+0x2b8>)
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	4413      	add	r3, r2
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	b2d9      	uxtb	r1, r3
 80005a0:	4a24      	ldr	r2, [pc, #144]	; (8000634 <main+0x2b8>)
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	3301      	adds	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	ddee      	ble.n	8000594 <main+0x218>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <main+0x288>)
 80005b8:	f000 fdd0 	bl	800115c <HAL_CAN_GetTxMailboxesFreeLevel>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <main+0x2bc>)
 80005c0:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <main+0x2bc>)
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <main+0x2b8>)
 80005c6:	491a      	ldr	r1, [pc, #104]	; (8000630 <main+0x2b4>)
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x288>)
 80005ca:	f000 fced 	bl	8000fa8 <HAL_CAN_AddTxMessage>
	  }

	  // flag4
	  if(SW4_flag)
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <main+0x2c8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f43f af15 	beq.w	8000404 <main+0x88>
	  {
		  SW4_flag = 0;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0x2c8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x10E;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <main+0x2b4>)
 80005e2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80005e6:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x2b4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x2b4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <main+0x2b4>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e031      	b.n	8000664 <main+0x2e8>
 8000600:	2000008c 	.word	0x2000008c
 8000604:	200000fc 	.word	0x200000fc
 8000608:	20000124 	.word	0x20000124
 800060c:	20000130 	.word	0x20000130
 8000610:	20000129 	.word	0x20000129
 8000614:	200000b4 	.word	0x200000b4
 8000618:	08003c54 	.word	0x08003c54
 800061c:	200000e8 	.word	0x200000e8
 8000620:	08003c64 	.word	0x08003c64
 8000624:	08003c78 	.word	0x08003c78
 8000628:	20000125 	.word	0x20000125
 800062c:	08003c7c 	.word	0x08003c7c
 8000630:	200000d0 	.word	0x200000d0
 8000634:	200000f4 	.word	0x200000f4
 8000638:	200000f0 	.word	0x200000f0
 800063c:	20000126 	.word	0x20000126
 8000640:	20000127 	.word	0x20000127
 8000644:	20000128 	.word	0x20000128
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <main+0x308>)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	b2d9      	uxtb	r1, r3
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <main+0x308>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2b07      	cmp	r3, #7
 8000668:	ddee      	ble.n	8000648 <main+0x2cc>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <main+0x30c>)
 800066c:	f000 fd76 	bl	800115c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000670:	4603      	mov	r3, r0
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <main+0x310>)
 8000674:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <main+0x310>)
 8000678:	4a02      	ldr	r2, [pc, #8]	; (8000684 <main+0x308>)
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <main+0x314>)
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <main+0x30c>)
 800067e:	f000 fc93 	bl	8000fa8 <HAL_CAN_AddTxMessage>
	  if(can1_rx0_flag)
 8000682:	e6bf      	b.n	8000404 <main+0x88>
 8000684:	200000f4 	.word	0x200000f4
 8000688:	200000fc 	.word	0x200000fc
 800068c:	200000f0 	.word	0x200000f0
 8000690:	200000d0 	.word	0x200000d0

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	; 0x40
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fe48 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fcaf 	bl	8002040 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006e8:	f000 f87c 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f001 ff1c 	bl	8002544 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 f867 	bl	80007e4 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3740      	adds	r7, #64	; 0x40
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_UART_RxCpltCallback+0x6c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d127      	bne.n	8000782 <HAL_UART_RxCpltCallback+0x62>
	{
		HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	4916      	ldr	r1, [pc, #88]	; (8000790 <HAL_UART_RxCpltCallback+0x70>)
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <HAL_UART_RxCpltCallback+0x74>)
 8000738:	f002 f97b 	bl	8002a32 <HAL_UART_Receive_IT>

		if(uart_rx_data == '1')
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_UART_RxCpltCallback+0x70>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b31      	cmp	r3, #49	; 0x31
 8000744:	d103      	bne.n	800074e <HAL_UART_RxCpltCallback+0x2e>
		{
			SW1_flag = 1;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_UART_RxCpltCallback+0x78>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
		else if(uart_rx_data == '4')
		{
			SW4_flag = 1;
		}
	}
}
 800074c:	e019      	b.n	8000782 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data  == '2')
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_UART_RxCpltCallback+0x70>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b32      	cmp	r3, #50	; 0x32
 8000756:	d103      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x40>
			SW2_flag = 1;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_UART_RxCpltCallback+0x7c>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	e010      	b.n	8000782 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '3')
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_UART_RxCpltCallback+0x70>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b33      	cmp	r3, #51	; 0x33
 8000768:	d103      	bne.n	8000772 <HAL_UART_RxCpltCallback+0x52>
			SW3_flag = 1;
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_UART_RxCpltCallback+0x80>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	e007      	b.n	8000782 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '4')
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_UART_RxCpltCallback+0x70>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b34      	cmp	r3, #52	; 0x34
 800077a:	d102      	bne.n	8000782 <HAL_UART_RxCpltCallback+0x62>
			SW4_flag = 1;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_UART_RxCpltCallback+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40013800 	.word	0x40013800
 8000790:	20000124 	.word	0x20000124
 8000794:	20000130 	.word	0x20000130
 8000798:	20000125 	.word	0x20000125
 800079c:	20000126 	.word	0x20000126
 80007a0:	20000127 	.word	0x20000127
 80007a4:	20000128 	.word	0x20000128

080007a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d108      	bne.n	80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 80007ba:	1d38      	adds	r0, r7, #4
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	f000 fcff 	bl	80011c4 <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
	}
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40006400 	.word	0x40006400
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	200000b4 	.word	0x200000b4
 80007e0:	20000129 	.word	0x20000129

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_MspInit+0x5c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x5c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_MspInit+0x60>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_MspInit+0x60>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f93d 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <CAN1_RX1_IRQHandler+0x10>)
 80008aa:	f000 fdc1 	bl	8001430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000fc 	.word	0x200000fc

080008b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	f002 f8e9 	bl	8002a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000130 	.word	0x20000130

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f002 fcf2 	bl	80032e4 <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000c000 	.word	0x2000c000
 800092c:	00000400 	.word	0x00000400
 8000930:	2000012c 	.word	0x2000012c
 8000934:	20000188 	.word	0x20000188

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f001 ff7a 	bl	8002874 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f7ff ff2d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000130 	.word	0x20000130
 8000994:	40013800 	.word	0x40013800

08000998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <HAL_UART_MspInit+0x9c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d139      	bne.n	8000a2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xa0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <HAL_UART_MspInit+0xa4>)
 80009fe:	f001 f98b 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_UART_MspInit+0xa4>)
 8000a18:	f001 f97e 	bl	8001d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2025      	movs	r0, #37	; 0x25
 8000a22:	f001 f800 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a26:	2025      	movs	r0, #37	; 0x25
 8000a28:	f001 f819 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a66:	f7ff ff67 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 fc41 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fc85 	bl	800037c <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a7c:	08003ce8 	.word	0x08003ce8
  ldr r2, =_sbss
 8000a80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a84:	20000188 	.word	0x20000188

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 ffb7 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fea2 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 ffcf 	bl	8001a7a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 ff97 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000174 	.word	0x20000174

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000174 	.word	0x20000174

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e0ed      	b.n	8000d86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fb6a 	bl	8000290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f042 0201 	orr.w	r2, r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bcc:	f7ff ffb6 	bl	8000b3c <HAL_GetTick>
 8000bd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bd2:	e012      	b.n	8000bfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bd4:	f7ff ffb2 	bl	8000b3c <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d90b      	bls.n	8000bfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0c5      	b.n	8000d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0e5      	beq.n	8000bd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0202 	bic.w	r2, r2, #2
 8000c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c18:	f7ff ff90 	bl	8000b3c <HAL_GetTick>
 8000c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c1e:	e012      	b.n	8000c46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c20:	f7ff ff8c 	bl	8000b3c <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b0a      	cmp	r3, #10
 8000c2c:	d90b      	bls.n	8000c46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e09f      	b.n	8000d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1e5      	bne.n	8000c20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7e1b      	ldrb	r3, [r3, #24]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d108      	bne.n	8000c6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	e007      	b.n	8000c7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7e5b      	ldrb	r3, [r3, #25]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d108      	bne.n	8000c98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e007      	b.n	8000ca8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7e9b      	ldrb	r3, [r3, #26]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0220 	orr.w	r2, r2, #32
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0220 	bic.w	r2, r2, #32
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7edb      	ldrb	r3, [r3, #27]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d108      	bne.n	8000cec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0210 	bic.w	r2, r2, #16
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e007      	b.n	8000cfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0210 	orr.w	r2, r2, #16
 8000cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7f1b      	ldrb	r3, [r3, #28]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0208 	orr.w	r2, r2, #8
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e007      	b.n	8000d26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0208 	bic.w	r2, r2, #8
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7f5b      	ldrb	r3, [r3, #29]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d108      	bne.n	8000d40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0204 	orr.w	r2, r2, #4
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0204 	bic.w	r2, r2, #4
 8000d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	ea42 0103 	orr.w	r1, r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000da6:	7cfb      	ldrb	r3, [r7, #19]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d003      	beq.n	8000db4 <HAL_CAN_ConfigFilter+0x26>
 8000dac:	7cfb      	ldrb	r3, [r7, #19]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	f040 80aa 	bne.w	8000f08 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	2201      	movs	r2, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d123      	bne.n	8000e36 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	401a      	ands	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3248      	adds	r2, #72	; 0x48
 8000e16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e2c:	6979      	ldr	r1, [r7, #20]
 8000e2e:	3348      	adds	r3, #72	; 0x48
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	440b      	add	r3, r1
 8000e34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d122      	bne.n	8000e84 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3248      	adds	r2, #72	; 0x48
 8000e64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e7a:	6979      	ldr	r1, [r7, #20]
 8000e7c:	3348      	adds	r3, #72	; 0x48
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e9e:	e007      	b.n	8000eb0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000eca:	e007      	b.n	8000edc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d107      	bne.n	8000ef4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000efa:	f023 0201 	bic.w	r2, r3, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e006      	b.n	8000f16 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
  }
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d12e      	bne.n	8000f92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f4c:	f7ff fdf6 	bl	8000b3c <HAL_GetTick>
 8000f50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f52:	e012      	b.n	8000f7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f54:	f7ff fdf2 	bl	8000b3c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d90b      	bls.n	8000f7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e012      	b.n	8000fa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1e5      	bne.n	8000f54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e006      	b.n	8000fa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d003      	beq.n	8000fd4 <HAL_CAN_AddTxMessage+0x2c>
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	f040 80b8 	bne.w	8001144 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80a0 	beq.w	8001134 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	0e1b      	lsrs	r3, r3, #24
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d907      	bls.n	8001014 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e09e      	b.n	8001152 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	409a      	lsls	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001030:	68f9      	ldr	r1, [r7, #12]
 8001032:	6809      	ldr	r1, [r1, #0]
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3318      	adds	r3, #24
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	440b      	add	r3, r1
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e00f      	b.n	8001062 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800104c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001056:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3318      	adds	r3, #24
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	440b      	add	r3, r1
 8001060:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3318      	adds	r3, #24
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	440b      	add	r3, r1
 8001072:	3304      	adds	r3, #4
 8001074:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	7d1b      	ldrb	r3, [r3, #20]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d111      	bne.n	80010a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3318      	adds	r3, #24
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	6811      	ldr	r1, [r2, #0]
 8001092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3318      	adds	r3, #24
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	3304      	adds	r3, #4
 80010a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3307      	adds	r3, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	061a      	lsls	r2, r3, #24
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3306      	adds	r3, #6
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3305      	adds	r3, #5
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	4313      	orrs	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	3204      	adds	r2, #4
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4610      	mov	r0, r2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	6811      	ldr	r1, [r2, #0]
 80010ca:	ea43 0200 	orr.w	r2, r3, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3303      	adds	r3, #3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	061a      	lsls	r2, r3, #24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3302      	adds	r3, #2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	4313      	orrs	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4610      	mov	r0, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	6811      	ldr	r1, [r2, #0]
 8001100:	ea43 0200 	orr.w	r2, r3, r0
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	440b      	add	r3, r1
 800110a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800110e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3318      	adds	r3, #24
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3318      	adds	r3, #24
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	440b      	add	r3, r1
 800112e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	e00e      	b.n	8001152 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e006      	b.n	8001152 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d11d      	bne.n	80011b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d003      	beq.n	80011e8 <HAL_CAN_GetRxMessage+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	f040 80f3 	bne.w	80013ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10e      	bne.n	800120c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d116      	bne.n	800122a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0e7      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d8      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	331b      	adds	r3, #27
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0204 	and.w	r2, r3, #4
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	331b      	adds	r3, #27
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0d5b      	lsrs	r3, r3, #21
 8001258:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e00b      	b.n	800127a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	331b      	adds	r3, #27
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	331b      	adds	r3, #27
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0202 	and.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	331b      	adds	r3, #27
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 020f 	and.w	r2, r3, #15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	331b      	adds	r3, #27
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	331b      	adds	r3, #27
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	3304      	adds	r3, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0a1a      	lsrs	r2, r3, #8
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0c1a      	lsrs	r2, r3, #16
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3302      	adds	r3, #2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0e1a      	lsrs	r2, r3, #24
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3303      	adds	r3, #3
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3304      	adds	r3, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0a1a      	lsrs	r2, r3, #8
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3305      	adds	r3, #5
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0c1a      	lsrs	r2, r3, #16
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3306      	adds	r3, #6
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0e1a      	lsrs	r2, r3, #24
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3307      	adds	r3, #7
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0220 	orr.w	r2, r2, #32
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	e007      	b.n	80013ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e006      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
  }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d002      	beq.n	8001404 <HAL_CAN_ActivateNotification+0x1e>
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d109      	bne.n	8001418 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6959      	ldr	r1, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e006      	b.n	8001426 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
  }
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d07c      	beq.n	8001570 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f983 	bl	800179e <HAL_CAN_TxMailbox0CompleteCallback>
 8001498:	e016      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
 80014ac:	e00c      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	e002      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f986 	bl	80017d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d024      	beq.n	800151c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f962 	bl	80017b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80014ec:	e016      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	e00c      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
 8001514:	e002      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f965 	bl	80017e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800152e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f941 	bl	80017c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001540:	e016      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	e00c      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e002      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f944 	bl	80017f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00c      	beq.n	8001594 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2210      	movs	r2, #16
 8001592:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2208      	movs	r2, #8
 80015ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f92a 	bl	800180a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff f8ea 	bl	80007a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2210      	movs	r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2208      	movs	r2, #8
 8001612:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f90a 	bl	800182e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d009      	beq.n	8001638 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8f2 	bl	800181c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2210      	movs	r2, #16
 8001652:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8f3 	bl	8001840 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2208      	movs	r2, #8
 8001674:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f8eb 	bl	8001852 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07b      	beq.n	800177e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d072      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d043      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03e      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016fe:	2b60      	cmp	r3, #96	; 0x60
 8001700:	d02b      	beq.n	800175a <HAL_CAN_IRQHandler+0x32a>
 8001702:	2b60      	cmp	r3, #96	; 0x60
 8001704:	d82e      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 8001706:	2b50      	cmp	r3, #80	; 0x50
 8001708:	d022      	beq.n	8001750 <HAL_CAN_IRQHandler+0x320>
 800170a:	2b50      	cmp	r3, #80	; 0x50
 800170c:	d82a      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d019      	beq.n	8001746 <HAL_CAN_IRQHandler+0x316>
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d826      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 8001716:	2b30      	cmp	r3, #48	; 0x30
 8001718:	d010      	beq.n	800173c <HAL_CAN_IRQHandler+0x30c>
 800171a:	2b30      	cmp	r3, #48	; 0x30
 800171c:	d822      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 800171e:	2b10      	cmp	r3, #16
 8001720:	d002      	beq.n	8001728 <HAL_CAN_IRQHandler+0x2f8>
 8001722:	2b20      	cmp	r3, #32
 8001724:	d005      	beq.n	8001732 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001726:	e01d      	b.n	8001764 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001730:	e019      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173a:	e014      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001744:	e00f      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800174e:	e00a      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001758:	e005      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001762:	e000      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            break;
 8001764:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001774:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2204      	movs	r2, #4
 800177c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f867 	bl	8001864 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
	...

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4906      	ldr	r1, [pc, #24]	; (8001910 <__NVIC_EnableIRQ+0x34>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff90 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff2d 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff42 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff35 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e020      	b.n	8001afc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 020e 	bic.w	r2, r2, #14
 8001ac8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d005      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e0d6      	b.n	8001cd8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 020e 	bic.w	r2, r2, #14
 8001b38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d958      	bls.n	8001c08 <HAL_DMA_Abort_IT+0x100>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_DMA_Abort_IT+0x1e0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04f      	beq.n	8001c00 <HAL_DMA_Abort_IT+0xf8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_DMA_Abort_IT+0x1e4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d048      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xf4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_DMA_Abort_IT+0x1e8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d040      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0xee>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <HAL_DMA_Abort_IT+0x1ec>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d038      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0xe8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_DMA_Abort_IT+0x1f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d030      	beq.n	8001bea <HAL_DMA_Abort_IT+0xe2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <HAL_DMA_Abort_IT+0x1f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d028      	beq.n	8001be4 <HAL_DMA_Abort_IT+0xdc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d020      	beq.n	8001bde <HAL_DMA_Abort_IT+0xd6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_DMA_Abort_IT+0x1f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_DMA_Abort_IT+0xd2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_DMA_Abort_IT+0x1fc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d012      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0xce>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_DMA_Abort_IT+0x200>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0xc8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_DMA_Abort_IT+0x204>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d102      	bne.n	8001bca <HAL_DMA_Abort_IT+0xc2>
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	e01b      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bce:	e018      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd4:	e015      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	e013      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e011      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be2:	e00e      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001be4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001be8:	e00b      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bee:	e008      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	e005      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfa:	e002      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	e000      	b.n	8001c02 <HAL_DMA_Abort_IT+0xfa>
 8001c00:	2301      	movs	r3, #1
 8001c02:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_DMA_Abort_IT+0x208>)
 8001c04:	6053      	str	r3, [r2, #4]
 8001c06:	e057      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x1b0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_DMA_Abort_IT+0x1e0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d04f      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x1aa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a35      	ldr	r2, [pc, #212]	; (8001cec <HAL_DMA_Abort_IT+0x1e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d048      	beq.n	8001cae <HAL_DMA_Abort_IT+0x1a6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <HAL_DMA_Abort_IT+0x1e8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d040      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x1a0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <HAL_DMA_Abort_IT+0x1ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d038      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x19a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <HAL_DMA_Abort_IT+0x1f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d030      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x194>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_DMA_Abort_IT+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d028      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x18e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d020      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x188>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_DMA_Abort_IT+0x1f8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d019      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x184>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_DMA_Abort_IT+0x1fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x180>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <HAL_DMA_Abort_IT+0x200>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00a      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x17a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <HAL_DMA_Abort_IT+0x204>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d102      	bne.n	8001c7c <HAL_DMA_Abort_IT+0x174>
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	e01b      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	e018      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	e015      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c88:	2310      	movs	r3, #16
 8001c8a:	e013      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e011      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c94:	e00e      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9a:	e00b      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca0:	e008      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca6:	e005      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cac:	e002      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001cae:	2310      	movs	r3, #16
 8001cb0:	e000      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x1ac>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_DMA_Abort_IT+0x20c>)
 8001cb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
    } 
  }
  return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40020080 	.word	0x40020080
 8001ce8:	40020008 	.word	0x40020008
 8001cec:	4002001c 	.word	0x4002001c
 8001cf0:	40020030 	.word	0x40020030
 8001cf4:	40020044 	.word	0x40020044
 8001cf8:	40020058 	.word	0x40020058
 8001cfc:	4002006c 	.word	0x4002006c
 8001d00:	40020408 	.word	0x40020408
 8001d04:	4002041c 	.word	0x4002041c
 8001d08:	40020430 	.word	0x40020430
 8001d0c:	40020444 	.word	0x40020444
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e179      	b.n	8002020 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8168 	bne.w	800201a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a96      	ldr	r2, [pc, #600]	; (8001fa8 <HAL_GPIO_Init+0x290>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a94      	ldr	r2, [pc, #592]	; (8001fa8 <HAL_GPIO_Init+0x290>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a94      	ldr	r2, [pc, #592]	; (8001fac <HAL_GPIO_Init+0x294>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_GPIO_Init+0x294>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a92      	ldr	r2, [pc, #584]	; (8001fb0 <HAL_GPIO_Init+0x298>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a90      	ldr	r2, [pc, #576]	; (8001fb0 <HAL_GPIO_Init+0x298>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a90      	ldr	r2, [pc, #576]	; (8001fb4 <HAL_GPIO_Init+0x29c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a8e      	ldr	r2, [pc, #568]	; (8001fb4 <HAL_GPIO_Init+0x29c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a8e      	ldr	r2, [pc, #568]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a8c      	ldr	r2, [pc, #560]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80c1 	beq.w	800201a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a44      	ldr	r2, [pc, #272]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01f      	beq.n	8001f1c <HAL_GPIO_Init+0x204>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d019      	beq.n	8001f18 <HAL_GPIO_Init+0x200>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_GPIO_Init+0x1fc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x1f0>
 8001f04:	2305      	movs	r3, #5
 8001f06:	e00a      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f08:	2306      	movs	r3, #6
 8001f0a:	e008      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x206>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2e:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4920      	ldr	r1, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d025      	beq.n	8001fe4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4910      	ldr	r1, [pc, #64]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
 8001fa4:	e025      	b.n	8001ff2 <HAL_GPIO_Init+0x2da>
 8001fa6:	bf00      	nop
 8001fa8:	10320000 	.word	0x10320000
 8001fac:	10310000 	.word	0x10310000
 8001fb0:	10220000 	.word	0x10220000
 8001fb4:	10210000 	.word	0x10210000
 8001fb8:	10120000 	.word	0x10120000
 8001fbc:	10110000 	.word	0x10110000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40011800 	.word	0x40011800
 8001fdc:	40011c00 	.word	0x40011c00
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_GPIO_Init+0x324>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4913      	ldr	r1, [pc, #76]	; (800203c <HAL_GPIO_Init+0x324>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_GPIO_Init+0x324>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_GPIO_Init+0x324>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	60cb      	str	r3, [r1, #12]
 800200a:	e006      	b.n	800201a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_GPIO_Init+0x324>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4909      	ldr	r1, [pc, #36]	; (800203c <HAL_GPIO_Init+0x324>)
 8002016:	4013      	ands	r3, r2
 8002018:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae7e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	372c      	adds	r7, #44	; 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e272      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00c      	beq.n	8002086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800206c:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
 8002078:	4b8c      	ldr	r3, [pc, #560]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b89      	ldr	r3, [pc, #548]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x12c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d168      	bne.n	800216c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e24c      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x76>
 80020a8:	4b80      	ldr	r3, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a7f      	ldr	r2, [pc, #508]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e02e      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x98>
 80020be:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b78      	ldr	r3, [pc, #480]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a77      	ldr	r2, [pc, #476]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0xbc>
 80020e2:	4b72      	ldr	r3, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a71      	ldr	r2, [pc, #452]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020fc:	4b6b      	ldr	r3, [pc, #428]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6a      	ldr	r2, [pc, #424]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a67      	ldr	r2, [pc, #412]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fd0e 	bl	8000b3c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fd0a 	bl	8000b3c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e200      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xe4>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fcfa 	bl	8000b3c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fcf6 	bl	8000b3c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1ec      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x10c>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002186:	4b49      	ldr	r3, [pc, #292]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1c0      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4939      	ldr	r1, [pc, #228]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fcaf 	bl	8000b3c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fcab 	bl	8000b3c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1a1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4927      	ldr	r1, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fc8e 	bl	8000b3c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7fe fc8a 	bl	8000b3c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e180      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03a      	beq.n	80022c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe fc6e 	bl	8000b3c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fc6a 	bl	8000b3c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e160      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 fad8 	bl	8002838 <RCC_Delay>
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fe fc54 	bl	8000b3c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00f      	b.n	80022b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fc50 	bl	8000b3c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e146      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	42420000 	.word	0x42420000
 80022b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b92      	ldr	r3, [pc, #584]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e9      	bne.n	8002298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a6 	beq.w	800241e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a87      	ldr	r2, [pc, #540]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7e      	ldr	r2, [pc, #504]	; (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7fe fc11 	bl	8000b3c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe fc0d 	bl	8000b3c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	; 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e103      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x312>
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6e      	ldr	r2, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e02d      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x334>
 800235a:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a69      	ldr	r2, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a66      	ldr	r2, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	e01c      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x356>
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a60      	ldr	r2, [pc, #384]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002396:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a5a      	ldr	r2, [pc, #360]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b58      	ldr	r3, [pc, #352]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a57      	ldr	r2, [pc, #348]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fbc1 	bl	8000b3c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fbbd 	bl	8000b3c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0b1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCC_OscConfig+0x37e>
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fbab 	bl	8000b3c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fba7 	bl	8000b3c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4b40      	ldr	r3, [pc, #256]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8087 	beq.w	8002536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d061      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d146      	bne.n	80024ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x4cc>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fb7b 	bl	8000b3c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe fb77 	bl	8000b3c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e06d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4921      	ldr	r1, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a19      	ldr	r1, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	430b      	orrs	r3, r1
 8002496:	491b      	ldr	r1, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fb4b 	bl	8000b3c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fb47 	bl	8000b3c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e03d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x46a>
 80024c8:	e035      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fb34 	bl	8000b3c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fb30 	bl	8000b3c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e026      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x498>
 80024f6:	e01e      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e019      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4965      	ldr	r1, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe fa82 	bl	8000b3c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fa7e 	bl	8000b3c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4922      	ldr	r1, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe f9e0 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	08003c94 	.word	0x08003c94
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b490      	push	{r4, r7}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800271e:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002720:	1d3c      	adds	r4, r7, #4
 8002722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002728:	f240 2301 	movw	r3, #513	; 0x201
 800272c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x40>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x46>
 8002756:	e02b      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	e02b      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3328      	adds	r3, #40	; 0x28
 8002768:	443b      	add	r3, r7
 800276a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800276e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d012      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0c5b      	lsrs	r3, r3, #17
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	3328      	adds	r3, #40	; 0x28
 8002786:	443b      	add	r3, r7
 8002788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800278c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002792:	fb03 f202 	mul.w	r2, r3, r2
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	e004      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	623b      	str	r3, [r7, #32]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc90      	pop	{r4, r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	08003c84 	.word	0x08003c84
 80027c8:	40021000 	.word	0x40021000
 80027cc:	007a1200 	.word	0x007a1200
 80027d0:	003d0900 	.word	0x003d0900

080027d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff2 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08003ca4 	.word	0x08003ca4

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002814:	f7ff ffde 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0adb      	lsrs	r3, r3, #11
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08003ca4 	.word	0x08003ca4

08002838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <RCC_Delay+0x34>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <RCC_Delay+0x38>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002854:	bf00      	nop
  }
  while (Delay --);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e5a      	subs	r2, r3, #1
 800285a:	60fa      	str	r2, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <RCC_Delay+0x1c>
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000000 	.word	0x20000000
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e03f      	b.n	8002906 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f87c 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fc85 	bl	80031c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b08a      	sub	sp, #40	; 0x28
 8002912:	af02      	add	r7, sp, #8
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b20      	cmp	r3, #32
 800292c:	d17c      	bne.n	8002a28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_UART_Transmit+0x2c>
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e075      	b.n	8002a2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_UART_Transmit+0x3e>
 8002948:	2302      	movs	r3, #2
 800294a:	e06e      	b.n	8002a2a <HAL_UART_Transmit+0x11c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002962:	f7fe f8eb 	bl	8000b3c <HAL_GetTick>
 8002966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297c:	d108      	bne.n	8002990 <HAL_UART_Transmit+0x82>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	e003      	b.n	8002998 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029a0:	e02a      	b.n	80029f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa38 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e036      	b.n	8002a2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	3302      	adds	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e007      	b.n	80029ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1cf      	bne.n	80029a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2140      	movs	r1, #64	; 0x40
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fa08 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e006      	b.n	8002a2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d11d      	bne.n	8002a88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_UART_Receive_IT+0x26>
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e016      	b.n	8002a8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Receive_IT+0x38>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e00f      	b.n	8002a8a <HAL_UART_Receive_IT+0x58>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fa19 	bl	8002eb6 <UART_Start_Receive_IT>
 8002a84:	4603      	mov	r3, r0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x52>
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fac9 	bl	8003076 <UART_Receive_IT>
      return;
 8002ae4:	e17b      	b.n	8002dde <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80b1 	beq.w	8002c50 <HAL_UART_IRQHandler+0x1bc>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_UART_IRQHandler+0x70>
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a6 	beq.w	8002c50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_UART_IRQHandler+0x90>
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_UART_IRQHandler+0xb0>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0202 	orr.w	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0xd0>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00f      	beq.n	8002b8e <HAL_UART_IRQHandler+0xfa>
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <HAL_UART_IRQHandler+0xee>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0208 	orr.w	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 811e 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x11e>
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fa62 	bl	8003076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_UART_IRQHandler+0x146>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d031      	beq.n	8002c3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9a4 	bl	8002f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d023      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d013      	beq.n	8002c2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	4a76      	ldr	r2, [pc, #472]	; (8002de4 <HAL_UART_IRQHandler+0x350>)
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ff78 	bl	8001b08 <HAL_DMA_Abort_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00e      	b.n	8002c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8e3 	bl	8002dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e00a      	b.n	8002c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8df 	bl	8002dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e006      	b.n	8002c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8db 	bl	8002dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c4a:	e0c3      	b.n	8002dd4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	bf00      	nop
    return;
 8002c4e:	e0c1      	b.n	8002dd4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 80a1 	bne.w	8002d9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 809b 	beq.w	8002d9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8095 	beq.w	8002d9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04e      	beq.n	8002d34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002ca0:	8a3b      	ldrh	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8098 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cac:	8a3a      	ldrh	r2, [r7, #16]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	f080 8092 	bcs.w	8002dd8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8a3a      	ldrh	r2, [r7, #16]
 8002cb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d02b      	beq.n	8002d1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0210 	bic.w	r2, r2, #16
 8002d10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe febb 	bl	8001a92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f86d 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d32:	e051      	b.n	8002dd8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d047      	beq.n	8002ddc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d4c:	8a7b      	ldrh	r3, [r7, #18]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d044      	beq.n	8002ddc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0210 	bic.w	r2, r2, #16
 8002d8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f839 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d9a:	e01f      	b.n	8002ddc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_UART_IRQHandler+0x324>
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8f9 	bl	8002fa8 <UART_Transmit_IT>
    return;
 8002db6:	e012      	b.n	8002dde <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_UART_IRQHandler+0x34a>
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f93a 	bl	8003046 <UART_EndTransmit_IT>
    return;
 8002dd2:	e004      	b.n	8002dde <HAL_UART_IRQHandler+0x34a>
    return;
 8002dd4:	bf00      	nop
 8002dd6:	e002      	b.n	8002dde <HAL_UART_IRQHandler+0x34a>
      return;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <HAL_UART_IRQHandler+0x34a>
      return;
 8002ddc:	bf00      	nop
  }
}
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	08002f81 	.word	0x08002f81

08002de8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	e02c      	b.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d028      	beq.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e42:	f7fd fe7b 	bl	8000b3c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d21d      	bcs.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d0c3      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2222      	movs	r2, #34	; 0x22
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0210 	bic.w	r2, r2, #16
 8002f66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff ff2d 	bl	8002dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b21      	cmp	r3, #33	; 0x21
 8002fba:	d13e      	bne.n	800303a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d114      	bne.n	8002ff0 <UART_Transmit_IT+0x48>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d110      	bne.n	8002ff0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]
 8002fee:	e008      	b.n	8003002 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	1c59      	adds	r1, r3, #1
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6211      	str	r1, [r2, #32]
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4619      	mov	r1, r3
 8003010:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003024:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003034:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff febe 	bl	8002de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b22      	cmp	r3, #34	; 0x22
 8003088:	f040 8099 	bne.w	80031be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d117      	bne.n	80030c6 <UART_Receive_IT+0x50>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d113      	bne.n	80030c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
 80030c4:	e026      	b.n	8003114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	d007      	beq.n	80030ea <UART_Receive_IT+0x74>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <UART_Receive_IT+0x82>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e008      	b.n	800310a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003104:	b2da      	uxtb	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4619      	mov	r1, r3
 8003122:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003124:	2b00      	cmp	r3, #0
 8003126:	d148      	bne.n	80031ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0220 	bic.w	r2, r2, #32
 8003136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b01      	cmp	r3, #1
 8003166:	d123      	bne.n	80031b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0210 	bic.w	r2, r2, #16
 800317c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	d10a      	bne.n	80031a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fe2f 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
 80031ae:	e002      	b.n	80031b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fab5 	bl	8000720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e002      	b.n	80031c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003202:	f023 030c 	bic.w	r3, r3, #12
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	430b      	orrs	r3, r1
 800320e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <UART_SetConfig+0x114>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003230:	f7ff faee 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	e002      	b.n	800323e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7ff fad6 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 800323c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009a      	lsls	r2, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <UART_SetConfig+0x118>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	0119      	lsls	r1, r3, #4
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009a      	lsls	r2, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	fbb2 f2f3 	udiv	r2, r2, r3
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <UART_SetConfig+0x118>)
 8003276:	fba3 0302 	umull	r0, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2064      	movs	r0, #100	; 0x64
 800327e:	fb00 f303 	mul.w	r3, r0, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	3332      	adds	r3, #50	; 0x32
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <UART_SetConfig+0x118>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003294:	4419      	add	r1, r3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <UART_SetConfig+0x118>)
 80032ae:	fba3 0302 	umull	r0, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	3332      	adds	r3, #50	; 0x32
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <UART_SetConfig+0x118>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	440a      	add	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40013800 	.word	0x40013800
 80032e0:	51eb851f 	.word	0x51eb851f

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2600      	movs	r6, #0
 80032f4:	4d0c      	ldr	r5, [pc, #48]	; (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	f000 fc9c 	bl	8003c3c <_init>
 8003304:	2600      	movs	r6, #0
 8003306:	4d0a      	ldr	r5, [pc, #40]	; (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	; (8003334 <__libc_init_array+0x44>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08003ce0 	.word	0x08003ce0
 800332c:	08003ce0 	.word	0x08003ce0
 8003330:	08003ce0 	.word	0x08003ce0
 8003334:	08003ce4 	.word	0x08003ce4

08003338 <memset>:
 8003338:	4603      	mov	r3, r0
 800333a:	4402      	add	r2, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <siprintf>:
 8003348:	b40e      	push	{r1, r2, r3}
 800334a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800334e:	b500      	push	{lr}
 8003350:	b09c      	sub	sp, #112	; 0x70
 8003352:	ab1d      	add	r3, sp, #116	; 0x74
 8003354:	9002      	str	r0, [sp, #8]
 8003356:	9006      	str	r0, [sp, #24]
 8003358:	9107      	str	r1, [sp, #28]
 800335a:	9104      	str	r1, [sp, #16]
 800335c:	4808      	ldr	r0, [pc, #32]	; (8003380 <siprintf+0x38>)
 800335e:	4909      	ldr	r1, [pc, #36]	; (8003384 <siprintf+0x3c>)
 8003360:	f853 2b04 	ldr.w	r2, [r3], #4
 8003364:	9105      	str	r1, [sp, #20]
 8003366:	6800      	ldr	r0, [r0, #0]
 8003368:	a902      	add	r1, sp, #8
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	f000 f868 	bl	8003440 <_svfiprintf_r>
 8003370:	2200      	movs	r2, #0
 8003372:	9b02      	ldr	r3, [sp, #8]
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	b01c      	add	sp, #112	; 0x70
 8003378:	f85d eb04 	ldr.w	lr, [sp], #4
 800337c:	b003      	add	sp, #12
 800337e:	4770      	bx	lr
 8003380:	2000000c 	.word	0x2000000c
 8003384:	ffff0208 	.word	0xffff0208

08003388 <__ssputs_r>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	688e      	ldr	r6, [r1, #8]
 800338e:	4682      	mov	sl, r0
 8003390:	429e      	cmp	r6, r3
 8003392:	460c      	mov	r4, r1
 8003394:	4690      	mov	r8, r2
 8003396:	461f      	mov	r7, r3
 8003398:	d838      	bhi.n	800340c <__ssputs_r+0x84>
 800339a:	898a      	ldrh	r2, [r1, #12]
 800339c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033a0:	d032      	beq.n	8003408 <__ssputs_r+0x80>
 80033a2:	6825      	ldr	r5, [r4, #0]
 80033a4:	6909      	ldr	r1, [r1, #16]
 80033a6:	3301      	adds	r3, #1
 80033a8:	eba5 0901 	sub.w	r9, r5, r1
 80033ac:	6965      	ldr	r5, [r4, #20]
 80033ae:	444b      	add	r3, r9
 80033b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033b8:	106d      	asrs	r5, r5, #1
 80033ba:	429d      	cmp	r5, r3
 80033bc:	bf38      	it	cc
 80033be:	461d      	movcc	r5, r3
 80033c0:	0553      	lsls	r3, r2, #21
 80033c2:	d531      	bpl.n	8003428 <__ssputs_r+0xa0>
 80033c4:	4629      	mov	r1, r5
 80033c6:	f000 fb6f 	bl	8003aa8 <_malloc_r>
 80033ca:	4606      	mov	r6, r0
 80033cc:	b950      	cbnz	r0, 80033e4 <__ssputs_r+0x5c>
 80033ce:	230c      	movs	r3, #12
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f8ca 3000 	str.w	r3, [sl]
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e4:	464a      	mov	r2, r9
 80033e6:	6921      	ldr	r1, [r4, #16]
 80033e8:	f000 face 	bl	8003988 <memcpy>
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	81a3      	strh	r3, [r4, #12]
 80033f8:	6126      	str	r6, [r4, #16]
 80033fa:	444e      	add	r6, r9
 80033fc:	6026      	str	r6, [r4, #0]
 80033fe:	463e      	mov	r6, r7
 8003400:	6165      	str	r5, [r4, #20]
 8003402:	eba5 0509 	sub.w	r5, r5, r9
 8003406:	60a5      	str	r5, [r4, #8]
 8003408:	42be      	cmp	r6, r7
 800340a:	d900      	bls.n	800340e <__ssputs_r+0x86>
 800340c:	463e      	mov	r6, r7
 800340e:	4632      	mov	r2, r6
 8003410:	4641      	mov	r1, r8
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f000 fac6 	bl	80039a4 <memmove>
 8003418:	68a3      	ldr	r3, [r4, #8]
 800341a:	2000      	movs	r0, #0
 800341c:	1b9b      	subs	r3, r3, r6
 800341e:	60a3      	str	r3, [r4, #8]
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	4433      	add	r3, r6
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	e7db      	b.n	80033e0 <__ssputs_r+0x58>
 8003428:	462a      	mov	r2, r5
 800342a:	f000 fbb1 	bl	8003b90 <_realloc_r>
 800342e:	4606      	mov	r6, r0
 8003430:	2800      	cmp	r0, #0
 8003432:	d1e1      	bne.n	80033f8 <__ssputs_r+0x70>
 8003434:	4650      	mov	r0, sl
 8003436:	6921      	ldr	r1, [r4, #16]
 8003438:	f000 face 	bl	80039d8 <_free_r>
 800343c:	e7c7      	b.n	80033ce <__ssputs_r+0x46>
	...

08003440 <_svfiprintf_r>:
 8003440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003444:	4698      	mov	r8, r3
 8003446:	898b      	ldrh	r3, [r1, #12]
 8003448:	4607      	mov	r7, r0
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	460d      	mov	r5, r1
 800344e:	4614      	mov	r4, r2
 8003450:	b09d      	sub	sp, #116	; 0x74
 8003452:	d50e      	bpl.n	8003472 <_svfiprintf_r+0x32>
 8003454:	690b      	ldr	r3, [r1, #16]
 8003456:	b963      	cbnz	r3, 8003472 <_svfiprintf_r+0x32>
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	f000 fb25 	bl	8003aa8 <_malloc_r>
 800345e:	6028      	str	r0, [r5, #0]
 8003460:	6128      	str	r0, [r5, #16]
 8003462:	b920      	cbnz	r0, 800346e <_svfiprintf_r+0x2e>
 8003464:	230c      	movs	r3, #12
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	e0d1      	b.n	8003612 <_svfiprintf_r+0x1d2>
 800346e:	2340      	movs	r3, #64	; 0x40
 8003470:	616b      	str	r3, [r5, #20]
 8003472:	2300      	movs	r3, #0
 8003474:	9309      	str	r3, [sp, #36]	; 0x24
 8003476:	2320      	movs	r3, #32
 8003478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800347c:	2330      	movs	r3, #48	; 0x30
 800347e:	f04f 0901 	mov.w	r9, #1
 8003482:	f8cd 800c 	str.w	r8, [sp, #12]
 8003486:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800362c <_svfiprintf_r+0x1ec>
 800348a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800348e:	4623      	mov	r3, r4
 8003490:	469a      	mov	sl, r3
 8003492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003496:	b10a      	cbz	r2, 800349c <_svfiprintf_r+0x5c>
 8003498:	2a25      	cmp	r2, #37	; 0x25
 800349a:	d1f9      	bne.n	8003490 <_svfiprintf_r+0x50>
 800349c:	ebba 0b04 	subs.w	fp, sl, r4
 80034a0:	d00b      	beq.n	80034ba <_svfiprintf_r+0x7a>
 80034a2:	465b      	mov	r3, fp
 80034a4:	4622      	mov	r2, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	4638      	mov	r0, r7
 80034aa:	f7ff ff6d 	bl	8003388 <__ssputs_r>
 80034ae:	3001      	adds	r0, #1
 80034b0:	f000 80aa 	beq.w	8003608 <_svfiprintf_r+0x1c8>
 80034b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034b6:	445a      	add	r2, fp
 80034b8:	9209      	str	r2, [sp, #36]	; 0x24
 80034ba:	f89a 3000 	ldrb.w	r3, [sl]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a2 	beq.w	8003608 <_svfiprintf_r+0x1c8>
 80034c4:	2300      	movs	r3, #0
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ce:	f10a 0a01 	add.w	sl, sl, #1
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	9307      	str	r3, [sp, #28]
 80034d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034da:	931a      	str	r3, [sp, #104]	; 0x68
 80034dc:	4654      	mov	r4, sl
 80034de:	2205      	movs	r2, #5
 80034e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e4:	4851      	ldr	r0, [pc, #324]	; (800362c <_svfiprintf_r+0x1ec>)
 80034e6:	f000 fa41 	bl	800396c <memchr>
 80034ea:	9a04      	ldr	r2, [sp, #16]
 80034ec:	b9d8      	cbnz	r0, 8003526 <_svfiprintf_r+0xe6>
 80034ee:	06d0      	lsls	r0, r2, #27
 80034f0:	bf44      	itt	mi
 80034f2:	2320      	movmi	r3, #32
 80034f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034f8:	0711      	lsls	r1, r2, #28
 80034fa:	bf44      	itt	mi
 80034fc:	232b      	movmi	r3, #43	; 0x2b
 80034fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003502:	f89a 3000 	ldrb.w	r3, [sl]
 8003506:	2b2a      	cmp	r3, #42	; 0x2a
 8003508:	d015      	beq.n	8003536 <_svfiprintf_r+0xf6>
 800350a:	4654      	mov	r4, sl
 800350c:	2000      	movs	r0, #0
 800350e:	f04f 0c0a 	mov.w	ip, #10
 8003512:	9a07      	ldr	r2, [sp, #28]
 8003514:	4621      	mov	r1, r4
 8003516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800351a:	3b30      	subs	r3, #48	; 0x30
 800351c:	2b09      	cmp	r3, #9
 800351e:	d94e      	bls.n	80035be <_svfiprintf_r+0x17e>
 8003520:	b1b0      	cbz	r0, 8003550 <_svfiprintf_r+0x110>
 8003522:	9207      	str	r2, [sp, #28]
 8003524:	e014      	b.n	8003550 <_svfiprintf_r+0x110>
 8003526:	eba0 0308 	sub.w	r3, r0, r8
 800352a:	fa09 f303 	lsl.w	r3, r9, r3
 800352e:	4313      	orrs	r3, r2
 8003530:	46a2      	mov	sl, r4
 8003532:	9304      	str	r3, [sp, #16]
 8003534:	e7d2      	b.n	80034dc <_svfiprintf_r+0x9c>
 8003536:	9b03      	ldr	r3, [sp, #12]
 8003538:	1d19      	adds	r1, r3, #4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	9103      	str	r1, [sp, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfbb      	ittet	lt
 8003542:	425b      	neglt	r3, r3
 8003544:	f042 0202 	orrlt.w	r2, r2, #2
 8003548:	9307      	strge	r3, [sp, #28]
 800354a:	9307      	strlt	r3, [sp, #28]
 800354c:	bfb8      	it	lt
 800354e:	9204      	strlt	r2, [sp, #16]
 8003550:	7823      	ldrb	r3, [r4, #0]
 8003552:	2b2e      	cmp	r3, #46	; 0x2e
 8003554:	d10c      	bne.n	8003570 <_svfiprintf_r+0x130>
 8003556:	7863      	ldrb	r3, [r4, #1]
 8003558:	2b2a      	cmp	r3, #42	; 0x2a
 800355a:	d135      	bne.n	80035c8 <_svfiprintf_r+0x188>
 800355c:	9b03      	ldr	r3, [sp, #12]
 800355e:	3402      	adds	r4, #2
 8003560:	1d1a      	adds	r2, r3, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	9203      	str	r2, [sp, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfb8      	it	lt
 800356a:	f04f 33ff 	movlt.w	r3, #4294967295
 800356e:	9305      	str	r3, [sp, #20]
 8003570:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003630 <_svfiprintf_r+0x1f0>
 8003574:	2203      	movs	r2, #3
 8003576:	4650      	mov	r0, sl
 8003578:	7821      	ldrb	r1, [r4, #0]
 800357a:	f000 f9f7 	bl	800396c <memchr>
 800357e:	b140      	cbz	r0, 8003592 <_svfiprintf_r+0x152>
 8003580:	2340      	movs	r3, #64	; 0x40
 8003582:	eba0 000a 	sub.w	r0, r0, sl
 8003586:	fa03 f000 	lsl.w	r0, r3, r0
 800358a:	9b04      	ldr	r3, [sp, #16]
 800358c:	3401      	adds	r4, #1
 800358e:	4303      	orrs	r3, r0
 8003590:	9304      	str	r3, [sp, #16]
 8003592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003596:	2206      	movs	r2, #6
 8003598:	4826      	ldr	r0, [pc, #152]	; (8003634 <_svfiprintf_r+0x1f4>)
 800359a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800359e:	f000 f9e5 	bl	800396c <memchr>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d038      	beq.n	8003618 <_svfiprintf_r+0x1d8>
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <_svfiprintf_r+0x1f8>)
 80035a8:	bb1b      	cbnz	r3, 80035f2 <_svfiprintf_r+0x1b2>
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	3307      	adds	r3, #7
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	3308      	adds	r3, #8
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b8:	4433      	add	r3, r6
 80035ba:	9309      	str	r3, [sp, #36]	; 0x24
 80035bc:	e767      	b.n	800348e <_svfiprintf_r+0x4e>
 80035be:	460c      	mov	r4, r1
 80035c0:	2001      	movs	r0, #1
 80035c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035c6:	e7a5      	b.n	8003514 <_svfiprintf_r+0xd4>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f04f 0c0a 	mov.w	ip, #10
 80035ce:	4619      	mov	r1, r3
 80035d0:	3401      	adds	r4, #1
 80035d2:	9305      	str	r3, [sp, #20]
 80035d4:	4620      	mov	r0, r4
 80035d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035da:	3a30      	subs	r2, #48	; 0x30
 80035dc:	2a09      	cmp	r2, #9
 80035de:	d903      	bls.n	80035e8 <_svfiprintf_r+0x1a8>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0c5      	beq.n	8003570 <_svfiprintf_r+0x130>
 80035e4:	9105      	str	r1, [sp, #20]
 80035e6:	e7c3      	b.n	8003570 <_svfiprintf_r+0x130>
 80035e8:	4604      	mov	r4, r0
 80035ea:	2301      	movs	r3, #1
 80035ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80035f0:	e7f0      	b.n	80035d4 <_svfiprintf_r+0x194>
 80035f2:	ab03      	add	r3, sp, #12
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	462a      	mov	r2, r5
 80035f8:	4638      	mov	r0, r7
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <_svfiprintf_r+0x1fc>)
 80035fc:	a904      	add	r1, sp, #16
 80035fe:	f3af 8000 	nop.w
 8003602:	1c42      	adds	r2, r0, #1
 8003604:	4606      	mov	r6, r0
 8003606:	d1d6      	bne.n	80035b6 <_svfiprintf_r+0x176>
 8003608:	89ab      	ldrh	r3, [r5, #12]
 800360a:	065b      	lsls	r3, r3, #25
 800360c:	f53f af2c 	bmi.w	8003468 <_svfiprintf_r+0x28>
 8003610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003612:	b01d      	add	sp, #116	; 0x74
 8003614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003618:	ab03      	add	r3, sp, #12
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	462a      	mov	r2, r5
 800361e:	4638      	mov	r0, r7
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <_svfiprintf_r+0x1fc>)
 8003622:	a904      	add	r1, sp, #16
 8003624:	f000 f87c 	bl	8003720 <_printf_i>
 8003628:	e7eb      	b.n	8003602 <_svfiprintf_r+0x1c2>
 800362a:	bf00      	nop
 800362c:	08003cac 	.word	0x08003cac
 8003630:	08003cb2 	.word	0x08003cb2
 8003634:	08003cb6 	.word	0x08003cb6
 8003638:	00000000 	.word	0x00000000
 800363c:	08003389 	.word	0x08003389

08003640 <_printf_common>:
 8003640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	4616      	mov	r6, r2
 8003646:	4699      	mov	r9, r3
 8003648:	688a      	ldr	r2, [r1, #8]
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	4607      	mov	r7, r0
 800364e:	4293      	cmp	r3, r2
 8003650:	bfb8      	it	lt
 8003652:	4613      	movlt	r3, r2
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800365a:	460c      	mov	r4, r1
 800365c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003660:	b10a      	cbz	r2, 8003666 <_printf_common+0x26>
 8003662:	3301      	adds	r3, #1
 8003664:	6033      	str	r3, [r6, #0]
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	0699      	lsls	r1, r3, #26
 800366a:	bf42      	ittt	mi
 800366c:	6833      	ldrmi	r3, [r6, #0]
 800366e:	3302      	addmi	r3, #2
 8003670:	6033      	strmi	r3, [r6, #0]
 8003672:	6825      	ldr	r5, [r4, #0]
 8003674:	f015 0506 	ands.w	r5, r5, #6
 8003678:	d106      	bne.n	8003688 <_printf_common+0x48>
 800367a:	f104 0a19 	add.w	sl, r4, #25
 800367e:	68e3      	ldr	r3, [r4, #12]
 8003680:	6832      	ldr	r2, [r6, #0]
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	42ab      	cmp	r3, r5
 8003686:	dc28      	bgt.n	80036da <_printf_common+0x9a>
 8003688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800368c:	1e13      	subs	r3, r2, #0
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	bf18      	it	ne
 8003692:	2301      	movne	r3, #1
 8003694:	0692      	lsls	r2, r2, #26
 8003696:	d42d      	bmi.n	80036f4 <_printf_common+0xb4>
 8003698:	4649      	mov	r1, r9
 800369a:	4638      	mov	r0, r7
 800369c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a0:	47c0      	blx	r8
 80036a2:	3001      	adds	r0, #1
 80036a4:	d020      	beq.n	80036e8 <_printf_common+0xa8>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	68e5      	ldr	r5, [r4, #12]
 80036aa:	f003 0306 	and.w	r3, r3, #6
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf18      	it	ne
 80036b2:	2500      	movne	r5, #0
 80036b4:	6832      	ldr	r2, [r6, #0]
 80036b6:	f04f 0600 	mov.w	r6, #0
 80036ba:	68a3      	ldr	r3, [r4, #8]
 80036bc:	bf08      	it	eq
 80036be:	1aad      	subeq	r5, r5, r2
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	bf08      	it	eq
 80036c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bfc4      	itt	gt
 80036cc:	1a9b      	subgt	r3, r3, r2
 80036ce:	18ed      	addgt	r5, r5, r3
 80036d0:	341a      	adds	r4, #26
 80036d2:	42b5      	cmp	r5, r6
 80036d4:	d11a      	bne.n	800370c <_printf_common+0xcc>
 80036d6:	2000      	movs	r0, #0
 80036d8:	e008      	b.n	80036ec <_printf_common+0xac>
 80036da:	2301      	movs	r3, #1
 80036dc:	4652      	mov	r2, sl
 80036de:	4649      	mov	r1, r9
 80036e0:	4638      	mov	r0, r7
 80036e2:	47c0      	blx	r8
 80036e4:	3001      	adds	r0, #1
 80036e6:	d103      	bne.n	80036f0 <_printf_common+0xb0>
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f0:	3501      	adds	r5, #1
 80036f2:	e7c4      	b.n	800367e <_printf_common+0x3e>
 80036f4:	2030      	movs	r0, #48	; 0x30
 80036f6:	18e1      	adds	r1, r4, r3
 80036f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003702:	4422      	add	r2, r4
 8003704:	3302      	adds	r3, #2
 8003706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800370a:	e7c5      	b.n	8003698 <_printf_common+0x58>
 800370c:	2301      	movs	r3, #1
 800370e:	4622      	mov	r2, r4
 8003710:	4649      	mov	r1, r9
 8003712:	4638      	mov	r0, r7
 8003714:	47c0      	blx	r8
 8003716:	3001      	adds	r0, #1
 8003718:	d0e6      	beq.n	80036e8 <_printf_common+0xa8>
 800371a:	3601      	adds	r6, #1
 800371c:	e7d9      	b.n	80036d2 <_printf_common+0x92>
	...

08003720 <_printf_i>:
 8003720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003724:	7e0f      	ldrb	r7, [r1, #24]
 8003726:	4691      	mov	r9, r2
 8003728:	2f78      	cmp	r7, #120	; 0x78
 800372a:	4680      	mov	r8, r0
 800372c:	460c      	mov	r4, r1
 800372e:	469a      	mov	sl, r3
 8003730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003736:	d807      	bhi.n	8003748 <_printf_i+0x28>
 8003738:	2f62      	cmp	r7, #98	; 0x62
 800373a:	d80a      	bhi.n	8003752 <_printf_i+0x32>
 800373c:	2f00      	cmp	r7, #0
 800373e:	f000 80d9 	beq.w	80038f4 <_printf_i+0x1d4>
 8003742:	2f58      	cmp	r7, #88	; 0x58
 8003744:	f000 80a4 	beq.w	8003890 <_printf_i+0x170>
 8003748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800374c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003750:	e03a      	b.n	80037c8 <_printf_i+0xa8>
 8003752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003756:	2b15      	cmp	r3, #21
 8003758:	d8f6      	bhi.n	8003748 <_printf_i+0x28>
 800375a:	a101      	add	r1, pc, #4	; (adr r1, 8003760 <_printf_i+0x40>)
 800375c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003760:	080037b9 	.word	0x080037b9
 8003764:	080037cd 	.word	0x080037cd
 8003768:	08003749 	.word	0x08003749
 800376c:	08003749 	.word	0x08003749
 8003770:	08003749 	.word	0x08003749
 8003774:	08003749 	.word	0x08003749
 8003778:	080037cd 	.word	0x080037cd
 800377c:	08003749 	.word	0x08003749
 8003780:	08003749 	.word	0x08003749
 8003784:	08003749 	.word	0x08003749
 8003788:	08003749 	.word	0x08003749
 800378c:	080038db 	.word	0x080038db
 8003790:	080037fd 	.word	0x080037fd
 8003794:	080038bd 	.word	0x080038bd
 8003798:	08003749 	.word	0x08003749
 800379c:	08003749 	.word	0x08003749
 80037a0:	080038fd 	.word	0x080038fd
 80037a4:	08003749 	.word	0x08003749
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003749 	.word	0x08003749
 80037b0:	08003749 	.word	0x08003749
 80037b4:	080038c5 	.word	0x080038c5
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	602a      	str	r2, [r5, #0]
 80037c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0a4      	b.n	8003916 <_printf_i+0x1f6>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	6829      	ldr	r1, [r5, #0]
 80037d0:	0606      	lsls	r6, r0, #24
 80037d2:	f101 0304 	add.w	r3, r1, #4
 80037d6:	d50a      	bpl.n	80037ee <_printf_i+0xce>
 80037d8:	680e      	ldr	r6, [r1, #0]
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	2e00      	cmp	r6, #0
 80037de:	da03      	bge.n	80037e8 <_printf_i+0xc8>
 80037e0:	232d      	movs	r3, #45	; 0x2d
 80037e2:	4276      	negs	r6, r6
 80037e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e8:	230a      	movs	r3, #10
 80037ea:	485e      	ldr	r0, [pc, #376]	; (8003964 <_printf_i+0x244>)
 80037ec:	e019      	b.n	8003822 <_printf_i+0x102>
 80037ee:	680e      	ldr	r6, [r1, #0]
 80037f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	bf18      	it	ne
 80037f8:	b236      	sxthne	r6, r6
 80037fa:	e7ef      	b.n	80037dc <_printf_i+0xbc>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	1d19      	adds	r1, r3, #4
 8003802:	6029      	str	r1, [r5, #0]
 8003804:	0601      	lsls	r1, r0, #24
 8003806:	d501      	bpl.n	800380c <_printf_i+0xec>
 8003808:	681e      	ldr	r6, [r3, #0]
 800380a:	e002      	b.n	8003812 <_printf_i+0xf2>
 800380c:	0646      	lsls	r6, r0, #25
 800380e:	d5fb      	bpl.n	8003808 <_printf_i+0xe8>
 8003810:	881e      	ldrh	r6, [r3, #0]
 8003812:	2f6f      	cmp	r7, #111	; 0x6f
 8003814:	bf0c      	ite	eq
 8003816:	2308      	moveq	r3, #8
 8003818:	230a      	movne	r3, #10
 800381a:	4852      	ldr	r0, [pc, #328]	; (8003964 <_printf_i+0x244>)
 800381c:	2100      	movs	r1, #0
 800381e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003822:	6865      	ldr	r5, [r4, #4]
 8003824:	2d00      	cmp	r5, #0
 8003826:	bfa8      	it	ge
 8003828:	6821      	ldrge	r1, [r4, #0]
 800382a:	60a5      	str	r5, [r4, #8]
 800382c:	bfa4      	itt	ge
 800382e:	f021 0104 	bicge.w	r1, r1, #4
 8003832:	6021      	strge	r1, [r4, #0]
 8003834:	b90e      	cbnz	r6, 800383a <_printf_i+0x11a>
 8003836:	2d00      	cmp	r5, #0
 8003838:	d04d      	beq.n	80038d6 <_printf_i+0x1b6>
 800383a:	4615      	mov	r5, r2
 800383c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003840:	fb03 6711 	mls	r7, r3, r1, r6
 8003844:	5dc7      	ldrb	r7, [r0, r7]
 8003846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800384a:	4637      	mov	r7, r6
 800384c:	42bb      	cmp	r3, r7
 800384e:	460e      	mov	r6, r1
 8003850:	d9f4      	bls.n	800383c <_printf_i+0x11c>
 8003852:	2b08      	cmp	r3, #8
 8003854:	d10b      	bne.n	800386e <_printf_i+0x14e>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	07de      	lsls	r6, r3, #31
 800385a:	d508      	bpl.n	800386e <_printf_i+0x14e>
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	6861      	ldr	r1, [r4, #4]
 8003860:	4299      	cmp	r1, r3
 8003862:	bfde      	ittt	le
 8003864:	2330      	movle	r3, #48	; 0x30
 8003866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800386a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800386e:	1b52      	subs	r2, r2, r5
 8003870:	6122      	str	r2, [r4, #16]
 8003872:	464b      	mov	r3, r9
 8003874:	4621      	mov	r1, r4
 8003876:	4640      	mov	r0, r8
 8003878:	f8cd a000 	str.w	sl, [sp]
 800387c:	aa03      	add	r2, sp, #12
 800387e:	f7ff fedf 	bl	8003640 <_printf_common>
 8003882:	3001      	adds	r0, #1
 8003884:	d14c      	bne.n	8003920 <_printf_i+0x200>
 8003886:	f04f 30ff 	mov.w	r0, #4294967295
 800388a:	b004      	add	sp, #16
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	4834      	ldr	r0, [pc, #208]	; (8003964 <_printf_i+0x244>)
 8003892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003896:	6829      	ldr	r1, [r5, #0]
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f851 6b04 	ldr.w	r6, [r1], #4
 800389e:	6029      	str	r1, [r5, #0]
 80038a0:	061d      	lsls	r5, r3, #24
 80038a2:	d514      	bpl.n	80038ce <_printf_i+0x1ae>
 80038a4:	07df      	lsls	r7, r3, #31
 80038a6:	bf44      	itt	mi
 80038a8:	f043 0320 	orrmi.w	r3, r3, #32
 80038ac:	6023      	strmi	r3, [r4, #0]
 80038ae:	b91e      	cbnz	r6, 80038b8 <_printf_i+0x198>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f023 0320 	bic.w	r3, r3, #32
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	2310      	movs	r3, #16
 80038ba:	e7af      	b.n	800381c <_printf_i+0xfc>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	2378      	movs	r3, #120	; 0x78
 80038c6:	4828      	ldr	r0, [pc, #160]	; (8003968 <_printf_i+0x248>)
 80038c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038cc:	e7e3      	b.n	8003896 <_printf_i+0x176>
 80038ce:	0659      	lsls	r1, r3, #25
 80038d0:	bf48      	it	mi
 80038d2:	b2b6      	uxthmi	r6, r6
 80038d4:	e7e6      	b.n	80038a4 <_printf_i+0x184>
 80038d6:	4615      	mov	r5, r2
 80038d8:	e7bb      	b.n	8003852 <_printf_i+0x132>
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	6826      	ldr	r6, [r4, #0]
 80038de:	1d18      	adds	r0, r3, #4
 80038e0:	6961      	ldr	r1, [r4, #20]
 80038e2:	6028      	str	r0, [r5, #0]
 80038e4:	0635      	lsls	r5, r6, #24
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	d501      	bpl.n	80038ee <_printf_i+0x1ce>
 80038ea:	6019      	str	r1, [r3, #0]
 80038ec:	e002      	b.n	80038f4 <_printf_i+0x1d4>
 80038ee:	0670      	lsls	r0, r6, #25
 80038f0:	d5fb      	bpl.n	80038ea <_printf_i+0x1ca>
 80038f2:	8019      	strh	r1, [r3, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	4615      	mov	r5, r2
 80038f8:	6123      	str	r3, [r4, #16]
 80038fa:	e7ba      	b.n	8003872 <_printf_i+0x152>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	2100      	movs	r1, #0
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	602a      	str	r2, [r5, #0]
 8003904:	681d      	ldr	r5, [r3, #0]
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f82f 	bl	800396c <memchr>
 800390e:	b108      	cbz	r0, 8003914 <_printf_i+0x1f4>
 8003910:	1b40      	subs	r0, r0, r5
 8003912:	6060      	str	r0, [r4, #4]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391e:	e7a8      	b.n	8003872 <_printf_i+0x152>
 8003920:	462a      	mov	r2, r5
 8003922:	4649      	mov	r1, r9
 8003924:	4640      	mov	r0, r8
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	47d0      	blx	sl
 800392a:	3001      	adds	r0, #1
 800392c:	d0ab      	beq.n	8003886 <_printf_i+0x166>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	079b      	lsls	r3, r3, #30
 8003932:	d413      	bmi.n	800395c <_printf_i+0x23c>
 8003934:	68e0      	ldr	r0, [r4, #12]
 8003936:	9b03      	ldr	r3, [sp, #12]
 8003938:	4298      	cmp	r0, r3
 800393a:	bfb8      	it	lt
 800393c:	4618      	movlt	r0, r3
 800393e:	e7a4      	b.n	800388a <_printf_i+0x16a>
 8003940:	2301      	movs	r3, #1
 8003942:	4632      	mov	r2, r6
 8003944:	4649      	mov	r1, r9
 8003946:	4640      	mov	r0, r8
 8003948:	47d0      	blx	sl
 800394a:	3001      	adds	r0, #1
 800394c:	d09b      	beq.n	8003886 <_printf_i+0x166>
 800394e:	3501      	adds	r5, #1
 8003950:	68e3      	ldr	r3, [r4, #12]
 8003952:	9903      	ldr	r1, [sp, #12]
 8003954:	1a5b      	subs	r3, r3, r1
 8003956:	42ab      	cmp	r3, r5
 8003958:	dcf2      	bgt.n	8003940 <_printf_i+0x220>
 800395a:	e7eb      	b.n	8003934 <_printf_i+0x214>
 800395c:	2500      	movs	r5, #0
 800395e:	f104 0619 	add.w	r6, r4, #25
 8003962:	e7f5      	b.n	8003950 <_printf_i+0x230>
 8003964:	08003cbd 	.word	0x08003cbd
 8003968:	08003cce 	.word	0x08003cce

0800396c <memchr>:
 800396c:	4603      	mov	r3, r0
 800396e:	b510      	push	{r4, lr}
 8003970:	b2c9      	uxtb	r1, r1
 8003972:	4402      	add	r2, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	4618      	mov	r0, r3
 8003978:	d101      	bne.n	800397e <memchr+0x12>
 800397a:	2000      	movs	r0, #0
 800397c:	e003      	b.n	8003986 <memchr+0x1a>
 800397e:	7804      	ldrb	r4, [r0, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	428c      	cmp	r4, r1
 8003984:	d1f6      	bne.n	8003974 <memchr+0x8>
 8003986:	bd10      	pop	{r4, pc}

08003988 <memcpy>:
 8003988:	440a      	add	r2, r1
 800398a:	4291      	cmp	r1, r2
 800398c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003990:	d100      	bne.n	8003994 <memcpy+0xc>
 8003992:	4770      	bx	lr
 8003994:	b510      	push	{r4, lr}
 8003996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800399a:	4291      	cmp	r1, r2
 800399c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039a0:	d1f9      	bne.n	8003996 <memcpy+0xe>
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <memmove>:
 80039a4:	4288      	cmp	r0, r1
 80039a6:	b510      	push	{r4, lr}
 80039a8:	eb01 0402 	add.w	r4, r1, r2
 80039ac:	d902      	bls.n	80039b4 <memmove+0x10>
 80039ae:	4284      	cmp	r4, r0
 80039b0:	4623      	mov	r3, r4
 80039b2:	d807      	bhi.n	80039c4 <memmove+0x20>
 80039b4:	1e43      	subs	r3, r0, #1
 80039b6:	42a1      	cmp	r1, r4
 80039b8:	d008      	beq.n	80039cc <memmove+0x28>
 80039ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039c2:	e7f8      	b.n	80039b6 <memmove+0x12>
 80039c4:	4601      	mov	r1, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	428a      	cmp	r2, r1
 80039ca:	d100      	bne.n	80039ce <memmove+0x2a>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039d6:	e7f7      	b.n	80039c8 <memmove+0x24>

080039d8 <_free_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4605      	mov	r5, r0
 80039dc:	2900      	cmp	r1, #0
 80039de:	d040      	beq.n	8003a62 <_free_r+0x8a>
 80039e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e4:	1f0c      	subs	r4, r1, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	18e4      	addlt	r4, r4, r3
 80039ec:	f000 f910 	bl	8003c10 <__malloc_lock>
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <_free_r+0x8c>)
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	b933      	cbnz	r3, 8003a04 <_free_r+0x2c>
 80039f6:	6063      	str	r3, [r4, #4]
 80039f8:	6014      	str	r4, [r2, #0]
 80039fa:	4628      	mov	r0, r5
 80039fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a00:	f000 b90c 	b.w	8003c1c <__malloc_unlock>
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d908      	bls.n	8003a1a <_free_r+0x42>
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	1821      	adds	r1, r4, r0
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf01      	itttt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	1809      	addeq	r1, r1, r0
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	e7ed      	b.n	80039f6 <_free_r+0x1e>
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b10b      	cbz	r3, 8003a24 <_free_r+0x4c>
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d9fa      	bls.n	8003a1a <_free_r+0x42>
 8003a24:	6811      	ldr	r1, [r2, #0]
 8003a26:	1850      	adds	r0, r2, r1
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d10b      	bne.n	8003a44 <_free_r+0x6c>
 8003a2c:	6820      	ldr	r0, [r4, #0]
 8003a2e:	4401      	add	r1, r0
 8003a30:	1850      	adds	r0, r2, r1
 8003a32:	4283      	cmp	r3, r0
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	d1e0      	bne.n	80039fa <_free_r+0x22>
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4401      	add	r1, r0
 8003a3e:	6011      	str	r1, [r2, #0]
 8003a40:	6053      	str	r3, [r2, #4]
 8003a42:	e7da      	b.n	80039fa <_free_r+0x22>
 8003a44:	d902      	bls.n	8003a4c <_free_r+0x74>
 8003a46:	230c      	movs	r3, #12
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	e7d6      	b.n	80039fa <_free_r+0x22>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	1821      	adds	r1, r4, r0
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf01      	itttt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	6063      	str	r3, [r4, #4]
 8003a5e:	6054      	str	r4, [r2, #4]
 8003a60:	e7cb      	b.n	80039fa <_free_r+0x22>
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20000178 	.word	0x20000178

08003a68 <sbrk_aligned>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4e0e      	ldr	r6, [pc, #56]	; (8003aa4 <sbrk_aligned+0x3c>)
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	6831      	ldr	r1, [r6, #0]
 8003a70:	4605      	mov	r5, r0
 8003a72:	b911      	cbnz	r1, 8003a7a <sbrk_aligned+0x12>
 8003a74:	f000 f8bc 	bl	8003bf0 <_sbrk_r>
 8003a78:	6030      	str	r0, [r6, #0]
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 f8b7 	bl	8003bf0 <_sbrk_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d00a      	beq.n	8003a9c <sbrk_aligned+0x34>
 8003a86:	1cc4      	adds	r4, r0, #3
 8003a88:	f024 0403 	bic.w	r4, r4, #3
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d007      	beq.n	8003aa0 <sbrk_aligned+0x38>
 8003a90:	1a21      	subs	r1, r4, r0
 8003a92:	4628      	mov	r0, r5
 8003a94:	f000 f8ac 	bl	8003bf0 <_sbrk_r>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d101      	bne.n	8003aa0 <sbrk_aligned+0x38>
 8003a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	2000017c 	.word	0x2000017c

08003aa8 <_malloc_r>:
 8003aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aac:	1ccd      	adds	r5, r1, #3
 8003aae:	f025 0503 	bic.w	r5, r5, #3
 8003ab2:	3508      	adds	r5, #8
 8003ab4:	2d0c      	cmp	r5, #12
 8003ab6:	bf38      	it	cc
 8003ab8:	250c      	movcc	r5, #12
 8003aba:	2d00      	cmp	r5, #0
 8003abc:	4607      	mov	r7, r0
 8003abe:	db01      	blt.n	8003ac4 <_malloc_r+0x1c>
 8003ac0:	42a9      	cmp	r1, r5
 8003ac2:	d905      	bls.n	8003ad0 <_malloc_r+0x28>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4630      	mov	r0, r6
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	4e2e      	ldr	r6, [pc, #184]	; (8003b8c <_malloc_r+0xe4>)
 8003ad2:	f000 f89d 	bl	8003c10 <__malloc_lock>
 8003ad6:	6833      	ldr	r3, [r6, #0]
 8003ad8:	461c      	mov	r4, r3
 8003ada:	bb34      	cbnz	r4, 8003b2a <_malloc_r+0x82>
 8003adc:	4629      	mov	r1, r5
 8003ade:	4638      	mov	r0, r7
 8003ae0:	f7ff ffc2 	bl	8003a68 <sbrk_aligned>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	d14d      	bne.n	8003b86 <_malloc_r+0xde>
 8003aea:	6834      	ldr	r4, [r6, #0]
 8003aec:	4626      	mov	r6, r4
 8003aee:	2e00      	cmp	r6, #0
 8003af0:	d140      	bne.n	8003b74 <_malloc_r+0xcc>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	4631      	mov	r1, r6
 8003af6:	4638      	mov	r0, r7
 8003af8:	eb04 0803 	add.w	r8, r4, r3
 8003afc:	f000 f878 	bl	8003bf0 <_sbrk_r>
 8003b00:	4580      	cmp	r8, r0
 8003b02:	d13a      	bne.n	8003b7a <_malloc_r+0xd2>
 8003b04:	6821      	ldr	r1, [r4, #0]
 8003b06:	3503      	adds	r5, #3
 8003b08:	1a6d      	subs	r5, r5, r1
 8003b0a:	f025 0503 	bic.w	r5, r5, #3
 8003b0e:	3508      	adds	r5, #8
 8003b10:	2d0c      	cmp	r5, #12
 8003b12:	bf38      	it	cc
 8003b14:	250c      	movcc	r5, #12
 8003b16:	4638      	mov	r0, r7
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f7ff ffa5 	bl	8003a68 <sbrk_aligned>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d02b      	beq.n	8003b7a <_malloc_r+0xd2>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	442b      	add	r3, r5
 8003b26:	6023      	str	r3, [r4, #0]
 8003b28:	e00e      	b.n	8003b48 <_malloc_r+0xa0>
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	1b52      	subs	r2, r2, r5
 8003b2e:	d41e      	bmi.n	8003b6e <_malloc_r+0xc6>
 8003b30:	2a0b      	cmp	r2, #11
 8003b32:	d916      	bls.n	8003b62 <_malloc_r+0xba>
 8003b34:	1961      	adds	r1, r4, r5
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	6025      	str	r5, [r4, #0]
 8003b3a:	bf18      	it	ne
 8003b3c:	6059      	strne	r1, [r3, #4]
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	bf08      	it	eq
 8003b42:	6031      	streq	r1, [r6, #0]
 8003b44:	5162      	str	r2, [r4, r5]
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f104 060b 	add.w	r6, r4, #11
 8003b4e:	f000 f865 	bl	8003c1c <__malloc_unlock>
 8003b52:	f026 0607 	bic.w	r6, r6, #7
 8003b56:	1d23      	adds	r3, r4, #4
 8003b58:	1af2      	subs	r2, r6, r3
 8003b5a:	d0b6      	beq.n	8003aca <_malloc_r+0x22>
 8003b5c:	1b9b      	subs	r3, r3, r6
 8003b5e:	50a3      	str	r3, [r4, r2]
 8003b60:	e7b3      	b.n	8003aca <_malloc_r+0x22>
 8003b62:	6862      	ldr	r2, [r4, #4]
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	bf0c      	ite	eq
 8003b68:	6032      	streq	r2, [r6, #0]
 8003b6a:	605a      	strne	r2, [r3, #4]
 8003b6c:	e7ec      	b.n	8003b48 <_malloc_r+0xa0>
 8003b6e:	4623      	mov	r3, r4
 8003b70:	6864      	ldr	r4, [r4, #4]
 8003b72:	e7b2      	b.n	8003ada <_malloc_r+0x32>
 8003b74:	4634      	mov	r4, r6
 8003b76:	6876      	ldr	r6, [r6, #4]
 8003b78:	e7b9      	b.n	8003aee <_malloc_r+0x46>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	f000 f84c 	bl	8003c1c <__malloc_unlock>
 8003b84:	e7a1      	b.n	8003aca <_malloc_r+0x22>
 8003b86:	6025      	str	r5, [r4, #0]
 8003b88:	e7de      	b.n	8003b48 <_malloc_r+0xa0>
 8003b8a:	bf00      	nop
 8003b8c:	20000178 	.word	0x20000178

08003b90 <_realloc_r>:
 8003b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b94:	4680      	mov	r8, r0
 8003b96:	4614      	mov	r4, r2
 8003b98:	460e      	mov	r6, r1
 8003b9a:	b921      	cbnz	r1, 8003ba6 <_realloc_r+0x16>
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba2:	f7ff bf81 	b.w	8003aa8 <_malloc_r>
 8003ba6:	b92a      	cbnz	r2, 8003bb4 <_realloc_r+0x24>
 8003ba8:	f7ff ff16 	bl	80039d8 <_free_r>
 8003bac:	4625      	mov	r5, r4
 8003bae:	4628      	mov	r0, r5
 8003bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb4:	f000 f838 	bl	8003c28 <_malloc_usable_size_r>
 8003bb8:	4284      	cmp	r4, r0
 8003bba:	4607      	mov	r7, r0
 8003bbc:	d802      	bhi.n	8003bc4 <_realloc_r+0x34>
 8003bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bc2:	d812      	bhi.n	8003bea <_realloc_r+0x5a>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f7ff ff6e 	bl	8003aa8 <_malloc_r>
 8003bcc:	4605      	mov	r5, r0
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0ed      	beq.n	8003bae <_realloc_r+0x1e>
 8003bd2:	42bc      	cmp	r4, r7
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	bf28      	it	cs
 8003bda:	463a      	movcs	r2, r7
 8003bdc:	f7ff fed4 	bl	8003988 <memcpy>
 8003be0:	4631      	mov	r1, r6
 8003be2:	4640      	mov	r0, r8
 8003be4:	f7ff fef8 	bl	80039d8 <_free_r>
 8003be8:	e7e1      	b.n	8003bae <_realloc_r+0x1e>
 8003bea:	4635      	mov	r5, r6
 8003bec:	e7df      	b.n	8003bae <_realloc_r+0x1e>
	...

08003bf0 <_sbrk_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4d05      	ldr	r5, [pc, #20]	; (8003c0c <_sbrk_r+0x1c>)
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fc fe66 	bl	80008cc <_sbrk>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_sbrk_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_sbrk_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20000180 	.word	0x20000180

08003c10 <__malloc_lock>:
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <__malloc_lock+0x8>)
 8003c12:	f000 b811 	b.w	8003c38 <__retarget_lock_acquire_recursive>
 8003c16:	bf00      	nop
 8003c18:	20000184 	.word	0x20000184

08003c1c <__malloc_unlock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__malloc_unlock+0x8>)
 8003c1e:	f000 b80c 	b.w	8003c3a <__retarget_lock_release_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000184 	.word	0x20000184

08003c28 <_malloc_usable_size_r>:
 8003c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c2c:	1f18      	subs	r0, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bfbc      	itt	lt
 8003c32:	580b      	ldrlt	r3, [r1, r0]
 8003c34:	18c0      	addlt	r0, r0, r3
 8003c36:	4770      	bx	lr

08003c38 <__retarget_lock_acquire_recursive>:
 8003c38:	4770      	bx	lr

08003c3a <__retarget_lock_release_recursive>:
 8003c3a:	4770      	bx	lr

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
