
13. CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ca0  08003ca0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ca0  08003ca0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003d18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003d18  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008562  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  000285fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198cd  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f8d  00000000  00000000  00044aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093088  00000000  00000000  0004ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000e1b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c04 	.word	0x08003c04

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003c04 	.word	0x08003c04

08000224 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_CAN_Init+0x64>)
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <MX_CAN_Init+0x68>)
 800022c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_CAN_Init+0x64>)
 8000230:	2212      	movs	r2, #18
 8000232:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_CAN_Init+0x64>)
 8000242:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000246:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_CAN_Init+0x64>)
 800024a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800024e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_CAN_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_CAN_Init+0x64>)
 8000258:	2200      	movs	r2, #0
 800025a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_CAN_Init+0x64>)
 8000276:	f000 fc73 	bl	8000b60 <HAL_CAN_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000280:	f000 fa94 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000fc 	.word	0x200000fc
 800028c:	40006400 	.word	0x40006400

08000290 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a20      	ldr	r2, [pc, #128]	; (800032c <HAL_CAN_MspInit+0x9c>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d139      	bne.n	8000324 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ba:	61d3      	str	r3, [r2, #28]
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002f6:	f001 fcf3 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000300:	2302      	movs	r3, #2
 8000302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000304:	2303      	movs	r3, #3
 8000306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 8000310:	f001 fce6 	bl	8001ce0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	2015      	movs	r0, #21
 800031a:	f001 fb68 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800031e:	2015      	movs	r0, #21
 8000320:	f001 fb81 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000324:	bf00      	nop
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40006400 	.word	0x40006400
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800

08000338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <MX_GPIO_Init+0x40>)
 8000344:	f043 0320 	orr.w	r3, r3, #32
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0320 	and.w	r3, r3, #32
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <MX_GPIO_Init+0x40>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_GPIO_Init+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fb67 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f969 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ffd5 	bl	8000338 <MX_GPIO_Init>
  MX_CAN_Init();
 800038e:	f7ff ff49 	bl	8000224 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000392:	f000 fabb 	bl	800090c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 8000396:	4ba1      	ldr	r3, [pc, #644]	; (800061c <main+0x2a0>)
 8000398:	f64f 6260 	movw	r2, #65120	; 0xfe60
 800039c:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 800039e:	4b9f      	ldr	r3, [pc, #636]	; (800061c <main+0x2a0>)
 80003a0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003a4:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 80003a6:	4b9d      	ldr	r3, [pc, #628]	; (800061c <main+0x2a0>)
 80003a8:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80003ac:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 80003ae:	4b9b      	ldr	r3, [pc, #620]	; (800061c <main+0x2a0>)
 80003b0:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80003b4:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80003b6:	4b99      	ldr	r3, [pc, #612]	; (800061c <main+0x2a0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80003bc:	4b97      	ldr	r3, [pc, #604]	; (800061c <main+0x2a0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003c2:	4b96      	ldr	r3, [pc, #600]	; (800061c <main+0x2a0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 80003c8:	4b94      	ldr	r3, [pc, #592]	; (800061c <main+0x2a0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 80003ce:	4b93      	ldr	r3, [pc, #588]	; (800061c <main+0x2a0>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1);
 80003d4:	4991      	ldr	r1, [pc, #580]	; (800061c <main+0x2a0>)
 80003d6:	4892      	ldr	r0, [pc, #584]	; (8000620 <main+0x2a4>)
 80003d8:	f000 fcbd 	bl	8000d56 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003dc:	2102      	movs	r1, #2
 80003de:	4890      	ldr	r0, [pc, #576]	; (8000620 <main+0x2a4>)
 80003e0:	f000 ffe5 	bl	80013ae <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan);
 80003e4:	488e      	ldr	r0, [pc, #568]	; (8000620 <main+0x2a4>)
 80003e6:	f000 fd7f 	bl	8000ee8 <HAL_CAN_Start>

  char str[20] = {0};
 80003ea:	2300      	movs	r3, #0
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
  while (1)
  {
	  if(can1_rx0_flag)
 80003fa:	4b8a      	ldr	r3, [pc, #552]	; (8000624 <main+0x2a8>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d035      	beq.n	8000470 <main+0xf4>
	  {
		  can1_rx0_flag = 0;
 8000404:	4b87      	ldr	r3, [pc, #540]	; (8000624 <main+0x2a8>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "Rx ID: 0x%X\n", canRxHeader.StdId);
 800040a:	4b87      	ldr	r3, [pc, #540]	; (8000628 <main+0x2ac>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	463b      	mov	r3, r7
 8000410:	4986      	ldr	r1, [pc, #536]	; (800062c <main+0x2b0>)
 8000412:	4618      	mov	r0, r3
 8000414:	f002 ff7c 	bl	8003310 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000418:	4639      	mov	r1, r7
 800041a:	230a      	movs	r3, #10
 800041c:	2214      	movs	r2, #20
 800041e:	4884      	ldr	r0, [pc, #528]	; (8000630 <main+0x2b4>)
 8000420:	f002 fa59 	bl	80028d6 <HAL_UART_Transmit>

		  for(int i = 0; i < 8; i++)
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
 8000428:	e014      	b.n	8000454 <main+0xd8>
		  {
			  sprintf(str, "Rx Data[%d]: 0x%X\n", i, can1Rx0Data[i]);
 800042a:	4a82      	ldr	r2, [pc, #520]	; (8000634 <main+0x2b8>)
 800042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4638      	mov	r0, r7
 8000434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000436:	4980      	ldr	r1, [pc, #512]	; (8000638 <main+0x2bc>)
 8000438:	f002 ff6a 	bl	8003310 <siprintf>
			  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 800043c:	4639      	mov	r1, r7
 800043e:	230a      	movs	r3, #10
 8000440:	2214      	movs	r2, #20
 8000442:	487b      	ldr	r0, [pc, #492]	; (8000630 <main+0x2b4>)
 8000444:	f002 fa47 	bl	80028d6 <HAL_UART_Transmit>
			  HAL_Delay(10);
 8000448:	200a      	movs	r0, #10
 800044a:	f000 fb65 	bl	8000b18 <HAL_Delay>
		  for(int i = 0; i < 8; i++)
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	3301      	adds	r3, #1
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000456:	2b07      	cmp	r3, #7
 8000458:	dde7      	ble.n	800042a <main+0xae>
		  }
		  sprintf(str, "\n\n");
 800045a:	463b      	mov	r3, r7
 800045c:	4977      	ldr	r1, [pc, #476]	; (800063c <main+0x2c0>)
 800045e:	4618      	mov	r0, r3
 8000460:	f002 ff56 	bl	8003310 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000464:	4639      	mov	r1, r7
 8000466:	230a      	movs	r3, #10
 8000468:	2214      	movs	r2, #20
 800046a:	4871      	ldr	r0, [pc, #452]	; (8000630 <main+0x2b4>)
 800046c:	f002 fa33 	bl	80028d6 <HAL_UART_Transmit>
	  }

	  // flag1
	  if(SW1_flag)
 8000470:	4b73      	ldr	r3, [pc, #460]	; (8000640 <main+0x2c4>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d02f      	beq.n	80004da <main+0x15e>
	  {
		  SW1_flag = 0;
 800047a:	4b71      	ldr	r3, [pc, #452]	; (8000640 <main+0x2c4>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x102;
 8000480:	4b70      	ldr	r3, [pc, #448]	; (8000644 <main+0x2c8>)
 8000482:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000486:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000488:	4b6e      	ldr	r3, [pc, #440]	; (8000644 <main+0x2c8>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 800048e:	4b6d      	ldr	r3, [pc, #436]	; (8000644 <main+0x2c8>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000494:	4b6b      	ldr	r3, [pc, #428]	; (8000644 <main+0x2c8>)
 8000496:	2208      	movs	r2, #8
 8000498:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
 800049e:	e00d      	b.n	80004bc <main+0x140>
 80004a0:	4a69      	ldr	r2, [pc, #420]	; (8000648 <main+0x2cc>)
 80004a2:	6a3b      	ldr	r3, [r7, #32]
 80004a4:	4413      	add	r3, r2
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2d9      	uxtb	r1, r3
 80004ac:	4a66      	ldr	r2, [pc, #408]	; (8000648 <main+0x2cc>)
 80004ae:	6a3b      	ldr	r3, [r7, #32]
 80004b0:	4413      	add	r3, r2
 80004b2:	460a      	mov	r2, r1
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	6a3b      	ldr	r3, [r7, #32]
 80004b8:	3301      	adds	r3, #1
 80004ba:	623b      	str	r3, [r7, #32]
 80004bc:	6a3b      	ldr	r3, [r7, #32]
 80004be:	2b07      	cmp	r3, #7
 80004c0:	ddee      	ble.n	80004a0 <main+0x124>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80004c2:	4857      	ldr	r0, [pc, #348]	; (8000620 <main+0x2a4>)
 80004c4:	f000 fe2e 	bl	8001124 <HAL_CAN_GetTxMailboxesFreeLevel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a60      	ldr	r2, [pc, #384]	; (800064c <main+0x2d0>)
 80004cc:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80004ce:	4b5f      	ldr	r3, [pc, #380]	; (800064c <main+0x2d0>)
 80004d0:	4a5d      	ldr	r2, [pc, #372]	; (8000648 <main+0x2cc>)
 80004d2:	495c      	ldr	r1, [pc, #368]	; (8000644 <main+0x2c8>)
 80004d4:	4852      	ldr	r0, [pc, #328]	; (8000620 <main+0x2a4>)
 80004d6:	f000 fd4b 	bl	8000f70 <HAL_CAN_AddTxMessage>
	  }

	  // flag2
	  if(SW2_flag)
 80004da:	4b5d      	ldr	r3, [pc, #372]	; (8000650 <main+0x2d4>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d02f      	beq.n	8000544 <main+0x1c8>
	  {
		  SW2_flag = 0;
 80004e4:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <main+0x2d4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x106 send
		  canTxHeader.StdId = 0x107;
 80004ea:	4b56      	ldr	r3, [pc, #344]	; (8000644 <main+0x2c8>)
 80004ec:	f240 1207 	movw	r2, #263	; 0x107
 80004f0:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80004f2:	4b54      	ldr	r3, [pc, #336]	; (8000644 <main+0x2c8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80004f8:	4b52      	ldr	r3, [pc, #328]	; (8000644 <main+0x2c8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80004fe:	4b51      	ldr	r3, [pc, #324]	; (8000644 <main+0x2c8>)
 8000500:	2208      	movs	r2, #8
 8000502:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e00d      	b.n	8000526 <main+0x1aa>
 800050a:	4a4f      	ldr	r2, [pc, #316]	; (8000648 <main+0x2cc>)
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	4413      	add	r3, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	b2d9      	uxtb	r1, r3
 8000516:	4a4c      	ldr	r2, [pc, #304]	; (8000648 <main+0x2cc>)
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	4413      	add	r3, r2
 800051c:	460a      	mov	r2, r1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	3301      	adds	r3, #1
 8000524:	61fb      	str	r3, [r7, #28]
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b07      	cmp	r3, #7
 800052a:	ddee      	ble.n	800050a <main+0x18e>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800052c:	483c      	ldr	r0, [pc, #240]	; (8000620 <main+0x2a4>)
 800052e:	f000 fdf9 	bl	8001124 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000532:	4603      	mov	r3, r0
 8000534:	4a45      	ldr	r2, [pc, #276]	; (800064c <main+0x2d0>)
 8000536:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000538:	4b44      	ldr	r3, [pc, #272]	; (800064c <main+0x2d0>)
 800053a:	4a43      	ldr	r2, [pc, #268]	; (8000648 <main+0x2cc>)
 800053c:	4941      	ldr	r1, [pc, #260]	; (8000644 <main+0x2c8>)
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <main+0x2a4>)
 8000540:	f000 fd16 	bl	8000f70 <HAL_CAN_AddTxMessage>
	  }

	  // flag3
	  if(SW3_flag)
 8000544:	4b43      	ldr	r3, [pc, #268]	; (8000654 <main+0x2d8>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d02f      	beq.n	80005ae <main+0x232>
	  {
		  SW3_flag = 0;
 800054e:	4b41      	ldr	r3, [pc, #260]	; (8000654 <main+0x2d8>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

		  // STM32F407VET6 : 0x10A send
		  canTxHeader.StdId = 0x10B;
 8000554:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <main+0x2c8>)
 8000556:	f240 120b 	movw	r2, #267	; 0x10b
 800055a:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 800055c:	4b39      	ldr	r3, [pc, #228]	; (8000644 <main+0x2c8>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000562:	4b38      	ldr	r3, [pc, #224]	; (8000644 <main+0x2c8>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <main+0x2c8>)
 800056a:	2208      	movs	r2, #8
 800056c:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	e00d      	b.n	8000590 <main+0x214>
 8000574:	4a34      	ldr	r2, [pc, #208]	; (8000648 <main+0x2cc>)
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	4413      	add	r3, r2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	4a31      	ldr	r2, [pc, #196]	; (8000648 <main+0x2cc>)
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	4413      	add	r3, r2
 8000586:	460a      	mov	r2, r1
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	3301      	adds	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	2b07      	cmp	r3, #7
 8000594:	ddee      	ble.n	8000574 <main+0x1f8>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <main+0x2a4>)
 8000598:	f000 fdc4 	bl	8001124 <HAL_CAN_GetTxMailboxesFreeLevel>
 800059c:	4603      	mov	r3, r0
 800059e:	4a2b      	ldr	r2, [pc, #172]	; (800064c <main+0x2d0>)
 80005a0:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <main+0x2d0>)
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <main+0x2cc>)
 80005a6:	4927      	ldr	r1, [pc, #156]	; (8000644 <main+0x2c8>)
 80005a8:	481d      	ldr	r0, [pc, #116]	; (8000620 <main+0x2a4>)
 80005aa:	f000 fce1 	bl	8000f70 <HAL_CAN_AddTxMessage>
	  }

	  // flag4
	  if(SW4_flag)
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <main+0x2dc>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	f43f af20 	beq.w	80003fa <main+0x7e>
	  {
		  SW4_flag = 0;
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <main+0x2dc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x10E;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <main+0x2c8>)
 80005c2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80005c6:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <main+0x2c8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <main+0x2c8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <main+0x2c8>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e00d      	b.n	80005fc <main+0x280>
 80005e0:	4a19      	ldr	r2, [pc, #100]	; (8000648 <main+0x2cc>)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2d9      	uxtb	r1, r3
 80005ec:	4a16      	ldr	r2, [pc, #88]	; (8000648 <main+0x2cc>)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	4413      	add	r3, r2
 80005f2:	460a      	mov	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	ddee      	ble.n	80005e0 <main+0x264>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x2a4>)
 8000604:	f000 fd8e 	bl	8001124 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000608:	4603      	mov	r3, r0
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <main+0x2d0>)
 800060c:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main+0x2d0>)
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <main+0x2cc>)
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <main+0x2c8>)
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <main+0x2a4>)
 8000616:	f000 fcab 	bl	8000f70 <HAL_CAN_AddTxMessage>
	  if(can1_rx0_flag)
 800061a:	e6ee      	b.n	80003fa <main+0x7e>
 800061c:	2000008c 	.word	0x2000008c
 8000620:	200000fc 	.word	0x200000fc
 8000624:	20000129 	.word	0x20000129
 8000628:	200000b4 	.word	0x200000b4
 800062c:	08003c1c 	.word	0x08003c1c
 8000630:	20000130 	.word	0x20000130
 8000634:	200000e8 	.word	0x200000e8
 8000638:	08003c2c 	.word	0x08003c2c
 800063c:	08003c40 	.word	0x08003c40
 8000640:	20000125 	.word	0x20000125
 8000644:	200000d0 	.word	0x200000d0
 8000648:	200000f4 	.word	0x200000f4
 800064c:	200000f0 	.word	0x200000f0
 8000650:	20000126 	.word	0x20000126
 8000654:	20000127 	.word	0x20000127
 8000658:	20000128 	.word	0x20000128

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	; 0x40
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fe48 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800069a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fcaf 	bl	8002008 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006b0:	f000 f87c 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 ff1c 	bl	800250c <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006da:	f000 f867 	bl	80007ac <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3740      	adds	r7, #64	; 0x40
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a17      	ldr	r2, [pc, #92]	; (8000754 <HAL_UART_RxCpltCallback+0x6c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d127      	bne.n	800074a <HAL_UART_RxCpltCallback+0x62>
	{
		HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	4916      	ldr	r1, [pc, #88]	; (8000758 <HAL_UART_RxCpltCallback+0x70>)
 80006fe:	4817      	ldr	r0, [pc, #92]	; (800075c <HAL_UART_RxCpltCallback+0x74>)
 8000700:	f002 f97b 	bl	80029fa <HAL_UART_Receive_IT>

		if(uart_rx_data == 1)
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_UART_RxCpltCallback+0x70>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b01      	cmp	r3, #1
 800070c:	d103      	bne.n	8000716 <HAL_UART_RxCpltCallback+0x2e>
		{
			SW1_flag = 1;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_UART_RxCpltCallback+0x78>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
		else if(uart_rx_data == 4)
		{
			SW4_flag = 1;
		}
	}
}
 8000714:	e019      	b.n	800074a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data  == 2)
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_UART_RxCpltCallback+0x70>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b02      	cmp	r3, #2
 800071e:	d103      	bne.n	8000728 <HAL_UART_RxCpltCallback+0x40>
			SW2_flag = 1;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_UART_RxCpltCallback+0x7c>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	e010      	b.n	800074a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == 3)
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_UART_RxCpltCallback+0x70>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b03      	cmp	r3, #3
 8000730:	d103      	bne.n	800073a <HAL_UART_RxCpltCallback+0x52>
			SW3_flag = 1;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_UART_RxCpltCallback+0x80>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
}
 8000738:	e007      	b.n	800074a <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == 4)
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_UART_RxCpltCallback+0x70>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b04      	cmp	r3, #4
 8000742:	d102      	bne.n	800074a <HAL_UART_RxCpltCallback+0x62>
			SW4_flag = 1;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_UART_RxCpltCallback+0x84>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40013800 	.word	0x40013800
 8000758:	20000124 	.word	0x20000124
 800075c:	20000130 	.word	0x20000130
 8000760:	20000125 	.word	0x20000125
 8000764:	20000126 	.word	0x20000126
 8000768:	20000127 	.word	0x20000127
 800076c:	20000128 	.word	0x20000128

08000770 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d108      	bne.n	8000794 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 8000782:	1d38      	adds	r0, r7, #4
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000788:	2100      	movs	r1, #0
 800078a:	f000 fcff 	bl	800118c <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
	}
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40006400 	.word	0x40006400
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	200000b4 	.word	0x200000b4
 80007a8:	20000129 	.word	0x20000129

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_MspInit+0x5c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x5c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_MspInit+0x60>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_MspInit+0x60>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f93d 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <CAN1_RX1_IRQHandler+0x10>)
 8000872:	f000 fdc1 	bl	80013f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000fc 	.word	0x200000fc

08000880 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <USART1_IRQHandler+0x10>)
 8000886:	f002 f8e9 	bl	8002a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000130 	.word	0x20000130

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f002 fcf2 	bl	80032ac <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000c000 	.word	0x2000c000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	2000012c 	.word	0x2000012c
 80008fc:	20000188 	.word	0x20000188

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART1_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x4c>)
 8000944:	f001 ff7a 	bl	800283c <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f7ff ff2d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000130 	.word	0x20000130
 800095c:	40013800 	.word	0x40013800

08000960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_UART_MspInit+0x9c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d139      	bne.n	80009f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0xa0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <HAL_UART_MspInit+0xa4>)
 80009c6:	f001 f98b 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_UART_MspInit+0xa4>)
 80009e0:	f001 f97e 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2025      	movs	r0, #37	; 0x25
 80009ea:	f001 f800 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ee:	2025      	movs	r0, #37	; 0x25
 80009f0:	f001 f819 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2e:	f7ff ff67 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 fc41 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fca1 	bl	800037c <main>
  bx lr
 8000a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a44:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8000a48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a4c:	20000188 	.word	0x20000188

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 ffb7 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fea2 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 ffcf 	bl	8001a42 <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 ff97 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000174 	.word	0x20000174

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000174 	.word	0x20000174

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e0ed      	b.n	8000d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fb86 	bl	8000290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 0201 	orr.w	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b94:	f7ff ffb6 	bl	8000b04 <HAL_GetTick>
 8000b98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b9a:	e012      	b.n	8000bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b9c:	f7ff ffb2 	bl	8000b04 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b0a      	cmp	r3, #10
 8000ba8:	d90b      	bls.n	8000bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2205      	movs	r2, #5
 8000bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e0c5      	b.n	8000d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0e5      	beq.n	8000b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0202 	bic.w	r2, r2, #2
 8000bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be0:	f7ff ff90 	bl	8000b04 <HAL_GetTick>
 8000be4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000be6:	e012      	b.n	8000c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000be8:	f7ff ff8c 	bl	8000b04 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b0a      	cmp	r3, #10
 8000bf4:	d90b      	bls.n	8000c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2205      	movs	r2, #5
 8000c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e09f      	b.n	8000d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1e5      	bne.n	8000be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7e1b      	ldrb	r3, [r3, #24]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e007      	b.n	8000c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7e5b      	ldrb	r3, [r3, #25]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d108      	bne.n	8000c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e007      	b.n	8000c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7e9b      	ldrb	r3, [r3, #26]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d108      	bne.n	8000c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0220 	orr.w	r2, r2, #32
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e007      	b.n	8000c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0220 	bic.w	r2, r2, #32
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7edb      	ldrb	r3, [r3, #27]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d108      	bne.n	8000cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0210 	bic.w	r2, r2, #16
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0210 	orr.w	r2, r2, #16
 8000cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7f1b      	ldrb	r3, [r3, #28]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d108      	bne.n	8000cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0208 	orr.w	r2, r2, #8
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0208 	bic.w	r2, r2, #8
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7f5b      	ldrb	r3, [r3, #29]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0204 	orr.w	r2, r2, #4
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e007      	b.n	8000d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0204 	bic.w	r2, r2, #4
 8000d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	ea42 0103 	orr.w	r1, r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b087      	sub	sp, #28
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d6e:	7cfb      	ldrb	r3, [r7, #19]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d003      	beq.n	8000d7c <HAL_CAN_ConfigFilter+0x26>
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	f040 80aa 	bne.w	8000ed0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	2201      	movs	r2, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d123      	bne.n	8000dfe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3248      	adds	r2, #72	; 0x48
 8000dde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000df2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df4:	6979      	ldr	r1, [r7, #20]
 8000df6:	3348      	adds	r3, #72	; 0x48
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d122      	bne.n	8000e4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3248      	adds	r2, #72	; 0x48
 8000e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e42:	6979      	ldr	r1, [r7, #20]
 8000e44:	3348      	adds	r3, #72	; 0x48
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d107      	bne.n	8000ebc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ec2:	f023 0201 	bic.w	r2, r3, #1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e006      	b.n	8000ede <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d12e      	bne.n	8000f5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fdf6 	bl	8000b04 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f1a:	e012      	b.n	8000f42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f1c:	f7ff fdf2 	bl	8000b04 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e012      	b.n	8000f68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e5      	bne.n	8000f1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e006      	b.n	8000f68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
  }
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d003      	beq.n	8000f9c <HAL_CAN_AddTxMessage+0x2c>
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	f040 80b8 	bne.w	800110c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80a0 	beq.w	80010fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	0e1b      	lsrs	r3, r3, #24
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d907      	bls.n	8000fdc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e09e      	b.n	800111a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ff8:	68f9      	ldr	r1, [r7, #12]
 8000ffa:	6809      	ldr	r1, [r1, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3318      	adds	r3, #24
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	440b      	add	r3, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e00f      	b.n	800102a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001014:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800101a:	68f9      	ldr	r1, [r7, #12]
 800101c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800101e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3318      	adds	r3, #24
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3318      	adds	r3, #24
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3304      	adds	r3, #4
 800103c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	7d1b      	ldrb	r3, [r3, #20]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d111      	bne.n	800106a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3318      	adds	r3, #24
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4413      	add	r3, r2
 8001052:	3304      	adds	r3, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	6811      	ldr	r1, [r2, #0]
 800105a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3318      	adds	r3, #24
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	3304      	adds	r3, #4
 8001068:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3307      	adds	r3, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	061a      	lsls	r2, r3, #24
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3306      	adds	r3, #6
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	041b      	lsls	r3, r3, #16
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3305      	adds	r3, #5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	4313      	orrs	r3, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	3204      	adds	r2, #4
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	4610      	mov	r0, r2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	6811      	ldr	r1, [r2, #0]
 8001092:	ea43 0200 	orr.w	r2, r3, r0
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	440b      	add	r3, r1
 800109c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3303      	adds	r3, #3
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	061a      	lsls	r2, r3, #24
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3302      	adds	r3, #2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3301      	adds	r3, #1
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	4313      	orrs	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4610      	mov	r0, r2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	6811      	ldr	r1, [r2, #0]
 80010c8:	ea43 0200 	orr.w	r2, r3, r0
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	440b      	add	r3, r1
 80010d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3318      	adds	r3, #24
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	6811      	ldr	r1, [r2, #0]
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3318      	adds	r3, #24
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	440b      	add	r3, r1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e00e      	b.n	800111a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e006      	b.n	800111a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d002      	beq.n	8001144 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800113e:	7afb      	ldrb	r3, [r7, #11]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d11d      	bne.n	8001180 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d003      	beq.n	80011b0 <HAL_CAN_GetRxMessage+0x24>
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	f040 80f3 	bne.w	8001396 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d116      	bne.n	80011f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0e7      	b.n	80013a4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0d8      	b.n	80013a4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	331b      	adds	r3, #27
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0204 	and.w	r2, r3, #4
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10c      	bne.n	800122a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	331b      	adds	r3, #27
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0d5b      	lsrs	r3, r3, #21
 8001220:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e00b      	b.n	8001242 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	331b      	adds	r3, #27
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	331b      	adds	r3, #27
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0202 	and.w	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	331b      	adds	r3, #27
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	3304      	adds	r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 020f 	and.w	r2, r3, #15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	331b      	adds	r3, #27
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	3304      	adds	r3, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b2da      	uxtb	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	331b      	adds	r3, #27
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0a1a      	lsrs	r2, r3, #8
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0c1a      	lsrs	r2, r3, #16
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3302      	adds	r3, #2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0e1a      	lsrs	r2, r3, #24
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3303      	adds	r3, #3
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3304      	adds	r3, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0a1a      	lsrs	r2, r3, #8
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3305      	adds	r3, #5
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0c1a      	lsrs	r2, r3, #16
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3306      	adds	r3, #6
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0e1a      	lsrs	r2, r3, #24
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3307      	adds	r3, #7
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d108      	bne.n	8001382 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0220 	orr.w	r2, r2, #32
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	e007      	b.n	8001392 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0220 	orr.w	r2, r2, #32
 8001390:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e006      	b.n	80013a4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d002      	beq.n	80013cc <HAL_CAN_ActivateNotification+0x1e>
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d109      	bne.n	80013e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6959      	ldr	r1, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e006      	b.n	80013ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
  }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d07c      	beq.n	8001538 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f983 	bl	8001766 <HAL_CAN_TxMailbox0CompleteCallback>
 8001460:	e016      	b.n	8001490 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e00c      	b.n	8001490 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e002      	b.n	8001490 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f986 	bl	800179c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f962 	bl	8001778 <HAL_CAN_TxMailbox1CompleteCallback>
 80014b4:	e016      	b.n	80014e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	e00c      	b.n	80014e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e002      	b.n	80014e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f965 	bl	80017ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d024      	beq.n	8001538 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f941 	bl	800178a <HAL_CAN_TxMailbox2CompleteCallback>
 8001508:	e016      	b.n	8001538 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
 800151c:	e00c      	b.n	8001538 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	e002      	b.n	8001538 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f944 	bl	80017c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00c      	beq.n	800155c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2210      	movs	r2, #16
 800155a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2208      	movs	r2, #8
 8001576:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f92a 	bl	80017d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff f8ea 	bl	8000770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2210      	movs	r2, #16
 80015be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2208      	movs	r2, #8
 80015da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f90a 	bl	80017f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8f2 	bl	80017e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2210      	movs	r2, #16
 800161a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8f3 	bl	8001808 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2208      	movs	r2, #8
 800163c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f8eb 	bl	800181a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d07b      	beq.n	8001746 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d072      	beq.n	800173e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d043      	beq.n	800173e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03e      	beq.n	800173e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016c6:	2b60      	cmp	r3, #96	; 0x60
 80016c8:	d02b      	beq.n	8001722 <HAL_CAN_IRQHandler+0x32a>
 80016ca:	2b60      	cmp	r3, #96	; 0x60
 80016cc:	d82e      	bhi.n	800172c <HAL_CAN_IRQHandler+0x334>
 80016ce:	2b50      	cmp	r3, #80	; 0x50
 80016d0:	d022      	beq.n	8001718 <HAL_CAN_IRQHandler+0x320>
 80016d2:	2b50      	cmp	r3, #80	; 0x50
 80016d4:	d82a      	bhi.n	800172c <HAL_CAN_IRQHandler+0x334>
 80016d6:	2b40      	cmp	r3, #64	; 0x40
 80016d8:	d019      	beq.n	800170e <HAL_CAN_IRQHandler+0x316>
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d826      	bhi.n	800172c <HAL_CAN_IRQHandler+0x334>
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d010      	beq.n	8001704 <HAL_CAN_IRQHandler+0x30c>
 80016e2:	2b30      	cmp	r3, #48	; 0x30
 80016e4:	d822      	bhi.n	800172c <HAL_CAN_IRQHandler+0x334>
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d002      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x2f8>
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d005      	beq.n	80016fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016ee:	e01d      	b.n	800172c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016f8:	e019      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001702:	e014      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800170c:	e00f      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001716:	e00a      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001720:	e005      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800172a:	e000      	b.n	800172e <HAL_CAN_IRQHandler+0x336>
            break;
 800172c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800173c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2204      	movs	r2, #4
 8001744:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f867 	bl	800182c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
	...

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <__NVIC_EnableIRQ+0x34>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff90 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff2d 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff42 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff35 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e020      	b.n	8001ac4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 020e 	bic.w	r2, r2, #14
 8001a90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d005      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e0d6      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 020e 	bic.w	r2, r2, #14
 8001b00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_DMA_Abort_IT+0x1dc>)
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d958      	bls.n	8001bd0 <HAL_DMA_Abort_IT+0x100>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_DMA_Abort_IT+0x1e0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04f      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xf8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a61      	ldr	r2, [pc, #388]	; (8001cb4 <HAL_DMA_Abort_IT+0x1e4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d048      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0xf4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_DMA_Abort_IT+0x1e8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d040      	beq.n	8001bbe <HAL_DMA_Abort_IT+0xee>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_DMA_Abort_IT+0x1ec>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d038      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0xe8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_DMA_Abort_IT+0x1f0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d030      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0xe2>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5b      	ldr	r2, [pc, #364]	; (8001cc4 <HAL_DMA_Abort_IT+0x1f4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d028      	beq.n	8001bac <HAL_DMA_Abort_IT+0xdc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_DMA_Abort_IT+0x1dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d020      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0xd6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_DMA_Abort_IT+0x1f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0xd2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <HAL_DMA_Abort_IT+0x1fc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d012      	beq.n	8001b9e <HAL_DMA_Abort_IT+0xce>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_DMA_Abort_IT+0x200>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00a      	beq.n	8001b98 <HAL_DMA_Abort_IT+0xc8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a53      	ldr	r2, [pc, #332]	; (8001cd4 <HAL_DMA_Abort_IT+0x204>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d102      	bne.n	8001b92 <HAL_DMA_Abort_IT+0xc2>
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	e01b      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b96:	e018      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9c:	e015      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	e013      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e011      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001baa:	e00e      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bb0:	e00b      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	e005      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	e002      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	e000      	b.n	8001bca <HAL_DMA_Abort_IT+0xfa>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_DMA_Abort_IT+0x208>)
 8001bcc:	6053      	str	r3, [r2, #4]
 8001bce:	e057      	b.n	8001c80 <HAL_DMA_Abort_IT+0x1b0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <HAL_DMA_Abort_IT+0x1e0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d04f      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x1aa>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <HAL_DMA_Abort_IT+0x1e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d048      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x1a6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <HAL_DMA_Abort_IT+0x1e8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d040      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x1a0>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <HAL_DMA_Abort_IT+0x1ec>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d038      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x19a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_DMA_Abort_IT+0x1f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d030      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x194>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <HAL_DMA_Abort_IT+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d028      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x18e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_DMA_Abort_IT+0x1dc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d020      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x188>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <HAL_DMA_Abort_IT+0x1f8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d019      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x184>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_DMA_Abort_IT+0x1fc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d012      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x180>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_DMA_Abort_IT+0x200>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00a      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x17a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_DMA_Abort_IT+0x204>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d102      	bne.n	8001c44 <HAL_DMA_Abort_IT+0x174>
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	e01b      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c48:	e018      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4e:	e015      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c50:	2310      	movs	r3, #16
 8001c52:	e013      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e011      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c5c:	e00e      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c62:	e00b      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c68:	e008      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	e005      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	e002      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c76:	2310      	movs	r3, #16
 8001c78:	e000      	b.n	8001c7c <HAL_DMA_Abort_IT+0x1ac>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_DMA_Abort_IT+0x20c>)
 8001c7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020080 	.word	0x40020080
 8001cb0:	40020008 	.word	0x40020008
 8001cb4:	4002001c 	.word	0x4002001c
 8001cb8:	40020030 	.word	0x40020030
 8001cbc:	40020044 	.word	0x40020044
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	4002006c 	.word	0x4002006c
 8001cc8:	40020408 	.word	0x40020408
 8001ccc:	4002041c 	.word	0x4002041c
 8001cd0:	40020430 	.word	0x40020430
 8001cd4:	40020444 	.word	0x40020444
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e179      	b.n	8001fe8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8168 	bne.w	8001fe2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a96      	ldr	r2, [pc, #600]	; (8001f70 <HAL_GPIO_Init+0x290>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d1c:	4a94      	ldr	r2, [pc, #592]	; (8001f70 <HAL_GPIO_Init+0x290>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d875      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d22:	4a94      	ldr	r2, [pc, #592]	; (8001f74 <HAL_GPIO_Init+0x294>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d058      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d28:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_GPIO_Init+0x294>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d86f      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d2e:	4a92      	ldr	r2, [pc, #584]	; (8001f78 <HAL_GPIO_Init+0x298>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d052      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d34:	4a90      	ldr	r2, [pc, #576]	; (8001f78 <HAL_GPIO_Init+0x298>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d869      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d3a:	4a90      	ldr	r2, [pc, #576]	; (8001f7c <HAL_GPIO_Init+0x29c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04c      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d40:	4a8e      	ldr	r2, [pc, #568]	; (8001f7c <HAL_GPIO_Init+0x29c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d863      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d46:	4a8e      	ldr	r2, [pc, #568]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d046      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d4c:	4a8c      	ldr	r2, [pc, #560]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d85d      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d82a      	bhi.n	8001dac <HAL_GPIO_Init+0xcc>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d859      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_GPIO_Init+0x80>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001e09 	.word	0x08001e09
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001e0f 	.word	0x08001e0f
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e0f 	.word	0x08001e0f
 8001d8c:	08001e0f 	.word	0x08001e0f
 8001d90:	08001e0f 	.word	0x08001e0f
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e0f 	.word	0x08001e0f
 8001da0:	08001e0f 	.word	0x08001e0f
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db2:	e02c      	b.n	8001e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e029      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e024      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e01f      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e01a      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	2304      	movs	r3, #4
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e013      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	611a      	str	r2, [r3, #16]
          break;
 8001dfa:	e009      	b.n	8001e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	615a      	str	r2, [r3, #20]
          break;
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          break;
 8001e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d801      	bhi.n	8001e1a <HAL_GPIO_Init+0x13a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_Init+0x13e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d802      	bhi.n	8001e2c <HAL_GPIO_Init+0x14c>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x152>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	210f      	movs	r1, #15
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80c1 	beq.w	8001fe2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e60:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01f      	beq.n	8001ee4 <HAL_GPIO_Init+0x204>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_GPIO_Init+0x2b4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d019      	beq.n	8001ee0 <HAL_GPIO_Init+0x200>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_GPIO_Init+0x1fc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00d      	beq.n	8001ed8 <HAL_GPIO_Init+0x1f8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_GPIO_Init+0x2c0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a37      	ldr	r2, [pc, #220]	; (8001fa4 <HAL_GPIO_Init+0x2c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_GPIO_Init+0x1f0>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e00a      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	e008      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e004      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_GPIO_Init+0x206>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	f002 0203 	and.w	r2, r2, #3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4093      	lsls	r3, r2
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef6:	4925      	ldr	r1, [pc, #148]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4924      	ldr	r1, [pc, #144]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4920      	ldr	r1, [pc, #128]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	491a      	ldr	r1, [pc, #104]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d025      	beq.n	8001fac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4910      	ldr	r1, [pc, #64]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
 8001f6c:	e025      	b.n	8001fba <HAL_GPIO_Init+0x2da>
 8001f6e:	bf00      	nop
 8001f70:	10320000 	.word	0x10320000
 8001f74:	10310000 	.word	0x10310000
 8001f78:	10220000 	.word	0x10220000
 8001f7c:	10210000 	.word	0x10210000
 8001f80:	10120000 	.word	0x10120000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40010800 	.word	0x40010800
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40011400 	.word	0x40011400
 8001fa0:	40011800 	.word	0x40011800
 8001fa4:	40011c00 	.word	0x40011c00
 8001fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4913      	ldr	r1, [pc, #76]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	4909      	ldr	r1, [pc, #36]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f47f ae7e 	bne.w	8001cf4 <HAL_GPIO_Init+0x14>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	372c      	adds	r7, #44	; 0x2c
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e272      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e24c      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fd0e 	bl	8000b04 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe fd0a 	bl	8000b04 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e200      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fcfa 	bl	8000b04 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe fcf6 	bl	8000b04 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ec      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1c0      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fcaf 	bl	8000b04 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7fe fcab 	bl	8000b04 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1a1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fc8e 	bl	8000b04 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fc8a 	bl	8000b04 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e180      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe fc6e 	bl	8000b04 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe fc6a 	bl	8000b04 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e160      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fad8 	bl	8002800 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe fc54 	bl	8000b04 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe fc50 	bl	8000b04 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e146      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b92      	ldr	r3, [pc, #584]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a87      	ldr	r2, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b85      	ldr	r3, [pc, #532]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b82      	ldr	r3, [pc, #520]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fc11 	bl	8000b04 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fc0d 	bl	8000b04 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e103      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a66      	ldr	r2, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a60      	ldr	r2, [pc, #384]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b5e      	ldr	r3, [pc, #376]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a5a      	ldr	r2, [pc, #360]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fbc1 	bl	8000b04 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fbbd 	bl	8000b04 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0b1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fbab 	bl	8000b04 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fba7 	bl	8000b04 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fb7b 	bl	8000b04 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fb77 	bl	8000b04 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e06d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4921      	ldr	r1, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	491b      	ldr	r1, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fb4b 	bl	8000b04 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe fb47 	bl	8000b04 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e035      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fb34 	bl	8000b04 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fb30 	bl	8000b04 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e019      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fa82 	bl	8000b04 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fa7e 	bl	8000b04 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe f9e0 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08003c54 	.word	0x08003c54
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b490      	push	{r4, r7}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_GetSysClockFreq+0xac>)
 80026e8:	1d3c      	adds	r4, r7, #4
 80026ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f0:	f240 2301 	movw	r3, #513	; 0x201
 80026f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x46>
 800271e:	e02b      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	e02b      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3328      	adds	r3, #40	; 0x28
 8002730:	443b      	add	r3, r7
 8002732:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002736:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	3328      	adds	r3, #40	; 0x28
 800274e:	443b      	add	r3, r7
 8002750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800275a:	fb03 f202 	mul.w	r2, r3, r2
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	623b      	str	r3, [r7, #32]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6a3b      	ldr	r3, [r7, #32]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc90      	pop	{r4, r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	08003c44 	.word	0x08003c44
 8002790:	40021000 	.word	0x40021000
 8002794:	007a1200 	.word	0x007a1200
 8002798:	003d0900 	.word	0x003d0900

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_RCC_GetHCLKFreq+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff2 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08003c64 	.word	0x08003c64

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffde 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08003c64 	.word	0x08003c64

08002800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <RCC_Delay+0x34>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <RCC_Delay+0x38>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800281c:	bf00      	nop
  }
  while (Delay --);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <RCC_Delay+0x1c>
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000000 	.word	0x20000000
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e03f      	b.n	80028ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f87c 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fc85 	bl	8003190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b08a      	sub	sp, #40	; 0x28
 80028da:	af02      	add	r7, sp, #8
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d17c      	bne.n	80029f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_UART_Transmit+0x2c>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e075      	b.n	80029f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit+0x3e>
 8002910:	2302      	movs	r3, #2
 8002912:	e06e      	b.n	80029f2 <HAL_UART_Transmit+0x11c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292a:	f7fe f8eb 	bl	8000b04 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	d108      	bne.n	8002958 <HAL_UART_Transmit+0x82>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	e003      	b.n	8002960 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002968:	e02a      	b.n	80029c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa38 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e036      	b.n	80029f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10b      	bne.n	80029a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3302      	adds	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	e007      	b.n	80029b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1cf      	bne.n	800296a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fa08 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d11d      	bne.n	8002a50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_UART_Receive_IT+0x26>
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e016      	b.n	8002a52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Receive_IT+0x38>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e00f      	b.n	8002a52 <HAL_UART_Receive_IT+0x58>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa19 	bl	8002e7e <UART_Start_Receive_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x52>
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fac9 	bl	800303e <UART_Receive_IT>
      return;
 8002aac:	e17b      	b.n	8002da6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80b1 	beq.w	8002c18 <HAL_UART_IRQHandler+0x1bc>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_UART_IRQHandler+0x70>
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80a6 	beq.w	8002c18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_UART_IRQHandler+0x90>
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_UART_IRQHandler+0xb0>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_UART_IRQHandler+0xd0>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00f      	beq.n	8002b56 <HAL_UART_IRQHandler+0xfa>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_UART_IRQHandler+0xee>
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0208 	orr.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 811e 	beq.w	8002d9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_UART_IRQHandler+0x11e>
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa62 	bl	800303e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x146>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d031      	beq.n	8002c06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9a4 	bl	8002ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d023      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_UART_IRQHandler+0x350>)
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe ff78 	bl	8001ad0 <HAL_DMA_Abort_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e00e      	b.n	8002c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8e3 	bl	8002dc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e00a      	b.n	8002c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8df 	bl	8002dc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	e006      	b.n	8002c14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8db 	bl	8002dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c12:	e0c3      	b.n	8002d9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	bf00      	nop
    return;
 8002c16:	e0c1      	b.n	8002d9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 80a1 	bne.w	8002d64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 809b 	beq.w	8002d64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8095 	beq.w	8002d64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04e      	beq.n	8002cfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c68:	8a3b      	ldrh	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8098 	beq.w	8002da0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c74:	8a3a      	ldrh	r2, [r7, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f080 8092 	bcs.w	8002da0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8a3a      	ldrh	r2, [r7, #16]
 8002c80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d02b      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0210 	bic.w	r2, r2, #16
 8002cd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe febb 	bl	8001a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f86d 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cfa:	e051      	b.n	8002da0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d047      	beq.n	8002da4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d14:	8a7b      	ldrh	r3, [r7, #18]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0210 	bic.w	r2, r2, #16
 8002d56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d58:	8a7b      	ldrh	r3, [r7, #18]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f839 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d62:	e01f      	b.n	8002da4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_UART_IRQHandler+0x324>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8f9 	bl	8002f70 <UART_Transmit_IT>
    return;
 8002d7e:	e012      	b.n	8002da6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <HAL_UART_IRQHandler+0x34a>
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f93a 	bl	800300e <UART_EndTransmit_IT>
    return;
 8002d9a:	e004      	b.n	8002da6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002da4:	bf00      	nop
  }
}
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08002f49 	.word	0x08002f49

08002db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	e02c      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d028      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e0a:	f7fd fe7b 	bl	8000b04 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d21d      	bcs.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d0c3      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2222      	movs	r2, #34	; 0x22
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0210 	bic.w	r2, r2, #16
 8002f2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff ff2d 	bl	8002dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b21      	cmp	r3, #33	; 0x21
 8002f82:	d13e      	bne.n	8003002 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d114      	bne.n	8002fb8 <UART_Transmit_IT+0x48>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d110      	bne.n	8002fb8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002faa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]
 8002fb6:	e008      	b.n	8002fca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6211      	str	r1, [r2, #32]
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003024:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff febe 	bl	8002db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b22      	cmp	r3, #34	; 0x22
 8003050:	f040 8099 	bne.w	8003186 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305c:	d117      	bne.n	800308e <UART_Receive_IT+0x50>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d113      	bne.n	800308e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307c:	b29a      	uxth	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e026      	b.n	80030dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a0:	d007      	beq.n	80030b2 <UART_Receive_IT+0x74>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <UART_Receive_IT+0x82>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e008      	b.n	80030d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d148      	bne.n	8003182 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	2b01      	cmp	r3, #1
 800312e:	d123      	bne.n	8003178 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0210 	bic.w	r2, r2, #16
 8003144:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	d10a      	bne.n	800316a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fe2f 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
 8003176:	e002      	b.n	800317e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd fab5 	bl	80006e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e002      	b.n	8003188 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ca:	f023 030c 	bic.w	r3, r3, #12
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <UART_SetConfig+0x114>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d103      	bne.n	8003200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031f8:	f7ff faee 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	e002      	b.n	8003206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff fad6 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <UART_SetConfig+0x118>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	0119      	lsls	r1, r3, #4
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <UART_SetConfig+0x118>)
 800323e:	fba3 0302 	umull	r0, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2064      	movs	r0, #100	; 0x64
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	; 0x32
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <UART_SetConfig+0x118>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325c:	4419      	add	r1, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009a      	lsls	r2, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	fbb2 f2f3 	udiv	r2, r2, r3
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <UART_SetConfig+0x118>)
 8003276:	fba3 0302 	umull	r0, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2064      	movs	r0, #100	; 0x64
 800327e:	fb00 f303 	mul.w	r3, r0, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	3332      	adds	r3, #50	; 0x32
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <UART_SetConfig+0x118>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	440a      	add	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013800 	.word	0x40013800
 80032a8:	51eb851f 	.word	0x51eb851f

080032ac <__errno>:
 80032ac:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <__errno+0x8>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	2600      	movs	r6, #0
 80032bc:	4d0c      	ldr	r5, [pc, #48]	; (80032f0 <__libc_init_array+0x38>)
 80032be:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032c0:	1b64      	subs	r4, r4, r5
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	f000 fc9c 	bl	8003c04 <_init>
 80032cc:	2600      	movs	r6, #0
 80032ce:	4d0a      	ldr	r5, [pc, #40]	; (80032f8 <__libc_init_array+0x40>)
 80032d0:	4c0a      	ldr	r4, [pc, #40]	; (80032fc <__libc_init_array+0x44>)
 80032d2:	1b64      	subs	r4, r4, r5
 80032d4:	10a4      	asrs	r4, r4, #2
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	08003ca0 	.word	0x08003ca0
 80032f4:	08003ca0 	.word	0x08003ca0
 80032f8:	08003ca0 	.word	0x08003ca0
 80032fc:	08003ca4 	.word	0x08003ca4

08003300 <memset>:
 8003300:	4603      	mov	r3, r0
 8003302:	4402      	add	r2, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <siprintf>:
 8003310:	b40e      	push	{r1, r2, r3}
 8003312:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003316:	b500      	push	{lr}
 8003318:	b09c      	sub	sp, #112	; 0x70
 800331a:	ab1d      	add	r3, sp, #116	; 0x74
 800331c:	9002      	str	r0, [sp, #8]
 800331e:	9006      	str	r0, [sp, #24]
 8003320:	9107      	str	r1, [sp, #28]
 8003322:	9104      	str	r1, [sp, #16]
 8003324:	4808      	ldr	r0, [pc, #32]	; (8003348 <siprintf+0x38>)
 8003326:	4909      	ldr	r1, [pc, #36]	; (800334c <siprintf+0x3c>)
 8003328:	f853 2b04 	ldr.w	r2, [r3], #4
 800332c:	9105      	str	r1, [sp, #20]
 800332e:	6800      	ldr	r0, [r0, #0]
 8003330:	a902      	add	r1, sp, #8
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	f000 f868 	bl	8003408 <_svfiprintf_r>
 8003338:	2200      	movs	r2, #0
 800333a:	9b02      	ldr	r3, [sp, #8]
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	b01c      	add	sp, #112	; 0x70
 8003340:	f85d eb04 	ldr.w	lr, [sp], #4
 8003344:	b003      	add	sp, #12
 8003346:	4770      	bx	lr
 8003348:	2000000c 	.word	0x2000000c
 800334c:	ffff0208 	.word	0xffff0208

08003350 <__ssputs_r>:
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	688e      	ldr	r6, [r1, #8]
 8003356:	4682      	mov	sl, r0
 8003358:	429e      	cmp	r6, r3
 800335a:	460c      	mov	r4, r1
 800335c:	4690      	mov	r8, r2
 800335e:	461f      	mov	r7, r3
 8003360:	d838      	bhi.n	80033d4 <__ssputs_r+0x84>
 8003362:	898a      	ldrh	r2, [r1, #12]
 8003364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003368:	d032      	beq.n	80033d0 <__ssputs_r+0x80>
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	6909      	ldr	r1, [r1, #16]
 800336e:	3301      	adds	r3, #1
 8003370:	eba5 0901 	sub.w	r9, r5, r1
 8003374:	6965      	ldr	r5, [r4, #20]
 8003376:	444b      	add	r3, r9
 8003378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800337c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003380:	106d      	asrs	r5, r5, #1
 8003382:	429d      	cmp	r5, r3
 8003384:	bf38      	it	cc
 8003386:	461d      	movcc	r5, r3
 8003388:	0553      	lsls	r3, r2, #21
 800338a:	d531      	bpl.n	80033f0 <__ssputs_r+0xa0>
 800338c:	4629      	mov	r1, r5
 800338e:	f000 fb6f 	bl	8003a70 <_malloc_r>
 8003392:	4606      	mov	r6, r0
 8003394:	b950      	cbnz	r0, 80033ac <__ssputs_r+0x5c>
 8003396:	230c      	movs	r3, #12
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f8ca 3000 	str.w	r3, [sl]
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ac:	464a      	mov	r2, r9
 80033ae:	6921      	ldr	r1, [r4, #16]
 80033b0:	f000 face 	bl	8003950 <memcpy>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	6126      	str	r6, [r4, #16]
 80033c2:	444e      	add	r6, r9
 80033c4:	6026      	str	r6, [r4, #0]
 80033c6:	463e      	mov	r6, r7
 80033c8:	6165      	str	r5, [r4, #20]
 80033ca:	eba5 0509 	sub.w	r5, r5, r9
 80033ce:	60a5      	str	r5, [r4, #8]
 80033d0:	42be      	cmp	r6, r7
 80033d2:	d900      	bls.n	80033d6 <__ssputs_r+0x86>
 80033d4:	463e      	mov	r6, r7
 80033d6:	4632      	mov	r2, r6
 80033d8:	4641      	mov	r1, r8
 80033da:	6820      	ldr	r0, [r4, #0]
 80033dc:	f000 fac6 	bl	800396c <memmove>
 80033e0:	68a3      	ldr	r3, [r4, #8]
 80033e2:	2000      	movs	r0, #0
 80033e4:	1b9b      	subs	r3, r3, r6
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	4433      	add	r3, r6
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	e7db      	b.n	80033a8 <__ssputs_r+0x58>
 80033f0:	462a      	mov	r2, r5
 80033f2:	f000 fbb1 	bl	8003b58 <_realloc_r>
 80033f6:	4606      	mov	r6, r0
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d1e1      	bne.n	80033c0 <__ssputs_r+0x70>
 80033fc:	4650      	mov	r0, sl
 80033fe:	6921      	ldr	r1, [r4, #16]
 8003400:	f000 face 	bl	80039a0 <_free_r>
 8003404:	e7c7      	b.n	8003396 <__ssputs_r+0x46>
	...

08003408 <_svfiprintf_r>:
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	4698      	mov	r8, r3
 800340e:	898b      	ldrh	r3, [r1, #12]
 8003410:	4607      	mov	r7, r0
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	460d      	mov	r5, r1
 8003416:	4614      	mov	r4, r2
 8003418:	b09d      	sub	sp, #116	; 0x74
 800341a:	d50e      	bpl.n	800343a <_svfiprintf_r+0x32>
 800341c:	690b      	ldr	r3, [r1, #16]
 800341e:	b963      	cbnz	r3, 800343a <_svfiprintf_r+0x32>
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	f000 fb25 	bl	8003a70 <_malloc_r>
 8003426:	6028      	str	r0, [r5, #0]
 8003428:	6128      	str	r0, [r5, #16]
 800342a:	b920      	cbnz	r0, 8003436 <_svfiprintf_r+0x2e>
 800342c:	230c      	movs	r3, #12
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	e0d1      	b.n	80035da <_svfiprintf_r+0x1d2>
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	616b      	str	r3, [r5, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	2320      	movs	r3, #32
 8003440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003444:	2330      	movs	r3, #48	; 0x30
 8003446:	f04f 0901 	mov.w	r9, #1
 800344a:	f8cd 800c 	str.w	r8, [sp, #12]
 800344e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035f4 <_svfiprintf_r+0x1ec>
 8003452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003456:	4623      	mov	r3, r4
 8003458:	469a      	mov	sl, r3
 800345a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800345e:	b10a      	cbz	r2, 8003464 <_svfiprintf_r+0x5c>
 8003460:	2a25      	cmp	r2, #37	; 0x25
 8003462:	d1f9      	bne.n	8003458 <_svfiprintf_r+0x50>
 8003464:	ebba 0b04 	subs.w	fp, sl, r4
 8003468:	d00b      	beq.n	8003482 <_svfiprintf_r+0x7a>
 800346a:	465b      	mov	r3, fp
 800346c:	4622      	mov	r2, r4
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ff6d 	bl	8003350 <__ssputs_r>
 8003476:	3001      	adds	r0, #1
 8003478:	f000 80aa 	beq.w	80035d0 <_svfiprintf_r+0x1c8>
 800347c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800347e:	445a      	add	r2, fp
 8003480:	9209      	str	r2, [sp, #36]	; 0x24
 8003482:	f89a 3000 	ldrb.w	r3, [sl]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a2 	beq.w	80035d0 <_svfiprintf_r+0x1c8>
 800348c:	2300      	movs	r3, #0
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003496:	f10a 0a01 	add.w	sl, sl, #1
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	9307      	str	r3, [sp, #28]
 800349e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a2:	931a      	str	r3, [sp, #104]	; 0x68
 80034a4:	4654      	mov	r4, sl
 80034a6:	2205      	movs	r2, #5
 80034a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ac:	4851      	ldr	r0, [pc, #324]	; (80035f4 <_svfiprintf_r+0x1ec>)
 80034ae:	f000 fa41 	bl	8003934 <memchr>
 80034b2:	9a04      	ldr	r2, [sp, #16]
 80034b4:	b9d8      	cbnz	r0, 80034ee <_svfiprintf_r+0xe6>
 80034b6:	06d0      	lsls	r0, r2, #27
 80034b8:	bf44      	itt	mi
 80034ba:	2320      	movmi	r3, #32
 80034bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034c0:	0711      	lsls	r1, r2, #28
 80034c2:	bf44      	itt	mi
 80034c4:	232b      	movmi	r3, #43	; 0x2b
 80034c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d015      	beq.n	80034fe <_svfiprintf_r+0xf6>
 80034d2:	4654      	mov	r4, sl
 80034d4:	2000      	movs	r0, #0
 80034d6:	f04f 0c0a 	mov.w	ip, #10
 80034da:	9a07      	ldr	r2, [sp, #28]
 80034dc:	4621      	mov	r1, r4
 80034de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e2:	3b30      	subs	r3, #48	; 0x30
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d94e      	bls.n	8003586 <_svfiprintf_r+0x17e>
 80034e8:	b1b0      	cbz	r0, 8003518 <_svfiprintf_r+0x110>
 80034ea:	9207      	str	r2, [sp, #28]
 80034ec:	e014      	b.n	8003518 <_svfiprintf_r+0x110>
 80034ee:	eba0 0308 	sub.w	r3, r0, r8
 80034f2:	fa09 f303 	lsl.w	r3, r9, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	46a2      	mov	sl, r4
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	e7d2      	b.n	80034a4 <_svfiprintf_r+0x9c>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	1d19      	adds	r1, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfbb      	ittet	lt
 800350a:	425b      	neglt	r3, r3
 800350c:	f042 0202 	orrlt.w	r2, r2, #2
 8003510:	9307      	strge	r3, [sp, #28]
 8003512:	9307      	strlt	r3, [sp, #28]
 8003514:	bfb8      	it	lt
 8003516:	9204      	strlt	r2, [sp, #16]
 8003518:	7823      	ldrb	r3, [r4, #0]
 800351a:	2b2e      	cmp	r3, #46	; 0x2e
 800351c:	d10c      	bne.n	8003538 <_svfiprintf_r+0x130>
 800351e:	7863      	ldrb	r3, [r4, #1]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d135      	bne.n	8003590 <_svfiprintf_r+0x188>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	3402      	adds	r4, #2
 8003528:	1d1a      	adds	r2, r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9203      	str	r2, [sp, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	bfb8      	it	lt
 8003532:	f04f 33ff 	movlt.w	r3, #4294967295
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80035f8 <_svfiprintf_r+0x1f0>
 800353c:	2203      	movs	r2, #3
 800353e:	4650      	mov	r0, sl
 8003540:	7821      	ldrb	r1, [r4, #0]
 8003542:	f000 f9f7 	bl	8003934 <memchr>
 8003546:	b140      	cbz	r0, 800355a <_svfiprintf_r+0x152>
 8003548:	2340      	movs	r3, #64	; 0x40
 800354a:	eba0 000a 	sub.w	r0, r0, sl
 800354e:	fa03 f000 	lsl.w	r0, r3, r0
 8003552:	9b04      	ldr	r3, [sp, #16]
 8003554:	3401      	adds	r4, #1
 8003556:	4303      	orrs	r3, r0
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800355e:	2206      	movs	r2, #6
 8003560:	4826      	ldr	r0, [pc, #152]	; (80035fc <_svfiprintf_r+0x1f4>)
 8003562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003566:	f000 f9e5 	bl	8003934 <memchr>
 800356a:	2800      	cmp	r0, #0
 800356c:	d038      	beq.n	80035e0 <_svfiprintf_r+0x1d8>
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <_svfiprintf_r+0x1f8>)
 8003570:	bb1b      	cbnz	r3, 80035ba <_svfiprintf_r+0x1b2>
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	3307      	adds	r3, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	3308      	adds	r3, #8
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003580:	4433      	add	r3, r6
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
 8003584:	e767      	b.n	8003456 <_svfiprintf_r+0x4e>
 8003586:	460c      	mov	r4, r1
 8003588:	2001      	movs	r0, #1
 800358a:	fb0c 3202 	mla	r2, ip, r2, r3
 800358e:	e7a5      	b.n	80034dc <_svfiprintf_r+0xd4>
 8003590:	2300      	movs	r3, #0
 8003592:	f04f 0c0a 	mov.w	ip, #10
 8003596:	4619      	mov	r1, r3
 8003598:	3401      	adds	r4, #1
 800359a:	9305      	str	r3, [sp, #20]
 800359c:	4620      	mov	r0, r4
 800359e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a2:	3a30      	subs	r2, #48	; 0x30
 80035a4:	2a09      	cmp	r2, #9
 80035a6:	d903      	bls.n	80035b0 <_svfiprintf_r+0x1a8>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0c5      	beq.n	8003538 <_svfiprintf_r+0x130>
 80035ac:	9105      	str	r1, [sp, #20]
 80035ae:	e7c3      	b.n	8003538 <_svfiprintf_r+0x130>
 80035b0:	4604      	mov	r4, r0
 80035b2:	2301      	movs	r3, #1
 80035b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035b8:	e7f0      	b.n	800359c <_svfiprintf_r+0x194>
 80035ba:	ab03      	add	r3, sp, #12
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	462a      	mov	r2, r5
 80035c0:	4638      	mov	r0, r7
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <_svfiprintf_r+0x1fc>)
 80035c4:	a904      	add	r1, sp, #16
 80035c6:	f3af 8000 	nop.w
 80035ca:	1c42      	adds	r2, r0, #1
 80035cc:	4606      	mov	r6, r0
 80035ce:	d1d6      	bne.n	800357e <_svfiprintf_r+0x176>
 80035d0:	89ab      	ldrh	r3, [r5, #12]
 80035d2:	065b      	lsls	r3, r3, #25
 80035d4:	f53f af2c 	bmi.w	8003430 <_svfiprintf_r+0x28>
 80035d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035da:	b01d      	add	sp, #116	; 0x74
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	462a      	mov	r2, r5
 80035e6:	4638      	mov	r0, r7
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <_svfiprintf_r+0x1fc>)
 80035ea:	a904      	add	r1, sp, #16
 80035ec:	f000 f87c 	bl	80036e8 <_printf_i>
 80035f0:	e7eb      	b.n	80035ca <_svfiprintf_r+0x1c2>
 80035f2:	bf00      	nop
 80035f4:	08003c6c 	.word	0x08003c6c
 80035f8:	08003c72 	.word	0x08003c72
 80035fc:	08003c76 	.word	0x08003c76
 8003600:	00000000 	.word	0x00000000
 8003604:	08003351 	.word	0x08003351

08003608 <_printf_common>:
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	4616      	mov	r6, r2
 800360e:	4699      	mov	r9, r3
 8003610:	688a      	ldr	r2, [r1, #8]
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	4607      	mov	r7, r0
 8003616:	4293      	cmp	r3, r2
 8003618:	bfb8      	it	lt
 800361a:	4613      	movlt	r3, r2
 800361c:	6033      	str	r3, [r6, #0]
 800361e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003622:	460c      	mov	r4, r1
 8003624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003628:	b10a      	cbz	r2, 800362e <_printf_common+0x26>
 800362a:	3301      	adds	r3, #1
 800362c:	6033      	str	r3, [r6, #0]
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	0699      	lsls	r1, r3, #26
 8003632:	bf42      	ittt	mi
 8003634:	6833      	ldrmi	r3, [r6, #0]
 8003636:	3302      	addmi	r3, #2
 8003638:	6033      	strmi	r3, [r6, #0]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d106      	bne.n	8003650 <_printf_common+0x48>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	6832      	ldr	r2, [r6, #0]
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	42ab      	cmp	r3, r5
 800364e:	dc28      	bgt.n	80036a2 <_printf_common+0x9a>
 8003650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003654:	1e13      	subs	r3, r2, #0
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	bf18      	it	ne
 800365a:	2301      	movne	r3, #1
 800365c:	0692      	lsls	r2, r2, #26
 800365e:	d42d      	bmi.n	80036bc <_printf_common+0xb4>
 8003660:	4649      	mov	r1, r9
 8003662:	4638      	mov	r0, r7
 8003664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003668:	47c0      	blx	r8
 800366a:	3001      	adds	r0, #1
 800366c:	d020      	beq.n	80036b0 <_printf_common+0xa8>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	68e5      	ldr	r5, [r4, #12]
 8003672:	f003 0306 	and.w	r3, r3, #6
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf18      	it	ne
 800367a:	2500      	movne	r5, #0
 800367c:	6832      	ldr	r2, [r6, #0]
 800367e:	f04f 0600 	mov.w	r6, #0
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	bf08      	it	eq
 8003686:	1aad      	subeq	r5, r5, r2
 8003688:	6922      	ldr	r2, [r4, #16]
 800368a:	bf08      	it	eq
 800368c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003690:	4293      	cmp	r3, r2
 8003692:	bfc4      	itt	gt
 8003694:	1a9b      	subgt	r3, r3, r2
 8003696:	18ed      	addgt	r5, r5, r3
 8003698:	341a      	adds	r4, #26
 800369a:	42b5      	cmp	r5, r6
 800369c:	d11a      	bne.n	80036d4 <_printf_common+0xcc>
 800369e:	2000      	movs	r0, #0
 80036a0:	e008      	b.n	80036b4 <_printf_common+0xac>
 80036a2:	2301      	movs	r3, #1
 80036a4:	4652      	mov	r2, sl
 80036a6:	4649      	mov	r1, r9
 80036a8:	4638      	mov	r0, r7
 80036aa:	47c0      	blx	r8
 80036ac:	3001      	adds	r0, #1
 80036ae:	d103      	bne.n	80036b8 <_printf_common+0xb0>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b8:	3501      	adds	r5, #1
 80036ba:	e7c4      	b.n	8003646 <_printf_common+0x3e>
 80036bc:	2030      	movs	r0, #48	; 0x30
 80036be:	18e1      	adds	r1, r4, r3
 80036c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ca:	4422      	add	r2, r4
 80036cc:	3302      	adds	r3, #2
 80036ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d2:	e7c5      	b.n	8003660 <_printf_common+0x58>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4622      	mov	r2, r4
 80036d8:	4649      	mov	r1, r9
 80036da:	4638      	mov	r0, r7
 80036dc:	47c0      	blx	r8
 80036de:	3001      	adds	r0, #1
 80036e0:	d0e6      	beq.n	80036b0 <_printf_common+0xa8>
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7d9      	b.n	800369a <_printf_common+0x92>
	...

080036e8 <_printf_i>:
 80036e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	7e0f      	ldrb	r7, [r1, #24]
 80036ee:	4691      	mov	r9, r2
 80036f0:	2f78      	cmp	r7, #120	; 0x78
 80036f2:	4680      	mov	r8, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	469a      	mov	sl, r3
 80036f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036fe:	d807      	bhi.n	8003710 <_printf_i+0x28>
 8003700:	2f62      	cmp	r7, #98	; 0x62
 8003702:	d80a      	bhi.n	800371a <_printf_i+0x32>
 8003704:	2f00      	cmp	r7, #0
 8003706:	f000 80d9 	beq.w	80038bc <_printf_i+0x1d4>
 800370a:	2f58      	cmp	r7, #88	; 0x58
 800370c:	f000 80a4 	beq.w	8003858 <_printf_i+0x170>
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003718:	e03a      	b.n	8003790 <_printf_i+0xa8>
 800371a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800371e:	2b15      	cmp	r3, #21
 8003720:	d8f6      	bhi.n	8003710 <_printf_i+0x28>
 8003722:	a101      	add	r1, pc, #4	; (adr r1, 8003728 <_printf_i+0x40>)
 8003724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003728:	08003781 	.word	0x08003781
 800372c:	08003795 	.word	0x08003795
 8003730:	08003711 	.word	0x08003711
 8003734:	08003711 	.word	0x08003711
 8003738:	08003711 	.word	0x08003711
 800373c:	08003711 	.word	0x08003711
 8003740:	08003795 	.word	0x08003795
 8003744:	08003711 	.word	0x08003711
 8003748:	08003711 	.word	0x08003711
 800374c:	08003711 	.word	0x08003711
 8003750:	08003711 	.word	0x08003711
 8003754:	080038a3 	.word	0x080038a3
 8003758:	080037c5 	.word	0x080037c5
 800375c:	08003885 	.word	0x08003885
 8003760:	08003711 	.word	0x08003711
 8003764:	08003711 	.word	0x08003711
 8003768:	080038c5 	.word	0x080038c5
 800376c:	08003711 	.word	0x08003711
 8003770:	080037c5 	.word	0x080037c5
 8003774:	08003711 	.word	0x08003711
 8003778:	08003711 	.word	0x08003711
 800377c:	0800388d 	.word	0x0800388d
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	602a      	str	r2, [r5, #0]
 8003788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800378c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003790:	2301      	movs	r3, #1
 8003792:	e0a4      	b.n	80038de <_printf_i+0x1f6>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	6829      	ldr	r1, [r5, #0]
 8003798:	0606      	lsls	r6, r0, #24
 800379a:	f101 0304 	add.w	r3, r1, #4
 800379e:	d50a      	bpl.n	80037b6 <_printf_i+0xce>
 80037a0:	680e      	ldr	r6, [r1, #0]
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	da03      	bge.n	80037b0 <_printf_i+0xc8>
 80037a8:	232d      	movs	r3, #45	; 0x2d
 80037aa:	4276      	negs	r6, r6
 80037ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b0:	230a      	movs	r3, #10
 80037b2:	485e      	ldr	r0, [pc, #376]	; (800392c <_printf_i+0x244>)
 80037b4:	e019      	b.n	80037ea <_printf_i+0x102>
 80037b6:	680e      	ldr	r6, [r1, #0]
 80037b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	bf18      	it	ne
 80037c0:	b236      	sxthne	r6, r6
 80037c2:	e7ef      	b.n	80037a4 <_printf_i+0xbc>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1d19      	adds	r1, r3, #4
 80037ca:	6029      	str	r1, [r5, #0]
 80037cc:	0601      	lsls	r1, r0, #24
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0xec>
 80037d0:	681e      	ldr	r6, [r3, #0]
 80037d2:	e002      	b.n	80037da <_printf_i+0xf2>
 80037d4:	0646      	lsls	r6, r0, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0xe8>
 80037d8:	881e      	ldrh	r6, [r3, #0]
 80037da:	2f6f      	cmp	r7, #111	; 0x6f
 80037dc:	bf0c      	ite	eq
 80037de:	2308      	moveq	r3, #8
 80037e0:	230a      	movne	r3, #10
 80037e2:	4852      	ldr	r0, [pc, #328]	; (800392c <_printf_i+0x244>)
 80037e4:	2100      	movs	r1, #0
 80037e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ea:	6865      	ldr	r5, [r4, #4]
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	bfa8      	it	ge
 80037f0:	6821      	ldrge	r1, [r4, #0]
 80037f2:	60a5      	str	r5, [r4, #8]
 80037f4:	bfa4      	itt	ge
 80037f6:	f021 0104 	bicge.w	r1, r1, #4
 80037fa:	6021      	strge	r1, [r4, #0]
 80037fc:	b90e      	cbnz	r6, 8003802 <_printf_i+0x11a>
 80037fe:	2d00      	cmp	r5, #0
 8003800:	d04d      	beq.n	800389e <_printf_i+0x1b6>
 8003802:	4615      	mov	r5, r2
 8003804:	fbb6 f1f3 	udiv	r1, r6, r3
 8003808:	fb03 6711 	mls	r7, r3, r1, r6
 800380c:	5dc7      	ldrb	r7, [r0, r7]
 800380e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003812:	4637      	mov	r7, r6
 8003814:	42bb      	cmp	r3, r7
 8003816:	460e      	mov	r6, r1
 8003818:	d9f4      	bls.n	8003804 <_printf_i+0x11c>
 800381a:	2b08      	cmp	r3, #8
 800381c:	d10b      	bne.n	8003836 <_printf_i+0x14e>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	07de      	lsls	r6, r3, #31
 8003822:	d508      	bpl.n	8003836 <_printf_i+0x14e>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	6861      	ldr	r1, [r4, #4]
 8003828:	4299      	cmp	r1, r3
 800382a:	bfde      	ittt	le
 800382c:	2330      	movle	r3, #48	; 0x30
 800382e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003832:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003836:	1b52      	subs	r2, r2, r5
 8003838:	6122      	str	r2, [r4, #16]
 800383a:	464b      	mov	r3, r9
 800383c:	4621      	mov	r1, r4
 800383e:	4640      	mov	r0, r8
 8003840:	f8cd a000 	str.w	sl, [sp]
 8003844:	aa03      	add	r2, sp, #12
 8003846:	f7ff fedf 	bl	8003608 <_printf_common>
 800384a:	3001      	adds	r0, #1
 800384c:	d14c      	bne.n	80038e8 <_printf_i+0x200>
 800384e:	f04f 30ff 	mov.w	r0, #4294967295
 8003852:	b004      	add	sp, #16
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	4834      	ldr	r0, [pc, #208]	; (800392c <_printf_i+0x244>)
 800385a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800385e:	6829      	ldr	r1, [r5, #0]
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	f851 6b04 	ldr.w	r6, [r1], #4
 8003866:	6029      	str	r1, [r5, #0]
 8003868:	061d      	lsls	r5, r3, #24
 800386a:	d514      	bpl.n	8003896 <_printf_i+0x1ae>
 800386c:	07df      	lsls	r7, r3, #31
 800386e:	bf44      	itt	mi
 8003870:	f043 0320 	orrmi.w	r3, r3, #32
 8003874:	6023      	strmi	r3, [r4, #0]
 8003876:	b91e      	cbnz	r6, 8003880 <_printf_i+0x198>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	f023 0320 	bic.w	r3, r3, #32
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	2310      	movs	r3, #16
 8003882:	e7af      	b.n	80037e4 <_printf_i+0xfc>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	f043 0320 	orr.w	r3, r3, #32
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	2378      	movs	r3, #120	; 0x78
 800388e:	4828      	ldr	r0, [pc, #160]	; (8003930 <_printf_i+0x248>)
 8003890:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003894:	e7e3      	b.n	800385e <_printf_i+0x176>
 8003896:	0659      	lsls	r1, r3, #25
 8003898:	bf48      	it	mi
 800389a:	b2b6      	uxthmi	r6, r6
 800389c:	e7e6      	b.n	800386c <_printf_i+0x184>
 800389e:	4615      	mov	r5, r2
 80038a0:	e7bb      	b.n	800381a <_printf_i+0x132>
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	6826      	ldr	r6, [r4, #0]
 80038a6:	1d18      	adds	r0, r3, #4
 80038a8:	6961      	ldr	r1, [r4, #20]
 80038aa:	6028      	str	r0, [r5, #0]
 80038ac:	0635      	lsls	r5, r6, #24
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	d501      	bpl.n	80038b6 <_printf_i+0x1ce>
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	e002      	b.n	80038bc <_printf_i+0x1d4>
 80038b6:	0670      	lsls	r0, r6, #25
 80038b8:	d5fb      	bpl.n	80038b2 <_printf_i+0x1ca>
 80038ba:	8019      	strh	r1, [r3, #0]
 80038bc:	2300      	movs	r3, #0
 80038be:	4615      	mov	r5, r2
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	e7ba      	b.n	800383a <_printf_i+0x152>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	2100      	movs	r1, #0
 80038c8:	1d1a      	adds	r2, r3, #4
 80038ca:	602a      	str	r2, [r5, #0]
 80038cc:	681d      	ldr	r5, [r3, #0]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	4628      	mov	r0, r5
 80038d2:	f000 f82f 	bl	8003934 <memchr>
 80038d6:	b108      	cbz	r0, 80038dc <_printf_i+0x1f4>
 80038d8:	1b40      	subs	r0, r0, r5
 80038da:	6060      	str	r0, [r4, #4]
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	2300      	movs	r3, #0
 80038e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e6:	e7a8      	b.n	800383a <_printf_i+0x152>
 80038e8:	462a      	mov	r2, r5
 80038ea:	4649      	mov	r1, r9
 80038ec:	4640      	mov	r0, r8
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	47d0      	blx	sl
 80038f2:	3001      	adds	r0, #1
 80038f4:	d0ab      	beq.n	800384e <_printf_i+0x166>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	079b      	lsls	r3, r3, #30
 80038fa:	d413      	bmi.n	8003924 <_printf_i+0x23c>
 80038fc:	68e0      	ldr	r0, [r4, #12]
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	4298      	cmp	r0, r3
 8003902:	bfb8      	it	lt
 8003904:	4618      	movlt	r0, r3
 8003906:	e7a4      	b.n	8003852 <_printf_i+0x16a>
 8003908:	2301      	movs	r3, #1
 800390a:	4632      	mov	r2, r6
 800390c:	4649      	mov	r1, r9
 800390e:	4640      	mov	r0, r8
 8003910:	47d0      	blx	sl
 8003912:	3001      	adds	r0, #1
 8003914:	d09b      	beq.n	800384e <_printf_i+0x166>
 8003916:	3501      	adds	r5, #1
 8003918:	68e3      	ldr	r3, [r4, #12]
 800391a:	9903      	ldr	r1, [sp, #12]
 800391c:	1a5b      	subs	r3, r3, r1
 800391e:	42ab      	cmp	r3, r5
 8003920:	dcf2      	bgt.n	8003908 <_printf_i+0x220>
 8003922:	e7eb      	b.n	80038fc <_printf_i+0x214>
 8003924:	2500      	movs	r5, #0
 8003926:	f104 0619 	add.w	r6, r4, #25
 800392a:	e7f5      	b.n	8003918 <_printf_i+0x230>
 800392c:	08003c7d 	.word	0x08003c7d
 8003930:	08003c8e 	.word	0x08003c8e

08003934 <memchr>:
 8003934:	4603      	mov	r3, r0
 8003936:	b510      	push	{r4, lr}
 8003938:	b2c9      	uxtb	r1, r1
 800393a:	4402      	add	r2, r0
 800393c:	4293      	cmp	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	d101      	bne.n	8003946 <memchr+0x12>
 8003942:	2000      	movs	r0, #0
 8003944:	e003      	b.n	800394e <memchr+0x1a>
 8003946:	7804      	ldrb	r4, [r0, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	428c      	cmp	r4, r1
 800394c:	d1f6      	bne.n	800393c <memchr+0x8>
 800394e:	bd10      	pop	{r4, pc}

08003950 <memcpy>:
 8003950:	440a      	add	r2, r1
 8003952:	4291      	cmp	r1, r2
 8003954:	f100 33ff 	add.w	r3, r0, #4294967295
 8003958:	d100      	bne.n	800395c <memcpy+0xc>
 800395a:	4770      	bx	lr
 800395c:	b510      	push	{r4, lr}
 800395e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003962:	4291      	cmp	r1, r2
 8003964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003968:	d1f9      	bne.n	800395e <memcpy+0xe>
 800396a:	bd10      	pop	{r4, pc}

0800396c <memmove>:
 800396c:	4288      	cmp	r0, r1
 800396e:	b510      	push	{r4, lr}
 8003970:	eb01 0402 	add.w	r4, r1, r2
 8003974:	d902      	bls.n	800397c <memmove+0x10>
 8003976:	4284      	cmp	r4, r0
 8003978:	4623      	mov	r3, r4
 800397a:	d807      	bhi.n	800398c <memmove+0x20>
 800397c:	1e43      	subs	r3, r0, #1
 800397e:	42a1      	cmp	r1, r4
 8003980:	d008      	beq.n	8003994 <memmove+0x28>
 8003982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800398a:	e7f8      	b.n	800397e <memmove+0x12>
 800398c:	4601      	mov	r1, r0
 800398e:	4402      	add	r2, r0
 8003990:	428a      	cmp	r2, r1
 8003992:	d100      	bne.n	8003996 <memmove+0x2a>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800399a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800399e:	e7f7      	b.n	8003990 <memmove+0x24>

080039a0 <_free_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4605      	mov	r5, r0
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d040      	beq.n	8003a2a <_free_r+0x8a>
 80039a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ac:	1f0c      	subs	r4, r1, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfb8      	it	lt
 80039b2:	18e4      	addlt	r4, r4, r3
 80039b4:	f000 f910 	bl	8003bd8 <__malloc_lock>
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <_free_r+0x8c>)
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	b933      	cbnz	r3, 80039cc <_free_r+0x2c>
 80039be:	6063      	str	r3, [r4, #4]
 80039c0:	6014      	str	r4, [r2, #0]
 80039c2:	4628      	mov	r0, r5
 80039c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c8:	f000 b90c 	b.w	8003be4 <__malloc_unlock>
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	d908      	bls.n	80039e2 <_free_r+0x42>
 80039d0:	6820      	ldr	r0, [r4, #0]
 80039d2:	1821      	adds	r1, r4, r0
 80039d4:	428b      	cmp	r3, r1
 80039d6:	bf01      	itttt	eq
 80039d8:	6819      	ldreq	r1, [r3, #0]
 80039da:	685b      	ldreq	r3, [r3, #4]
 80039dc:	1809      	addeq	r1, r1, r0
 80039de:	6021      	streq	r1, [r4, #0]
 80039e0:	e7ed      	b.n	80039be <_free_r+0x1e>
 80039e2:	461a      	mov	r2, r3
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b10b      	cbz	r3, 80039ec <_free_r+0x4c>
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d9fa      	bls.n	80039e2 <_free_r+0x42>
 80039ec:	6811      	ldr	r1, [r2, #0]
 80039ee:	1850      	adds	r0, r2, r1
 80039f0:	42a0      	cmp	r0, r4
 80039f2:	d10b      	bne.n	8003a0c <_free_r+0x6c>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	4401      	add	r1, r0
 80039f8:	1850      	adds	r0, r2, r1
 80039fa:	4283      	cmp	r3, r0
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	d1e0      	bne.n	80039c2 <_free_r+0x22>
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4401      	add	r1, r0
 8003a06:	6011      	str	r1, [r2, #0]
 8003a08:	6053      	str	r3, [r2, #4]
 8003a0a:	e7da      	b.n	80039c2 <_free_r+0x22>
 8003a0c:	d902      	bls.n	8003a14 <_free_r+0x74>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	602b      	str	r3, [r5, #0]
 8003a12:	e7d6      	b.n	80039c2 <_free_r+0x22>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	1821      	adds	r1, r4, r0
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	bf01      	itttt	eq
 8003a1c:	6819      	ldreq	r1, [r3, #0]
 8003a1e:	685b      	ldreq	r3, [r3, #4]
 8003a20:	1809      	addeq	r1, r1, r0
 8003a22:	6021      	streq	r1, [r4, #0]
 8003a24:	6063      	str	r3, [r4, #4]
 8003a26:	6054      	str	r4, [r2, #4]
 8003a28:	e7cb      	b.n	80039c2 <_free_r+0x22>
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	20000178 	.word	0x20000178

08003a30 <sbrk_aligned>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4e0e      	ldr	r6, [pc, #56]	; (8003a6c <sbrk_aligned+0x3c>)
 8003a34:	460c      	mov	r4, r1
 8003a36:	6831      	ldr	r1, [r6, #0]
 8003a38:	4605      	mov	r5, r0
 8003a3a:	b911      	cbnz	r1, 8003a42 <sbrk_aligned+0x12>
 8003a3c:	f000 f8bc 	bl	8003bb8 <_sbrk_r>
 8003a40:	6030      	str	r0, [r6, #0]
 8003a42:	4621      	mov	r1, r4
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f8b7 	bl	8003bb8 <_sbrk_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d00a      	beq.n	8003a64 <sbrk_aligned+0x34>
 8003a4e:	1cc4      	adds	r4, r0, #3
 8003a50:	f024 0403 	bic.w	r4, r4, #3
 8003a54:	42a0      	cmp	r0, r4
 8003a56:	d007      	beq.n	8003a68 <sbrk_aligned+0x38>
 8003a58:	1a21      	subs	r1, r4, r0
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 f8ac 	bl	8003bb8 <_sbrk_r>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d101      	bne.n	8003a68 <sbrk_aligned+0x38>
 8003a64:	f04f 34ff 	mov.w	r4, #4294967295
 8003a68:	4620      	mov	r0, r4
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	2000017c 	.word	0x2000017c

08003a70 <_malloc_r>:
 8003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	1ccd      	adds	r5, r1, #3
 8003a76:	f025 0503 	bic.w	r5, r5, #3
 8003a7a:	3508      	adds	r5, #8
 8003a7c:	2d0c      	cmp	r5, #12
 8003a7e:	bf38      	it	cc
 8003a80:	250c      	movcc	r5, #12
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	4607      	mov	r7, r0
 8003a86:	db01      	blt.n	8003a8c <_malloc_r+0x1c>
 8003a88:	42a9      	cmp	r1, r5
 8003a8a:	d905      	bls.n	8003a98 <_malloc_r+0x28>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	2600      	movs	r6, #0
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4630      	mov	r0, r6
 8003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a98:	4e2e      	ldr	r6, [pc, #184]	; (8003b54 <_malloc_r+0xe4>)
 8003a9a:	f000 f89d 	bl	8003bd8 <__malloc_lock>
 8003a9e:	6833      	ldr	r3, [r6, #0]
 8003aa0:	461c      	mov	r4, r3
 8003aa2:	bb34      	cbnz	r4, 8003af2 <_malloc_r+0x82>
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f7ff ffc2 	bl	8003a30 <sbrk_aligned>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	4604      	mov	r4, r0
 8003ab0:	d14d      	bne.n	8003b4e <_malloc_r+0xde>
 8003ab2:	6834      	ldr	r4, [r6, #0]
 8003ab4:	4626      	mov	r6, r4
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d140      	bne.n	8003b3c <_malloc_r+0xcc>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	4631      	mov	r1, r6
 8003abe:	4638      	mov	r0, r7
 8003ac0:	eb04 0803 	add.w	r8, r4, r3
 8003ac4:	f000 f878 	bl	8003bb8 <_sbrk_r>
 8003ac8:	4580      	cmp	r8, r0
 8003aca:	d13a      	bne.n	8003b42 <_malloc_r+0xd2>
 8003acc:	6821      	ldr	r1, [r4, #0]
 8003ace:	3503      	adds	r5, #3
 8003ad0:	1a6d      	subs	r5, r5, r1
 8003ad2:	f025 0503 	bic.w	r5, r5, #3
 8003ad6:	3508      	adds	r5, #8
 8003ad8:	2d0c      	cmp	r5, #12
 8003ada:	bf38      	it	cc
 8003adc:	250c      	movcc	r5, #12
 8003ade:	4638      	mov	r0, r7
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7ff ffa5 	bl	8003a30 <sbrk_aligned>
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d02b      	beq.n	8003b42 <_malloc_r+0xd2>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	442b      	add	r3, r5
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	e00e      	b.n	8003b10 <_malloc_r+0xa0>
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	1b52      	subs	r2, r2, r5
 8003af6:	d41e      	bmi.n	8003b36 <_malloc_r+0xc6>
 8003af8:	2a0b      	cmp	r2, #11
 8003afa:	d916      	bls.n	8003b2a <_malloc_r+0xba>
 8003afc:	1961      	adds	r1, r4, r5
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	6025      	str	r5, [r4, #0]
 8003b02:	bf18      	it	ne
 8003b04:	6059      	strne	r1, [r3, #4]
 8003b06:	6863      	ldr	r3, [r4, #4]
 8003b08:	bf08      	it	eq
 8003b0a:	6031      	streq	r1, [r6, #0]
 8003b0c:	5162      	str	r2, [r4, r5]
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	4638      	mov	r0, r7
 8003b12:	f104 060b 	add.w	r6, r4, #11
 8003b16:	f000 f865 	bl	8003be4 <__malloc_unlock>
 8003b1a:	f026 0607 	bic.w	r6, r6, #7
 8003b1e:	1d23      	adds	r3, r4, #4
 8003b20:	1af2      	subs	r2, r6, r3
 8003b22:	d0b6      	beq.n	8003a92 <_malloc_r+0x22>
 8003b24:	1b9b      	subs	r3, r3, r6
 8003b26:	50a3      	str	r3, [r4, r2]
 8003b28:	e7b3      	b.n	8003a92 <_malloc_r+0x22>
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	bf0c      	ite	eq
 8003b30:	6032      	streq	r2, [r6, #0]
 8003b32:	605a      	strne	r2, [r3, #4]
 8003b34:	e7ec      	b.n	8003b10 <_malloc_r+0xa0>
 8003b36:	4623      	mov	r3, r4
 8003b38:	6864      	ldr	r4, [r4, #4]
 8003b3a:	e7b2      	b.n	8003aa2 <_malloc_r+0x32>
 8003b3c:	4634      	mov	r4, r6
 8003b3e:	6876      	ldr	r6, [r6, #4]
 8003b40:	e7b9      	b.n	8003ab6 <_malloc_r+0x46>
 8003b42:	230c      	movs	r3, #12
 8003b44:	4638      	mov	r0, r7
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	f000 f84c 	bl	8003be4 <__malloc_unlock>
 8003b4c:	e7a1      	b.n	8003a92 <_malloc_r+0x22>
 8003b4e:	6025      	str	r5, [r4, #0]
 8003b50:	e7de      	b.n	8003b10 <_malloc_r+0xa0>
 8003b52:	bf00      	nop
 8003b54:	20000178 	.word	0x20000178

08003b58 <_realloc_r>:
 8003b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4614      	mov	r4, r2
 8003b60:	460e      	mov	r6, r1
 8003b62:	b921      	cbnz	r1, 8003b6e <_realloc_r+0x16>
 8003b64:	4611      	mov	r1, r2
 8003b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	f7ff bf81 	b.w	8003a70 <_malloc_r>
 8003b6e:	b92a      	cbnz	r2, 8003b7c <_realloc_r+0x24>
 8003b70:	f7ff ff16 	bl	80039a0 <_free_r>
 8003b74:	4625      	mov	r5, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	f000 f838 	bl	8003bf0 <_malloc_usable_size_r>
 8003b80:	4284      	cmp	r4, r0
 8003b82:	4607      	mov	r7, r0
 8003b84:	d802      	bhi.n	8003b8c <_realloc_r+0x34>
 8003b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b8a:	d812      	bhi.n	8003bb2 <_realloc_r+0x5a>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4640      	mov	r0, r8
 8003b90:	f7ff ff6e 	bl	8003a70 <_malloc_r>
 8003b94:	4605      	mov	r5, r0
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d0ed      	beq.n	8003b76 <_realloc_r+0x1e>
 8003b9a:	42bc      	cmp	r4, r7
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	bf28      	it	cs
 8003ba2:	463a      	movcs	r2, r7
 8003ba4:	f7ff fed4 	bl	8003950 <memcpy>
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff fef8 	bl	80039a0 <_free_r>
 8003bb0:	e7e1      	b.n	8003b76 <_realloc_r+0x1e>
 8003bb2:	4635      	mov	r5, r6
 8003bb4:	e7df      	b.n	8003b76 <_realloc_r+0x1e>
	...

08003bb8 <_sbrk_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	2300      	movs	r3, #0
 8003bbc:	4d05      	ldr	r5, [pc, #20]	; (8003bd4 <_sbrk_r+0x1c>)
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	f7fc fe66 	bl	8000894 <_sbrk>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_sbrk_r+0x1a>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_sbrk_r+0x1a>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	20000180 	.word	0x20000180

08003bd8 <__malloc_lock>:
 8003bd8:	4801      	ldr	r0, [pc, #4]	; (8003be0 <__malloc_lock+0x8>)
 8003bda:	f000 b811 	b.w	8003c00 <__retarget_lock_acquire_recursive>
 8003bde:	bf00      	nop
 8003be0:	20000184 	.word	0x20000184

08003be4 <__malloc_unlock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__malloc_unlock+0x8>)
 8003be6:	f000 b80c 	b.w	8003c02 <__retarget_lock_release_recursive>
 8003bea:	bf00      	nop
 8003bec:	20000184 	.word	0x20000184

08003bf0 <_malloc_usable_size_r>:
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f18      	subs	r0, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfbc      	itt	lt
 8003bfa:	580b      	ldrlt	r3, [r1, r0]
 8003bfc:	18c0      	addlt	r0, r0, r3
 8003bfe:	4770      	bx	lr

08003c00 <__retarget_lock_acquire_recursive>:
 8003c00:	4770      	bx	lr

08003c02 <__retarget_lock_release_recursive>:
 8003c02:	4770      	bx	lr

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
