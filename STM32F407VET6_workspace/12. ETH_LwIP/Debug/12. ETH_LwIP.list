
12. ETH_LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0800fb90  0800fb90  0001fb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127c0  080127c0  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080127c0  080127c0  000227c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127c8  080127c8  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127c8  080127c8  000227c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127cc  080127cc  000227cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080127d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008368  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200083f8  200083f8  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce66  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000536f  00000000  00000000  0004cf26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00052298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  00053740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d7f6  00000000  00000000  00054b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e45  00000000  00000000  0008231e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbffa  00000000  00000000  000a7163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018315d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b2c  00000000  00000000  001831b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb78 	.word	0x0800fb78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800fb78 	.word	0x0800fb78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_GPIO_Init+0x68>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <MX_GPIO_Init+0x68>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_GPIO_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_GPIO_Init+0x68>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_GPIO_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_GPIO_Init+0x68>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x68>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fbfa 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f810 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ffc2 	bl	8000574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f9f0 	bl	80009d4 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 80005f4:	f003 fbde 	bl	8003db4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* tcp echo server Init */
  udp_echoserver_init();
 80005f8:	f000 f9b0 	bl	800095c <udp_echoserver_init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  /* Read a received packet from the Ethernet buffers and send it to the lwIP for handling */
	  ethernetif_input(&gnetif);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <main+0x28>)
 80005fe:	f003 fe41 	bl	8004284 <ethernetif_input>

	  /* Handle timeouts */
	  sys_check_timeouts();
 8000602:	f00b f9bf 	bl	800b984 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000606:	e7f9      	b.n	80005fc <main+0x1c>
 8000608:	200000f8 	.word	0x200000f8

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f00e fa54 	bl	800eac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f823 	bl	80026dc <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f820 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa84 	bl	8002bcc <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f809 	bl	80006e0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 fb7a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USART1_IRQHandler+0x10>)
 8000796:	f002 fc47 	bl	8003028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000b0 	.word	0x200000b0

080007a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return 1;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_kill>:

int _kill(int pid, int sig)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <_kill+0x20>)
 80007c0:	2216      	movs	r2, #22
 80007c2:	601a      	str	r2, [r3, #0]
	return -1;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	200083e8 	.word	0x200083e8

080007d8 <_exit>:

void _exit (int status)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ffe5 	bl	80007b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007ea:	e7fe      	b.n	80007ea <_exit+0x12>

080007ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
	}

return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>
	}
	return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	605a      	str	r2, [r3, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d205      	bcs.n	8000904 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <_sbrk+0x6c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20020000 	.word	0x20020000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000ac 	.word	0x200000ac
 8000930:	200083f8 	.word	0x200083f8
 8000934:	200083e8 	.word	0x200083e8

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000962:	f00b fd3b 	bl	800c3dc <udp_new>
 8000966:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00f      	beq.n	800098e <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 800096e:	2207      	movs	r2, #7
 8000970:	4909      	ldr	r1, [pc, #36]	; (8000998 <udp_echoserver_init+0x3c>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f00b fbf4 	bl	800c160 <udp_bind>
 8000978:	4603      	mov	r3, r0
 800097a:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 800097c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d104      	bne.n	800098e <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000984:	2200      	movs	r2, #0
 8000986:	4905      	ldr	r1, [pc, #20]	; (800099c <udp_echoserver_init+0x40>)
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f00b fd07 	bl	800c39c <udp_recv>
      }
   }
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08012664 	.word	0x08012664
 800099c:	080009a1 	.word	0x080009a1

080009a0 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 80009ae:	2207      	movs	r2, #7
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	68b8      	ldr	r0, [r7, #8]
 80009b4:	f00b fc5c 	bl	800c270 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	f00b f9e6 	bl	800bd8c <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 80009c0:	68b8      	ldr	r0, [r7, #8]
 80009c2:	f00b fcc3 	bl	800c34c <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f005 fada 	bl	8005f80 <pbuf_free>
   
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f002 fabe 	bl	8002f8c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f7ff fe63 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	40011000 	.word	0x40011000

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d134      	bne.n	8000ab4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a94:	2307      	movs	r3, #7
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x9c>)
 8000aa0:	f001 fc80 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2025      	movs	r0, #37	; 0x25
 8000aaa:	f000 fb08 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aae:	2025      	movs	r0, #37	; 0x25
 8000ab0:	f000 fb21 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ff21 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f00d ffa5 	bl	800ea44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd71 	bl	80005e0 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b0c:	080127d0 	.word	0x080127d0
  ldr r2, =_sbss
 8000b10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000b14:	200083f8 	.word	0x200083f8

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>

08000b1a <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e014      	b.n	8000b72 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d17c      	bne.n	8000c98 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2220      	movs	r2, #32
 8000bb0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e01c      	b.n	8000bf2 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f107 0208 	add.w	r2, r7, #8
 8000bc0:	2119      	movs	r1, #25
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	4798      	blx	r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000bcc:	f06f 0304 	mvn.w	r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000bd2:	e00b      	b.n	8000bec <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d105      	bne.n	8000bec <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
         break;
 8000bea:	e005      	b.n	8000bf8 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d9df      	bls.n	8000bb8 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d902      	bls.n	8000c06 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000c00:	f06f 0302 	mvn.w	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d145      	bne.n	8000c98 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6810      	ldr	r0, [r2, #0]
 8000c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4798      	blx	r3
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db37      	blt.n	8000c92 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6810      	ldr	r0, [r2, #0]
 8000c2a:	f107 0208 	add.w	r2, r7, #8
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4798      	blx	r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db28      	blt.n	8000c8a <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4798      	blx	r3
 8000c3e:	4603      	mov	r3, r0
 8000c40:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000c42:	e01c      	b.n	8000c7e <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4798      	blx	r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c56:	d80e      	bhi.n	8000c76 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6810      	ldr	r0, [r2, #0]
 8000c60:	f107 0208 	add.w	r2, r7, #8
 8000c64:	2100      	movs	r1, #0
 8000c66:	4798      	blx	r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da07      	bge.n	8000c7e <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000c6e:	f06f 0304 	mvn.w	r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
                 break;
 8000c74:	e010      	b.n	8000c98 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000c76:	f06f 0301 	mvn.w	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
               break;
 8000c7c:	e00c      	b.n	8000c98 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1dd      	bne.n	8000c44 <DP83848_Init+0xc6>
 8000c88:	e006      	b.n	8000c98 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000c8a:	f06f 0304 	mvn.w	r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	e002      	b.n	8000c98 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000c92:	f06f 0303 	mvn.w	r3, #3
 8000c96:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d112      	bne.n	8000cc4 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000ca8:	bf00      	nop
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4798      	blx	r3
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cbc:	d9f5      	bls.n	8000caa <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6810      	ldr	r0, [r2, #0]
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4798      	blx	r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da02      	bge.n	8000cf6 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000cf0:	f06f 0304 	mvn.w	r3, #4
 8000cf4:	e06e      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6810      	ldr	r0, [r2, #0]
 8000cfe:	f107 020c 	add.w	r2, r7, #12
 8000d02:	2101      	movs	r1, #1
 8000d04:	4798      	blx	r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da02      	bge.n	8000d12 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000d0c:	f06f 0304 	mvn.w	r3, #4
 8000d10:	e060      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e059      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6810      	ldr	r0, [r2, #0]
 8000d28:	f107 020c 	add.w	r2, r7, #12
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4798      	blx	r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da02      	bge.n	8000d3c <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000d36:	f06f 0304 	mvn.w	r3, #4
 8000d3a:	e04b      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d11b      	bne.n	8000d7e <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <DP83848_GetLinkState+0x90>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e03a      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e033      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000d76:	2304      	movs	r3, #4
 8000d78:	e02c      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e02a      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da02      	bge.n	8000d9a <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000d94:	f06f 0304 	mvn.w	r3, #4
 8000d98:	e01c      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000da4:	2306      	movs	r3, #6
 8000da6:	e015      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0306 	and.w	r3, r3, #6
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d101      	bne.n	8000db6 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000db2:	2302      	movs	r3, #2
 8000db4:	e00e      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f003 0306 	and.w	r3, r3, #6
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e007      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0306 	and.w	r3, r3, #6
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d101      	bne.n	8000dd2 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e000      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000dd2:	2305      	movs	r3, #5
    }
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f94f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fc6c 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200000f4 	.word	0x200000f4

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000f4 	.word	0x200000f4

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff feb6 	bl	8000ea8 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d008      	beq.n	800115c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e052      	b.n	8001202 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0216 	bic.w	r2, r2, #22
 800116a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <HAL_DMA_Abort+0x62>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0208 	bic.w	r2, r2, #8
 800119a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e013      	b.n	80011d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe7b 	bl	8000ea8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d90c      	bls.n	80011d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e015      	b.n	8001202 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e4      	bne.n	80011ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	223f      	movs	r2, #63	; 0x3f
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d004      	beq.n	8001228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e00c      	b.n	8001242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2205      	movs	r2, #5
 800122c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06c      	b.n	800133c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2223      	movs	r2, #35	; 0x23
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f003 f879 	bl	800436c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_ETH_Init+0xf4>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_ETH_Init+0xf8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <HAL_ETH_Init+0xf8>)
 800129c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012cc:	f7ff fdec 	bl	8000ea8 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d2:	e011      	b.n	80012f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d4:	f7ff fde8 	bl	8000ea8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e2:	d909      	bls.n	80012f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2204      	movs	r2, #4
 80012e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	22e0      	movs	r2, #224	; 0xe0
 80012f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e021      	b.n	800133c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e4      	bne.n	80012d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fda4 	bl	8001e58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fe4b 	bl	8001fac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fea1 	bl	800205e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	461a      	mov	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fe09 	bl	8001f3c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2210      	movs	r2, #16
 8001336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800

0800134c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800135a:	2b10      	cmp	r3, #16
 800135c:	d13a      	bne.n	80013d4 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2223      	movs	r2, #35	; 0x23
 8001362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f9cd 	bl	800170c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0208 	orr.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fc14 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ae:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013c6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2223      	movs	r2, #35	; 0x23
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e000      	b.n	80013d6 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ec:	2b23      	cmp	r3, #35	; 0x23
 80013ee:	d130      	bne.n	8001452 <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2223      	movs	r2, #35	; 0x23
 80013f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0208 	bic.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fbc5 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2210      	movs	r2, #16
 800144a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07c      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001488:	2b23      	cmp	r3, #35	; 0x23
 800148a:	d176      	bne.n	800157a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800148c:	2200      	movs	r2, #0
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fe51 	bl	8002138 <ETH_Prepare_Tx_Descriptors>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e065      	b.n	800157c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3206      	adds	r2, #6
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d904      	bls.n	80014e0 <HAL_ETH_Transmit+0x84>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	1f1a      	subs	r2, r3, #4
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3106      	adds	r1, #6
 80014ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014f6:	f7ff fcd7 	bl	8000ea8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014fc:	e037      	b.n	800156e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d011      	beq.n	8001534 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	f043 0208 	orr.w	r2, r3, #8
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e023      	b.n	800157c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d018      	beq.n	800156e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153c:	f7ff fcb4 	bl	8000ea8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d302      	bcc.n	8001552 <HAL_ETH_Transmit+0xf6>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001558:	f043 0204 	orr.w	r2, r3, #4
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001568:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e006      	b.n	800157c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	dbc3      	blt.n	80014fe <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a8      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b6:	2b23      	cmp	r3, #35	; 0x23
 80015b8:	d001      	beq.n	80015be <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0a1      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	3212      	adds	r2, #18
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d4:	f1c3 0304 	rsb	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015da:	e06a      	b.n	80016b2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_ETH_ReadData+0x88>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d040      	beq.n	800168e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001640:	3b04      	subs	r3, #4
 8001642:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001668:	461a      	mov	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f003 f82d 	bl	80046cc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	441a      	add	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d902      	bls.n	80016a0 <HAL_ETH_ReadData+0x11c>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b04      	subs	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	3212      	adds	r2, #18
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db06      	blt.n	80016c8 <HAL_ETH_ReadData+0x144>
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d202      	bcs.n	80016c8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d089      	beq.n	80015dc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f815 	bl	800170c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001720:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	3212      	adds	r2, #18
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001732:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001734:	e03e      	b.n	80017b4 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4618      	mov	r0, r3
 8001744:	f002 ff92 	bl	800466c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	74fb      	strb	r3, [r7, #19]
 8001752:	e007      	b.n	8001764 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	461a      	mov	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	461a      	mov	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800176a:	f3bf 8f5f 	dmb	sy
}
 800176e:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001776:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <ETH_UpdateDescriptor+0xe0>)
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e003      	b.n	8001790 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f244 32e8 	movw	r2, #17384	; 0x43e8
 800178e:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d902      	bls.n	80017a2 <ETH_UpdateDescriptor+0x96>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3b04      	subs	r3, #4
 80017a0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	3212      	adds	r2, #18
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	617b      	str	r3, [r7, #20]
      desccount--;
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <ETH_UpdateDescriptor+0xb4>
 80017ba:	7cfb      	ldrb	r3, [r7, #19]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ba      	bne.n	8001736 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d00c      	beq.n	80017e4 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	461a      	mov	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	800043e8 	.word	0x800043e8

080017f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	02db      	lsls	r3, r3, #11
 8001812:	b29b      	uxth	r3, r3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001840:	f7ff fb32 	bl	8000ea8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001846:	e00d      	b.n	8001864 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001848:	f7ff fb2e 	bl	8000ea8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d301      	bcc.n	800185c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e010      	b.n	800187e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ec      	bne.n	8001848 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 031c 	and.w	r3, r3, #28
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	02db      	lsls	r3, r3, #11
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e0:	f7ff fae2 	bl	8000ea8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018e6:	e00d      	b.n	8001904 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018e8:	f7ff fade 	bl	8000ea8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d301      	bcc.n	80018fc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e009      	b.n	8001910 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ec      	bne.n	80018e8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d2      	b.n	8001ad2 <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00b      	b.n	8001b0a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d105      	bne.n	8001b08 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f884 	bl	8001c0c <ETH_SetMACConfig>

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 031c 	bic.w	r3, r3, #28
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b2c:	f001 f9fa 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8001b30:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d908      	bls.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d804      	bhi.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e027      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d908      	bls.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d204      	bcs.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f043 030c 	orr.w	r3, r3, #12
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e01a      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d303      	bcc.n	8001b76 <HAL_ETH_SetMDIOClockRange+0x62>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d911      	bls.n	8001b9a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d908      	bls.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d804      	bhi.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e005      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e000      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b9a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	01312cff 	.word	0x01312cff
 8001bb0:	02160ebf 	.word	0x02160ebf
 8001bb4:	03938700 	.word	0x03938700
 8001bb8:	05f5e0ff 	.word	0x05f5e0ff
 8001bbc:	08f0d17f 	.word	0x08f0d17f

08001bc0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001be2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f965 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c00:	6193      	str	r3, [r2, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <ETH_SetMACConfig+0x134>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7c1b      	ldrb	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <ETH_SetMACConfig+0x28>
 8001c2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c32:	e000      	b.n	8001c36 <ETH_SetMACConfig+0x2a>
 8001c34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7c5b      	ldrb	r3, [r3, #17]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <ETH_SetMACConfig+0x38>
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c42:	e000      	b.n	8001c46 <ETH_SetMACConfig+0x3a>
 8001c44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7fdb      	ldrb	r3, [r3, #31]
 8001c52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	7f92      	ldrb	r2, [r2, #30]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d102      	bne.n	8001c6a <ETH_SetMACConfig+0x5e>
 8001c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c68:	e000      	b.n	8001c6c <ETH_SetMACConfig+0x60>
 8001c6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
 8001c72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetMACConfig+0x88>
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	e000      	b.n	8001c96 <ETH_SetMACConfig+0x8a>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7bdb      	ldrb	r3, [r3, #15]
 8001c9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ca4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f8fa 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cf2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001cf8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001d00:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001d08:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff f8c9 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	ff20810f 	.word	0xff20810f

08001d44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <ETH_SetDMAConfig+0x110>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7b1b      	ldrb	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <ETH_SetDMAConfig+0x2c>
 8001d6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d6e:	e000      	b.n	8001d72 <ETH_SetDMAConfig+0x2e>
 8001d70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7b5b      	ldrb	r3, [r3, #13]
 8001d76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	7f52      	ldrb	r2, [r2, #29]
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d102      	bne.n	8001d88 <ETH_SetDMAConfig+0x44>
 8001d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d86:	e000      	b.n	8001d8a <ETH_SetDMAConfig+0x46>
 8001d88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	7b9b      	ldrb	r3, [r3, #14]
 8001d90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7f1b      	ldrb	r3, [r3, #28]
 8001d9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001da0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7f9b      	ldrb	r3, [r3, #30]
 8001da6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001da8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f870 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	461a      	mov	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001df8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001dfe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff f841 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f8de3f23 	.word	0xf8de3f23

08001e58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0a6      	sub	sp, #152	; 0x98
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e94:	2300      	movs	r3, #0
 8001e96:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fe9a 	bl	8001c0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff08 	bl	8001d44 <ETH_SetDMAConfig>
}
 8001f34:	bf00      	nop
 8001f36:	3798      	adds	r7, #152	; 0x98
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3305      	adds	r3, #5
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	3204      	adds	r2, #4
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <ETH_MACAddressConfig+0x68>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	061a      	lsls	r2, r3, #24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3302      	adds	r3, #2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <ETH_MACAddressConfig+0x6c>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40028040 	.word	0x40028040
 8001fa8:	40028044 	.word	0x40028044

08001fac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e03e      	b.n	8002038 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	3206      	adds	r2, #6
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d80c      	bhi.n	800201c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e004      	b.n	8002026 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d9bd      	bls.n	8001fba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e046      	b.n	80020fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	3212      	adds	r2, #18
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d80c      	bhi.n	80020ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	e004      	b.n	80020f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d9b5      	bls.n	800206c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002138:	b480      	push	{r7}
 800213a:	b08d      	sub	sp, #52	; 0x34
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3318      	adds	r3, #24
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800217a:	d007      	beq.n	800218c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	3304      	adds	r3, #4
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800218c:	2302      	movs	r3, #2
 800218e:	e103      	b.n	8002398 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3301      	adds	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80021a8:	f023 031f 	bic.w	r3, r3, #31
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	6852      	ldr	r2, [r2, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002216:	f3bf 8f5f 	dmb	sy
}
 800221a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002228:	e084      	b.n	8002334 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e005      	b.n	8002256 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	3301      	adds	r3, #1
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b03      	cmp	r3, #3
 8002260:	d902      	bls.n	8002268 <ETH_Prepare_Tx_Descriptors+0x130>
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	3b04      	subs	r3, #4
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228a:	d007      	beq.n	800229c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	3304      	adds	r3, #4
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d029      	beq.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	e019      	b.n	80022e4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80022b0:	f3bf 8f5f 	dmb	sy
}
 80022b4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	3301      	adds	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d902      	bls.n	80022d4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	3b04      	subs	r3, #4
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	3301      	adds	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3e1      	bcc.n	80022b0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e053      	b.n	8002398 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3301      	adds	r3, #1
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800230e:	f023 031f 	bic.w	r3, r3, #31
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	431a      	orrs	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	3301      	adds	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002322:	f3bf 8f5f 	dmb	sy
}
 8002326:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f af76 	bne.w	800222a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e005      	b.n	800235e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	3304      	adds	r3, #4
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4413      	add	r3, r2
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002392:	b662      	cpsie	i
}
 8002394:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3734      	adds	r7, #52	; 0x34
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e16b      	b.n	8002698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 815a 	bne.w	8002692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b4 	beq.w	8002692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5f      	ldr	r2, [pc, #380]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_GPIO_Init+0x310>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_GPIO_Init+0x314>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x226>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_GPIO_Init+0x318>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x222>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x21e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x328>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x20a>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e00e      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ae:	2308      	movs	r3, #8
 80025b0:	e00c      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b2:	2306      	movs	r3, #6
 80025b4:	e00a      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ca:	2300      	movs	r3, #0
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f002 0203 	and.w	r2, r2, #3
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x310>)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x334>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f ae90 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40021400 	.word	0x40021400
 80026d0:	40021800 	.word	0x40021800
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	40013c00 	.word	0x40013c00

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e267      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e242      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fb88 	bl	8000ea8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fb84 	bl	8000ea8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e207      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fb74 	bl	8000ea8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fb70 	bl	8000ea8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1f3      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c7      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fb29 	bl	8000ea8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fb25 	bl	8000ea8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a8      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4925      	ldr	r1, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fb08 	bl	8000ea8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fb04 	bl	8000ea8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e187      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fae8 	bl	8000ea8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fae4 	bl	8000ea8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e167      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fad1 	bl	8000ea8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe facd 	bl	8000ea8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e150      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a7c      	ldr	r2, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fa8d 	bl	8000ea8 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fa89 	bl	8000ea8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e10c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ea>
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a63      	ldr	r2, [pc, #396]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5b      	ldr	r2, [pc, #364]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029e8:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fa4e 	bl	8000ea8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fa4a 	bl	8000ea8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0cb      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x334>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fa38 	bl	8000ea8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fa34 	bl	8000ea8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0b5      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a1 	beq.w	8002bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d05c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d141      	bne.n	8002b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa08 	bl	8000ea8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fa04 	bl	8000ea8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e087      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	491b      	ldr	r1, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe f9dd 	bl	8000ea8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe f9d9 	bl	8000ea8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e05c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x416>
 8002b10:	e054      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe f9c6 	bl	8000ea8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe f9c2 	bl	8000ea8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e045      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
 8002b3e:	e03d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e038      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d121      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11a      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f8f4 	bl	8000ea8 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe f8f0 	bl	8000ea8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f854 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08012570 	.word	0x08012570
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b090      	sub	sp, #64	; 0x40
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
 8002da4:	2300      	movs	r3, #0
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da8:	2300      	movs	r3, #0
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80a1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e09b      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dd0:	e09b      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd6:	e098      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d028      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	2200      	movs	r2, #0
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e00:	2100      	movs	r1, #0
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e04:	fb03 f201 	mul.w	r2, r3, r1
 8002e08:	2300      	movs	r3, #0
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e12:	fba0 1202 	umull	r1, r2, r0, r2
 8002e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e18:	460a      	mov	r2, r1
 8002e1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	4413      	add	r3, r2
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2200      	movs	r2, #0
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	61fa      	str	r2, [r7, #28]
 8002e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e32:	f7fd fa1d 	bl	8000270 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3e:	e053      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e40:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	2200      	movs	r2, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	617a      	str	r2, [r7, #20]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e52:	f04f 0b00 	mov.w	fp, #0
 8002e56:	4652      	mov	r2, sl
 8002e58:	465b      	mov	r3, fp
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	0159      	lsls	r1, r3, #5
 8002e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e68:	0150      	lsls	r0, r2, #5
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e72:	eb63 090b 	sbc.w	r9, r3, fp
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	00eb      	lsls	r3, r5, #3
 8002e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea0:	00e2      	lsls	r2, r4, #3
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	eb14 030a 	adds.w	r3, r4, sl
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	eb45 030b 	adc.w	r3, r5, fp
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002edc:	f7fd f9c8 	bl	8000270 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3740      	adds	r7, #64	; 0x40
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	017d7840 	.word	0x017d7840

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08012580 	.word	0x08012580

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08012580 	.word	0x08012580

08002f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e03f      	b.n	800301e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fd38 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fc7b 	bl	80038cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b0ba      	sub	sp, #232	; 0xe8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_UART_IRQHandler+0x66>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb65 	bl	8003756 <UART_Receive_IT>
      return;
 800308c:	e256      	b.n	800353c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800308e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80de 	beq.w	8003254 <HAL_UART_IRQHandler+0x22c>
 8003098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80d1 	beq.w	8003254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_UART_IRQHandler+0xae>
 80030be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_UART_IRQHandler+0xd2>
 80030e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_UART_IRQHandler+0xf6>
 8003106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_UART_IRQHandler+0x126>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0208 	orr.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 81ed 	beq.w	8003532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_UART_IRQHandler+0x14e>
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 faf0 	bl	8003756 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_UART_IRQHandler+0x17a>
 800319a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04f      	beq.n	8003242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9f8 	bl	8003598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d141      	bne.n	800323a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1d9      	bne.n	80031b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4a7d      	ldr	r2, [pc, #500]	; (8003404 <HAL_UART_IRQHandler+0x3dc>)
 8003210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fff7 	bl	800120a <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00e      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f99a 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00a      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f996 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e006      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f992 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800324e:	e170      	b.n	8003532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	bf00      	nop
    return;
 8003252:	e16e      	b.n	8003532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 814a 	bne.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8143 	beq.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 813c 	beq.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	f040 80b4 	bne.w	8003408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8140 	beq.w	8003536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032be:	429a      	cmp	r2, r3
 80032c0:	f080 8139 	bcs.w	8003536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d6:	f000 8088 	beq.w	80033ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800330a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800331e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1d9      	bne.n	80032da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3314      	adds	r3, #20
 8003346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800334a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800334e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800335c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e1      	bne.n	8003326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800338c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e3      	bne.n	8003362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e3      	bne.n	80033a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fea0 	bl	800112a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8c0 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003400:	e099      	b.n	8003536 <HAL_UART_IRQHandler+0x50e>
 8003402:	bf00      	nop
 8003404:	0800365f 	.word	0x0800365f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 808b 	beq.w	800353a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8086 	beq.w	800353a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003452:	647a      	str	r2, [r7, #68]	; 0x44
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e3      	bne.n	800342e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	623b      	str	r3, [r7, #32]
   return(result);
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800348a:	633a      	str	r2, [r7, #48]	; 0x30
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e3      	bne.n	8003466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0310 	bic.w	r3, r3, #16
 80034c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	617b      	str	r3, [r7, #20]
   return(result);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e3      	bne.n	80034ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f848 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f0:	e023      	b.n	800353a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_UART_IRQHandler+0x4ea>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8bb 	bl	8003686 <UART_Transmit_IT>
    return;
 8003510:	e014      	b.n	800353c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <HAL_UART_IRQHandler+0x514>
 800351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8fb 	bl	8003726 <UART_EndTransmit_IT>
    return;
 8003530:	e004      	b.n	800353c <HAL_UART_IRQHandler+0x514>
    return;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <HAL_UART_IRQHandler+0x514>
      return;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_UART_IRQHandler+0x514>
      return;
 800353a:	bf00      	nop
  }
}
 800353c:	37e8      	adds	r7, #232	; 0xe8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b095      	sub	sp, #84	; 0x54
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c0:	643a      	str	r2, [r7, #64]	; 0x40
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e5      	bne.n	80035a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	d119      	bne.n	8003644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003630:	61ba      	str	r2, [r7, #24]
 8003632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003652:	bf00      	nop
 8003654:	3754      	adds	r7, #84	; 0x54
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ff77 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d13e      	bne.n	8003718 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	d114      	bne.n	80036ce <UART_Transmit_IT+0x48>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d110      	bne.n	80036ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	1c9a      	adds	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]
 80036cc:	e008      	b.n	80036e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6211      	str	r1, [r2, #32]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003702:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003712:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fefc 	bl	8003544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08c      	sub	sp, #48	; 0x30
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	; 0x22
 8003768:	f040 80ab 	bne.w	80038c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d117      	bne.n	80037a6 <UART_Receive_IT+0x50>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	b29a      	uxth	r2, r3
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
 80037a4:	e026      	b.n	80037f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d007      	beq.n	80037ca <UART_Receive_IT+0x74>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <UART_Receive_IT+0x82>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e008      	b.n	80037ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4619      	mov	r1, r3
 8003802:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003804:	2b00      	cmp	r3, #0
 8003806:	d15a      	bne.n	80038be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0220 	bic.w	r2, r2, #32
 8003816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	d135      	bne.n	80038b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	613b      	str	r3, [r7, #16]
   return(result);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 0310 	bic.w	r3, r3, #16
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	623a      	str	r2, [r7, #32]
 8003870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	69f9      	ldr	r1, [r7, #28]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	61bb      	str	r3, [r7, #24]
   return(result);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d10a      	bne.n	80038a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fe67 	bl	8003580 <HAL_UARTEx_RxEventCallback>
 80038b2:	e002      	b.n	80038ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fe4f 	bl	8003558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e002      	b.n	80038c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b0c0      	sub	sp, #256	; 0x100
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	68d9      	ldr	r1, [r3, #12]
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	ea40 0301 	orr.w	r3, r0, r1
 80038f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003924:	f021 010c 	bic.w	r1, r1, #12
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003932:	430b      	orrs	r3, r1
 8003934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	ea40 0301 	orr.w	r3, r0, r1
 8003952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <UART_SetConfig+0x2cc>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d005      	beq.n	800396c <UART_SetConfig+0xa0>
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b8d      	ldr	r3, [pc, #564]	; (8003b9c <UART_SetConfig+0x2d0>)
 8003968:	429a      	cmp	r2, r3
 800396a:	d104      	bne.n	8003976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fafa 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8003970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003974:	e003      	b.n	800397e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003976:	f7ff fae1 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800397a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	f040 810c 	bne.w	8003ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800399a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039a6:	415b      	adcs	r3, r3
 80039a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ae:	4621      	mov	r1, r4
 80039b0:	eb12 0801 	adds.w	r8, r2, r1
 80039b4:	4629      	mov	r1, r5
 80039b6:	eb43 0901 	adc.w	r9, r3, r1
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ce:	4690      	mov	r8, r2
 80039d0:	4699      	mov	r9, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	eb18 0303 	adds.w	r3, r8, r3
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039dc:	462b      	mov	r3, r5
 80039de:	eb49 0303 	adc.w	r3, r9, r3
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039fa:	460b      	mov	r3, r1
 80039fc:	18db      	adds	r3, r3, r3
 80039fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003a00:	4613      	mov	r3, r2
 8003a02:	eb42 0303 	adc.w	r3, r2, r3
 8003a06:	657b      	str	r3, [r7, #84]	; 0x54
 8003a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a10:	f7fc fc2e 	bl	8000270 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a44:	4641      	mov	r1, r8
 8003a46:	eb12 0a01 	adds.w	sl, r2, r1
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a64:	4692      	mov	sl, r2
 8003a66:	469b      	mov	fp, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a72:	464b      	mov	r3, r9
 8003a74:	eb4b 0303 	adc.w	r3, fp, r3
 8003a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a90:	460b      	mov	r3, r1
 8003a92:	18db      	adds	r3, r3, r3
 8003a94:	643b      	str	r3, [r7, #64]	; 0x40
 8003a96:	4613      	mov	r3, r2
 8003a98:	eb42 0303 	adc.w	r3, r2, r3
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aa6:	f7fc fbe3 	bl	8000270 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2264      	movs	r2, #100	; 0x64
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	1acb      	subs	r3, r1, r3
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af0:	415b      	adcs	r3, r3
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6339      	str	r1, [r7, #48]	; 0x30
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	18db      	adds	r3, r3, r3
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b52:	4613      	mov	r3, r2
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b62:	f7fc fb85 	bl	8000270 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4422      	add	r2, r4
 8003b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b94:	e105      	b.n	8003da2 <UART_SetConfig+0x4d6>
 8003b96:	bf00      	nop
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	464b      	mov	r3, r9
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	6239      	str	r1, [r7, #32]
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1854      	adds	r4, r2, r1
 8003bca:	4649      	mov	r1, r9
 8003bcc:	eb43 0501 	adc.w	r5, r3, r1
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	00eb      	lsls	r3, r5, #3
 8003bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bde:	00e2      	lsls	r2, r4, #3
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	4643      	mov	r3, r8
 8003be6:	18e3      	adds	r3, r4, r3
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bec:	464b      	mov	r3, r9
 8003bee:	eb45 0303 	adc.w	r3, r5, r3
 8003bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c12:	4629      	mov	r1, r5
 8003c14:	008b      	lsls	r3, r1, #2
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	008a      	lsls	r2, r1, #2
 8003c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c24:	f7fc fb24 	bl	8000270 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b60      	ldr	r3, [pc, #384]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	011c      	lsls	r4, r3, #4
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	61b9      	str	r1, [r7, #24]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	4641      	mov	r1, r8
 8003c5a:	1851      	adds	r1, r2, r1
 8003c5c:	6139      	str	r1, [r7, #16]
 8003c5e:	4649      	mov	r1, r9
 8003c60:	414b      	adcs	r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	00cb      	lsls	r3, r1, #3
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	00ca      	lsls	r2, r1, #3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	4642      	mov	r2, r8
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	460a      	mov	r2, r1
 8003c90:	eb42 0303 	adc.w	r3, r2, r3
 8003c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	008b      	lsls	r3, r1, #2
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cba:	4641      	mov	r1, r8
 8003cbc:	008a      	lsls	r2, r1, #2
 8003cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cc2:	f7fc fad5 	bl	8000270 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cea:	441c      	add	r4, r3
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cf4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	1891      	adds	r1, r2, r2
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	415b      	adcs	r3, r3
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	1851      	adds	r1, r2, r1
 8003d0e:	6039      	str	r1, [r7, #0]
 8003d10:	4649      	mov	r1, r9
 8003d12:	414b      	adcs	r3, r1
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d22:	4659      	mov	r1, fp
 8003d24:	00cb      	lsls	r3, r1, #3
 8003d26:	4651      	mov	r1, sl
 8003d28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	00ca      	lsls	r2, r1, #3
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	4603      	mov	r3, r0
 8003d36:	4642      	mov	r2, r8
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d50:	667a      	str	r2, [r7, #100]	; 0x64
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d5e:	4649      	mov	r1, r9
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	4641      	mov	r1, r8
 8003d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d68:	4641      	mov	r1, r8
 8003d6a:	008a      	lsls	r2, r1, #2
 8003d6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d70:	f7fc fa7e 	bl	8000270 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	; 0x32
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4422      	add	r2, r4
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dbc:	22c0      	movs	r2, #192	; 0xc0
 8003dbe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003dc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dc2:	22a8      	movs	r2, #168	; 0xa8
 8003dc4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003dc6:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 27;
 8003dcc:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dce:	221b      	movs	r2, #27
 8003dd0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003dd8:	4b86      	ldr	r3, [pc, #536]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003dde:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003de0:	22ff      	movs	r2, #255	; 0xff
 8003de2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003de4:	4b83      	ldr	r3, [pc, #524]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003dea:	4b83      	ldr	r3, [pc, #524]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003dec:	22c0      	movs	r2, #192	; 0xc0
 8003dee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003df0:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003df2:	22a8      	movs	r2, #168	; 0xa8
 8003df4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003df6:	4b80      	ldr	r3, [pc, #512]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003e02:	f000 fd8d 	bl	8004920 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	061a      	lsls	r2, r3, #24
 8003e0c:	4b78      	ldr	r3, [pc, #480]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e16:	789b      	ldrb	r3, [r3, #2]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e1e:	78d2      	ldrb	r2, [r2, #3]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	061a      	lsls	r2, r3, #24
 8003e24:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	0619      	lsls	r1, r3, #24
 8003e2a:	4b71      	ldr	r3, [pc, #452]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	4319      	orrs	r1, r3
 8003e32:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	496d      	ldr	r1, [pc, #436]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e3c:	78c9      	ldrb	r1, [r1, #3]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e46:	431a      	orrs	r2, r3
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	0619      	lsls	r1, r3, #24
 8003e4e:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	4319      	orrs	r1, r3
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e58:	789b      	ldrb	r3, [r3, #2]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	4964      	ldr	r1, [pc, #400]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e60:	78c9      	ldrb	r1, [r1, #3]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	0619      	lsls	r1, r3, #24
 8003e72:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	4319      	orrs	r1, r3
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	430b      	orrs	r3, r1
 8003e82:	495b      	ldr	r1, [pc, #364]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e84:	78c9      	ldrb	r1, [r1, #3]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <MX_LWIP_Init+0x248>)
 8003e8e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	061a      	lsls	r2, r3, #24
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ea0:	789b      	ldrb	r3, [r3, #2]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	4a53      	ldr	r2, [pc, #332]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ea8:	78d2      	ldrb	r2, [r2, #3]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	061a      	lsls	r2, r3, #24
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0619      	lsls	r1, r3, #24
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	4b4d      	ldr	r3, [pc, #308]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	494b      	ldr	r1, [pc, #300]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ec6:	78c9      	ldrb	r1, [r1, #3]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	0619      	lsls	r1, r3, #24
 8003ed8:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	4319      	orrs	r1, r3
 8003ee0:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ee2:	789b      	ldrb	r3, [r3, #2]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	4942      	ldr	r1, [pc, #264]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eea:	78c9      	ldrb	r1, [r1, #3]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	0619      	lsls	r1, r3, #24
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	4319      	orrs	r1, r3
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003f06:	789b      	ldrb	r3, [r3, #2]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003f0e:	78c9      	ldrb	r1, [r1, #3]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	0e1b      	lsrs	r3, r3, #24
 8003f14:	4313      	orrs	r3, r2
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <MX_LWIP_Init+0x24c>)
 8003f18:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	061a      	lsls	r2, r3, #24
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f2a:	789b      	ldrb	r3, [r3, #2]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a31      	ldr	r2, [pc, #196]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f32:	78d2      	ldrb	r2, [r2, #3]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	061a      	lsls	r2, r3, #24
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	0619      	lsls	r1, r3, #24
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	4319      	orrs	r1, r3
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f48:	789b      	ldrb	r3, [r3, #2]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	492a      	ldr	r1, [pc, #168]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f50:	78c9      	ldrb	r1, [r1, #3]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	0619      	lsls	r1, r3, #24
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	4319      	orrs	r1, r3
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f6c:	789b      	ldrb	r3, [r3, #2]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	430b      	orrs	r3, r1
 8003f72:	4921      	ldr	r1, [pc, #132]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f74:	78c9      	ldrb	r1, [r1, #3]
 8003f76:	430b      	orrs	r3, r1
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	0619      	lsls	r1, r3, #24
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	4319      	orrs	r1, r3
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f90:	789b      	ldrb	r3, [r3, #2]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	430b      	orrs	r3, r1
 8003f96:	4918      	ldr	r1, [pc, #96]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f98:	78c9      	ldrb	r1, [r1, #3]
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <MX_LWIP_Init+0x250>)
 8003fa2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <MX_LWIP_Init+0x254>)
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <MX_LWIP_Init+0x258>)
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <MX_LWIP_Init+0x250>)
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <MX_LWIP_Init+0x24c>)
 8003fb4:	4911      	ldr	r1, [pc, #68]	; (8003ffc <MX_LWIP_Init+0x248>)
 8003fb6:	4816      	ldr	r0, [pc, #88]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fb8:	f001 f99e 	bl	80052f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003fbc:	4814      	ldr	r0, [pc, #80]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fbe:	f001 fb4d 	bl	800565c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003fd4:	480e      	ldr	r0, [pc, #56]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fd6:	f001 fb51 	bl	800567c <netif_set_up>
 8003fda:	e002      	b.n	8003fe2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fde:	f001 fbb9 	bl	8005754 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003fe2:	490c      	ldr	r1, [pc, #48]	; (8004014 <MX_LWIP_Init+0x260>)
 8003fe4:	480a      	ldr	r0, [pc, #40]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fe6:	f001 fc4b 	bl	8005880 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000138 	.word	0x20000138
 8003ff4:	2000013c 	.word	0x2000013c
 8003ff8:	20000140 	.word	0x20000140
 8003ffc:	2000012c 	.word	0x2000012c
 8004000:	20000130 	.word	0x20000130
 8004004:	20000134 	.word	0x20000134
 8004008:	0800e899 	.word	0x0800e899
 800400c:	080042c5 	.word	0x080042c5
 8004010:	200000f8 	.word	0x200000f8
 8004014:	08004019 	.word	0x08004019

08004018 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <low_level_init+0x110>)
 800403a:	4a41      	ldr	r2, [pc, #260]	; (8004140 <low_level_init+0x114>)
 800403c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800403e:	2300      	movs	r3, #0
 8004040:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004046:	23e1      	movs	r3, #225	; 0xe1
 8004048:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004052:	2300      	movs	r3, #0
 8004054:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004056:	4a39      	ldr	r2, [pc, #228]	; (800413c <low_level_init+0x110>)
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <low_level_init+0x110>)
 8004060:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004064:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004066:	4b35      	ldr	r3, [pc, #212]	; (800413c <low_level_init+0x110>)
 8004068:	4a36      	ldr	r2, [pc, #216]	; (8004144 <low_level_init+0x118>)
 800406a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <low_level_init+0x110>)
 800406e:	4a36      	ldr	r2, [pc, #216]	; (8004148 <low_level_init+0x11c>)
 8004070:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004072:	4b32      	ldr	r3, [pc, #200]	; (800413c <low_level_init+0x110>)
 8004074:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004078:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800407a:	4830      	ldr	r0, [pc, #192]	; (800413c <low_level_init+0x110>)
 800407c:	f7fd f8e8 	bl	8001250 <HAL_ETH_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004084:	2238      	movs	r2, #56	; 0x38
 8004086:	2100      	movs	r1, #0
 8004088:	4830      	ldr	r0, [pc, #192]	; (800414c <low_level_init+0x120>)
 800408a:	f00a fd1d 	bl	800eac8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800408e:	4b2f      	ldr	r3, [pc, #188]	; (800414c <low_level_init+0x120>)
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <low_level_init+0x120>)
 8004096:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800409a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <low_level_init+0x120>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80040a2:	482b      	ldr	r0, [pc, #172]	; (8004150 <low_level_init+0x124>)
 80040a4:	f000 fff0 	bl	8005088 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2206      	movs	r2, #6
 80040ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <low_level_init+0x110>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <low_level_init+0x110>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	785a      	ldrb	r2, [r3, #1]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <low_level_init+0x110>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	789a      	ldrb	r2, [r3, #2]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <low_level_init+0x110>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	78da      	ldrb	r2, [r3, #3]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <low_level_init+0x110>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	791a      	ldrb	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <low_level_init+0x110>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	795a      	ldrb	r2, [r3, #5]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040fe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004106:	f043 030a 	orr.w	r3, r3, #10
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004112:	4910      	ldr	r1, [pc, #64]	; (8004154 <low_level_init+0x128>)
 8004114:	4810      	ldr	r0, [pc, #64]	; (8004158 <low_level_init+0x12c>)
 8004116:	f7fc fd00 	bl	8000b1a <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800411a:	480f      	ldr	r0, [pc, #60]	; (8004158 <low_level_init+0x12c>)
 800411c:	f7fc fd2f 	bl	8000b7e <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa14 	bl	8004554 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800412c:	e001      	b.n	8004132 <low_level_init+0x106>
    Error_Handler();
 800412e:	f7fc fad7 	bl	80006e0 <Error_Handler>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20004c14 	.word	0x20004c14
 8004140:	40028000 	.word	0x40028000
 8004144:	20004b74 	.word	0x20004b74
 8004148:	20004ad4 	.word	0x20004ad4
 800414c:	20004cc4 	.word	0x20004cc4
 8004150:	08012588 	.word	0x08012588
 8004154:	2000000c 	.word	0x2000000c
 8004158:	20004cfc 	.word	0x20004cfc

0800415c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b092      	sub	sp, #72	; 0x48
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	2230      	movs	r2, #48	; 0x30
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f00a fca3 	bl	800eac8 <memset>

  for(q = p; q != NULL; q = q->next)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
 8004186:	e045      	b.n	8004214 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418a:	2b03      	cmp	r3, #3
 800418c:	d902      	bls.n	8004194 <low_level_output+0x38>
      return ERR_IF;
 800418e:	f06f 030b 	mvn.w	r3, #11
 8004192:	e055      	b.n	8004240 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8004194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3348      	adds	r3, #72	; 0x48
 80041a4:	443b      	add	r3, r7
 80041a6:	3b3c      	subs	r3, #60	; 0x3c
 80041a8:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80041aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	4619      	mov	r1, r3
 80041b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	443b      	add	r3, r7
 80041be:	3b38      	subs	r3, #56	; 0x38
 80041c0:	6019      	str	r1, [r3, #0]

    if(i>0)
 80041c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d011      	beq.n	80041ec <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	f107 000c 	add.w	r0, r7, #12
 80041d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d2:	460b      	mov	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	440b      	add	r3, r1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	18c1      	adds	r1, r0, r3
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3348      	adds	r3, #72	; 0x48
 80041e6:	443b      	add	r3, r7
 80041e8:	3b34      	subs	r3, #52	; 0x34
 80041ea:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80041f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3348      	adds	r3, #72	; 0x48
 8004200:	443b      	add	r3, r7
 8004202:	3b34      	subs	r3, #52	; 0x34
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	3301      	adds	r3, #1
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
 8004214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1b6      	bne.n	8004188 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	891b      	ldrh	r3, [r3, #8]
 800421e:	461a      	mov	r2, r3
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <low_level_output+0xec>)
 8004222:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <low_level_output+0xec>)
 8004226:	f107 030c 	add.w	r3, r7, #12
 800422a:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <low_level_output+0xec>)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004232:	2214      	movs	r2, #20
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <low_level_output+0xec>)
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <low_level_output+0xf0>)
 8004238:	f7fd f910 	bl	800145c <HAL_ETH_Transmit>

  return errval;
 800423c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004240:	4618      	mov	r0, r3
 8004242:	3748      	adds	r7, #72	; 0x48
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20004cc4 	.word	0x20004cc4
 800424c:	20004c14 	.word	0x20004c14

08004250 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <low_level_input+0x2c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	4619      	mov	r1, r3
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <low_level_input+0x30>)
 800426c:	f7fd f98a 	bl	8001584 <HAL_ETH_ReadData>
  }

  return p;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20004acc 	.word	0x20004acc
 8004280:	20004c14 	.word	0x20004c14

08004284 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ffdd 	bl	8004250 <low_level_input>
 8004296:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	4798      	blx	r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 fe66 	bl	8005f80 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ea      	bne.n	8004290 <ethernetif_input+0xc>
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <ethernetif_init+0x1c>
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <ethernetif_init+0x48>)
 80042d4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80042d8:	490d      	ldr	r1, [pc, #52]	; (8004310 <ethernetif_init+0x4c>)
 80042da:	480e      	ldr	r0, [pc, #56]	; (8004314 <ethernetif_init+0x50>)
 80042dc:	f00a fbfc 	bl	800ead8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2273      	movs	r2, #115	; 0x73
 80042e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2274      	movs	r2, #116	; 0x74
 80042ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <ethernetif_init+0x54>)
 80042f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <ethernetif_init+0x58>)
 80042fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fe95 	bl	800402c <low_level_init>

  return ERR_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0800fb90 	.word	0x0800fb90
 8004310:	0800fbac 	.word	0x0800fbac
 8004314:	0800fbbc 	.word	0x0800fbbc
 8004318:	0800cd05 	.word	0x0800cd05
 800431c:	0800415d 	.word	0x0800415d

08004320 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	4808      	ldr	r0, [pc, #32]	; (8004350 <pbuf_free_custom+0x30>)
 8004330:	f000 ff8c 	bl	800524c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <pbuf_free_custom+0x34>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <pbuf_free_custom+0x34>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <pbuf_free_custom+0x38>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  }
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	08012588 	.word	0x08012588
 8004354:	20004acc 	.word	0x20004acc
 8004358:	20004ad0 	.word	0x20004ad0

0800435c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004360:	f7fc fda2 	bl	8000ea8 <HAL_GetTick>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <HAL_ETH_MspInit+0x138>)
 800438a:	4293      	cmp	r3, r2
 800438c:	f040 8085 	bne.w	800449a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004390:	2300      	movs	r3, #0
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800439a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ba:	6313      	str	r3, [r2, #48]	; 0x30
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d6:	6313      	str	r3, [r2, #48]	; 0x30
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	4a2e      	ldr	r2, [pc, #184]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6313      	str	r3, [r2, #48]	; 0x30
 80043f4:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6313      	str	r3, [r2, #48]	; 0x30
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004438:	2332      	movs	r3, #50	; 0x32
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004448:	230b      	movs	r3, #11
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	4619      	mov	r1, r3
 8004452:	4816      	ldr	r0, [pc, #88]	; (80044ac <HAL_ETH_MspInit+0x140>)
 8004454:	f7fd ffa6 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004458:	2386      	movs	r3, #134	; 0x86
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	2303      	movs	r3, #3
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004468:	230b      	movs	r3, #11
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004470:	4619      	mov	r1, r3
 8004472:	480f      	ldr	r0, [pc, #60]	; (80044b0 <HAL_ETH_MspInit+0x144>)
 8004474:	f7fd ff96 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004478:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800448a:	230b      	movs	r3, #11
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004492:	4619      	mov	r1, r3
 8004494:	4807      	ldr	r0, [pc, #28]	; (80044b4 <HAL_ETH_MspInit+0x148>)
 8004496:	f7fd ff85 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800449a:	bf00      	nop
 800449c:	3738      	adds	r7, #56	; 0x38
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40028000 	.word	0x40028000
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020400 	.word	0x40020400

080044b8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <ETH_PHY_IO_Init+0x10>)
 80044be:	f7fd fb29 	bl	8001b14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20004c14 	.word	0x20004c14

080044cc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return 0;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <ETH_PHY_IO_ReadReg+0x30>)
 80044f0:	f7fd f97e 	bl	80017f0 <HAL_ETH_ReadPHYRegister>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e000      	b.n	8004502 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20004c14 	.word	0x20004c14

08004510 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	4807      	ldr	r0, [pc, #28]	; (8004540 <ETH_PHY_IO_WriteReg+0x30>)
 8004524:	f7fd f9af 	bl	8001886 <HAL_ETH_WritePHYRegister>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e000      	b.n	8004536 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20004c14 	.word	0x20004c14

08004544 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004548:	f7fc fcae 	bl	8000ea8 <HAL_GetTick>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b0a0      	sub	sp, #128	; 0x80
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	2264      	movs	r2, #100	; 0x64
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f00a faaf 	bl	800eac8 <memset>
  int32_t PHYLinkState = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004572:	2300      	movs	r3, #0
 8004574:	67bb      	str	r3, [r7, #120]	; 0x78
 8004576:	2300      	movs	r3, #0
 8004578:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800457a:	483a      	ldr	r0, [pc, #232]	; (8004664 <ethernet_link_check_state+0x110>)
 800457c:	f7fc fba7 	bl	8000cce <DP83848_GetLinkState>
 8004580:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <ethernet_link_check_state+0x5a>
 8004594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004596:	2b01      	cmp	r3, #1
 8004598:	dc09      	bgt.n	80045ae <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800459a:	4833      	ldr	r0, [pc, #204]	; (8004668 <ethernet_link_check_state+0x114>)
 800459c:	f7fc ff1f 	bl	80013de <HAL_ETH_Stop>
    netif_set_down(netif);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 f8d7 	bl	8005754 <netif_set_down>
    netif_set_link_down(netif);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f93a 	bl	8005820 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80045ac:	e055      	b.n	800465a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d14e      	bne.n	800465a <ethernet_link_check_state+0x106>
 80045bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045be:	2b01      	cmp	r3, #1
 80045c0:	dd4b      	ble.n	800465a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	3b02      	subs	r3, #2
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d82a      	bhi.n	8004620 <ethernet_link_check_state+0xcc>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <ethernet_link_check_state+0x7c>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045f3 	.word	0x080045f3
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
      duplex = ETH_FULLDUPLEX_MODE;
 80045e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80045e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80045f0:	e017      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80045f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004600:	e00f      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004606:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004608:	2300      	movs	r3, #0
 800460a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800460c:	2301      	movs	r3, #1
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004610:	e007      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004612:	2300      	movs	r3, #0
 8004614:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004616:	2300      	movs	r3, #0
 8004618:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800461e:	e000      	b.n	8004622 <ethernet_link_check_state+0xce>
      break;
 8004620:	bf00      	nop
    if(linkchanged)
 8004622:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4619      	mov	r1, r3
 800462e:	480e      	ldr	r0, [pc, #56]	; (8004668 <ethernet_link_check_state+0x114>)
 8004630:	f7fd f972 	bl	8001918 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800463a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	4619      	mov	r1, r3
 8004642:	4809      	ldr	r0, [pc, #36]	; (8004668 <ethernet_link_check_state+0x114>)
 8004644:	f7fd fa4b 	bl	8001ade <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004648:	4807      	ldr	r0, [pc, #28]	; (8004668 <ethernet_link_check_state+0x114>)
 800464a:	f7fc fe7f 	bl	800134c <HAL_ETH_Start>
      netif_set_up(netif);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 f814 	bl	800567c <netif_set_up>
      netif_set_link_up(netif);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 f8af 	bl	80057b8 <netif_set_link_up>
}
 800465a:	bf00      	nop
 800465c:	3780      	adds	r7, #128	; 0x80
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20004cfc 	.word	0x20004cfc
 8004668:	20004c14 	.word	0x20004c14

0800466c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004674:	4812      	ldr	r0, [pc, #72]	; (80046c0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004676:	f000 fd7b 	bl	8005170 <memp_malloc_pool>
 800467a:	60f8      	str	r0, [r7, #12]
  if (p)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d014      	beq.n	80046ac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f103 0220 	add.w	r2, r3, #32
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004690:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800469a:	9201      	str	r2, [sp, #4]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2241      	movs	r2, #65	; 0x41
 80046a2:	2100      	movs	r1, #0
 80046a4:	2000      	movs	r0, #0
 80046a6:	f001 fab1 	bl	8005c0c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80046aa:	e005      	b.n	80046b8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	08012588 	.word	0x08012588
 80046c4:	08004321 	.word	0x08004321
 80046c8:	20004acc 	.word	0x20004acc

080046cc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3b20      	subs	r3, #32
 80046ea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2200      	movs	r2, #0
 80046f6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	887a      	ldrh	r2, [r7, #2]
 80046fc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e003      	b.n	8004716 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e009      	b.n	8004738 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	891a      	ldrh	r2, [r3, #8]
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	4413      	add	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f2      	bne.n	8004724 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	3724      	adds	r7, #36	; 0x24
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	b21a      	sxth	r2, r3
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	b21b      	sxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b21b      	sxth	r3, r3
 8004768:	b29b      	uxth	r3, r3
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	061a      	lsls	r2, r3, #24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	4313      	orrs	r3, r2
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <lwip_standard_chksum+0x40>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dd0a      	ble.n	80047e8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	1c53      	adds	r3, r2, #1
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	f107 030e 	add.w	r3, r7, #14
 80047dc:	3301      	adds	r3, #1
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	701a      	strb	r2, [r3, #0]
    len--;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80047ec:	e00a      	b.n	8004804 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	61ba      	str	r2, [r7, #24]
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
    len -= 2;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	3b02      	subs	r3, #2
 8004802:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	dcf1      	bgt.n	80047ee <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	dd04      	ble.n	800481a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004810:	f107 030e 	add.w	r3, r7, #14
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800481a:	89fb      	ldrh	r3, [r7, #14]
 800481c:	461a      	mov	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	0c1a      	lsrs	r2, r3, #16
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	b29b      	uxth	r3, r3
 800482c:	4413      	add	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0c1a      	lsrs	r2, r3, #16
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	b29b      	uxth	r3, r3
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b29a      	uxth	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	b2db      	uxtb	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	b29b      	uxth	r3, r3
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	; 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff98 	bl	80047a8 <lwip_standard_chksum>
 8004878:	4603      	mov	r3, r0
 800487a:	43db      	mvns	r3, r3
 800487c:	b29b      	uxth	r3, r3
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e02b      	b.n	80048f4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	895b      	ldrh	r3, [r3, #10]
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7ff ff7e 	bl	80047a8 <lwip_standard_chksum>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4413      	add	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	0c1a      	lsrs	r2, r3, #16
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4413      	add	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	895b      	ldrh	r3, [r3, #10]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1d0      	bne.n	800489c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	b29a      	uxth	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	b29b      	uxth	r3, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	b29b      	uxth	r3, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800492a:	f000 f8d5 	bl	8004ad8 <mem_init>
  memp_init();
 800492e:	f000 fbdb 	bl	80050e8 <memp_init>
  pbuf_init();
  netif_init();
 8004932:	f000 fcd9 	bl	80052e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004936:	f007 f867 	bl	800ba08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800493a:	f001 fdbf 	bl	80064bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800493e:	f006 ffd9 	bl	800b8f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <ptr_to_mem+0x20>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	4413      	add	r3, r2
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20005388 	.word	0x20005388

08004970 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <mem_to_ptr+0x20>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	b29b      	uxth	r3, r3
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20005388 	.word	0x20005388

08004994 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800499c:	4b45      	ldr	r3, [pc, #276]	; (8004ab4 <plug_holes+0x120>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d206      	bcs.n	80049b4 <plug_holes+0x20>
 80049a6:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <plug_holes+0x124>)
 80049a8:	f240 12df 	movw	r2, #479	; 0x1df
 80049ac:	4943      	ldr	r1, [pc, #268]	; (8004abc <plug_holes+0x128>)
 80049ae:	4844      	ldr	r0, [pc, #272]	; (8004ac0 <plug_holes+0x12c>)
 80049b0:	f00a f892 	bl	800ead8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80049b4:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <plug_holes+0x130>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d306      	bcc.n	80049cc <plug_holes+0x38>
 80049be:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <plug_holes+0x124>)
 80049c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049c4:	4940      	ldr	r1, [pc, #256]	; (8004ac8 <plug_holes+0x134>)
 80049c6:	483e      	ldr	r0, [pc, #248]	; (8004ac0 <plug_holes+0x12c>)
 80049c8:	f00a f886 	bl	800ead8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	791b      	ldrb	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d006      	beq.n	80049e2 <plug_holes+0x4e>
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <plug_holes+0x124>)
 80049d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80049da:	493c      	ldr	r1, [pc, #240]	; (8004acc <plug_holes+0x138>)
 80049dc:	4838      	ldr	r0, [pc, #224]	; (8004ac0 <plug_holes+0x12c>)
 80049de:	f00a f87b 	bl	800ead8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049ea:	d906      	bls.n	80049fa <plug_holes+0x66>
 80049ec:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <plug_holes+0x124>)
 80049ee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80049f2:	4937      	ldr	r1, [pc, #220]	; (8004ad0 <plug_holes+0x13c>)
 80049f4:	4832      	ldr	r0, [pc, #200]	; (8004ac0 <plug_holes+0x12c>)
 80049f6:	f00a f86f 	bl	800ead8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ffa4 	bl	800494c <ptr_to_mem>
 8004a04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d024      	beq.n	8004a58 <plug_holes+0xc4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d120      	bne.n	8004a58 <plug_holes+0xc4>
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <plug_holes+0x130>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d01b      	beq.n	8004a58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <plug_holes+0x140>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d102      	bne.n	8004a30 <plug_holes+0x9c>
      lfree = mem;
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <plug_holes+0x140>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a40:	d00a      	beq.n	8004a58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff80 	bl	800494c <ptr_to_mem>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff8e 	bl	8004970 <mem_to_ptr>
 8004a54:	4603      	mov	r3, r0
 8004a56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	885b      	ldrh	r3, [r3, #2]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff75 	bl	800494c <ptr_to_mem>
 8004a62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d01f      	beq.n	8004aac <plug_holes+0x118>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11b      	bne.n	8004aac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <plug_holes+0x140>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d102      	bne.n	8004a84 <plug_holes+0xf0>
      lfree = pmem;
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <plug_holes+0x140>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	881a      	ldrh	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a94:	d00a      	beq.n	8004aac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff56 	bl	800494c <ptr_to_mem>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f7ff ff64 	bl	8004970 <mem_to_ptr>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}
 8004ab4:	20005388 	.word	0x20005388
 8004ab8:	0800fbe4 	.word	0x0800fbe4
 8004abc:	0800fc14 	.word	0x0800fc14
 8004ac0:	0800fc2c 	.word	0x0800fc2c
 8004ac4:	2000538c 	.word	0x2000538c
 8004ac8:	0800fc54 	.word	0x0800fc54
 8004acc:	0800fc70 	.word	0x0800fc70
 8004ad0:	0800fc8c 	.word	0x0800fc8c
 8004ad4:	20005390 	.word	0x20005390

08004ad8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <mem_init+0x68>)
 8004ae0:	3303      	adds	r3, #3
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <mem_init+0x6c>)
 8004aea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <mem_init+0x6c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004af8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b06:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b0a:	f7ff ff1f 	bl	800494c <ptr_to_mem>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <mem_init+0x70>)
 8004b12:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <mem_init+0x70>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <mem_init+0x70>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <mem_init+0x70>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <mem_init+0x6c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <mem_init+0x74>)
 8004b36:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20004d34 	.word	0x20004d34
 8004b44:	20005388 	.word	0x20005388
 8004b48:	2000538c 	.word	0x2000538c
 8004b4c:	20005390 	.word	0x20005390

08004b50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff09 	bl	8004970 <mem_to_ptr>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fef0 	bl	800494c <ptr_to_mem>
 8004b6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	885b      	ldrh	r3, [r3, #2]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff feea 	bl	800494c <ptr_to_mem>
 8004b78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b82:	d818      	bhi.n	8004bb6 <mem_link_valid+0x66>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	885b      	ldrh	r3, [r3, #2]
 8004b88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b8c:	d813      	bhi.n	8004bb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004b92:	8afa      	ldrh	r2, [r7, #22]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d004      	beq.n	8004ba2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	8afa      	ldrh	r2, [r7, #22]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d109      	bne.n	8004bb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <mem_link_valid+0x74>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d006      	beq.n	8004bba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	885b      	ldrh	r3, [r3, #2]
 8004bb0:	8afa      	ldrh	r2, [r7, #22]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d001      	beq.n	8004bba <mem_link_valid+0x6a>
    return 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <mem_link_valid+0x6c>
  }
  return 1;
 8004bba:	2301      	movs	r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	2000538c 	.word	0x2000538c

08004bc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04c      	beq.n	8004c70 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <mem_free+0xb0>)
 8004be2:	f240 2273 	movw	r2, #627	; 0x273
 8004be6:	4925      	ldr	r1, [pc, #148]	; (8004c7c <mem_free+0xb4>)
 8004be8:	4825      	ldr	r0, [pc, #148]	; (8004c80 <mem_free+0xb8>)
 8004bea:	f009 ff75 	bl	800ead8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004bee:	e040      	b.n	8004c72 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3b08      	subs	r3, #8
 8004bf4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004bf6:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <mem_free+0xbc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d306      	bcc.n	8004c0e <mem_free+0x46>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f103 020c 	add.w	r2, r3, #12
 8004c06:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <mem_free+0xc0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d907      	bls.n	8004c1e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <mem_free+0xb0>)
 8004c10:	f240 227f 	movw	r2, #639	; 0x27f
 8004c14:	491d      	ldr	r1, [pc, #116]	; (8004c8c <mem_free+0xc4>)
 8004c16:	481a      	ldr	r0, [pc, #104]	; (8004c80 <mem_free+0xb8>)
 8004c18:	f009 ff5e 	bl	800ead8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c1c:	e029      	b.n	8004c72 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	791b      	ldrb	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <mem_free+0xb0>)
 8004c28:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004c2c:	4918      	ldr	r1, [pc, #96]	; (8004c90 <mem_free+0xc8>)
 8004c2e:	4814      	ldr	r0, [pc, #80]	; (8004c80 <mem_free+0xb8>)
 8004c30:	f009 ff52 	bl	800ead8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c34:	e01d      	b.n	8004c72 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff8a 	bl	8004b50 <mem_link_valid>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <mem_free+0xb0>)
 8004c44:	f240 2295 	movw	r2, #661	; 0x295
 8004c48:	4912      	ldr	r1, [pc, #72]	; (8004c94 <mem_free+0xcc>)
 8004c4a:	480d      	ldr	r0, [pc, #52]	; (8004c80 <mem_free+0xb8>)
 8004c4c:	f009 ff44 	bl	800ead8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c50:	e00f      	b.n	8004c72 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <mem_free+0xd0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d202      	bcs.n	8004c68 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004c62:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <mem_free+0xd0>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7ff fe93 	bl	8004994 <plug_holes>
 8004c6e:	e000      	b.n	8004c72 <mem_free+0xaa>
    return;
 8004c70:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	0800fbe4 	.word	0x0800fbe4
 8004c7c:	0800fcb8 	.word	0x0800fcb8
 8004c80:	0800fc2c 	.word	0x0800fc2c
 8004c84:	20005388 	.word	0x20005388
 8004c88:	2000538c 	.word	0x2000538c
 8004c8c:	0800fcdc 	.word	0x0800fcdc
 8004c90:	0800fcf8 	.word	0x0800fcf8
 8004c94:	0800fd20 	.word	0x0800fd20
 8004c98:	20005390 	.word	0x20005390

08004c9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ca8:	887b      	ldrh	r3, [r7, #2]
 8004caa:	3303      	adds	r3, #3
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004cb4:	8bfb      	ldrh	r3, [r7, #30]
 8004cb6:	2b0b      	cmp	r3, #11
 8004cb8:	d801      	bhi.n	8004cbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004cba:	230c      	movs	r3, #12
 8004cbc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004cbe:	8bfb      	ldrh	r3, [r7, #30]
 8004cc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cc4:	d803      	bhi.n	8004cce <mem_trim+0x32>
 8004cc6:	8bfa      	ldrh	r2, [r7, #30]
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d201      	bcs.n	8004cd2 <mem_trim+0x36>
    return NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e0cc      	b.n	8004e6c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004cd2:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <mem_trim+0x1d8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d304      	bcc.n	8004ce6 <mem_trim+0x4a>
 8004cdc:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <mem_trim+0x1dc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d306      	bcc.n	8004cf4 <mem_trim+0x58>
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <mem_trim+0x1e0>)
 8004ce8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004cec:	4964      	ldr	r1, [pc, #400]	; (8004e80 <mem_trim+0x1e4>)
 8004cee:	4865      	ldr	r0, [pc, #404]	; (8004e84 <mem_trim+0x1e8>)
 8004cf0:	f009 fef2 	bl	800ead8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <mem_trim+0x1d8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d304      	bcc.n	8004d08 <mem_trim+0x6c>
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <mem_trim+0x1dc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d301      	bcc.n	8004d0c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	e0af      	b.n	8004e6c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b08      	subs	r3, #8
 8004d10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d12:	69b8      	ldr	r0, [r7, #24]
 8004d14:	f7ff fe2c 	bl	8004970 <mem_to_ptr>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	8afb      	ldrh	r3, [r7, #22]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b08      	subs	r3, #8
 8004d28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d2a:	8bfa      	ldrh	r2, [r7, #30]
 8004d2c:	8abb      	ldrh	r3, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d906      	bls.n	8004d40 <mem_trim+0xa4>
 8004d32:	4b52      	ldr	r3, [pc, #328]	; (8004e7c <mem_trim+0x1e0>)
 8004d34:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004d38:	4953      	ldr	r1, [pc, #332]	; (8004e88 <mem_trim+0x1ec>)
 8004d3a:	4852      	ldr	r0, [pc, #328]	; (8004e84 <mem_trim+0x1e8>)
 8004d3c:	f009 fecc 	bl	800ead8 <iprintf>
  if (newsize > size) {
 8004d40:	8bfa      	ldrh	r2, [r7, #30]
 8004d42:	8abb      	ldrh	r3, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d901      	bls.n	8004d4c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e08f      	b.n	8004e6c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004d4c:	8bfa      	ldrh	r2, [r7, #30]
 8004d4e:	8abb      	ldrh	r3, [r7, #20]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d101      	bne.n	8004d58 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	e089      	b.n	8004e6c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fdf5 	bl	800494c <ptr_to_mem>
 8004d62:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d13f      	bne.n	8004dec <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d74:	d106      	bne.n	8004d84 <mem_trim+0xe8>
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <mem_trim+0x1e0>)
 8004d78:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004d7c:	4943      	ldr	r1, [pc, #268]	; (8004e8c <mem_trim+0x1f0>)
 8004d7e:	4841      	ldr	r0, [pc, #260]	; (8004e84 <mem_trim+0x1e8>)
 8004d80:	f009 feaa 	bl	800ead8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004d8a:	8afa      	ldrh	r2, [r7, #22]
 8004d8c:	8bfb      	ldrh	r3, [r7, #30]
 8004d8e:	4413      	add	r3, r2
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3308      	adds	r3, #8
 8004d94:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004d96:	4b3e      	ldr	r3, [pc, #248]	; (8004e90 <mem_trim+0x1f4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d106      	bne.n	8004dae <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fdd2 	bl	800494c <ptr_to_mem>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a39      	ldr	r2, [pc, #228]	; (8004e90 <mem_trim+0x1f4>)
 8004dac:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004dae:	89fb      	ldrh	r3, [r7, #14]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fdcb 	bl	800494c <ptr_to_mem>
 8004db6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	89ba      	ldrh	r2, [r7, #12]
 8004dc2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	8afa      	ldrh	r2, [r7, #22]
 8004dc8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	89fa      	ldrh	r2, [r7, #14]
 8004dce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dd8:	d047      	beq.n	8004e6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fdb4 	bl	800494c <ptr_to_mem>
 8004de4:	4602      	mov	r2, r0
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	8053      	strh	r3, [r2, #2]
 8004dea:	e03e      	b.n	8004e6a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004dec:	8bfb      	ldrh	r3, [r7, #30]
 8004dee:	f103 0214 	add.w	r2, r3, #20
 8004df2:	8abb      	ldrh	r3, [r7, #20]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d838      	bhi.n	8004e6a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004df8:	8afa      	ldrh	r2, [r7, #22]
 8004dfa:	8bfb      	ldrh	r3, [r7, #30]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3308      	adds	r3, #8
 8004e02:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e0c:	d106      	bne.n	8004e1c <mem_trim+0x180>
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <mem_trim+0x1e0>)
 8004e10:	f240 3216 	movw	r2, #790	; 0x316
 8004e14:	491d      	ldr	r1, [pc, #116]	; (8004e8c <mem_trim+0x1f0>)
 8004e16:	481b      	ldr	r0, [pc, #108]	; (8004e84 <mem_trim+0x1e8>)
 8004e18:	f009 fe5e 	bl	800ead8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004e1c:	89fb      	ldrh	r3, [r7, #14]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fd94 	bl	800494c <ptr_to_mem>
 8004e24:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <mem_trim+0x1f4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d202      	bcs.n	8004e36 <mem_trim+0x19a>
      lfree = mem2;
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <mem_trim+0x1f4>)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	881a      	ldrh	r2, [r3, #0]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	89fa      	ldrh	r2, [r7, #14]
 8004e4e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e58:	d007      	beq.n	8004e6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fd74 	bl	800494c <ptr_to_mem>
 8004e64:	4602      	mov	r2, r0
 8004e66:	89fb      	ldrh	r3, [r7, #14]
 8004e68:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004e6a:	687b      	ldr	r3, [r7, #4]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20005388 	.word	0x20005388
 8004e78:	2000538c 	.word	0x2000538c
 8004e7c:	0800fbe4 	.word	0x0800fbe4
 8004e80:	0800fd54 	.word	0x0800fd54
 8004e84:	0800fc2c 	.word	0x0800fc2c
 8004e88:	0800fd6c 	.word	0x0800fd6c
 8004e8c:	0800fd8c 	.word	0x0800fd8c
 8004e90:	20005390 	.word	0x20005390

08004e94 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <mem_malloc+0x14>
    return NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e0d9      	b.n	800505c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	3303      	adds	r3, #3
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004eb4:	8bbb      	ldrh	r3, [r7, #28]
 8004eb6:	2b0b      	cmp	r3, #11
 8004eb8:	d801      	bhi.n	8004ebe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004eba:	230c      	movs	r3, #12
 8004ebc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004ebe:	8bbb      	ldrh	r3, [r7, #28]
 8004ec0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ec4:	d803      	bhi.n	8004ece <mem_malloc+0x3a>
 8004ec6:	8bba      	ldrh	r2, [r7, #28]
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d201      	bcs.n	8004ed2 <mem_malloc+0x3e>
    return NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e0c4      	b.n	800505c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004ed2:	4b64      	ldr	r3, [pc, #400]	; (8005064 <mem_malloc+0x1d0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fd4a 	bl	8004970 <mem_to_ptr>
 8004edc:	4603      	mov	r3, r0
 8004ede:	83fb      	strh	r3, [r7, #30]
 8004ee0:	e0b4      	b.n	800504c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004ee2:	8bfb      	ldrh	r3, [r7, #30]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fd31 	bl	800494c <ptr_to_mem>
 8004eea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	791b      	ldrb	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 80a4 	bne.w	800503e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	8bfb      	ldrh	r3, [r7, #30]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f1a3 0208 	sub.w	r2, r3, #8
 8004f04:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f0c0 8099 	bcc.w	800503e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	8bfb      	ldrh	r3, [r7, #30]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f1a3 0208 	sub.w	r2, r3, #8
 8004f1a:	8bbb      	ldrh	r3, [r7, #28]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d333      	bcc.n	8004f8a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004f22:	8bfa      	ldrh	r2, [r7, #30]
 8004f24:	8bbb      	ldrh	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004f2e:	8a7b      	ldrh	r3, [r7, #18]
 8004f30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f34:	d106      	bne.n	8004f44 <mem_malloc+0xb0>
 8004f36:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <mem_malloc+0x1d4>)
 8004f38:	f240 3287 	movw	r2, #903	; 0x387
 8004f3c:	494b      	ldr	r1, [pc, #300]	; (800506c <mem_malloc+0x1d8>)
 8004f3e:	484c      	ldr	r0, [pc, #304]	; (8005070 <mem_malloc+0x1dc>)
 8004f40:	f009 fdca 	bl	800ead8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004f44:	8a7b      	ldrh	r3, [r7, #18]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fd00 	bl	800494c <ptr_to_mem>
 8004f4c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	881a      	ldrh	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8bfa      	ldrh	r2, [r7, #30]
 8004f60:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	8a7a      	ldrh	r2, [r7, #18]
 8004f66:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f76:	d00b      	beq.n	8004f90 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fce5 	bl	800494c <ptr_to_mem>
 8004f82:	4602      	mov	r2, r0
 8004f84:	8a7b      	ldrh	r3, [r7, #18]
 8004f86:	8053      	strh	r3, [r2, #2]
 8004f88:	e002      	b.n	8004f90 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <mem_malloc+0x1d0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d127      	bne.n	8004fea <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004f9a:	4b32      	ldr	r3, [pc, #200]	; (8005064 <mem_malloc+0x1d0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004fa0:	e005      	b.n	8004fae <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fcd0 	bl	800494c <ptr_to_mem>
 8004fac:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	791b      	ldrb	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <mem_malloc+0x12c>
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <mem_malloc+0x1e0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d1f0      	bne.n	8004fa2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004fc0:	4a28      	ldr	r2, [pc, #160]	; (8005064 <mem_malloc+0x1d0>)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004fc6:	4b27      	ldr	r3, [pc, #156]	; (8005064 <mem_malloc+0x1d0>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <mem_malloc+0x1e0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d00b      	beq.n	8004fea <mem_malloc+0x156>
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <mem_malloc+0x1d0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	791b      	ldrb	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <mem_malloc+0x156>
 8004fdc:	4b22      	ldr	r3, [pc, #136]	; (8005068 <mem_malloc+0x1d4>)
 8004fde:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004fe2:	4925      	ldr	r1, [pc, #148]	; (8005078 <mem_malloc+0x1e4>)
 8004fe4:	4822      	ldr	r0, [pc, #136]	; (8005070 <mem_malloc+0x1dc>)
 8004fe6:	f009 fd77 	bl	800ead8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004fea:	8bba      	ldrh	r2, [r7, #28]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	4a20      	ldr	r2, [pc, #128]	; (8005074 <mem_malloc+0x1e0>)
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d906      	bls.n	8005008 <mem_malloc+0x174>
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <mem_malloc+0x1d4>)
 8004ffc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005000:	491e      	ldr	r1, [pc, #120]	; (800507c <mem_malloc+0x1e8>)
 8005002:	481b      	ldr	r0, [pc, #108]	; (8005070 <mem_malloc+0x1dc>)
 8005004:	f009 fd68 	bl	800ead8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <mem_malloc+0x18c>
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <mem_malloc+0x1d4>)
 8005014:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005018:	4919      	ldr	r1, [pc, #100]	; (8005080 <mem_malloc+0x1ec>)
 800501a:	4815      	ldr	r0, [pc, #84]	; (8005070 <mem_malloc+0x1dc>)
 800501c:	f009 fd5c 	bl	800ead8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <mem_malloc+0x1a4>
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <mem_malloc+0x1d4>)
 800502c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005030:	4914      	ldr	r1, [pc, #80]	; (8005084 <mem_malloc+0x1f0>)
 8005032:	480f      	ldr	r0, [pc, #60]	; (8005070 <mem_malloc+0x1dc>)
 8005034:	f009 fd50 	bl	800ead8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3308      	adds	r3, #8
 800503c:	e00e      	b.n	800505c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fc83 	bl	800494c <ptr_to_mem>
 8005046:	4603      	mov	r3, r0
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800504c:	8bfa      	ldrh	r2, [r7, #30]
 800504e:	8bbb      	ldrh	r3, [r7, #28]
 8005050:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005054:	429a      	cmp	r2, r3
 8005056:	f4ff af44 	bcc.w	8004ee2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20005390 	.word	0x20005390
 8005068:	0800fbe4 	.word	0x0800fbe4
 800506c:	0800fd8c 	.word	0x0800fd8c
 8005070:	0800fc2c 	.word	0x0800fc2c
 8005074:	2000538c 	.word	0x2000538c
 8005078:	0800fda0 	.word	0x0800fda0
 800507c:	0800fdbc 	.word	0x0800fdbc
 8005080:	0800fdec 	.word	0x0800fdec
 8005084:	0800fe1c 	.word	0x0800fe1c

08005088 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	3303      	adds	r3, #3
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e011      	b.n	80050ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	885b      	ldrh	r3, [r3, #2]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	dbe7      	blt.n	80050aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80050ee:	2300      	movs	r3, #0
 80050f0:	80fb      	strh	r3, [r7, #6]
 80050f2:	e009      	b.n	8005108 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <memp_init+0x30>)
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff ffc3 	bl	8005088 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	3301      	adds	r3, #1
 8005106:	80fb      	strh	r3, [r7, #6]
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	2b08      	cmp	r3, #8
 800510c:	d9f2      	bls.n	80050f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08012600 	.word	0x08012600

0800511c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <do_memp_malloc_pool+0x38>
 8005146:	4b07      	ldr	r3, [pc, #28]	; (8005164 <do_memp_malloc_pool+0x48>)
 8005148:	f44f 728c 	mov.w	r2, #280	; 0x118
 800514c:	4906      	ldr	r1, [pc, #24]	; (8005168 <do_memp_malloc_pool+0x4c>)
 800514e:	4807      	ldr	r0, [pc, #28]	; (800516c <do_memp_malloc_pool+0x50>)
 8005150:	f009 fcc2 	bl	800ead8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	e000      	b.n	800515a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	0800fe40 	.word	0x0800fe40
 8005168:	0800fe70 	.word	0x0800fe70
 800516c:	0800fe94 	.word	0x0800fe94

08005170 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <memp_malloc_pool+0x1c>
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <memp_malloc_pool+0x38>)
 8005180:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005184:	4909      	ldr	r1, [pc, #36]	; (80051ac <memp_malloc_pool+0x3c>)
 8005186:	480a      	ldr	r0, [pc, #40]	; (80051b0 <memp_malloc_pool+0x40>)
 8005188:	f009 fca6 	bl	800ead8 <iprintf>
  if (desc == NULL) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <memp_malloc_pool+0x26>
    return NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	e003      	b.n	800519e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ffc0 	bl	800511c <do_memp_malloc_pool>
 800519c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	0800fe40 	.word	0x0800fe40
 80051ac:	0800febc 	.word	0x0800febc
 80051b0:	0800fe94 	.word	0x0800fe94

080051b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d908      	bls.n	80051d6 <memp_malloc+0x22>
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <memp_malloc+0x3c>)
 80051c6:	f240 1257 	movw	r2, #343	; 0x157
 80051ca:	490a      	ldr	r1, [pc, #40]	; (80051f4 <memp_malloc+0x40>)
 80051cc:	480a      	ldr	r0, [pc, #40]	; (80051f8 <memp_malloc+0x44>)
 80051ce:	f009 fc83 	bl	800ead8 <iprintf>
 80051d2:	2300      	movs	r3, #0
 80051d4:	e008      	b.n	80051e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <memp_malloc+0x48>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff9c 	bl	800511c <do_memp_malloc_pool>
 80051e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	0800fe40 	.word	0x0800fe40
 80051f4:	0800fed0 	.word	0x0800fed0
 80051f8:	0800fe94 	.word	0x0800fe94
 80051fc:	08012600 	.word	0x08012600

08005200 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <do_memp_free_pool+0x22>
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <do_memp_free_pool+0x40>)
 8005216:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <do_memp_free_pool+0x44>)
 800521c:	480a      	ldr	r0, [pc, #40]	; (8005248 <do_memp_free_pool+0x48>)
 800521e:	f009 fc5b 	bl	800ead8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800fe40 	.word	0x0800fe40
 8005244:	0800fef0 	.word	0x0800fef0
 8005248:	0800fe94 	.word	0x0800fe94

0800524c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <memp_free_pool+0x1e>
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <memp_free_pool+0x3c>)
 800525e:	f240 1295 	movw	r2, #405	; 0x195
 8005262:	490a      	ldr	r1, [pc, #40]	; (800528c <memp_free_pool+0x40>)
 8005264:	480a      	ldr	r0, [pc, #40]	; (8005290 <memp_free_pool+0x44>)
 8005266:	f009 fc37 	bl	800ead8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <memp_free_pool+0x34>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ffc1 	bl	8005200 <do_memp_free_pool>
 800527e:	e000      	b.n	8005282 <memp_free_pool+0x36>
    return;
 8005280:	bf00      	nop
}
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	0800fe40 	.word	0x0800fe40
 800528c:	0800febc 	.word	0x0800febc
 8005290:	0800fe94 	.word	0x0800fe94

08005294 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	6039      	str	r1, [r7, #0]
 800529e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d907      	bls.n	80052b6 <memp_free+0x22>
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <memp_free+0x44>)
 80052a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80052ac:	490b      	ldr	r1, [pc, #44]	; (80052dc <memp_free+0x48>)
 80052ae:	480c      	ldr	r0, [pc, #48]	; (80052e0 <memp_free+0x4c>)
 80052b0:	f009 fc12 	bl	800ead8 <iprintf>
 80052b4:	e00c      	b.n	80052d0 <memp_free+0x3c>

  if (mem == NULL) {
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <memp_free+0x50>)
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff9a 	bl	8005200 <do_memp_free_pool>
 80052cc:	e000      	b.n	80052d0 <memp_free+0x3c>
    return;
 80052ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	0800fe40 	.word	0x0800fe40
 80052dc:	0800ff10 	.word	0x0800ff10
 80052e0:	0800fe94 	.word	0x0800fe94
 80052e4:	08012600 	.word	0x08012600

080052e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <netif_add+0x26>
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <netif_add+0x174>)
 800530e:	f240 1227 	movw	r2, #295	; 0x127
 8005312:	4957      	ldr	r1, [pc, #348]	; (8005470 <netif_add+0x178>)
 8005314:	4857      	ldr	r0, [pc, #348]	; (8005474 <netif_add+0x17c>)
 8005316:	f009 fbdf 	bl	800ead8 <iprintf>
 800531a:	2300      	movs	r3, #0
 800531c:	e0a2      	b.n	8005464 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d108      	bne.n	8005336 <netif_add+0x3e>
 8005324:	4b51      	ldr	r3, [pc, #324]	; (800546c <netif_add+0x174>)
 8005326:	f44f 7294 	mov.w	r2, #296	; 0x128
 800532a:	4953      	ldr	r1, [pc, #332]	; (8005478 <netif_add+0x180>)
 800532c:	4851      	ldr	r0, [pc, #324]	; (8005474 <netif_add+0x17c>)
 800532e:	f009 fbd3 	bl	800ead8 <iprintf>
 8005332:	2300      	movs	r3, #0
 8005334:	e096      	b.n	8005464 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800533c:	4b4f      	ldr	r3, [pc, #316]	; (800547c <netif_add+0x184>)
 800533e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005346:	4b4d      	ldr	r3, [pc, #308]	; (800547c <netif_add+0x184>)
 8005348:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005350:	4b4a      	ldr	r3, [pc, #296]	; (800547c <netif_add+0x184>)
 8005352:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a45      	ldr	r2, [pc, #276]	; (8005480 <netif_add+0x188>)
 800536a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <netif_add+0x18c>)
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f913 	bl	80055c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	4798      	blx	r3
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <netif_add+0xba>
    return NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e058      	b.n	8005464 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053b8:	2bff      	cmp	r3, #255	; 0xff
 80053ba:	d103      	bne.n	80053c4 <netif_add+0xcc>
        netif->num = 0;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80053c8:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <netif_add+0x190>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e02b      	b.n	8005428 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d106      	bne.n	80053e6 <netif_add+0xee>
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <netif_add+0x174>)
 80053da:	f240 128b 	movw	r2, #395	; 0x18b
 80053de:	492b      	ldr	r1, [pc, #172]	; (800548c <netif_add+0x194>)
 80053e0:	4824      	ldr	r0, [pc, #144]	; (8005474 <netif_add+0x17c>)
 80053e2:	f009 fb79 	bl	800ead8 <iprintf>
        num_netifs++;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3301      	adds	r3, #1
 80053ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2bff      	cmp	r3, #255	; 0xff
 80053f0:	dd06      	ble.n	8005400 <netif_add+0x108>
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <netif_add+0x174>)
 80053f4:	f240 128d 	movw	r2, #397	; 0x18d
 80053f8:	4925      	ldr	r1, [pc, #148]	; (8005490 <netif_add+0x198>)
 80053fa:	481e      	ldr	r0, [pc, #120]	; (8005474 <netif_add+0x17c>)
 80053fc:	f009 fb6c 	bl	800ead8 <iprintf>
        if (netif2->num == netif->num) {
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800540c:	429a      	cmp	r2, r3
 800540e:	d108      	bne.n	8005422 <netif_add+0x12a>
          netif->num++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005416:	3301      	adds	r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005420:	e005      	b.n	800542e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d0      	bne.n	80053d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1be      	bne.n	80053b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800543a:	2bfe      	cmp	r3, #254	; 0xfe
 800543c:	d103      	bne.n	8005446 <netif_add+0x14e>
    netif_num = 0;
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <netif_add+0x18c>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e006      	b.n	8005454 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800544c:	3301      	adds	r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <netif_add+0x18c>)
 8005452:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <netif_add+0x190>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <netif_add+0x190>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005462:	68fb      	ldr	r3, [r7, #12]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	0800ff2c 	.word	0x0800ff2c
 8005470:	0800ffc0 	.word	0x0800ffc0
 8005474:	0800ff7c 	.word	0x0800ff7c
 8005478:	0800ffdc 	.word	0x0800ffdc
 800547c:	08012664 	.word	0x08012664
 8005480:	080058a3 	.word	0x080058a3
 8005484:	20008288 	.word	0x20008288
 8005488:	20008280 	.word	0x20008280
 800548c:	08010000 	.word	0x08010000
 8005490:	08010014 	.word	0x08010014

08005494 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f002 fb53 	bl	8007b4c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f006 ffaf 	bl	800c40c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <netif_do_set_ipaddr+0x20>
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <netif_do_set_ipaddr+0x88>)
 80054cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80054d0:	491c      	ldr	r1, [pc, #112]	; (8005544 <netif_do_set_ipaddr+0x8c>)
 80054d2:	481d      	ldr	r0, [pc, #116]	; (8005548 <netif_do_set_ipaddr+0x90>)
 80054d4:	f009 fb00 	bl	800ead8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <netif_do_set_ipaddr+0x34>
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <netif_do_set_ipaddr+0x88>)
 80054e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80054e4:	4917      	ldr	r1, [pc, #92]	; (8005544 <netif_do_set_ipaddr+0x8c>)
 80054e6:	4818      	ldr	r0, [pc, #96]	; (8005548 <netif_do_set_ipaddr+0x90>)
 80054e8:	f009 faf6 	bl	800ead8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3304      	adds	r3, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d01c      	beq.n	8005534 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3304      	adds	r3, #4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800550a:	f107 0314 	add.w	r3, r7, #20
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ffbf 	bl	8005494 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <netif_do_set_ipaddr+0x6a>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	e000      	b.n	8005524 <netif_do_set_ipaddr+0x6c>
 8005522:	2300      	movs	r3, #0
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005528:	2101      	movs	r1, #1
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f8d2 	bl	80056d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	0800ff2c 	.word	0x0800ff2c
 8005544:	08010044 	.word	0x08010044
 8005548:	0800ff7c 	.word	0x0800ff7c

0800554c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3308      	adds	r3, #8
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d00a      	beq.n	800557c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <netif_do_set_netmask+0x26>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	e000      	b.n	8005574 <netif_do_set_netmask+0x28>
 8005572:	2300      	movs	r3, #0
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	330c      	adds	r3, #12
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d00a      	beq.n	80055ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <netif_do_set_gw+0x26>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <netif_do_set_gw+0x28>
 80055b0:	2300      	movs	r3, #0
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80055e4:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <netif_set_addr+0x90>)
 80055e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <netif_set_addr+0x90>)
 80055f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80055f8:	4b17      	ldr	r3, [pc, #92]	; (8005658 <netif_set_addr+0x90>)
 80055fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <netif_set_addr+0x42>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <netif_set_addr+0x46>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <netif_set_addr+0x48>
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005618:	f107 0310 	add.w	r3, r7, #16
 800561c:	461a      	mov	r2, r3
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ff49 	bl	80054b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff8e 	bl	800554c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff ffa8 	bl	800558a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	461a      	mov	r2, r3
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff ff35 	bl	80054b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800564e:	bf00      	nop
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	08012664 	.word	0x08012664

0800565c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <netif_set_default+0x1c>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20008284 	.word	0x20008284

0800567c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <netif_set_up+0x1e>
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <netif_set_up+0x4c>)
 800568c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005690:	490e      	ldr	r1, [pc, #56]	; (80056cc <netif_set_up+0x50>)
 8005692:	480f      	ldr	r0, [pc, #60]	; (80056d0 <netif_set_up+0x54>)
 8005694:	f009 fa20 	bl	800ead8 <iprintf>
 8005698:	e013      	b.n	80056c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10c      	bne.n	80056c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80056ba:	2103      	movs	r1, #3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f809 	bl	80056d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	0800ff2c 	.word	0x0800ff2c
 80056cc:	080100b4 	.word	0x080100b4
 80056d0:	0800ff7c 	.word	0x0800ff7c

080056d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <netif_issue_reports+0x20>
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <netif_issue_reports+0x74>)
 80056e8:	f240 326d 	movw	r2, #877	; 0x36d
 80056ec:	4917      	ldr	r1, [pc, #92]	; (800574c <netif_issue_reports+0x78>)
 80056ee:	4818      	ldr	r0, [pc, #96]	; (8005750 <netif_issue_reports+0x7c>)
 80056f0:	f009 f9f2 	bl	800ead8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01e      	beq.n	8005740 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005708:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800570c:	2b00      	cmp	r3, #0
 800570e:	d017      	beq.n	8005740 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d013      	beq.n	8005742 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f007 fdd1 	bl	800d2e0 <etharp_request>
 800573e:	e000      	b.n	8005742 <netif_issue_reports+0x6e>
    return;
 8005740:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	0800ff2c 	.word	0x0800ff2c
 800574c:	080100d0 	.word	0x080100d0
 8005750:	0800ff7c 	.word	0x0800ff7c

08005754 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <netif_set_down+0x1e>
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <netif_set_down+0x58>)
 8005764:	f240 329b 	movw	r2, #923	; 0x39b
 8005768:	4911      	ldr	r1, [pc, #68]	; (80057b0 <netif_set_down+0x5c>)
 800576a:	4812      	ldr	r0, [pc, #72]	; (80057b4 <netif_set_down+0x60>)
 800576c:	f009 f9b4 	bl	800ead8 <iprintf>
 8005770:	e019      	b.n	80057a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d012      	beq.n	80057a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f007 f95b 	bl	800ca5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	0800ff2c 	.word	0x0800ff2c
 80057b0:	080100f4 	.word	0x080100f4
 80057b4:	0800ff7c 	.word	0x0800ff7c

080057b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <netif_set_link_up+0x1e>
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <netif_set_link_up+0x5c>)
 80057c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80057cc:	4912      	ldr	r1, [pc, #72]	; (8005818 <netif_set_link_up+0x60>)
 80057ce:	4813      	ldr	r0, [pc, #76]	; (800581c <netif_set_link_up+0x64>)
 80057d0:	f009 f982 	bl	800ead8 <iprintf>
 80057d4:	e01b      	b.n	800580e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d114      	bne.n	800580e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057ea:	f043 0304 	orr.w	r3, r3, #4
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057f6:	2103      	movs	r1, #3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff6b 	bl	80056d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <netif_set_link_up+0x56>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	0800ff2c 	.word	0x0800ff2c
 8005818:	08010114 	.word	0x08010114
 800581c:	0800ff7c 	.word	0x0800ff7c

08005820 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <netif_set_link_down+0x1e>
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <netif_set_link_down+0x54>)
 8005830:	f240 4206 	movw	r2, #1030	; 0x406
 8005834:	4910      	ldr	r1, [pc, #64]	; (8005878 <netif_set_link_down+0x58>)
 8005836:	4811      	ldr	r0, [pc, #68]	; (800587c <netif_set_link_down+0x5c>)
 8005838:	f009 f94e 	bl	800ead8 <iprintf>
 800583c:	e017      	b.n	800586e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	b2da      	uxtb	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <netif_set_link_down+0x4e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	0800ff2c 	.word	0x0800ff2c
 8005878:	08010138 	.word	0x08010138
 800587c:	0800ff7c 	.word	0x0800ff7c

08005880 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	61da      	str	r2, [r3, #28]
  }
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80058ae:	f06f 030b 	mvn.w	r3, #11
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <netif_get_by_index+0x48>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e00c      	b.n	80058f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058de:	3301      	adds	r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	79fa      	ldrb	r2, [r7, #7]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d101      	bne.n	80058ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	e006      	b.n	80058fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ef      	bne.n	80058d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20008280 	.word	0x20008280

0800590c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <pbuf_free_ooseq+0x38>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <pbuf_free_ooseq+0x3c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	e00a      	b.n	8005936 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f002 f94d 	bl	8007bc8 <tcp_free_ooseq>
      return;
 800592e:	e005      	b.n	800593c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f1      	bne.n	8005920 <pbuf_free_ooseq+0x14>
    }
  }
}
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20008289 	.word	0x20008289
 8005948:	20008298 	.word	0x20008298

0800594c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <pbuf_pool_is_empty+0x14>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005956:	bf00      	nop
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20008289 	.word	0x20008289

08005964 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4611      	mov	r1, r2
 8005970:	461a      	mov	r2, r3
 8005972:	460b      	mov	r3, r1
 8005974:	80fb      	strh	r3, [r7, #6]
 8005976:	4613      	mov	r3, r2
 8005978:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88ba      	ldrh	r2, [r7, #4]
 8005990:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005992:	8b3b      	ldrh	r3, [r7, #24]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	7f3a      	ldrb	r2, [r7, #28]
 800599e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	73da      	strb	r2, [r3, #15]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af02      	add	r7, sp, #8
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
 80059c2:	460b      	mov	r3, r1
 80059c4:	80bb      	strh	r3, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80059d4:	d07f      	beq.n	8005ad6 <pbuf_alloc+0x11e>
 80059d6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80059da:	f300 80c8 	bgt.w	8005b6e <pbuf_alloc+0x1b6>
 80059de:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80059e2:	d010      	beq.n	8005a06 <pbuf_alloc+0x4e>
 80059e4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80059e8:	f300 80c1 	bgt.w	8005b6e <pbuf_alloc+0x1b6>
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d002      	beq.n	80059f6 <pbuf_alloc+0x3e>
 80059f0:	2b41      	cmp	r3, #65	; 0x41
 80059f2:	f040 80bc 	bne.w	8005b6e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80059f6:	887a      	ldrh	r2, [r7, #2]
 80059f8:	88bb      	ldrh	r3, [r7, #4]
 80059fa:	4619      	mov	r1, r3
 80059fc:	2000      	movs	r0, #0
 80059fe:	f000 f8d1 	bl	8005ba4 <pbuf_alloc_reference>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a04:	e0bd      	b.n	8005b82 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a0e:	88bb      	ldrh	r3, [r7, #4]
 8005a10:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a12:	2008      	movs	r0, #8
 8005a14:	f7ff fbce 	bl	80051b4 <memp_malloc>
 8005a18:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a20:	f7ff ff94 	bl	800594c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a2c:	f000 faa8 	bl	8005f80 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e0a7      	b.n	8005b84 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a36:	3303      	adds	r3, #3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8b7a      	ldrh	r2, [r7, #26]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bf28      	it	cs
 8005a4c:	4613      	movcs	r3, r2
 8005a4e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a52:	3310      	adds	r3, #16
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	3303      	adds	r3, #3
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	4618      	mov	r0, r3
 8005a60:	89f9      	ldrh	r1, [r7, #14]
 8005a62:	8b7a      	ldrh	r2, [r7, #26]
 8005a64:	2300      	movs	r3, #0
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4601      	mov	r1, r0
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f7ff ff77 	bl	8005964 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <pbuf_alloc+0xd8>
 8005a82:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <pbuf_alloc+0x1d4>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	4941      	ldr	r1, [pc, #260]	; (8005b90 <pbuf_alloc+0x1d8>)
 8005a8a:	4842      	ldr	r0, [pc, #264]	; (8005b94 <pbuf_alloc+0x1dc>)
 8005a8c:	f009 f824 	bl	800ead8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a92:	3303      	adds	r3, #3
 8005a94:	f023 0303 	bic.w	r3, r3, #3
 8005a98:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005a9c:	d106      	bne.n	8005aac <pbuf_alloc+0xf4>
 8005a9e:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <pbuf_alloc+0x1d4>)
 8005aa0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005aa4:	493c      	ldr	r1, [pc, #240]	; (8005b98 <pbuf_alloc+0x1e0>)
 8005aa6:	483b      	ldr	r0, [pc, #236]	; (8005b94 <pbuf_alloc+0x1dc>)
 8005aa8:	f009 f816 	bl	800ead8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	e002      	b.n	8005abe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005ac2:	8b7a      	ldrh	r2, [r7, #26]
 8005ac4:	89fb      	ldrh	r3, [r7, #14]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005ace:	8b7b      	ldrh	r3, [r7, #26]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d19e      	bne.n	8005a12 <pbuf_alloc+0x5a>
      break;
 8005ad4:	e055      	b.n	8005b82 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ad8:	3303      	adds	r3, #3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f023 0303 	bic.w	r3, r3, #3
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	88bb      	ldrh	r3, [r7, #4]
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005af2:	8b3b      	ldrh	r3, [r7, #24]
 8005af4:	3310      	adds	r3, #16
 8005af6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005af8:	8b3a      	ldrh	r2, [r7, #24]
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	3303      	adds	r3, #3
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d306      	bcc.n	8005b14 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b06:	8afa      	ldrh	r2, [r7, #22]
 8005b08:	88bb      	ldrh	r3, [r7, #4]
 8005b0a:	3303      	adds	r3, #3
 8005b0c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d201      	bcs.n	8005b18 <pbuf_alloc+0x160>
        return NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e035      	b.n	8005b84 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005b18:	8afb      	ldrh	r3, [r7, #22]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff f9ba 	bl	8004e94 <mem_malloc>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <pbuf_alloc+0x174>
        return NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e02b      	b.n	8005b84 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b2e:	3310      	adds	r3, #16
 8005b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b32:	4413      	add	r3, r2
 8005b34:	3303      	adds	r3, #3
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	88b9      	ldrh	r1, [r7, #4]
 8005b3e:	88ba      	ldrh	r2, [r7, #4]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b4e:	f7ff ff09 	bl	8005964 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d010      	beq.n	8005b80 <pbuf_alloc+0x1c8>
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <pbuf_alloc+0x1d4>)
 8005b60:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005b64:	490d      	ldr	r1, [pc, #52]	; (8005b9c <pbuf_alloc+0x1e4>)
 8005b66:	480b      	ldr	r0, [pc, #44]	; (8005b94 <pbuf_alloc+0x1dc>)
 8005b68:	f008 ffb6 	bl	800ead8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005b6c:	e008      	b.n	8005b80 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <pbuf_alloc+0x1d4>)
 8005b70:	f240 1227 	movw	r2, #295	; 0x127
 8005b74:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <pbuf_alloc+0x1e8>)
 8005b76:	4807      	ldr	r0, [pc, #28]	; (8005b94 <pbuf_alloc+0x1dc>)
 8005b78:	f008 ffae 	bl	800ead8 <iprintf>
      return NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e001      	b.n	8005b84 <pbuf_alloc+0x1cc>
      break;
 8005b80:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3728      	adds	r7, #40	; 0x28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	0801015c 	.word	0x0801015c
 8005b90:	0801018c 	.word	0x0801018c
 8005b94:	080101bc 	.word	0x080101bc
 8005b98:	080101e4 	.word	0x080101e4
 8005b9c:	08010218 	.word	0x08010218
 8005ba0:	08010244 	.word	0x08010244

08005ba4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005bb4:	883b      	ldrh	r3, [r7, #0]
 8005bb6:	2b41      	cmp	r3, #65	; 0x41
 8005bb8:	d009      	beq.n	8005bce <pbuf_alloc_reference+0x2a>
 8005bba:	883b      	ldrh	r3, [r7, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d006      	beq.n	8005bce <pbuf_alloc_reference+0x2a>
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <pbuf_alloc_reference+0x5c>)
 8005bc2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005bc6:	490f      	ldr	r1, [pc, #60]	; (8005c04 <pbuf_alloc_reference+0x60>)
 8005bc8:	480f      	ldr	r0, [pc, #60]	; (8005c08 <pbuf_alloc_reference+0x64>)
 8005bca:	f008 ff85 	bl	800ead8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005bce:	2007      	movs	r0, #7
 8005bd0:	f7ff faf0 	bl	80051b4 <memp_malloc>
 8005bd4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e00b      	b.n	8005bf8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005be0:	8879      	ldrh	r1, [r7, #2]
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	883b      	ldrh	r3, [r7, #0]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	460b      	mov	r3, r1
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff feb7 	bl	8005964 <pbuf_init_alloced_pbuf>
  return p;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	0801015c 	.word	0x0801015c
 8005c04:	08010260 	.word	0x08010260
 8005c08:	080101bc 	.word	0x080101bc

08005c0c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	81bb      	strh	r3, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005c24:	8a7b      	ldrh	r3, [r7, #18]
 8005c26:	3303      	adds	r3, #3
 8005c28:	f023 0203 	bic.w	r2, r3, #3
 8005c2c:	89bb      	ldrh	r3, [r7, #12]
 8005c2e:	441a      	add	r2, r3
 8005c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e018      	b.n	8005c6c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005c40:	8a7b      	ldrh	r3, [r7, #18]
 8005c42:	3303      	adds	r3, #3
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	6a3a      	ldr	r2, [r7, #32]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e001      	b.n	8005c54 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	89b9      	ldrh	r1, [r7, #12]
 8005c58:	89ba      	ldrh	r2, [r7, #12]
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	460b      	mov	r3, r1
 8005c64:	6979      	ldr	r1, [r7, #20]
 8005c66:	f7ff fe7d 	bl	8005964 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005c6a:	687b      	ldr	r3, [r7, #4]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <pbuf_realloc+0x20>
 8005c86:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <pbuf_realloc+0xfc>)
 8005c88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005c8c:	4939      	ldr	r1, [pc, #228]	; (8005d74 <pbuf_realloc+0x100>)
 8005c8e:	483a      	ldr	r0, [pc, #232]	; (8005d78 <pbuf_realloc+0x104>)
 8005c90:	f008 ff22 	bl	800ead8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	891b      	ldrh	r3, [r3, #8]
 8005c98:	887a      	ldrh	r2, [r7, #2]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d263      	bcs.n	8005d66 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	891a      	ldrh	r2, [r3, #8]
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005ca8:	887b      	ldrh	r3, [r7, #2]
 8005caa:	817b      	strh	r3, [r7, #10]
  q = p;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005cb0:	e018      	b.n	8005ce4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	895b      	ldrh	r3, [r3, #10]
 8005cb6:	897a      	ldrh	r2, [r7, #10]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	891a      	ldrh	r2, [r3, #8]
 8005cc0:	893b      	ldrh	r3, [r7, #8]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <pbuf_realloc+0x70>
 8005cd6:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <pbuf_realloc+0xfc>)
 8005cd8:	f240 12af 	movw	r2, #431	; 0x1af
 8005cdc:	4927      	ldr	r1, [pc, #156]	; (8005d7c <pbuf_realloc+0x108>)
 8005cde:	4826      	ldr	r0, [pc, #152]	; (8005d78 <pbuf_realloc+0x104>)
 8005ce0:	f008 fefa 	bl	800ead8 <iprintf>
  while (rem_len > q->len) {
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	895b      	ldrh	r3, [r3, #10]
 8005ce8:	897a      	ldrh	r2, [r7, #10]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d8e1      	bhi.n	8005cb2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	7b1b      	ldrb	r3, [r3, #12]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d121      	bne.n	8005d3e <pbuf_realloc+0xca>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	895b      	ldrh	r3, [r3, #10]
 8005cfe:	897a      	ldrh	r2, [r7, #10]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d01c      	beq.n	8005d3e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	7b5b      	ldrb	r3, [r3, #13]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d116      	bne.n	8005d3e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	897b      	ldrh	r3, [r7, #10]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7fe ffba 	bl	8004c9c <mem_trim>
 8005d28:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <pbuf_realloc+0xca>
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <pbuf_realloc+0xfc>)
 8005d32:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005d36:	4912      	ldr	r1, [pc, #72]	; (8005d80 <pbuf_realloc+0x10c>)
 8005d38:	480f      	ldr	r0, [pc, #60]	; (8005d78 <pbuf_realloc+0x104>)
 8005d3a:	f008 fecd 	bl	800ead8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	897a      	ldrh	r2, [r7, #10]
 8005d42:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	895a      	ldrh	r2, [r3, #10]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f911 	bl	8005f80 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e000      	b.n	8005d68 <pbuf_realloc+0xf4>
    return;
 8005d66:	bf00      	nop

}
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	0801015c 	.word	0x0801015c
 8005d74:	08010274 	.word	0x08010274
 8005d78:	080101bc 	.word	0x080101bc
 8005d7c:	0801028c 	.word	0x0801028c
 8005d80:	080102a4 	.word	0x080102a4

08005d84 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <pbuf_add_header_impl+0x22>
 8005d98:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <pbuf_add_header_impl+0xc4>)
 8005d9a:	f240 12df 	movw	r2, #479	; 0x1df
 8005d9e:	492b      	ldr	r1, [pc, #172]	; (8005e4c <pbuf_add_header_impl+0xc8>)
 8005da0:	482b      	ldr	r0, [pc, #172]	; (8005e50 <pbuf_add_header_impl+0xcc>)
 8005da2:	f008 fe99 	bl	800ead8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <pbuf_add_header_impl+0x30>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d301      	bcc.n	8005db8 <pbuf_add_header_impl+0x34>
    return 1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e043      	b.n	8005e40 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <pbuf_add_header_impl+0x3e>
    return 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e03e      	b.n	8005e40 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	891a      	ldrh	r2, [r3, #8]
 8005dca:	8a7b      	ldrh	r3, [r7, #18]
 8005dcc:	4413      	add	r3, r2
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8a7a      	ldrh	r2, [r7, #18]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d901      	bls.n	8005dda <pbuf_add_header_impl+0x56>
    return 1;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e032      	b.n	8005e40 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	7b1b      	ldrb	r3, [r3, #12]
 8005dde:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005de0:	8a3b      	ldrh	r3, [r7, #16]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00c      	beq.n	8005e04 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	425b      	negs	r3, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3310      	adds	r3, #16
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d20d      	bcs.n	8005e1c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e01d      	b.n	8005e40 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	425b      	negs	r3, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e001      	b.n	8005e1c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e011      	b.n	8005e40 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	895a      	ldrh	r2, [r3, #10]
 8005e26:	8a7b      	ldrh	r3, [r7, #18]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	891a      	ldrh	r2, [r3, #8]
 8005e34:	8a7b      	ldrh	r3, [r7, #18]
 8005e36:	4413      	add	r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	0801015c 	.word	0x0801015c
 8005e4c:	080102c0 	.word	0x080102c0
 8005e50:	080101bc 	.word	0x080101bc

08005e54 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ff8e 	bl	8005d84 <pbuf_add_header_impl>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <pbuf_remove_header+0x1e>
 8005e84:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <pbuf_remove_header+0x94>)
 8005e86:	f240 224b 	movw	r2, #587	; 0x24b
 8005e8a:	4920      	ldr	r1, [pc, #128]	; (8005f0c <pbuf_remove_header+0x98>)
 8005e8c:	4820      	ldr	r0, [pc, #128]	; (8005f10 <pbuf_remove_header+0x9c>)
 8005e8e:	f008 fe23 	bl	800ead8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <pbuf_remove_header+0x2c>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9e:	d301      	bcc.n	8005ea4 <pbuf_remove_header+0x30>
    return 1;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e02c      	b.n	8005efe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <pbuf_remove_header+0x3a>
    return 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e027      	b.n	8005efe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	89fa      	ldrh	r2, [r7, #14]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d908      	bls.n	8005ece <pbuf_remove_header+0x5a>
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <pbuf_remove_header+0x94>)
 8005ebe:	f240 2255 	movw	r2, #597	; 0x255
 8005ec2:	4914      	ldr	r1, [pc, #80]	; (8005f14 <pbuf_remove_header+0xa0>)
 8005ec4:	4812      	ldr	r0, [pc, #72]	; (8005f10 <pbuf_remove_header+0x9c>)
 8005ec6:	f008 fe07 	bl	800ead8 <iprintf>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e017      	b.n	8005efe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	895a      	ldrh	r2, [r3, #10]
 8005ee4:	89fb      	ldrh	r3, [r7, #14]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	891a      	ldrh	r2, [r3, #8]
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	0801015c 	.word	0x0801015c
 8005f0c:	080102c0 	.word	0x080102c0
 8005f10:	080101bc 	.word	0x080101bc
 8005f14:	080102cc 	.word	0x080102cc

08005f18 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
 8005f24:	4613      	mov	r3, r2
 8005f26:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005f28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da08      	bge.n	8005f42 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f34:	425b      	negs	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff9b 	bl	8005e74 <pbuf_remove_header>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	e007      	b.n	8005f52 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f46:	787a      	ldrb	r2, [r7, #1]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff ff1a 	bl	8005d84 <pbuf_add_header_impl>
 8005f50:	4603      	mov	r3, r0
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005f66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffd2 	bl	8005f18 <pbuf_header_impl>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10b      	bne.n	8005fa6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <pbuf_free+0x22>
 8005f94:	4b38      	ldr	r3, [pc, #224]	; (8006078 <pbuf_free+0xf8>)
 8005f96:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005f9a:	4938      	ldr	r1, [pc, #224]	; (800607c <pbuf_free+0xfc>)
 8005f9c:	4838      	ldr	r0, [pc, #224]	; (8006080 <pbuf_free+0x100>)
 8005f9e:	f008 fd9b 	bl	800ead8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e063      	b.n	800606e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005faa:	e05c      	b.n	8006066 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7b9b      	ldrb	r3, [r3, #14]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <pbuf_free+0x42>
 8005fb4:	4b30      	ldr	r3, [pc, #192]	; (8006078 <pbuf_free+0xf8>)
 8005fb6:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005fba:	4932      	ldr	r1, [pc, #200]	; (8006084 <pbuf_free+0x104>)
 8005fbc:	4830      	ldr	r0, [pc, #192]	; (8006080 <pbuf_free+0x100>)
 8005fbe:	f008 fd8b 	bl	800ead8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7b9b      	ldrb	r3, [r3, #14]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	739a      	strb	r2, [r3, #14]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7b9b      	ldrb	r3, [r3, #14]
 8005fd2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005fd4:	7dbb      	ldrb	r3, [r7, #22]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d143      	bne.n	8006062 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	7b1b      	ldrb	r3, [r3, #12]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7b5b      	ldrb	r3, [r3, #13]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <pbuf_free+0x90>
 8006002:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <pbuf_free+0xf8>)
 8006004:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006008:	491f      	ldr	r1, [pc, #124]	; (8006088 <pbuf_free+0x108>)
 800600a:	481d      	ldr	r0, [pc, #116]	; (8006080 <pbuf_free+0x100>)
 800600c:	f008 fd64 	bl	800ead8 <iprintf>
        pc->custom_free_function(p);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
 8006018:	e01d      	b.n	8006056 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d104      	bne.n	800602a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	2008      	movs	r0, #8
 8006024:	f7ff f936 	bl	8005294 <memp_free>
 8006028:	e015      	b.n	8006056 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d104      	bne.n	800603a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	2007      	movs	r0, #7
 8006034:	f7ff f92e 	bl	8005294 <memp_free>
 8006038:	e00d      	b.n	8006056 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <pbuf_free+0xc8>
          mem_free(p);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fe fdc1 	bl	8004bc8 <mem_free>
 8006046:	e006      	b.n	8006056 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <pbuf_free+0xf8>)
 800604a:	f240 320f 	movw	r2, #783	; 0x30f
 800604e:	490f      	ldr	r1, [pc, #60]	; (800608c <pbuf_free+0x10c>)
 8006050:	480b      	ldr	r0, [pc, #44]	; (8006080 <pbuf_free+0x100>)
 8006052:	f008 fd41 	bl	800ead8 <iprintf>
        }
      }
      count++;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	3301      	adds	r3, #1
 800605a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	e001      	b.n	8006066 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d19f      	bne.n	8005fac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	0801015c 	.word	0x0801015c
 800607c:	080102c0 	.word	0x080102c0
 8006080:	080101bc 	.word	0x080101bc
 8006084:	080102ec 	.word	0x080102ec
 8006088:	08010304 	.word	0x08010304
 800608c:	08010328 	.word	0x08010328

08006090 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800609c:	e005      	b.n	80060aa <pbuf_clen+0x1a>
    ++len;
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	3301      	adds	r3, #1
 80060a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f6      	bne.n	800609e <pbuf_clen+0xe>
  }
  return len;
 80060b0:	89fb      	ldrh	r3, [r7, #14]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	7b9b      	ldrb	r3, [r3, #14]
 80060d2:	3301      	adds	r3, #1
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7b9b      	ldrb	r3, [r3, #14]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <pbuf_ref+0x30>
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <pbuf_ref+0x38>)
 80060e4:	f240 3242 	movw	r2, #834	; 0x342
 80060e8:	4904      	ldr	r1, [pc, #16]	; (80060fc <pbuf_ref+0x3c>)
 80060ea:	4805      	ldr	r0, [pc, #20]	; (8006100 <pbuf_ref+0x40>)
 80060ec:	f008 fcf4 	bl	800ead8 <iprintf>
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	0801015c 	.word	0x0801015c
 80060fc:	0801033c 	.word	0x0801033c
 8006100:	080101bc 	.word	0x080101bc

08006104 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <pbuf_cat+0x16>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <pbuf_cat+0x26>
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <pbuf_cat+0x98>)
 800611c:	f240 3259 	movw	r2, #857	; 0x359
 8006120:	491f      	ldr	r1, [pc, #124]	; (80061a0 <pbuf_cat+0x9c>)
 8006122:	4820      	ldr	r0, [pc, #128]	; (80061a4 <pbuf_cat+0xa0>)
 8006124:	f008 fcd8 	bl	800ead8 <iprintf>
 8006128:	e034      	b.n	8006194 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e00a      	b.n	8006146 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	891a      	ldrh	r2, [r3, #8]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	891b      	ldrh	r3, [r3, #8]
 8006138:	4413      	add	r3, r2
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	891a      	ldrh	r2, [r3, #8]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	895b      	ldrh	r3, [r3, #10]
 8006156:	429a      	cmp	r2, r3
 8006158:	d006      	beq.n	8006168 <pbuf_cat+0x64>
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <pbuf_cat+0x98>)
 800615c:	f240 3262 	movw	r2, #866	; 0x362
 8006160:	4911      	ldr	r1, [pc, #68]	; (80061a8 <pbuf_cat+0xa4>)
 8006162:	4810      	ldr	r0, [pc, #64]	; (80061a4 <pbuf_cat+0xa0>)
 8006164:	f008 fcb8 	bl	800ead8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <pbuf_cat+0x7a>
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <pbuf_cat+0x98>)
 8006172:	f240 3263 	movw	r2, #867	; 0x363
 8006176:	490d      	ldr	r1, [pc, #52]	; (80061ac <pbuf_cat+0xa8>)
 8006178:	480a      	ldr	r0, [pc, #40]	; (80061a4 <pbuf_cat+0xa0>)
 800617a:	f008 fcad 	bl	800ead8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	891a      	ldrh	r2, [r3, #8]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	891b      	ldrh	r3, [r3, #8]
 8006186:	4413      	add	r3, r2
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	0801015c 	.word	0x0801015c
 80061a0:	08010350 	.word	0x08010350
 80061a4:	080101bc 	.word	0x080101bc
 80061a8:	08010388 	.word	0x08010388
 80061ac:	080103b8 	.word	0x080103b8

080061b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ffa1 	bl	8006104 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80061c2:	6838      	ldr	r0, [r7, #0]
 80061c4:	f7ff ff7c 	bl	80060c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <pbuf_copy+0x2a>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <pbuf_copy+0x2a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	891a      	ldrh	r2, [r3, #8]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	891b      	ldrh	r3, [r3, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d209      	bcs.n	800620e <pbuf_copy+0x3e>
 80061fa:	4b57      	ldr	r3, [pc, #348]	; (8006358 <pbuf_copy+0x188>)
 80061fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006200:	4956      	ldr	r1, [pc, #344]	; (800635c <pbuf_copy+0x18c>)
 8006202:	4857      	ldr	r0, [pc, #348]	; (8006360 <pbuf_copy+0x190>)
 8006204:	f008 fc68 	bl	800ead8 <iprintf>
 8006208:	f06f 030f 	mvn.w	r3, #15
 800620c:	e09f      	b.n	800634e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	895b      	ldrh	r3, [r3, #10]
 8006212:	461a      	mov	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	895b      	ldrh	r3, [r3, #10]
 800621c:	4619      	mov	r1, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1acb      	subs	r3, r1, r3
 8006222:	429a      	cmp	r2, r3
 8006224:	d306      	bcc.n	8006234 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	895b      	ldrh	r3, [r3, #10]
 800622a:	461a      	mov	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e005      	b.n	8006240 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	895b      	ldrh	r3, [r3, #10]
 8006238:	461a      	mov	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	18d0      	adds	r0, r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4619      	mov	r1, r3
 8006254:	f008 fc2a 	bl	800eaac <memcpy>
    offset_to += len;
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	895b      	ldrh	r3, [r3, #10]
 800626c:	461a      	mov	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4293      	cmp	r3, r2
 8006272:	d906      	bls.n	8006282 <pbuf_copy+0xb2>
 8006274:	4b38      	ldr	r3, [pc, #224]	; (8006358 <pbuf_copy+0x188>)
 8006276:	f240 32d9 	movw	r2, #985	; 0x3d9
 800627a:	493a      	ldr	r1, [pc, #232]	; (8006364 <pbuf_copy+0x194>)
 800627c:	4838      	ldr	r0, [pc, #224]	; (8006360 <pbuf_copy+0x190>)
 800627e:	f008 fc2b 	bl	800ead8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	895b      	ldrh	r3, [r3, #10]
 8006286:	461a      	mov	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4293      	cmp	r3, r2
 800628c:	d906      	bls.n	800629c <pbuf_copy+0xcc>
 800628e:	4b32      	ldr	r3, [pc, #200]	; (8006358 <pbuf_copy+0x188>)
 8006290:	f240 32da 	movw	r2, #986	; 0x3da
 8006294:	4934      	ldr	r1, [pc, #208]	; (8006368 <pbuf_copy+0x198>)
 8006296:	4832      	ldr	r0, [pc, #200]	; (8006360 <pbuf_copy+0x190>)
 8006298:	f008 fc1e 	bl	800ead8 <iprintf>
    if (offset_from >= p_from->len) {
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	895b      	ldrh	r3, [r3, #10]
 80062a0:	461a      	mov	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d304      	bcc.n	80062b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	895b      	ldrh	r3, [r3, #10]
 80062b6:	461a      	mov	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d114      	bne.n	80062e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10c      	bne.n	80062e8 <pbuf_copy+0x118>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <pbuf_copy+0x118>
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <pbuf_copy+0x188>)
 80062d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80062da:	4924      	ldr	r1, [pc, #144]	; (800636c <pbuf_copy+0x19c>)
 80062dc:	4820      	ldr	r0, [pc, #128]	; (8006360 <pbuf_copy+0x190>)
 80062de:	f008 fbfb 	bl	800ead8 <iprintf>
 80062e2:	f06f 030f 	mvn.w	r3, #15
 80062e6:	e032      	b.n	800634e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d013      	beq.n	8006316 <pbuf_copy+0x146>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	895a      	ldrh	r2, [r3, #10]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	891b      	ldrh	r3, [r3, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d10d      	bne.n	8006316 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <pbuf_copy+0x146>
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <pbuf_copy+0x188>)
 8006304:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006308:	4919      	ldr	r1, [pc, #100]	; (8006370 <pbuf_copy+0x1a0>)
 800630a:	4815      	ldr	r0, [pc, #84]	; (8006360 <pbuf_copy+0x190>)
 800630c:	f008 fbe4 	bl	800ead8 <iprintf>
 8006310:	f06f 0305 	mvn.w	r3, #5
 8006314:	e01b      	b.n	800634e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <pbuf_copy+0x174>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	895a      	ldrh	r2, [r3, #10]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	891b      	ldrh	r3, [r3, #8]
 8006324:	429a      	cmp	r2, r3
 8006326:	d10d      	bne.n	8006344 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <pbuf_copy+0x174>
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <pbuf_copy+0x188>)
 8006332:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006336:	490e      	ldr	r1, [pc, #56]	; (8006370 <pbuf_copy+0x1a0>)
 8006338:	4809      	ldr	r0, [pc, #36]	; (8006360 <pbuf_copy+0x190>)
 800633a:	f008 fbcd 	bl	800ead8 <iprintf>
 800633e:	f06f 0305 	mvn.w	r3, #5
 8006342:	e004      	b.n	800634e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f47f af61 	bne.w	800620e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	0801015c 	.word	0x0801015c
 800635c:	08010404 	.word	0x08010404
 8006360:	080101bc 	.word	0x080101bc
 8006364:	08010434 	.word	0x08010434
 8006368:	0801044c 	.word	0x0801044c
 800636c:	08010468 	.word	0x08010468
 8006370:	08010478 	.word	0x08010478

08006374 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	460b      	mov	r3, r1
 8006384:	80fb      	strh	r3, [r7, #6]
 8006386:	4613      	mov	r3, r2
 8006388:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <pbuf_copy_partial+0x36>
 8006398:	4b2b      	ldr	r3, [pc, #172]	; (8006448 <pbuf_copy_partial+0xd4>)
 800639a:	f240 420a 	movw	r2, #1034	; 0x40a
 800639e:	492b      	ldr	r1, [pc, #172]	; (800644c <pbuf_copy_partial+0xd8>)
 80063a0:	482b      	ldr	r0, [pc, #172]	; (8006450 <pbuf_copy_partial+0xdc>)
 80063a2:	f008 fb99 	bl	800ead8 <iprintf>
 80063a6:	2300      	movs	r3, #0
 80063a8:	e04a      	b.n	8006440 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d108      	bne.n	80063c2 <pbuf_copy_partial+0x4e>
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <pbuf_copy_partial+0xd4>)
 80063b2:	f240 420b 	movw	r2, #1035	; 0x40b
 80063b6:	4927      	ldr	r1, [pc, #156]	; (8006454 <pbuf_copy_partial+0xe0>)
 80063b8:	4825      	ldr	r0, [pc, #148]	; (8006450 <pbuf_copy_partial+0xdc>)
 80063ba:	f008 fb8d 	bl	800ead8 <iprintf>
 80063be:	2300      	movs	r3, #0
 80063c0:	e03e      	b.n	8006440 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	e034      	b.n	8006432 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80063c8:	88bb      	ldrh	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <pbuf_copy_partial+0x70>
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	895b      	ldrh	r3, [r3, #10]
 80063d2:	88ba      	ldrh	r2, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d305      	bcc.n	80063e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	895b      	ldrh	r3, [r3, #10]
 80063dc:	88ba      	ldrh	r2, [r7, #4]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	80bb      	strh	r3, [r7, #4]
 80063e2:	e023      	b.n	800642c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	895a      	ldrh	r2, [r3, #10]
 80063e8:	88bb      	ldrh	r3, [r7, #4]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80063ee:	8b3a      	ldrh	r2, [r7, #24]
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d901      	bls.n	80063fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80063fa:	8b7b      	ldrh	r3, [r7, #26]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	18d0      	adds	r0, r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	88bb      	ldrh	r3, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	8b3a      	ldrh	r2, [r7, #24]
 800640a:	4619      	mov	r1, r3
 800640c:	f008 fb4e 	bl	800eaac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006410:	8afa      	ldrh	r2, [r7, #22]
 8006412:	8b3b      	ldrh	r3, [r7, #24]
 8006414:	4413      	add	r3, r2
 8006416:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006418:	8b7a      	ldrh	r2, [r7, #26]
 800641a:	8b3b      	ldrh	r3, [r7, #24]
 800641c:	4413      	add	r3, r2
 800641e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	8b3b      	ldrh	r3, [r7, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <pbuf_copy_partial+0xca>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c4      	bne.n	80063c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800643e:	8afb      	ldrh	r3, [r7, #22]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	0801015c 	.word	0x0801015c
 800644c:	080104a4 	.word	0x080104a4
 8006450:	080101bc 	.word	0x080101bc
 8006454:	080104c4 	.word	0x080104c4

08006458 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	603a      	str	r2, [r7, #0]
 8006462:	71fb      	strb	r3, [r7, #7]
 8006464:	460b      	mov	r3, r1
 8006466:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	8919      	ldrh	r1, [r3, #8]
 800646c:	88ba      	ldrh	r2, [r7, #4]
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff faa1 	bl	80059b8 <pbuf_alloc>
 8006476:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <pbuf_clone+0x2a>
    return NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	e011      	b.n	80064a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fea3 	bl	80061d0 <pbuf_copy>
 800648a:	4603      	mov	r3, r0
 800648c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800648e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <pbuf_clone+0x4c>
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <pbuf_clone+0x58>)
 8006498:	f240 5224 	movw	r2, #1316	; 0x524
 800649c:	4905      	ldr	r1, [pc, #20]	; (80064b4 <pbuf_clone+0x5c>)
 800649e:	4806      	ldr	r0, [pc, #24]	; (80064b8 <pbuf_clone+0x60>)
 80064a0:	f008 fb1a 	bl	800ead8 <iprintf>
  return q;
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	0801015c 	.word	0x0801015c
 80064b4:	080105d0 	.word	0x080105d0
 80064b8:	080101bc 	.word	0x080101bc

080064bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80064c0:	f008 fb22 	bl	800eb08 <rand>
 80064c4:	4603      	mov	r3, r0
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <tcp_init+0x20>)
 80064d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80064d8:	bf00      	nop
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000020 	.word	0x20000020

080064e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7d1b      	ldrb	r3, [r3, #20]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d105      	bne.n	80064fc <tcp_free+0x1c>
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <tcp_free+0x2c>)
 80064f2:	22d4      	movs	r2, #212	; 0xd4
 80064f4:	4906      	ldr	r1, [pc, #24]	; (8006510 <tcp_free+0x30>)
 80064f6:	4807      	ldr	r0, [pc, #28]	; (8006514 <tcp_free+0x34>)
 80064f8:	f008 faee 	bl	800ead8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	2001      	movs	r0, #1
 8006500:	f7fe fec8 	bl	8005294 <memp_free>
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	0801065c 	.word	0x0801065c
 8006510:	0801068c 	.word	0x0801068c
 8006514:	080106a0 	.word	0x080106a0

08006518 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	7d1b      	ldrb	r3, [r3, #20]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <tcp_free_listen+0x1c>
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <tcp_free_listen+0x2c>)
 800652a:	22df      	movs	r2, #223	; 0xdf
 800652c:	4906      	ldr	r1, [pc, #24]	; (8006548 <tcp_free_listen+0x30>)
 800652e:	4807      	ldr	r0, [pc, #28]	; (800654c <tcp_free_listen+0x34>)
 8006530:	f008 fad2 	bl	800ead8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	2002      	movs	r0, #2
 8006538:	f7fe feac 	bl	8005294 <memp_free>
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	0801065c 	.word	0x0801065c
 8006548:	080106c8 	.word	0x080106c8
 800654c:	080106a0 	.word	0x080106a0

08006550 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006554:	f000 fea2 	bl	800729c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <tcp_tmr+0x28>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <tcp_tmr+0x28>)
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <tcp_tmr+0x28>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006570:	f000 fb54 	bl	8006c1c <tcp_slowtmr>
  }
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200082a1 	.word	0x200082a1

0800657c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <tcp_remove_listener+0x1c>
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <tcp_remove_listener+0x48>)
 800658e:	22ff      	movs	r2, #255	; 0xff
 8006590:	490d      	ldr	r1, [pc, #52]	; (80065c8 <tcp_remove_listener+0x4c>)
 8006592:	480e      	ldr	r0, [pc, #56]	; (80065cc <tcp_remove_listener+0x50>)
 8006594:	f008 faa0 	bl	800ead8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e00a      	b.n	80065b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d102      	bne.n	80065ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f1      	bne.n	800659e <tcp_remove_listener+0x22>
    }
  }
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	0801065c 	.word	0x0801065c
 80065c8:	080106e4 	.word	0x080106e4
 80065cc:	080106a0 	.word	0x080106a0

080065d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <tcp_listen_closed+0x1c>
 80065de:	4b14      	ldr	r3, [pc, #80]	; (8006630 <tcp_listen_closed+0x60>)
 80065e0:	f240 1211 	movw	r2, #273	; 0x111
 80065e4:	4913      	ldr	r1, [pc, #76]	; (8006634 <tcp_listen_closed+0x64>)
 80065e6:	4814      	ldr	r0, [pc, #80]	; (8006638 <tcp_listen_closed+0x68>)
 80065e8:	f008 fa76 	bl	800ead8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7d1b      	ldrb	r3, [r3, #20]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d006      	beq.n	8006602 <tcp_listen_closed+0x32>
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <tcp_listen_closed+0x60>)
 80065f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80065fa:	4910      	ldr	r1, [pc, #64]	; (800663c <tcp_listen_closed+0x6c>)
 80065fc:	480e      	ldr	r0, [pc, #56]	; (8006638 <tcp_listen_closed+0x68>)
 80065fe:	f008 fa6b 	bl	800ead8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006602:	2301      	movs	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e00b      	b.n	8006620 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006608:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <tcp_listen_closed+0x70>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff ffb1 	bl	800657c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d9f0      	bls.n	8006608 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	0801065c 	.word	0x0801065c
 8006634:	0801070c 	.word	0x0801070c
 8006638:	080106a0 	.word	0x080106a0
 800663c:	08010718 	.word	0x08010718
 8006640:	0801263c 	.word	0x0801263c

08006644 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006644:	b5b0      	push	{r4, r5, r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af04      	add	r7, sp, #16
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <tcp_close_shutdown+0x20>
 8006656:	4b63      	ldr	r3, [pc, #396]	; (80067e4 <tcp_close_shutdown+0x1a0>)
 8006658:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800665c:	4962      	ldr	r1, [pc, #392]	; (80067e8 <tcp_close_shutdown+0x1a4>)
 800665e:	4863      	ldr	r0, [pc, #396]	; (80067ec <tcp_close_shutdown+0x1a8>)
 8006660:	f008 fa3a 	bl	800ead8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d066      	beq.n	8006738 <tcp_close_shutdown+0xf4>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7d1b      	ldrb	r3, [r3, #20]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d003      	beq.n	800667a <tcp_close_shutdown+0x36>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7d1b      	ldrb	r3, [r3, #20]
 8006676:	2b07      	cmp	r3, #7
 8006678:	d15e      	bne.n	8006738 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <tcp_close_shutdown+0x48>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006686:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800668a:	d055      	beq.n	8006738 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8b5b      	ldrh	r3, [r3, #26]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <tcp_close_shutdown+0x62>
 8006698:	4b52      	ldr	r3, [pc, #328]	; (80067e4 <tcp_close_shutdown+0x1a0>)
 800669a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800669e:	4954      	ldr	r1, [pc, #336]	; (80067f0 <tcp_close_shutdown+0x1ac>)
 80066a0:	4852      	ldr	r0, [pc, #328]	; (80067ec <tcp_close_shutdown+0x1a8>)
 80066a2:	f008 fa19 	bl	800ead8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80066ae:	687d      	ldr	r5, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	8ad2      	ldrh	r2, [r2, #22]
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	8b09      	ldrh	r1, [r1, #24]
 80066bc:	9102      	str	r1, [sp, #8]
 80066be:	9201      	str	r2, [sp, #4]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462b      	mov	r3, r5
 80066c4:	4622      	mov	r2, r4
 80066c6:	4601      	mov	r1, r0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f004 fe91 	bl	800b3f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f8c6 	bl	8007860 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80066d4:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <tcp_close_shutdown+0x1b0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d105      	bne.n	80066ea <tcp_close_shutdown+0xa6>
 80066de:	4b45      	ldr	r3, [pc, #276]	; (80067f4 <tcp_close_shutdown+0x1b0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4a43      	ldr	r2, [pc, #268]	; (80067f4 <tcp_close_shutdown+0x1b0>)
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	e013      	b.n	8006712 <tcp_close_shutdown+0xce>
 80066ea:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <tcp_close_shutdown+0x1b0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e00c      	b.n	800670c <tcp_close_shutdown+0xc8>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d104      	bne.n	8006706 <tcp_close_shutdown+0xc2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	60da      	str	r2, [r3, #12]
 8006704:	e005      	b.n	8006712 <tcp_close_shutdown+0xce>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ef      	bne.n	80066f2 <tcp_close_shutdown+0xae>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	4b37      	ldr	r3, [pc, #220]	; (80067f8 <tcp_close_shutdown+0x1b4>)
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <tcp_close_shutdown+0x1b8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d102      	bne.n	800672e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006728:	f003 fd5e 	bl	800a1e8 <tcp_trigger_input_pcb_close>
 800672c:	e002      	b.n	8006734 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fed6 	bl	80064e0 <tcp_free>
      }
      return ERR_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e050      	b.n	80067da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7d1b      	ldrb	r3, [r3, #20]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d03b      	beq.n	80067b8 <tcp_close_shutdown+0x174>
 8006740:	2b02      	cmp	r3, #2
 8006742:	dc44      	bgt.n	80067ce <tcp_close_shutdown+0x18a>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <tcp_close_shutdown+0x10a>
 8006748:	2b01      	cmp	r3, #1
 800674a:	d02a      	beq.n	80067a2 <tcp_close_shutdown+0x15e>
 800674c:	e03f      	b.n	80067ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8adb      	ldrh	r3, [r3, #22]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d021      	beq.n	800679a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006756:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <tcp_close_shutdown+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d105      	bne.n	800676c <tcp_close_shutdown+0x128>
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <tcp_close_shutdown+0x1bc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	4a26      	ldr	r2, [pc, #152]	; (8006800 <tcp_close_shutdown+0x1bc>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e013      	b.n	8006794 <tcp_close_shutdown+0x150>
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <tcp_close_shutdown+0x1bc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	e00c      	b.n	800678e <tcp_close_shutdown+0x14a>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d104      	bne.n	8006788 <tcp_close_shutdown+0x144>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	60da      	str	r2, [r3, #12]
 8006786:	e005      	b.n	8006794 <tcp_close_shutdown+0x150>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1ef      	bne.n	8006774 <tcp_close_shutdown+0x130>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fea0 	bl	80064e0 <tcp_free>
      break;
 80067a0:	e01a      	b.n	80067d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ff14 	bl	80065d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4816      	ldr	r0, [pc, #88]	; (8006804 <tcp_close_shutdown+0x1c0>)
 80067ac:	f001 f8a8 	bl	8007900 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff feb1 	bl	8006518 <tcp_free_listen>
      break;
 80067b6:	e00f      	b.n	80067d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	480e      	ldr	r0, [pc, #56]	; (80067f4 <tcp_close_shutdown+0x1b0>)
 80067bc:	f001 f8a0 	bl	8007900 <tcp_pcb_remove>
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <tcp_close_shutdown+0x1b4>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fe8a 	bl	80064e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80067cc:	e004      	b.n	80067d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f81a 	bl	8006808 <tcp_close_shutdown_fin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	e000      	b.n	80067da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bdb0      	pop	{r4, r5, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0801065c 	.word	0x0801065c
 80067e8:	08010730 	.word	0x08010730
 80067ec:	080106a0 	.word	0x080106a0
 80067f0:	08010750 	.word	0x08010750
 80067f4:	20008298 	.word	0x20008298
 80067f8:	200082a0 	.word	0x200082a0
 80067fc:	200082d8 	.word	0x200082d8
 8006800:	20008290 	.word	0x20008290
 8006804:	20008294 	.word	0x20008294

08006808 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <tcp_close_shutdown_fin+0x1c>
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <tcp_close_shutdown_fin+0xc8>)
 8006818:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800681c:	492d      	ldr	r1, [pc, #180]	; (80068d4 <tcp_close_shutdown_fin+0xcc>)
 800681e:	482e      	ldr	r0, [pc, #184]	; (80068d8 <tcp_close_shutdown_fin+0xd0>)
 8006820:	f008 f95a 	bl	800ead8 <iprintf>

  switch (pcb->state) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7d1b      	ldrb	r3, [r3, #20]
 8006828:	2b07      	cmp	r3, #7
 800682a:	d020      	beq.n	800686e <tcp_close_shutdown_fin+0x66>
 800682c:	2b07      	cmp	r3, #7
 800682e:	dc2b      	bgt.n	8006888 <tcp_close_shutdown_fin+0x80>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d002      	beq.n	800683a <tcp_close_shutdown_fin+0x32>
 8006834:	2b04      	cmp	r3, #4
 8006836:	d00d      	beq.n	8006854 <tcp_close_shutdown_fin+0x4c>
 8006838:	e026      	b.n	8006888 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f003 fee6 	bl	800a60c <tcp_send_fin>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11f      	bne.n	800688c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2205      	movs	r2, #5
 8006850:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006852:	e01b      	b.n	800688c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f003 fed9 	bl	800a60c <tcp_send_fin>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800685e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d114      	bne.n	8006890 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2205      	movs	r2, #5
 800686a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800686c:	e010      	b.n	8006890 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f003 fecc 	bl	800a60c <tcp_send_fin>
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2209      	movs	r2, #9
 8006884:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006886:	e005      	b.n	8006894 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e01c      	b.n	80068c6 <tcp_close_shutdown_fin+0xbe>
      break;
 800688c:	bf00      	nop
 800688e:	e002      	b.n	8006896 <tcp_close_shutdown_fin+0x8e>
      break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <tcp_close_shutdown_fin+0x8e>
      break;
 8006894:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f003 fff2 	bl	800a888 <tcp_output>
 80068a4:	e00d      	b.n	80068c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80068a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d108      	bne.n	80068c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8b5b      	ldrh	r3, [r3, #26]
 80068b4:	f043 0308 	orr.w	r3, r3, #8
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e001      	b.n	80068c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0801065c 	.word	0x0801065c
 80068d4:	0801070c 	.word	0x0801070c
 80068d8:	080106a0 	.word	0x080106a0

080068dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <tcp_close+0x22>
 80068ea:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <tcp_close+0x4c>)
 80068ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80068f0:	490e      	ldr	r1, [pc, #56]	; (800692c <tcp_close+0x50>)
 80068f2:	480f      	ldr	r0, [pc, #60]	; (8006930 <tcp_close+0x54>)
 80068f4:	f008 f8f0 	bl	800ead8 <iprintf>
 80068f8:	f06f 030f 	mvn.w	r3, #15
 80068fc:	e00f      	b.n	800691e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d006      	beq.n	8006914 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8b5b      	ldrh	r3, [r3, #26]
 800690a:	f043 0310 	orr.w	r3, r3, #16
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006914:	2101      	movs	r1, #1
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fe94 	bl	8006644 <tcp_close_shutdown>
 800691c:	4603      	mov	r3, r0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	0801065c 	.word	0x0801065c
 800692c:	0801076c 	.word	0x0801076c
 8006930:	080106a0 	.word	0x080106a0

08006934 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08e      	sub	sp, #56	; 0x38
 8006938:	af04      	add	r7, sp, #16
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <tcp_abandon+0x20>
 8006944:	4b52      	ldr	r3, [pc, #328]	; (8006a90 <tcp_abandon+0x15c>)
 8006946:	f240 223d 	movw	r2, #573	; 0x23d
 800694a:	4952      	ldr	r1, [pc, #328]	; (8006a94 <tcp_abandon+0x160>)
 800694c:	4852      	ldr	r0, [pc, #328]	; (8006a98 <tcp_abandon+0x164>)
 800694e:	f008 f8c3 	bl	800ead8 <iprintf>
 8006952:	e099      	b.n	8006a88 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7d1b      	ldrb	r3, [r3, #20]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d106      	bne.n	800696a <tcp_abandon+0x36>
 800695c:	4b4c      	ldr	r3, [pc, #304]	; (8006a90 <tcp_abandon+0x15c>)
 800695e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006962:	494e      	ldr	r1, [pc, #312]	; (8006a9c <tcp_abandon+0x168>)
 8006964:	484c      	ldr	r0, [pc, #304]	; (8006a98 <tcp_abandon+0x164>)
 8006966:	f008 f8b7 	bl	800ead8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7d1b      	ldrb	r3, [r3, #20]
 800696e:	2b0a      	cmp	r3, #10
 8006970:	d107      	bne.n	8006982 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	484a      	ldr	r0, [pc, #296]	; (8006aa0 <tcp_abandon+0x16c>)
 8006976:	f000 ffc3 	bl	8007900 <tcp_pcb_remove>
    tcp_free(pcb);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fdb0 	bl	80064e0 <tcp_free>
 8006980:	e082      	b.n	8006a88 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	7d1b      	ldrb	r3, [r3, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d126      	bne.n	80069fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8adb      	ldrh	r3, [r3, #22]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02e      	beq.n	8006a12 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069b4:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <tcp_abandon+0x170>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d105      	bne.n	80069ca <tcp_abandon+0x96>
 80069be:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <tcp_abandon+0x170>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a37      	ldr	r2, [pc, #220]	; (8006aa4 <tcp_abandon+0x170>)
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e013      	b.n	80069f2 <tcp_abandon+0xbe>
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <tcp_abandon+0x170>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e00c      	b.n	80069ec <tcp_abandon+0xb8>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d104      	bne.n	80069e6 <tcp_abandon+0xb2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e005      	b.n	80069f2 <tcp_abandon+0xbe>
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1ef      	bne.n	80069d2 <tcp_abandon+0x9e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	e00b      	b.n	8006a12 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8adb      	ldrh	r3, [r3, #22]
 8006a02:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4828      	ldr	r0, [pc, #160]	; (8006aa8 <tcp_abandon+0x174>)
 8006a08:	f000 ff7a 	bl	8007900 <tcp_pcb_remove>
 8006a0c:	4b27      	ldr	r3, [pc, #156]	; (8006aac <tcp_abandon+0x178>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fd1c 	bl	800745c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fd13 	bl	800745c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fd0a 	bl	800745c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	8b12      	ldrh	r2, [r2, #24]
 8006a58:	9202      	str	r2, [sp, #8]
 8006a5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a5c:	9201      	str	r2, [sp, #4]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	460b      	mov	r3, r1
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	69b9      	ldr	r1, [r7, #24]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f004 fcc2 	bl	800b3f0 <tcp_rst>
    }
    last_state = pcb->state;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7d1b      	ldrb	r3, [r3, #20]
 8006a70:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fd34 	bl	80064e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <tcp_abandon+0x154>
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f06f 010c 	mvn.w	r1, #12
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	4798      	blx	r3
  }
}
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	0801065c 	.word	0x0801065c
 8006a94:	080107a0 	.word	0x080107a0
 8006a98:	080106a0 	.word	0x080106a0
 8006a9c:	080107bc 	.word	0x080107bc
 8006aa0:	2000829c 	.word	0x2000829c
 8006aa4:	20008290 	.word	0x20008290
 8006aa8:	20008298 	.word	0x20008298
 8006aac:	200082a0 	.word	0x200082a0

08006ab0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006ab8:	2101      	movs	r1, #1
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff3a 	bl	8006934 <tcp_abandon>
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <tcp_update_rcv_ann_wnd+0x1c>
 8006ad6:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <tcp_update_rcv_ann_wnd+0xa4>)
 8006ad8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006adc:	4924      	ldr	r1, [pc, #144]	; (8006b70 <tcp_update_rcv_ann_wnd+0xa8>)
 8006ade:	4825      	ldr	r0, [pc, #148]	; (8006b74 <tcp_update_rcv_ann_wnd+0xac>)
 8006ae0:	f007 fffa 	bl	800ead8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006aec:	4413      	add	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006af8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006afc:	bf28      	it	cs
 8006afe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b02:	b292      	uxth	r2, r2
 8006b04:	4413      	add	r3, r2
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	db08      	blt.n	8006b20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	e020      	b.n	8006b62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd03      	ble.n	8006b36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b34:	e014      	b.n	8006b60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b48:	d306      	bcc.n	8006b58 <tcp_update_rcv_ann_wnd+0x90>
 8006b4a:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <tcp_update_rcv_ann_wnd+0xa4>)
 8006b4c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006b50:	4909      	ldr	r1, [pc, #36]	; (8006b78 <tcp_update_rcv_ann_wnd+0xb0>)
 8006b52:	4808      	ldr	r0, [pc, #32]	; (8006b74 <tcp_update_rcv_ann_wnd+0xac>)
 8006b54:	f007 ffc0 	bl	800ead8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006b60:	2300      	movs	r3, #0
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	0801065c 	.word	0x0801065c
 8006b70:	080108b8 	.word	0x080108b8
 8006b74:	080106a0 	.word	0x080106a0
 8006b78:	080108dc 	.word	0x080108dc

08006b7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <tcp_recved+0x22>
 8006b8e:	4b1f      	ldr	r3, [pc, #124]	; (8006c0c <tcp_recved+0x90>)
 8006b90:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006b94:	491e      	ldr	r1, [pc, #120]	; (8006c10 <tcp_recved+0x94>)
 8006b96:	481f      	ldr	r0, [pc, #124]	; (8006c14 <tcp_recved+0x98>)
 8006b98:	f007 ff9e 	bl	800ead8 <iprintf>
 8006b9c:	e032      	b.n	8006c04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7d1b      	ldrb	r3, [r3, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d106      	bne.n	8006bb4 <tcp_recved+0x38>
 8006ba6:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <tcp_recved+0x90>)
 8006ba8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006bac:	491a      	ldr	r1, [pc, #104]	; (8006c18 <tcp_recved+0x9c>)
 8006bae:	4819      	ldr	r0, [pc, #100]	; (8006c14 <tcp_recved+0x98>)
 8006bb0:	f007 ff92 	bl	800ead8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	4413      	add	r3, r2
 8006bbc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006bc4:	d804      	bhi.n	8006bd0 <tcp_recved+0x54>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bca:	89fa      	ldrh	r2, [r7, #14]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d204      	bcs.n	8006bda <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006bd6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006bd8:	e002      	b.n	8006be0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	89fa      	ldrh	r2, [r7, #14]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff71 	bl	8006ac8 <tcp_update_rcv_ann_wnd>
 8006be6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006bee:	d309      	bcc.n	8006c04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8b5b      	ldrh	r3, [r3, #26]
 8006bf4:	f043 0302 	orr.w	r3, r3, #2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f003 fe42 	bl	800a888 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	0801065c 	.word	0x0801065c
 8006c10:	080108f8 	.word	0x080108f8
 8006c14:	080106a0 	.word	0x080106a0
 8006c18:	08010910 	.word	0x08010910

08006c1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006c1c:	b5b0      	push	{r4, r5, r7, lr}
 8006c1e:	b090      	sub	sp, #64	; 0x40
 8006c20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006c28:	4b94      	ldr	r3, [pc, #592]	; (8006e7c <tcp_slowtmr+0x260>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a93      	ldr	r2, [pc, #588]	; (8006e7c <tcp_slowtmr+0x260>)
 8006c30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006c32:	4b93      	ldr	r3, [pc, #588]	; (8006e80 <tcp_slowtmr+0x264>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	4b91      	ldr	r3, [pc, #580]	; (8006e80 <tcp_slowtmr+0x264>)
 8006c3c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006c42:	4b90      	ldr	r3, [pc, #576]	; (8006e84 <tcp_slowtmr+0x268>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006c48:	e29f      	b.n	800718a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	7d1b      	ldrb	r3, [r3, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <tcp_slowtmr+0x44>
 8006c52:	4b8d      	ldr	r3, [pc, #564]	; (8006e88 <tcp_slowtmr+0x26c>)
 8006c54:	f240 42be 	movw	r2, #1214	; 0x4be
 8006c58:	498c      	ldr	r1, [pc, #560]	; (8006e8c <tcp_slowtmr+0x270>)
 8006c5a:	488d      	ldr	r0, [pc, #564]	; (8006e90 <tcp_slowtmr+0x274>)
 8006c5c:	f007 ff3c 	bl	800ead8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	7d1b      	ldrb	r3, [r3, #20]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <tcp_slowtmr+0x5a>
 8006c68:	4b87      	ldr	r3, [pc, #540]	; (8006e88 <tcp_slowtmr+0x26c>)
 8006c6a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006c6e:	4989      	ldr	r1, [pc, #548]	; (8006e94 <tcp_slowtmr+0x278>)
 8006c70:	4887      	ldr	r0, [pc, #540]	; (8006e90 <tcp_slowtmr+0x274>)
 8006c72:	f007 ff31 	bl	800ead8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	7d1b      	ldrb	r3, [r3, #20]
 8006c7a:	2b0a      	cmp	r3, #10
 8006c7c:	d106      	bne.n	8006c8c <tcp_slowtmr+0x70>
 8006c7e:	4b82      	ldr	r3, [pc, #520]	; (8006e88 <tcp_slowtmr+0x26c>)
 8006c80:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006c84:	4984      	ldr	r1, [pc, #528]	; (8006e98 <tcp_slowtmr+0x27c>)
 8006c86:	4882      	ldr	r0, [pc, #520]	; (8006e90 <tcp_slowtmr+0x274>)
 8006c88:	f007 ff26 	bl	800ead8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	7f9a      	ldrb	r2, [r3, #30]
 8006c90:	4b7b      	ldr	r3, [pc, #492]	; (8006e80 <tcp_slowtmr+0x264>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d105      	bne.n	8006ca4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006ca2:	e272      	b.n	800718a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006ca4:	4b76      	ldr	r3, [pc, #472]	; (8006e80 <tcp_slowtmr+0x264>)
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d10a      	bne.n	8006cd6 <tcp_slowtmr+0xba>
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d905      	bls.n	8006cd6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cd4:	e11e      	b.n	8006f14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	d905      	bls.n	8006cec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cea:	e113      	b.n	8006f14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d075      	beq.n	8006de2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <tcp_slowtmr+0xf0>
 8006cfe:	4b62      	ldr	r3, [pc, #392]	; (8006e88 <tcp_slowtmr+0x26c>)
 8006d00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006d04:	4965      	ldr	r1, [pc, #404]	; (8006e9c <tcp_slowtmr+0x280>)
 8006d06:	4862      	ldr	r0, [pc, #392]	; (8006e90 <tcp_slowtmr+0x274>)
 8006d08:	f007 fee6 	bl	800ead8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <tcp_slowtmr+0x106>
 8006d14:	4b5c      	ldr	r3, [pc, #368]	; (8006e88 <tcp_slowtmr+0x26c>)
 8006d16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006d1a:	4961      	ldr	r1, [pc, #388]	; (8006ea0 <tcp_slowtmr+0x284>)
 8006d1c:	485c      	ldr	r0, [pc, #368]	; (8006e90 <tcp_slowtmr+0x274>)
 8006d1e:	f007 fedb 	bl	800ead8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006d28:	2b0b      	cmp	r3, #11
 8006d2a:	d905      	bls.n	8006d38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d30:	3301      	adds	r3, #1
 8006d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d36:	e0ed      	b.n	8006f14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a58      	ldr	r2, [pc, #352]	; (8006ea4 <tcp_slowtmr+0x288>)
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d4c:	7c7a      	ldrb	r2, [r7, #17]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d907      	bls.n	8006d62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d58:	3301      	adds	r3, #1
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d68:	7c7a      	ldrb	r2, [r7, #17]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f200 80d2 	bhi.w	8006f14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006d70:	2301      	movs	r3, #1
 8006d72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d80:	f004 fc2a 	bl	800b5d8 <tcp_zero_window_probe>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	e011      	b.n	8006db4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d96:	4619      	mov	r1, r3
 8006d98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d9a:	f003 faef 	bl	800a37c <tcp_split_unsent_seg>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da6:	f003 fd6f 	bl	800a888 <tcp_output>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80ac 	beq.w	8006f14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dca:	2b06      	cmp	r3, #6
 8006dcc:	f200 80a2 	bhi.w	8006f14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006de0:	e098      	b.n	8006f14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db0f      	blt.n	8006e0c <tcp_slowtmr+0x1f0>
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006df2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d008      	beq.n	8006e0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3301      	adds	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	b21a      	sxth	r2, r3
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	db7b      	blt.n	8006f14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e1e:	f004 f825 	bl	800ae6c <tcp_rexmit_rto_prepare>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <tcp_slowtmr+0x21c>
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d171      	bne.n	8006f14 <tcp_slowtmr+0x2f8>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d06d      	beq.n	8006f14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	7d1b      	ldrb	r3, [r3, #20]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d03a      	beq.n	8006eb6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e46:	2b0c      	cmp	r3, #12
 8006e48:	bf28      	it	cs
 8006e4a:	230c      	movcs	r3, #12
 8006e4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006e54:	10db      	asrs	r3, r3, #3
 8006e56:	b21b      	sxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006e60:	4413      	add	r3, r2
 8006e62:	7efa      	ldrb	r2, [r7, #27]
 8006e64:	4910      	ldr	r1, [pc, #64]	; (8006ea8 <tcp_slowtmr+0x28c>)
 8006e66:	5c8a      	ldrb	r2, [r1, r2]
 8006e68:	4093      	lsls	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006e72:	4293      	cmp	r3, r2
 8006e74:	dc1a      	bgt.n	8006eac <tcp_slowtmr+0x290>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	b21a      	sxth	r2, r3
 8006e7a:	e019      	b.n	8006eb0 <tcp_slowtmr+0x294>
 8006e7c:	2000828c 	.word	0x2000828c
 8006e80:	200082a2 	.word	0x200082a2
 8006e84:	20008298 	.word	0x20008298
 8006e88:	0801065c 	.word	0x0801065c
 8006e8c:	080109a0 	.word	0x080109a0
 8006e90:	080106a0 	.word	0x080106a0
 8006e94:	080109cc 	.word	0x080109cc
 8006e98:	080109f8 	.word	0x080109f8
 8006e9c:	08010a28 	.word	0x08010a28
 8006ea0:	08010a5c 	.word	0x08010a5c
 8006ea4:	08012634 	.word	0x08012634
 8006ea8:	08012624 	.word	0x08012624
 8006eac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	2200      	movs	r2, #0
 8006eba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	bf28      	it	cs
 8006ecc:	4613      	movcs	r3, r2
 8006ece:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d206      	bcs.n	8006efc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f10:	f004 f81c 	bl	800af4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	7d1b      	ldrb	r3, [r3, #20]
 8006f18:	2b06      	cmp	r3, #6
 8006f1a:	d111      	bne.n	8006f40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	8b5b      	ldrh	r3, [r3, #26]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f28:	4b9d      	ldr	r3, [pc, #628]	; (80071a0 <tcp_slowtmr+0x584>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b28      	cmp	r3, #40	; 0x28
 8006f34:	d904      	bls.n	8006f40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	7a5b      	ldrb	r3, [r3, #9]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04c      	beq.n	8006fe6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d003      	beq.n	8006f5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	d144      	bne.n	8006fe6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f5c:	4b90      	ldr	r3, [pc, #576]	; (80071a0 <tcp_slowtmr+0x584>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006f70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006f74:	498b      	ldr	r1, [pc, #556]	; (80071a4 <tcp_slowtmr+0x588>)
 8006f76:	fba1 1303 	umull	r1, r3, r1, r3
 8006f7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d90a      	bls.n	8006f96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	3301      	adds	r3, #1
 8006f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f94:	e027      	b.n	8006fe6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f96:	4b82      	ldr	r3, [pc, #520]	; (80071a0 <tcp_slowtmr+0x584>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006fac:	4618      	mov	r0, r3
 8006fae:	4b7e      	ldr	r3, [pc, #504]	; (80071a8 <tcp_slowtmr+0x58c>)
 8006fb0:	fb00 f303 	mul.w	r3, r0, r3
 8006fb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006fb6:	497b      	ldr	r1, [pc, #492]	; (80071a4 <tcp_slowtmr+0x588>)
 8006fb8:	fba1 1303 	umull	r1, r3, r1, r3
 8006fbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d911      	bls.n	8006fe6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc4:	f004 fac8 	bl	800b558 <tcp_keepalive>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006fce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d107      	bne.n	8006fe6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006fdc:	3301      	adds	r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d011      	beq.n	8007012 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006fee:	4b6c      	ldr	r3, [pc, #432]	; (80071a0 <tcp_slowtmr+0x584>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006ffe:	4619      	mov	r1, r3
 8007000:	460b      	mov	r3, r1
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	440b      	add	r3, r1
 8007006:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007008:	429a      	cmp	r2, r3
 800700a:	d302      	bcc.n	8007012 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800700c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800700e:	f000 fddb 	bl	8007bc8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	7d1b      	ldrb	r3, [r3, #20]
 8007016:	2b03      	cmp	r3, #3
 8007018:	d10b      	bne.n	8007032 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800701a:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <tcp_slowtmr+0x584>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b28      	cmp	r3, #40	; 0x28
 8007026:	d904      	bls.n	8007032 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800702c:	3301      	adds	r3, #1
 800702e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	7d1b      	ldrb	r3, [r3, #20]
 8007036:	2b09      	cmp	r3, #9
 8007038:	d10b      	bne.n	8007052 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800703a:	4b59      	ldr	r3, [pc, #356]	; (80071a0 <tcp_slowtmr+0x584>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2bf0      	cmp	r3, #240	; 0xf0
 8007046:	d904      	bls.n	8007052 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800704c:	3301      	adds	r3, #1
 800704e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007056:	2b00      	cmp	r3, #0
 8007058:	d060      	beq.n	800711c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007064:	f000 fbfc 	bl	8007860 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d010      	beq.n	8007090 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800706e:	4b4f      	ldr	r3, [pc, #316]	; (80071ac <tcp_slowtmr+0x590>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007074:	429a      	cmp	r2, r3
 8007076:	d106      	bne.n	8007086 <tcp_slowtmr+0x46a>
 8007078:	4b4d      	ldr	r3, [pc, #308]	; (80071b0 <tcp_slowtmr+0x594>)
 800707a:	f240 526d 	movw	r2, #1389	; 0x56d
 800707e:	494d      	ldr	r1, [pc, #308]	; (80071b4 <tcp_slowtmr+0x598>)
 8007080:	484d      	ldr	r0, [pc, #308]	; (80071b8 <tcp_slowtmr+0x59c>)
 8007082:	f007 fd29 	bl	800ead8 <iprintf>
        prev->next = pcb->next;
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e00f      	b.n	80070b0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007090:	4b46      	ldr	r3, [pc, #280]	; (80071ac <tcp_slowtmr+0x590>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d006      	beq.n	80070a8 <tcp_slowtmr+0x48c>
 800709a:	4b45      	ldr	r3, [pc, #276]	; (80071b0 <tcp_slowtmr+0x594>)
 800709c:	f240 5271 	movw	r2, #1393	; 0x571
 80070a0:	4946      	ldr	r1, [pc, #280]	; (80071bc <tcp_slowtmr+0x5a0>)
 80070a2:	4845      	ldr	r0, [pc, #276]	; (80071b8 <tcp_slowtmr+0x59c>)
 80070a4:	f007 fd18 	bl	800ead8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4a3f      	ldr	r2, [pc, #252]	; (80071ac <tcp_slowtmr+0x590>)
 80070ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80070b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d013      	beq.n	80070e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80070c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	3304      	adds	r3, #4
 80070c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c8:	8ad2      	ldrh	r2, [r2, #22]
 80070ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070cc:	8b09      	ldrh	r1, [r1, #24]
 80070ce:	9102      	str	r1, [sp, #8]
 80070d0:	9201      	str	r2, [sp, #4]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	462b      	mov	r3, r5
 80070d6:	4622      	mov	r2, r4
 80070d8:	4601      	mov	r1, r0
 80070da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070dc:	f004 f988 	bl	800b3f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	7d1b      	ldrb	r3, [r3, #20]
 80070ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80070f6:	6838      	ldr	r0, [r7, #0]
 80070f8:	f7ff f9f2 	bl	80064e0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80070fc:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <tcp_slowtmr+0x5a4>)
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <tcp_slowtmr+0x4f6>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f06f 010c 	mvn.w	r1, #12
 800710e:	68b8      	ldr	r0, [r7, #8]
 8007110:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007112:	4b2b      	ldr	r3, [pc, #172]	; (80071c0 <tcp_slowtmr+0x5a4>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d037      	beq.n	800718a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800711a:	e590      	b.n	8006c3e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	7f1b      	ldrb	r3, [r3, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	7f1a      	ldrb	r2, [r3, #28]
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	7f5b      	ldrb	r3, [r3, #29]
 800713a:	429a      	cmp	r2, r3
 800713c:	d325      	bcc.n	800718a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007144:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <tcp_slowtmr+0x5a4>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <tcp_slowtmr+0x550>
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800715c:	6912      	ldr	r2, [r2, #16]
 800715e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800716a:	e002      	b.n	8007172 <tcp_slowtmr+0x556>
 800716c:	2300      	movs	r3, #0
 800716e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <tcp_slowtmr+0x5a4>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d000      	beq.n	800717c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800717a:	e560      	b.n	8006c3e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800717c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007186:	f003 fb7f 	bl	800a888 <tcp_output>
  while (pcb != NULL) {
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f ad5c 	bne.w	8006c4a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <tcp_slowtmr+0x5a8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800719c:	e067      	b.n	800726e <tcp_slowtmr+0x652>
 800719e:	bf00      	nop
 80071a0:	2000828c 	.word	0x2000828c
 80071a4:	10624dd3 	.word	0x10624dd3
 80071a8:	000124f8 	.word	0x000124f8
 80071ac:	20008298 	.word	0x20008298
 80071b0:	0801065c 	.word	0x0801065c
 80071b4:	08010a94 	.word	0x08010a94
 80071b8:	080106a0 	.word	0x080106a0
 80071bc:	08010ac0 	.word	0x08010ac0
 80071c0:	200082a0 	.word	0x200082a0
 80071c4:	2000829c 	.word	0x2000829c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	7d1b      	ldrb	r3, [r3, #20]
 80071cc:	2b0a      	cmp	r3, #10
 80071ce:	d006      	beq.n	80071de <tcp_slowtmr+0x5c2>
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <tcp_slowtmr+0x664>)
 80071d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80071d6:	492b      	ldr	r1, [pc, #172]	; (8007284 <tcp_slowtmr+0x668>)
 80071d8:	482b      	ldr	r0, [pc, #172]	; (8007288 <tcp_slowtmr+0x66c>)
 80071da:	f007 fc7d 	bl	800ead8 <iprintf>
    pcb_remove = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80071e4:	4b29      	ldr	r3, [pc, #164]	; (800728c <tcp_slowtmr+0x670>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2bf0      	cmp	r3, #240	; 0xf0
 80071f0:	d904      	bls.n	80071fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80071f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f6:	3301      	adds	r3, #1
 80071f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80071fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02f      	beq.n	8007264 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007206:	f000 fb2b 	bl	8007860 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007210:	4b1f      	ldr	r3, [pc, #124]	; (8007290 <tcp_slowtmr+0x674>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007216:	429a      	cmp	r2, r3
 8007218:	d106      	bne.n	8007228 <tcp_slowtmr+0x60c>
 800721a:	4b19      	ldr	r3, [pc, #100]	; (8007280 <tcp_slowtmr+0x664>)
 800721c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007220:	491c      	ldr	r1, [pc, #112]	; (8007294 <tcp_slowtmr+0x678>)
 8007222:	4819      	ldr	r0, [pc, #100]	; (8007288 <tcp_slowtmr+0x66c>)
 8007224:	f007 fc58 	bl	800ead8 <iprintf>
        prev->next = pcb->next;
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	60da      	str	r2, [r3, #12]
 8007230:	e00f      	b.n	8007252 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007232:	4b17      	ldr	r3, [pc, #92]	; (8007290 <tcp_slowtmr+0x674>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007238:	429a      	cmp	r2, r3
 800723a:	d006      	beq.n	800724a <tcp_slowtmr+0x62e>
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <tcp_slowtmr+0x664>)
 800723e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007242:	4915      	ldr	r1, [pc, #84]	; (8007298 <tcp_slowtmr+0x67c>)
 8007244:	4810      	ldr	r0, [pc, #64]	; (8007288 <tcp_slowtmr+0x66c>)
 8007246:	f007 fc47 	bl	800ead8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	4a10      	ldr	r2, [pc, #64]	; (8007290 <tcp_slowtmr+0x674>)
 8007250:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800725c:	69f8      	ldr	r0, [r7, #28]
 800725e:	f7ff f93f 	bl	80064e0 <tcp_free>
 8007262:	e004      	b.n	800726e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1a9      	bne.n	80071c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3730      	adds	r7, #48	; 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	bdb0      	pop	{r4, r5, r7, pc}
 800727e:	bf00      	nop
 8007280:	0801065c 	.word	0x0801065c
 8007284:	08010aec 	.word	0x08010aec
 8007288:	080106a0 	.word	0x080106a0
 800728c:	2000828c 	.word	0x2000828c
 8007290:	2000829c 	.word	0x2000829c
 8007294:	08010b1c 	.word	0x08010b1c
 8007298:	08010b44 	.word	0x08010b44

0800729c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80072a2:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <tcp_fasttmr+0xbc>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	3301      	adds	r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <tcp_fasttmr+0xbc>)
 80072ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80072ae:	4b2b      	ldr	r3, [pc, #172]	; (800735c <tcp_fasttmr+0xc0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80072b4:	e048      	b.n	8007348 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7f9a      	ldrb	r2, [r3, #30]
 80072ba:	4b27      	ldr	r3, [pc, #156]	; (8007358 <tcp_fasttmr+0xbc>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d03f      	beq.n	8007342 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80072c2:	4b25      	ldr	r3, [pc, #148]	; (8007358 <tcp_fasttmr+0xbc>)
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8b5b      	ldrh	r3, [r3, #26]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8b5b      	ldrh	r3, [r3, #26]
 80072da:	f043 0302 	orr.w	r3, r3, #2
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f003 facf 	bl	800a888 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8b5b      	ldrh	r3, [r3, #26]
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8b5b      	ldrh	r3, [r3, #26]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d009      	beq.n	8007318 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8b5b      	ldrh	r3, [r3, #26]
 8007308:	f023 0308 	bic.w	r3, r3, #8
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fa78 	bl	8006808 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <tcp_fasttmr+0xc4>)
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f819 	bl	8007364 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <tcp_fasttmr+0xc4>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d000      	beq.n	800733c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800733a:	e7b8      	b.n	80072ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	e002      	b.n	8007348 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1b3      	bne.n	80072b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200082a2 	.word	0x200082a2
 800735c:	20008298 	.word	0x20008298
 8007360:	200082a0 	.word	0x200082a0

08007364 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <tcp_process_refused_data+0x22>
 8007372:	4b37      	ldr	r3, [pc, #220]	; (8007450 <tcp_process_refused_data+0xec>)
 8007374:	f240 6209 	movw	r2, #1545	; 0x609
 8007378:	4936      	ldr	r1, [pc, #216]	; (8007454 <tcp_process_refused_data+0xf0>)
 800737a:	4837      	ldr	r0, [pc, #220]	; (8007458 <tcp_process_refused_data+0xf4>)
 800737c:	f007 fbac 	bl	800ead8 <iprintf>
 8007380:	f06f 030f 	mvn.w	r3, #15
 8007384:	e060      	b.n	8007448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800738a:	7b5b      	ldrb	r3, [r3, #13]
 800738c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007392:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <tcp_process_refused_data+0x58>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6918      	ldr	r0, [r3, #16]
 80073ae:	2300      	movs	r3, #0
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	47a0      	blx	r4
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e007      	b.n	80073cc <tcp_process_refused_data+0x68>
 80073bc:	2300      	movs	r3, #0
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	2000      	movs	r0, #0
 80073c4:	f000 f8a4 	bl	8007510 <tcp_recv_null>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80073cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d12a      	bne.n	800742a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d033      	beq.n	8007446 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80073e6:	d005      	beq.n	80073f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	3301      	adds	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <tcp_process_refused_data+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6918      	ldr	r0, [r3, #16]
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	47a0      	blx	r4
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e001      	b.n	800741a <tcp_process_refused_data+0xb6>
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800741a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741e:	f113 0f0d 	cmn.w	r3, #13
 8007422:	d110      	bne.n	8007446 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007424:	f06f 030c 	mvn.w	r3, #12
 8007428:	e00e      	b.n	8007448 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800742a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800742e:	f113 0f0d 	cmn.w	r3, #13
 8007432:	d102      	bne.n	800743a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007434:	f06f 030c 	mvn.w	r3, #12
 8007438:	e006      	b.n	8007448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007440:	f06f 0304 	mvn.w	r3, #4
 8007444:	e000      	b.n	8007448 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	bd90      	pop	{r4, r7, pc}
 8007450:	0801065c 	.word	0x0801065c
 8007454:	08010b6c 	.word	0x08010b6c
 8007458:	080106a0 	.word	0x080106a0

0800745c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007464:	e007      	b.n	8007476 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f80a 	bl	8007486 <tcp_seg_free>
    seg = next;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f4      	bne.n	8007466 <tcp_segs_free+0xa>
  }
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00c      	beq.n	80074ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fd6d 	bl	8005f80 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	2003      	movs	r0, #3
 80074aa:	f7fd fef3 	bl	8005294 <memp_free>
  }
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <tcp_seg_copy+0x1c>
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <tcp_seg_copy+0x4c>)
 80074c8:	f240 6282 	movw	r2, #1666	; 0x682
 80074cc:	490e      	ldr	r1, [pc, #56]	; (8007508 <tcp_seg_copy+0x50>)
 80074ce:	480f      	ldr	r0, [pc, #60]	; (800750c <tcp_seg_copy+0x54>)
 80074d0:	f007 fb02 	bl	800ead8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80074d4:	2003      	movs	r0, #3
 80074d6:	f7fd fe6d 	bl	80051b4 <memp_malloc>
 80074da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <tcp_seg_copy+0x2e>
    return NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e00a      	b.n	80074fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80074e6:	2210      	movs	r2, #16
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f007 fade 	bl	800eaac <memcpy>
  pbuf_ref(cseg->p);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fde3 	bl	80060c0 <pbuf_ref>
  return cseg;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0801065c 	.word	0x0801065c
 8007508:	08010bb0 	.word	0x08010bb0
 800750c:	080106a0 	.word	0x080106a0

08007510 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <tcp_recv_null+0x28>
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <tcp_recv_null+0x60>)
 8007526:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800752a:	4912      	ldr	r1, [pc, #72]	; (8007574 <tcp_recv_null+0x64>)
 800752c:	4812      	ldr	r0, [pc, #72]	; (8007578 <tcp_recv_null+0x68>)
 800752e:	f007 fad3 	bl	800ead8 <iprintf>
 8007532:	f06f 030f 	mvn.w	r3, #15
 8007536:	e016      	b.n	8007566 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	891b      	ldrh	r3, [r3, #8]
 8007542:	4619      	mov	r1, r3
 8007544:	68b8      	ldr	r0, [r7, #8]
 8007546:	f7ff fb19 	bl	8006b7c <tcp_recved>
    pbuf_free(p);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fe fd18 	bl	8005f80 <pbuf_free>
 8007550:	e008      	b.n	8007564 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800755a:	68b8      	ldr	r0, [r7, #8]
 800755c:	f7ff f9be 	bl	80068dc <tcp_close>
 8007560:	4603      	mov	r3, r0
 8007562:	e000      	b.n	8007566 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	0801065c 	.word	0x0801065c
 8007574:	08010bcc 	.word	0x08010bcc
 8007578:	080106a0 	.word	0x080106a0

0800757c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758a:	2b00      	cmp	r3, #0
 800758c:	db01      	blt.n	8007592 <tcp_kill_prio+0x16>
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	e000      	b.n	8007594 <tcp_kill_prio+0x18>
 8007592:	237f      	movs	r3, #127	; 0x7f
 8007594:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d034      	beq.n	8007606 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	3b01      	subs	r3, #1
 80075a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075aa:	4b19      	ldr	r3, [pc, #100]	; (8007610 <tcp_kill_prio+0x94>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e01f      	b.n	80075f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	7d5b      	ldrb	r3, [r3, #21]
 80075b6:	7afa      	ldrb	r2, [r7, #11]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d80c      	bhi.n	80075d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80075c0:	7afa      	ldrb	r2, [r7, #11]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d112      	bne.n	80075ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <tcp_kill_prio+0x98>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d80a      	bhi.n	80075ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80075d6:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <tcp_kill_prio+0x98>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	7d5b      	ldrb	r3, [r3, #21]
 80075ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1dc      	bne.n	80075b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80075fe:	6938      	ldr	r0, [r7, #16]
 8007600:	f7ff fa56 	bl	8006ab0 <tcp_abort>
 8007604:	e000      	b.n	8007608 <tcp_kill_prio+0x8c>
    return;
 8007606:	bf00      	nop
  }
}
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20008298 	.word	0x20008298
 8007614:	2000828c 	.word	0x2000828c

08007618 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	2b08      	cmp	r3, #8
 8007626:	d009      	beq.n	800763c <tcp_kill_state+0x24>
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	2b09      	cmp	r3, #9
 800762c:	d006      	beq.n	800763c <tcp_kill_state+0x24>
 800762e:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <tcp_kill_state+0x80>)
 8007630:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007634:	4919      	ldr	r1, [pc, #100]	; (800769c <tcp_kill_state+0x84>)
 8007636:	481a      	ldr	r0, [pc, #104]	; (80076a0 <tcp_kill_state+0x88>)
 8007638:	f007 fa4e 	bl	800ead8 <iprintf>

  inactivity = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007644:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <tcp_kill_state+0x8c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e017      	b.n	800767c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	7d1b      	ldrb	r3, [r3, #20]
 8007650:	79fa      	ldrb	r2, [r7, #7]
 8007652:	429a      	cmp	r2, r3
 8007654:	d10f      	bne.n	8007676 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <tcp_kill_state+0x90>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d807      	bhi.n	8007676 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007666:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <tcp_kill_state+0x90>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e4      	bne.n	800764c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007688:	2100      	movs	r1, #0
 800768a:	6938      	ldr	r0, [r7, #16]
 800768c:	f7ff f952 	bl	8006934 <tcp_abandon>
  }
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	0801065c 	.word	0x0801065c
 800769c:	08010be8 	.word	0x08010be8
 80076a0:	080106a0 	.word	0x080106a0
 80076a4:	20008298 	.word	0x20008298
 80076a8:	2000828c 	.word	0x2000828c

080076ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <tcp_kill_timewait+0x58>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e012      	b.n	80076e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <tcp_kill_timewait+0x5c>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d807      	bhi.n	80076e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <tcp_kill_timewait+0x5c>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e9      	bne.n	80076c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80076f4:	68b8      	ldr	r0, [r7, #8]
 80076f6:	f7ff f9db 	bl	8006ab0 <tcp_abort>
  }
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	2000829c 	.word	0x2000829c
 8007708:	2000828c 	.word	0x2000828c

0800770c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <tcp_handle_closepend+0x48>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007718:	e014      	b.n	8007744 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8b5b      	ldrh	r3, [r3, #26]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8b5b      	ldrh	r3, [r3, #26]
 8007730:	f023 0308 	bic.w	r3, r3, #8
 8007734:	b29a      	uxth	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff f864 	bl	8006808 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e7      	bne.n	800771a <tcp_handle_closepend+0xe>
  }
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20008298 	.word	0x20008298

08007758 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007762:	2001      	movs	r0, #1
 8007764:	f7fd fd26 	bl	80051b4 <memp_malloc>
 8007768:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d126      	bne.n	80077be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007770:	f7ff ffcc 	bl	800770c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007774:	f7ff ff9a 	bl	80076ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007778:	2001      	movs	r0, #1
 800777a:	f7fd fd1b 	bl	80051b4 <memp_malloc>
 800777e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11b      	bne.n	80077be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007786:	2009      	movs	r0, #9
 8007788:	f7ff ff46 	bl	8007618 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800778c:	2001      	movs	r0, #1
 800778e:	f7fd fd11 	bl	80051b4 <memp_malloc>
 8007792:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d111      	bne.n	80077be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800779a:	2008      	movs	r0, #8
 800779c:	f7ff ff3c 	bl	8007618 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7fd fd07 	bl	80051b4 <memp_malloc>
 80077a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d107      	bne.n	80077be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fee3 	bl	800757c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077b6:	2001      	movs	r0, #1
 80077b8:	f7fd fcfc 	bl	80051b4 <memp_malloc>
 80077bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d03f      	beq.n	8007844 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80077c4:	229c      	movs	r2, #156	; 0x9c
 80077c6:	2100      	movs	r1, #0
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f007 f97d 	bl	800eac8 <memset>
    pcb->prio = prio;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	79fa      	ldrb	r2, [r7, #7]
 80077d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80077da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80077e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80077fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2206      	movs	r2, #6
 8007800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2206      	movs	r2, #6
 8007808:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007810:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <tcp_alloc+0xf8>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <tcp_alloc+0xfc>)
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007830:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <tcp_alloc+0x100>)
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a07      	ldr	r2, [pc, #28]	; (800785c <tcp_alloc+0x104>)
 8007840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000828c 	.word	0x2000828c
 8007854:	200082a2 	.word	0x200082a2
 8007858:	08007511 	.word	0x08007511
 800785c:	006ddd00 	.word	0x006ddd00

08007860 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d107      	bne.n	800787e <tcp_pcb_purge+0x1e>
 800786e:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <tcp_pcb_purge+0x94>)
 8007870:	f640 0251 	movw	r2, #2129	; 0x851
 8007874:	4920      	ldr	r1, [pc, #128]	; (80078f8 <tcp_pcb_purge+0x98>)
 8007876:	4821      	ldr	r0, [pc, #132]	; (80078fc <tcp_pcb_purge+0x9c>)
 8007878:	f007 f92e 	bl	800ead8 <iprintf>
 800787c:	e037      	b.n	80078ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	7d1b      	ldrb	r3, [r3, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d033      	beq.n	80078ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800788a:	2b0a      	cmp	r3, #10
 800788c:	d02f      	beq.n	80078ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007892:	2b01      	cmp	r3, #1
 8007894:	d02b      	beq.n	80078ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fb6c 	bl	8005f80 <pbuf_free>
      pcb->refused_data = NULL;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f986 	bl	8007bc8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fdc7 	bl	800745c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff fdc2 	bl	800745c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	0801065c 	.word	0x0801065c
 80078f8:	08010ca8 	.word	0x08010ca8
 80078fc:	080106a0 	.word	0x080106a0

08007900 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <tcp_pcb_remove+0x1e>
 8007910:	4b3e      	ldr	r3, [pc, #248]	; (8007a0c <tcp_pcb_remove+0x10c>)
 8007912:	f640 0283 	movw	r2, #2179	; 0x883
 8007916:	493e      	ldr	r1, [pc, #248]	; (8007a10 <tcp_pcb_remove+0x110>)
 8007918:	483e      	ldr	r0, [pc, #248]	; (8007a14 <tcp_pcb_remove+0x114>)
 800791a:	f007 f8dd 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d106      	bne.n	8007932 <tcp_pcb_remove+0x32>
 8007924:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <tcp_pcb_remove+0x10c>)
 8007926:	f640 0284 	movw	r2, #2180	; 0x884
 800792a:	493b      	ldr	r1, [pc, #236]	; (8007a18 <tcp_pcb_remove+0x118>)
 800792c:	4839      	ldr	r0, [pc, #228]	; (8007a14 <tcp_pcb_remove+0x114>)
 800792e:	f007 f8d3 	bl	800ead8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d105      	bne.n	8007948 <tcp_pcb_remove+0x48>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e013      	b.n	8007970 <tcp_pcb_remove+0x70>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e00c      	b.n	800796a <tcp_pcb_remove+0x6a>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d104      	bne.n	8007964 <tcp_pcb_remove+0x64>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	e005      	b.n	8007970 <tcp_pcb_remove+0x70>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ef      	bne.n	8007950 <tcp_pcb_remove+0x50>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007976:	6838      	ldr	r0, [r7, #0]
 8007978:	f7ff ff72 	bl	8007860 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	7d1b      	ldrb	r3, [r3, #20]
 8007980:	2b0a      	cmp	r3, #10
 8007982:	d013      	beq.n	80079ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007988:	2b01      	cmp	r3, #1
 800798a:	d00f      	beq.n	80079ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	8b5b      	ldrh	r3, [r3, #26]
 8007990:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	8b5b      	ldrh	r3, [r3, #26]
 800799c:	f043 0302 	orr.w	r3, r3, #2
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80079a6:	6838      	ldr	r0, [r7, #0]
 80079a8:	f002 ff6e 	bl	800a888 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	7d1b      	ldrb	r3, [r3, #20]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d020      	beq.n	80079f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d006      	beq.n	80079ca <tcp_pcb_remove+0xca>
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <tcp_pcb_remove+0x10c>)
 80079be:	f640 0293 	movw	r2, #2195	; 0x893
 80079c2:	4916      	ldr	r1, [pc, #88]	; (8007a1c <tcp_pcb_remove+0x11c>)
 80079c4:	4813      	ldr	r0, [pc, #76]	; (8007a14 <tcp_pcb_remove+0x114>)
 80079c6:	f007 f887 	bl	800ead8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d006      	beq.n	80079e0 <tcp_pcb_remove+0xe0>
 80079d2:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <tcp_pcb_remove+0x10c>)
 80079d4:	f640 0294 	movw	r2, #2196	; 0x894
 80079d8:	4911      	ldr	r1, [pc, #68]	; (8007a20 <tcp_pcb_remove+0x120>)
 80079da:	480e      	ldr	r0, [pc, #56]	; (8007a14 <tcp_pcb_remove+0x114>)
 80079dc:	f007 f87c 	bl	800ead8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <tcp_pcb_remove+0xf6>
 80079e8:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <tcp_pcb_remove+0x10c>)
 80079ea:	f640 0296 	movw	r2, #2198	; 0x896
 80079ee:	490d      	ldr	r1, [pc, #52]	; (8007a24 <tcp_pcb_remove+0x124>)
 80079f0:	4808      	ldr	r0, [pc, #32]	; (8007a14 <tcp_pcb_remove+0x114>)
 80079f2:	f007 f871 	bl	800ead8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2200      	movs	r2, #0
 80079fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2200      	movs	r2, #0
 8007a00:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	0801065c 	.word	0x0801065c
 8007a10:	08010cc4 	.word	0x08010cc4
 8007a14:	080106a0 	.word	0x080106a0
 8007a18:	08010ce0 	.word	0x08010ce0
 8007a1c:	08010d00 	.word	0x08010d00
 8007a20:	08010d18 	.word	0x08010d18
 8007a24:	08010d34 	.word	0x08010d34

08007a28 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <tcp_next_iss+0x1c>
 8007a36:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <tcp_next_iss+0x38>)
 8007a38:	f640 02af 	movw	r2, #2223	; 0x8af
 8007a3c:	4909      	ldr	r1, [pc, #36]	; (8007a64 <tcp_next_iss+0x3c>)
 8007a3e:	480a      	ldr	r0, [pc, #40]	; (8007a68 <tcp_next_iss+0x40>)
 8007a40:	f007 f84a 	bl	800ead8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <tcp_next_iss+0x44>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <tcp_next_iss+0x48>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	4a07      	ldr	r2, [pc, #28]	; (8007a6c <tcp_next_iss+0x44>)
 8007a50:	6013      	str	r3, [r2, #0]
  return iss;
 8007a52:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <tcp_next_iss+0x44>)
 8007a54:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	0801065c 	.word	0x0801065c
 8007a64:	08010d4c 	.word	0x08010d4c
 8007a68:	080106a0 	.word	0x080106a0
 8007a6c:	20000024 	.word	0x20000024
 8007a70:	2000828c 	.word	0x2000828c

08007a74 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <tcp_eff_send_mss_netif+0x22>
 8007a88:	4b14      	ldr	r3, [pc, #80]	; (8007adc <tcp_eff_send_mss_netif+0x68>)
 8007a8a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007a8e:	4914      	ldr	r1, [pc, #80]	; (8007ae0 <tcp_eff_send_mss_netif+0x6c>)
 8007a90:	4814      	ldr	r0, [pc, #80]	; (8007ae4 <tcp_eff_send_mss_netif+0x70>)
 8007a92:	f007 f821 	bl	800ead8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	e019      	b.n	8007ad4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007aa4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007aa6:	8afb      	ldrh	r3, [r7, #22]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d012      	beq.n	8007ad2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007aac:	2328      	movs	r3, #40	; 0x28
 8007aae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007ab0:	8afa      	ldrh	r2, [r7, #22]
 8007ab2:	8abb      	ldrh	r3, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d904      	bls.n	8007ac2 <tcp_eff_send_mss_netif+0x4e>
 8007ab8:	8afa      	ldrh	r2, [r7, #22]
 8007aba:	8abb      	ldrh	r3, [r7, #20]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	e000      	b.n	8007ac4 <tcp_eff_send_mss_netif+0x50>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007ac6:	8a7a      	ldrh	r2, [r7, #18]
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bf28      	it	cs
 8007ace:	4613      	movcs	r3, r2
 8007ad0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007ad2:	89fb      	ldrh	r3, [r7, #14]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	0801065c 	.word	0x0801065c
 8007ae0:	08010d68 	.word	0x08010d68
 8007ae4:	080106a0 	.word	0x080106a0

08007ae8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d119      	bne.n	8007b30 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007afe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007b02:	4910      	ldr	r1, [pc, #64]	; (8007b44 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007b04:	4810      	ldr	r0, [pc, #64]	; (8007b48 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b06:	f006 ffe7 	bl	800ead8 <iprintf>

  while (pcb != NULL) {
 8007b0a:	e011      	b.n	8007b30 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7fe ffc6 	bl	8006ab0 <tcp_abort>
      pcb = next;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e002      	b.n	8007b30 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ea      	bne.n	8007b0c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	0801065c 	.word	0x0801065c
 8007b44:	08010d90 	.word	0x08010d90
 8007b48:	080106a0 	.word	0x080106a0

08007b4c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d02a      	beq.n	8007bb2 <tcp_netif_ip_addr_changed+0x66>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d026      	beq.n	8007bb2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007b64:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <tcp_netif_ip_addr_changed+0x70>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff ffbc 	bl	8007ae8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <tcp_netif_ip_addr_changed+0x74>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff ffb6 	bl	8007ae8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d017      	beq.n	8007bb2 <tcp_netif_ip_addr_changed+0x66>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d013      	beq.n	8007bb2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b8a:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <tcp_netif_ip_addr_changed+0x78>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e00c      	b.n	8007bac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d103      	bne.n	8007ba6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1ef      	bne.n	8007b92 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20008298 	.word	0x20008298
 8007bc0:	20008290 	.word	0x20008290
 8007bc4:	20008294 	.word	0x20008294

08007bc8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fc3d 	bl	800745c <tcp_segs_free>
    pcb->ooseq = NULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b08d      	sub	sp, #52	; 0x34
 8007bf4:	af04      	add	r7, sp, #16
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <tcp_input+0x1c>
 8007c00:	4b9b      	ldr	r3, [pc, #620]	; (8007e70 <tcp_input+0x280>)
 8007c02:	2283      	movs	r2, #131	; 0x83
 8007c04:	499b      	ldr	r1, [pc, #620]	; (8007e74 <tcp_input+0x284>)
 8007c06:	489c      	ldr	r0, [pc, #624]	; (8007e78 <tcp_input+0x288>)
 8007c08:	f006 ff66 	bl	800ead8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a9a      	ldr	r2, [pc, #616]	; (8007e7c <tcp_input+0x28c>)
 8007c12:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	895b      	ldrh	r3, [r3, #10]
 8007c18:	2b13      	cmp	r3, #19
 8007c1a:	f240 83d1 	bls.w	80083c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c1e:	4b98      	ldr	r3, [pc, #608]	; (8007e80 <tcp_input+0x290>)
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	4a97      	ldr	r2, [pc, #604]	; (8007e80 <tcp_input+0x290>)
 8007c24:	6812      	ldr	r2, [r2, #0]
 8007c26:	4611      	mov	r1, r2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f005 ffb5 	bl	800db98 <ip4_addr_isbroadcast_u32>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 83c7 	bne.w	80083c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c36:	4b92      	ldr	r3, [pc, #584]	; (8007e80 <tcp_input+0x290>)
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c3e:	2be0      	cmp	r3, #224	; 0xe0
 8007c40:	f000 83c0 	beq.w	80083c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007c44:	4b8d      	ldr	r3, [pc, #564]	; (8007e7c <tcp_input+0x28c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	899b      	ldrh	r3, [r3, #12]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fc fd7d 	bl	800474c <lwip_htons>
 8007c52:	4603      	mov	r3, r0
 8007c54:	0b1b      	lsrs	r3, r3, #12
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007c5e:	7cbb      	ldrb	r3, [r7, #18]
 8007c60:	2b13      	cmp	r3, #19
 8007c62:	f240 83b1 	bls.w	80083c8 <tcp_input+0x7d8>
 8007c66:	7cbb      	ldrb	r3, [r7, #18]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	891b      	ldrh	r3, [r3, #8]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f200 83aa 	bhi.w	80083c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007c74:	7cbb      	ldrb	r3, [r7, #18]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b14      	subs	r3, #20
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <tcp_input+0x294>)
 8007c7e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007c80:	4b81      	ldr	r3, [pc, #516]	; (8007e88 <tcp_input+0x298>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	895a      	ldrh	r2, [r3, #10]
 8007c8a:	7cbb      	ldrb	r3, [r7, #18]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d309      	bcc.n	8007ca6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007c92:	4b7c      	ldr	r3, [pc, #496]	; (8007e84 <tcp_input+0x294>)
 8007c94:	881a      	ldrh	r2, [r3, #0]
 8007c96:	4b7d      	ldr	r3, [pc, #500]	; (8007e8c <tcp_input+0x29c>)
 8007c98:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007c9a:	7cbb      	ldrb	r3, [r7, #18]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe f8e8 	bl	8005e74 <pbuf_remove_header>
 8007ca4:	e04e      	b.n	8007d44 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <tcp_input+0xca>
 8007cae:	4b70      	ldr	r3, [pc, #448]	; (8007e70 <tcp_input+0x280>)
 8007cb0:	22c2      	movs	r2, #194	; 0xc2
 8007cb2:	4977      	ldr	r1, [pc, #476]	; (8007e90 <tcp_input+0x2a0>)
 8007cb4:	4870      	ldr	r0, [pc, #448]	; (8007e78 <tcp_input+0x288>)
 8007cb6:	f006 ff0f 	bl	800ead8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007cba:	2114      	movs	r1, #20
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fe f8d9 	bl	8005e74 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	895a      	ldrh	r2, [r3, #10]
 8007cc6:	4b71      	ldr	r3, [pc, #452]	; (8007e8c <tcp_input+0x29c>)
 8007cc8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007cca:	4b6e      	ldr	r3, [pc, #440]	; (8007e84 <tcp_input+0x294>)
 8007ccc:	881a      	ldrh	r2, [r3, #0]
 8007cce:	4b6f      	ldr	r3, [pc, #444]	; (8007e8c <tcp_input+0x29c>)
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007cd6:	4b6d      	ldr	r3, [pc, #436]	; (8007e8c <tcp_input+0x29c>)
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe f8c9 	bl	8005e74 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	895b      	ldrh	r3, [r3, #10]
 8007ce8:	8a3a      	ldrh	r2, [r7, #16]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	f200 836e 	bhi.w	80083cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4a64      	ldr	r2, [pc, #400]	; (8007e88 <tcp_input+0x298>)
 8007cf8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	8a3a      	ldrh	r2, [r7, #16]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f8b6 	bl	8005e74 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	891a      	ldrh	r2, [r3, #8]
 8007d0c:	8a3b      	ldrh	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	895b      	ldrh	r3, [r3, #10]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <tcp_input+0x13a>
 8007d1e:	4b54      	ldr	r3, [pc, #336]	; (8007e70 <tcp_input+0x280>)
 8007d20:	22df      	movs	r2, #223	; 0xdf
 8007d22:	495c      	ldr	r1, [pc, #368]	; (8007e94 <tcp_input+0x2a4>)
 8007d24:	4854      	ldr	r0, [pc, #336]	; (8007e78 <tcp_input+0x288>)
 8007d26:	f006 fed7 	bl	800ead8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	891a      	ldrh	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	891b      	ldrh	r3, [r3, #8]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d005      	beq.n	8007d44 <tcp_input+0x154>
 8007d38:	4b4d      	ldr	r3, [pc, #308]	; (8007e70 <tcp_input+0x280>)
 8007d3a:	22e0      	movs	r2, #224	; 0xe0
 8007d3c:	4956      	ldr	r1, [pc, #344]	; (8007e98 <tcp_input+0x2a8>)
 8007d3e:	484e      	ldr	r0, [pc, #312]	; (8007e78 <tcp_input+0x288>)
 8007d40:	f006 feca 	bl	800ead8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d44:	4b4d      	ldr	r3, [pc, #308]	; (8007e7c <tcp_input+0x28c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4a4b      	ldr	r2, [pc, #300]	; (8007e7c <tcp_input+0x28c>)
 8007d4e:	6814      	ldr	r4, [r2, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fc fcfb 	bl	800474c <lwip_htons>
 8007d56:	4603      	mov	r3, r0
 8007d58:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007d5a:	4b48      	ldr	r3, [pc, #288]	; (8007e7c <tcp_input+0x28c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	885b      	ldrh	r3, [r3, #2]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4a46      	ldr	r2, [pc, #280]	; (8007e7c <tcp_input+0x28c>)
 8007d64:	6814      	ldr	r4, [r2, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc fcf0 	bl	800474c <lwip_htons>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d70:	4b42      	ldr	r3, [pc, #264]	; (8007e7c <tcp_input+0x28c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	4a41      	ldr	r2, [pc, #260]	; (8007e7c <tcp_input+0x28c>)
 8007d78:	6814      	ldr	r4, [r2, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc fcfb 	bl	8004776 <lwip_htonl>
 8007d80:	4603      	mov	r3, r0
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	6863      	ldr	r3, [r4, #4]
 8007d86:	4a45      	ldr	r2, [pc, #276]	; (8007e9c <tcp_input+0x2ac>)
 8007d88:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d8a:	4b3c      	ldr	r3, [pc, #240]	; (8007e7c <tcp_input+0x28c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	4a3a      	ldr	r2, [pc, #232]	; (8007e7c <tcp_input+0x28c>)
 8007d92:	6814      	ldr	r4, [r2, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fc fcee 	bl	8004776 <lwip_htonl>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	4a3f      	ldr	r2, [pc, #252]	; (8007ea0 <tcp_input+0x2b0>)
 8007da2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007da4:	4b35      	ldr	r3, [pc, #212]	; (8007e7c <tcp_input+0x28c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	89db      	ldrh	r3, [r3, #14]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4a33      	ldr	r2, [pc, #204]	; (8007e7c <tcp_input+0x28c>)
 8007dae:	6814      	ldr	r4, [r2, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fc fccb 	bl	800474c <lwip_htons>
 8007db6:	4603      	mov	r3, r0
 8007db8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007dba:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <tcp_input+0x28c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	899b      	ldrh	r3, [r3, #12]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fc fcc2 	bl	800474c <lwip_htons>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	4b34      	ldr	r3, [pc, #208]	; (8007ea4 <tcp_input+0x2b4>)
 8007dd4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	891a      	ldrh	r2, [r3, #8]
 8007dda:	4b33      	ldr	r3, [pc, #204]	; (8007ea8 <tcp_input+0x2b8>)
 8007ddc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <tcp_input+0x2b4>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <tcp_input+0x214>
    tcplen++;
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <tcp_input+0x2b8>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	4b2d      	ldr	r3, [pc, #180]	; (8007ea8 <tcp_input+0x2b8>)
 8007df4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	891a      	ldrh	r2, [r3, #8]
 8007dfa:	4b2b      	ldr	r3, [pc, #172]	; (8007ea8 <tcp_input+0x2b8>)
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f200 82e6 	bhi.w	80083d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e08:	4b28      	ldr	r3, [pc, #160]	; (8007eac <tcp_input+0x2bc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	e09d      	b.n	8007f4c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	7d1b      	ldrb	r3, [r3, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <tcp_input+0x234>
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <tcp_input+0x280>)
 8007e1a:	22fb      	movs	r2, #251	; 0xfb
 8007e1c:	4924      	ldr	r1, [pc, #144]	; (8007eb0 <tcp_input+0x2c0>)
 8007e1e:	4816      	ldr	r0, [pc, #88]	; (8007e78 <tcp_input+0x288>)
 8007e20:	f006 fe5a 	bl	800ead8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	7d1b      	ldrb	r3, [r3, #20]
 8007e28:	2b0a      	cmp	r3, #10
 8007e2a:	d105      	bne.n	8007e38 <tcp_input+0x248>
 8007e2c:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <tcp_input+0x280>)
 8007e2e:	22fc      	movs	r2, #252	; 0xfc
 8007e30:	4920      	ldr	r1, [pc, #128]	; (8007eb4 <tcp_input+0x2c4>)
 8007e32:	4811      	ldr	r0, [pc, #68]	; (8007e78 <tcp_input+0x288>)
 8007e34:	f006 fe50 	bl	800ead8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d105      	bne.n	8007e4c <tcp_input+0x25c>
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <tcp_input+0x280>)
 8007e42:	22fd      	movs	r2, #253	; 0xfd
 8007e44:	491c      	ldr	r1, [pc, #112]	; (8007eb8 <tcp_input+0x2c8>)
 8007e46:	480c      	ldr	r0, [pc, #48]	; (8007e78 <tcp_input+0x288>)
 8007e48:	f006 fe46 	bl	800ead8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	7a1b      	ldrb	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d033      	beq.n	8007ebc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	7a1a      	ldrb	r2, [r3, #8]
 8007e58:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <tcp_input+0x290>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e60:	3301      	adds	r3, #1
 8007e62:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d029      	beq.n	8007ebc <tcp_input+0x2cc>
      prev = pcb;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	61bb      	str	r3, [r7, #24]
      continue;
 8007e6c:	e06b      	b.n	8007f46 <tcp_input+0x356>
 8007e6e:	bf00      	nop
 8007e70:	08010dc4 	.word	0x08010dc4
 8007e74:	08010df8 	.word	0x08010df8
 8007e78:	08010e10 	.word	0x08010e10
 8007e7c:	200082b4 	.word	0x200082b4
 8007e80:	20004d1c 	.word	0x20004d1c
 8007e84:	200082b8 	.word	0x200082b8
 8007e88:	200082bc 	.word	0x200082bc
 8007e8c:	200082ba 	.word	0x200082ba
 8007e90:	08010e38 	.word	0x08010e38
 8007e94:	08010e48 	.word	0x08010e48
 8007e98:	08010e54 	.word	0x08010e54
 8007e9c:	200082c4 	.word	0x200082c4
 8007ea0:	200082c8 	.word	0x200082c8
 8007ea4:	200082d0 	.word	0x200082d0
 8007ea8:	200082ce 	.word	0x200082ce
 8007eac:	20008298 	.word	0x20008298
 8007eb0:	08010e74 	.word	0x08010e74
 8007eb4:	08010e9c 	.word	0x08010e9c
 8007eb8:	08010ec8 	.word	0x08010ec8
    }

    if (pcb->remote_port == tcphdr->src &&
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	8b1a      	ldrh	r2, [r3, #24]
 8007ec0:	4b72      	ldr	r3, [pc, #456]	; (800808c <tcp_input+0x49c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d13a      	bne.n	8007f42 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	8ada      	ldrh	r2, [r3, #22]
 8007ed0:	4b6e      	ldr	r3, [pc, #440]	; (800808c <tcp_input+0x49c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d132      	bne.n	8007f42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b6b      	ldr	r3, [pc, #428]	; (8008090 <tcp_input+0x4a0>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d12c      	bne.n	8007f42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4b68      	ldr	r3, [pc, #416]	; (8008090 <tcp_input+0x4a0>)
 8007eee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d126      	bne.n	8007f42 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d106      	bne.n	8007f0c <tcp_input+0x31c>
 8007efe:	4b65      	ldr	r3, [pc, #404]	; (8008094 <tcp_input+0x4a4>)
 8007f00:	f240 120d 	movw	r2, #269	; 0x10d
 8007f04:	4964      	ldr	r1, [pc, #400]	; (8008098 <tcp_input+0x4a8>)
 8007f06:	4865      	ldr	r0, [pc, #404]	; (800809c <tcp_input+0x4ac>)
 8007f08:	f006 fde6 	bl	800ead8 <iprintf>
      if (prev != NULL) {
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <tcp_input+0x338>
        prev->next = pcb->next;
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f1a:	4b61      	ldr	r3, [pc, #388]	; (80080a0 <tcp_input+0x4b0>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f22:	4a5f      	ldr	r2, [pc, #380]	; (80080a0 <tcp_input+0x4b0>)
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d111      	bne.n	8007f56 <tcp_input+0x366>
 8007f32:	4b58      	ldr	r3, [pc, #352]	; (8008094 <tcp_input+0x4a4>)
 8007f34:	f240 1215 	movw	r2, #277	; 0x115
 8007f38:	495a      	ldr	r1, [pc, #360]	; (80080a4 <tcp_input+0x4b4>)
 8007f3a:	4858      	ldr	r0, [pc, #352]	; (800809c <tcp_input+0x4ac>)
 8007f3c:	f006 fdcc 	bl	800ead8 <iprintf>
      break;
 8007f40:	e009      	b.n	8007f56 <tcp_input+0x366>
    }
    prev = pcb;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f47f af5e 	bne.w	8007e10 <tcp_input+0x220>
 8007f54:	e000      	b.n	8007f58 <tcp_input+0x368>
      break;
 8007f56:	bf00      	nop
  }

  if (pcb == NULL) {
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f040 80aa 	bne.w	80080b4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f60:	4b51      	ldr	r3, [pc, #324]	; (80080a8 <tcp_input+0x4b8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e03f      	b.n	8007fe8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	7d1b      	ldrb	r3, [r3, #20]
 8007f6c:	2b0a      	cmp	r3, #10
 8007f6e:	d006      	beq.n	8007f7e <tcp_input+0x38e>
 8007f70:	4b48      	ldr	r3, [pc, #288]	; (8008094 <tcp_input+0x4a4>)
 8007f72:	f240 121f 	movw	r2, #287	; 0x11f
 8007f76:	494d      	ldr	r1, [pc, #308]	; (80080ac <tcp_input+0x4bc>)
 8007f78:	4848      	ldr	r0, [pc, #288]	; (800809c <tcp_input+0x4ac>)
 8007f7a:	f006 fdad 	bl	800ead8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	7a1b      	ldrb	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d009      	beq.n	8007f9a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	7a1a      	ldrb	r2, [r3, #8]
 8007f8a:	4b41      	ldr	r3, [pc, #260]	; (8008090 <tcp_input+0x4a0>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f92:	3301      	adds	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d122      	bne.n	8007fe0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	8b1a      	ldrh	r2, [r3, #24]
 8007f9e:	4b3b      	ldr	r3, [pc, #236]	; (800808c <tcp_input+0x49c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d11b      	bne.n	8007fe2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	8ada      	ldrh	r2, [r3, #22]
 8007fae:	4b37      	ldr	r3, [pc, #220]	; (800808c <tcp_input+0x49c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d113      	bne.n	8007fe2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b34      	ldr	r3, [pc, #208]	; (8008090 <tcp_input+0x4a0>)
 8007fc0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d10d      	bne.n	8007fe2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b31      	ldr	r3, [pc, #196]	; (8008090 <tcp_input+0x4a0>)
 8007fcc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d107      	bne.n	8007fe2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007fd2:	69f8      	ldr	r0, [r7, #28]
 8007fd4:	f000 fb56 	bl	8008684 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fd ffd1 	bl	8005f80 <pbuf_free>
        return;
 8007fde:	e1fd      	b.n	80083dc <tcp_input+0x7ec>
        continue;
 8007fe0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	61fb      	str	r3, [r7, #28]
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1bc      	bne.n	8007f68 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ff2:	4b2f      	ldr	r3, [pc, #188]	; (80080b0 <tcp_input+0x4c0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e02a      	b.n	8008050 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	7a1b      	ldrb	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00c      	beq.n	800801c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	7a1a      	ldrb	r2, [r3, #8]
 8008006:	4b22      	ldr	r3, [pc, #136]	; (8008090 <tcp_input+0x4a0>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800800e:	3301      	adds	r3, #1
 8008010:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008012:	429a      	cmp	r2, r3
 8008014:	d002      	beq.n	800801c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	61bb      	str	r3, [r7, #24]
        continue;
 800801a:	e016      	b.n	800804a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	8ada      	ldrh	r2, [r3, #22]
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <tcp_input+0x49c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	b29b      	uxth	r3, r3
 8008028:	429a      	cmp	r2, r3
 800802a:	d10c      	bne.n	8008046 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b17      	ldr	r3, [pc, #92]	; (8008090 <tcp_input+0x4a0>)
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	429a      	cmp	r2, r3
 8008036:	d00f      	beq.n	8008058 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <tcp_input+0x46a>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d009      	beq.n	800805a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1d1      	bne.n	8007ffa <tcp_input+0x40a>
 8008056:	e000      	b.n	800805a <tcp_input+0x46a>
            break;
 8008058:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d029      	beq.n	80080b4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800806e:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <tcp_input+0x4c0>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008076:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <tcp_input+0x4c0>)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800807c:	6978      	ldr	r0, [r7, #20]
 800807e:	f000 fa03 	bl	8008488 <tcp_listen_input>
      }
      pbuf_free(p);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fd ff7c 	bl	8005f80 <pbuf_free>
      return;
 8008088:	e1a8      	b.n	80083dc <tcp_input+0x7ec>
 800808a:	bf00      	nop
 800808c:	200082b4 	.word	0x200082b4
 8008090:	20004d1c 	.word	0x20004d1c
 8008094:	08010dc4 	.word	0x08010dc4
 8008098:	08010ef0 	.word	0x08010ef0
 800809c:	08010e10 	.word	0x08010e10
 80080a0:	20008298 	.word	0x20008298
 80080a4:	08010f1c 	.word	0x08010f1c
 80080a8:	2000829c 	.word	0x2000829c
 80080ac:	08010f48 	.word	0x08010f48
 80080b0:	20008294 	.word	0x20008294
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8158 	beq.w	800836c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80080bc:	4b95      	ldr	r3, [pc, #596]	; (8008314 <tcp_input+0x724>)
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	891a      	ldrh	r2, [r3, #8]
 80080c6:	4b93      	ldr	r3, [pc, #588]	; (8008314 <tcp_input+0x724>)
 80080c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80080ca:	4a92      	ldr	r2, [pc, #584]	; (8008314 <tcp_input+0x724>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80080d0:	4b91      	ldr	r3, [pc, #580]	; (8008318 <tcp_input+0x728>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a8f      	ldr	r2, [pc, #572]	; (8008314 <tcp_input+0x724>)
 80080d6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80080d8:	4b90      	ldr	r3, [pc, #576]	; (800831c <tcp_input+0x72c>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80080de:	4b90      	ldr	r3, [pc, #576]	; (8008320 <tcp_input+0x730>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80080e4:	4b8f      	ldr	r3, [pc, #572]	; (8008324 <tcp_input+0x734>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80080ea:	4b8f      	ldr	r3, [pc, #572]	; (8008328 <tcp_input+0x738>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d006      	beq.n	8008104 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	7b5b      	ldrb	r3, [r3, #13]
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008108:	2b00      	cmp	r3, #0
 800810a:	d017      	beq.n	800813c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800810c:	69f8      	ldr	r0, [r7, #28]
 800810e:	f7ff f929 	bl	8007364 <tcp_process_refused_data>
 8008112:	4603      	mov	r3, r0
 8008114:	f113 0f0d 	cmn.w	r3, #13
 8008118:	d007      	beq.n	800812a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008122:	4b82      	ldr	r3, [pc, #520]	; (800832c <tcp_input+0x73c>)
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 80e3 	bne.w	80082fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008134:	69f8      	ldr	r0, [r7, #28]
 8008136:	f003 f9ad 	bl	800b494 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800813a:	e0de      	b.n	80082fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800813c:	4a7c      	ldr	r2, [pc, #496]	; (8008330 <tcp_input+0x740>)
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008142:	69f8      	ldr	r0, [r7, #28]
 8008144:	f000 fb18 	bl	8008778 <tcp_process>
 8008148:	4603      	mov	r3, r0
 800814a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800814c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008150:	f113 0f0d 	cmn.w	r3, #13
 8008154:	f000 80d3 	beq.w	80082fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008158:	4b71      	ldr	r3, [pc, #452]	; (8008320 <tcp_input+0x730>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d015      	beq.n	8008190 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <tcp_input+0x590>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	6912      	ldr	r2, [r2, #16]
 8008178:	f06f 010d 	mvn.w	r1, #13
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008180:	69f9      	ldr	r1, [r7, #28]
 8008182:	486c      	ldr	r0, [pc, #432]	; (8008334 <tcp_input+0x744>)
 8008184:	f7ff fbbc 	bl	8007900 <tcp_pcb_remove>
        tcp_free(pcb);
 8008188:	69f8      	ldr	r0, [r7, #28]
 800818a:	f7fe f9a9 	bl	80064e0 <tcp_free>
 800818e:	e0da      	b.n	8008346 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008194:	4b63      	ldr	r3, [pc, #396]	; (8008324 <tcp_input+0x734>)
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01d      	beq.n	80081d8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800819c:	4b61      	ldr	r3, [pc, #388]	; (8008324 <tcp_input+0x734>)
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <tcp_input+0x5d2>
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	6910      	ldr	r0, [r2, #16]
 80081b6:	89fa      	ldrh	r2, [r7, #14]
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	4798      	blx	r3
 80081bc:	4603      	mov	r3, r0
 80081be:	74fb      	strb	r3, [r7, #19]
 80081c0:	e001      	b.n	80081c6 <tcp_input+0x5d6>
 80081c2:	2300      	movs	r3, #0
 80081c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80081c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081ca:	f113 0f0d 	cmn.w	r3, #13
 80081ce:	f000 8098 	beq.w	8008302 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80081d2:	4b54      	ldr	r3, [pc, #336]	; (8008324 <tcp_input+0x734>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80081d8:	69f8      	ldr	r0, [r7, #28]
 80081da:	f000 f915 	bl	8008408 <tcp_input_delayed_close>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f040 8090 	bne.w	8008306 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80081e6:	4b4d      	ldr	r3, [pc, #308]	; (800831c <tcp_input+0x72c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d041      	beq.n	8008272 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d006      	beq.n	8008204 <tcp_input+0x614>
 80081f6:	4b50      	ldr	r3, [pc, #320]	; (8008338 <tcp_input+0x748>)
 80081f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80081fc:	494f      	ldr	r1, [pc, #316]	; (800833c <tcp_input+0x74c>)
 80081fe:	4850      	ldr	r0, [pc, #320]	; (8008340 <tcp_input+0x750>)
 8008200:	f006 fc6a 	bl	800ead8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	8b5b      	ldrh	r3, [r3, #26]
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008210:	4b42      	ldr	r3, [pc, #264]	; (800831c <tcp_input+0x72c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4618      	mov	r0, r3
 8008216:	f7fd feb3 	bl	8005f80 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800821a:	69f8      	ldr	r0, [r7, #28]
 800821c:	f7fe fc48 	bl	8006ab0 <tcp_abort>
            goto aborted;
 8008220:	e091      	b.n	8008346 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00c      	beq.n	8008246 <tcp_input+0x656>
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	6918      	ldr	r0, [r3, #16]
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <tcp_input+0x72c>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	69f9      	ldr	r1, [r7, #28]
 800823e:	47a0      	blx	r4
 8008240:	4603      	mov	r3, r0
 8008242:	74fb      	strb	r3, [r7, #19]
 8008244:	e008      	b.n	8008258 <tcp_input+0x668>
 8008246:	4b35      	ldr	r3, [pc, #212]	; (800831c <tcp_input+0x72c>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	2300      	movs	r3, #0
 800824c:	69f9      	ldr	r1, [r7, #28]
 800824e:	2000      	movs	r0, #0
 8008250:	f7ff f95e 	bl	8007510 <tcp_recv_null>
 8008254:	4603      	mov	r3, r0
 8008256:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800825c:	f113 0f0d 	cmn.w	r3, #13
 8008260:	d053      	beq.n	800830a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800826a:	4b2c      	ldr	r3, [pc, #176]	; (800831c <tcp_input+0x72c>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008272:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <tcp_input+0x730>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d030      	beq.n	80082e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828a:	7b5a      	ldrb	r2, [r3, #13]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008290:	f042 0220 	orr.w	r2, r2, #32
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	735a      	strb	r2, [r3, #13]
 8008298:	e022      	b.n	80082e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082a2:	d005      	beq.n	80082b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a8:	3301      	adds	r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <tcp_input+0x6e2>
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	6918      	ldr	r0, [r3, #16]
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	69f9      	ldr	r1, [r7, #28]
 80082ca:	47a0      	blx	r4
 80082cc:	4603      	mov	r3, r0
 80082ce:	74fb      	strb	r3, [r7, #19]
 80082d0:	e001      	b.n	80082d6 <tcp_input+0x6e6>
 80082d2:	2300      	movs	r3, #0
 80082d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80082d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082da:	f113 0f0d 	cmn.w	r3, #13
 80082de:	d016      	beq.n	800830e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80082e0:	4b13      	ldr	r3, [pc, #76]	; (8008330 <tcp_input+0x740>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80082e6:	69f8      	ldr	r0, [r7, #28]
 80082e8:	f000 f88e 	bl	8008408 <tcp_input_delayed_close>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d128      	bne.n	8008344 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80082f2:	69f8      	ldr	r0, [r7, #28]
 80082f4:	f002 fac8 	bl	800a888 <tcp_output>
 80082f8:	e025      	b.n	8008346 <tcp_input+0x756>
        goto aborted;
 80082fa:	bf00      	nop
 80082fc:	e023      	b.n	8008346 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80082fe:	bf00      	nop
 8008300:	e021      	b.n	8008346 <tcp_input+0x756>
              goto aborted;
 8008302:	bf00      	nop
 8008304:	e01f      	b.n	8008346 <tcp_input+0x756>
          goto aborted;
 8008306:	bf00      	nop
 8008308:	e01d      	b.n	8008346 <tcp_input+0x756>
            goto aborted;
 800830a:	bf00      	nop
 800830c:	e01b      	b.n	8008346 <tcp_input+0x756>
              goto aborted;
 800830e:	bf00      	nop
 8008310:	e019      	b.n	8008346 <tcp_input+0x756>
 8008312:	bf00      	nop
 8008314:	200082a4 	.word	0x200082a4
 8008318:	200082b4 	.word	0x200082b4
 800831c:	200082d4 	.word	0x200082d4
 8008320:	200082d1 	.word	0x200082d1
 8008324:	200082cc 	.word	0x200082cc
 8008328:	200082d0 	.word	0x200082d0
 800832c:	200082ce 	.word	0x200082ce
 8008330:	200082d8 	.word	0x200082d8
 8008334:	20008298 	.word	0x20008298
 8008338:	08010dc4 	.word	0x08010dc4
 800833c:	08010f78 	.word	0x08010f78
 8008340:	08010e10 	.word	0x08010e10
          goto aborted;
 8008344:	bf00      	nop
    tcp_input_pcb = NULL;
 8008346:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <tcp_input+0x7f4>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <tcp_input+0x7f8>)
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008352:	4b26      	ldr	r3, [pc, #152]	; (80083ec <tcp_input+0x7fc>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d03f      	beq.n	80083da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <tcp_input+0x7fc>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fe0e 	bl	8005f80 <pbuf_free>
      inseg.p = NULL;
 8008364:	4b21      	ldr	r3, [pc, #132]	; (80083ec <tcp_input+0x7fc>)
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800836a:	e036      	b.n	80083da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800836c:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <tcp_input+0x800>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	899b      	ldrh	r3, [r3, #12]
 8008372:	b29b      	uxth	r3, r3
 8008374:	4618      	mov	r0, r3
 8008376:	f7fc f9e9 	bl	800474c <lwip_htons>
 800837a:	4603      	mov	r3, r0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d118      	bne.n	80083b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008386:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <tcp_input+0x804>)
 8008388:	6819      	ldr	r1, [r3, #0]
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <tcp_input+0x808>)
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	4b1a      	ldr	r3, [pc, #104]	; (80083fc <tcp_input+0x80c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008396:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <tcp_input+0x800>)
 8008398:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800839a:	885b      	ldrh	r3, [r3, #2]
 800839c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800839e:	4a14      	ldr	r2, [pc, #80]	; (80083f0 <tcp_input+0x800>)
 80083a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	b292      	uxth	r2, r2
 80083a6:	9202      	str	r2, [sp, #8]
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <tcp_input+0x810>)
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <tcp_input+0x814>)
 80083b0:	4602      	mov	r2, r0
 80083b2:	2000      	movs	r0, #0
 80083b4:	f003 f81c 	bl	800b3f0 <tcp_rst>
    pbuf_free(p);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fd fde1 	bl	8005f80 <pbuf_free>
  return;
 80083be:	e00c      	b.n	80083da <tcp_input+0x7ea>
    goto dropped;
 80083c0:	bf00      	nop
 80083c2:	e006      	b.n	80083d2 <tcp_input+0x7e2>
    goto dropped;
 80083c4:	bf00      	nop
 80083c6:	e004      	b.n	80083d2 <tcp_input+0x7e2>
    goto dropped;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <tcp_input+0x7e2>
      goto dropped;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <tcp_input+0x7e2>
      goto dropped;
 80083d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fd fdd4 	bl	8005f80 <pbuf_free>
 80083d8:	e000      	b.n	80083dc <tcp_input+0x7ec>
  return;
 80083da:	bf00      	nop
}
 80083dc:	3724      	adds	r7, #36	; 0x24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd90      	pop	{r4, r7, pc}
 80083e2:	bf00      	nop
 80083e4:	200082d8 	.word	0x200082d8
 80083e8:	200082d4 	.word	0x200082d4
 80083ec:	200082a4 	.word	0x200082a4
 80083f0:	200082b4 	.word	0x200082b4
 80083f4:	200082c8 	.word	0x200082c8
 80083f8:	200082ce 	.word	0x200082ce
 80083fc:	200082c4 	.word	0x200082c4
 8008400:	20004d2c 	.word	0x20004d2c
 8008404:	20004d30 	.word	0x20004d30

08008408 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <tcp_input_delayed_close+0x1c>
 8008416:	4b17      	ldr	r3, [pc, #92]	; (8008474 <tcp_input_delayed_close+0x6c>)
 8008418:	f240 225a 	movw	r2, #602	; 0x25a
 800841c:	4916      	ldr	r1, [pc, #88]	; (8008478 <tcp_input_delayed_close+0x70>)
 800841e:	4817      	ldr	r0, [pc, #92]	; (800847c <tcp_input_delayed_close+0x74>)
 8008420:	f006 fb5a 	bl	800ead8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <tcp_input_delayed_close+0x78>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01c      	beq.n	800846a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8b5b      	ldrh	r3, [r3, #26]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10d      	bne.n	8008458 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <tcp_input_delayed_close+0x50>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6912      	ldr	r2, [r2, #16]
 8008450:	f06f 010e 	mvn.w	r1, #14
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	480a      	ldr	r0, [pc, #40]	; (8008484 <tcp_input_delayed_close+0x7c>)
 800845c:	f7ff fa50 	bl	8007900 <tcp_pcb_remove>
    tcp_free(pcb);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7fe f83d 	bl	80064e0 <tcp_free>
    return 1;
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	08010dc4 	.word	0x08010dc4
 8008478:	08010f94 	.word	0x08010f94
 800847c:	08010e10 	.word	0x08010e10
 8008480:	200082d1 	.word	0x200082d1
 8008484:	20008298 	.word	0x20008298

08008488 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b08b      	sub	sp, #44	; 0x2c
 800848c:	af04      	add	r7, sp, #16
 800848e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008490:	4b6f      	ldr	r3, [pc, #444]	; (8008650 <tcp_listen_input+0x1c8>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 80d2 	bne.w	8008642 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d106      	bne.n	80084b2 <tcp_listen_input+0x2a>
 80084a4:	4b6b      	ldr	r3, [pc, #428]	; (8008654 <tcp_listen_input+0x1cc>)
 80084a6:	f240 2281 	movw	r2, #641	; 0x281
 80084aa:	496b      	ldr	r1, [pc, #428]	; (8008658 <tcp_listen_input+0x1d0>)
 80084ac:	486b      	ldr	r0, [pc, #428]	; (800865c <tcp_listen_input+0x1d4>)
 80084ae:	f006 fb13 	bl	800ead8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80084b2:	4b67      	ldr	r3, [pc, #412]	; (8008650 <tcp_listen_input+0x1c8>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d019      	beq.n	80084f2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084be:	4b68      	ldr	r3, [pc, #416]	; (8008660 <tcp_listen_input+0x1d8>)
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	4b68      	ldr	r3, [pc, #416]	; (8008664 <tcp_listen_input+0x1dc>)
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b67      	ldr	r3, [pc, #412]	; (8008668 <tcp_listen_input+0x1e0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084ce:	4b67      	ldr	r3, [pc, #412]	; (800866c <tcp_listen_input+0x1e4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084d2:	885b      	ldrh	r3, [r3, #2]
 80084d4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084d6:	4a65      	ldr	r2, [pc, #404]	; (800866c <tcp_listen_input+0x1e4>)
 80084d8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084da:	8812      	ldrh	r2, [r2, #0]
 80084dc:	b292      	uxth	r2, r2
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	4b63      	ldr	r3, [pc, #396]	; (8008670 <tcp_listen_input+0x1e8>)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4b63      	ldr	r3, [pc, #396]	; (8008674 <tcp_listen_input+0x1ec>)
 80084e8:	4602      	mov	r2, r0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f002 ff80 	bl	800b3f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80084f0:	e0a9      	b.n	8008646 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80084f2:	4b57      	ldr	r3, [pc, #348]	; (8008650 <tcp_listen_input+0x1c8>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 80a3 	beq.w	8008646 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7d5b      	ldrb	r3, [r3, #21]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff f927 	bl	8007758 <tcp_alloc>
 800850a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d111      	bne.n	8008536 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <tcp_listen_input+0xa8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6910      	ldr	r0, [r2, #16]
 8008522:	f04f 32ff 	mov.w	r2, #4294967295
 8008526:	2100      	movs	r1, #0
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]
      return;
 800852e:	e08b      	b.n	8008648 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008530:	23f0      	movs	r3, #240	; 0xf0
 8008532:	73bb      	strb	r3, [r7, #14]
      return;
 8008534:	e088      	b.n	8008648 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008536:	4b50      	ldr	r3, [pc, #320]	; (8008678 <tcp_listen_input+0x1f0>)
 8008538:	695a      	ldr	r2, [r3, #20]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800853e:	4b4e      	ldr	r3, [pc, #312]	; (8008678 <tcp_listen_input+0x1f0>)
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8ada      	ldrh	r2, [r3, #22]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800854e:	4b47      	ldr	r3, [pc, #284]	; (800866c <tcp_listen_input+0x1e4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29a      	uxth	r2, r3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2203      	movs	r2, #3
 800855e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008560:	4b41      	ldr	r3, [pc, #260]	; (8008668 <tcp_listen_input+0x1e0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	f7ff fa58 	bl	8007a28 <tcp_next_iss>
 8008578:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008592:	4b35      	ldr	r3, [pc, #212]	; (8008668 <tcp_listen_input+0x1e0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	1e5a      	subs	r2, r3, #1
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7a5b      	ldrb	r3, [r3, #9]
 80085ae:	f003 030c 	and.w	r3, r3, #12
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7a1a      	ldrb	r2, [r3, #8]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80085c0:	4b2e      	ldr	r3, [pc, #184]	; (800867c <tcp_listen_input+0x1f4>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	60da      	str	r2, [r3, #12]
 80085c8:	4a2c      	ldr	r2, [pc, #176]	; (800867c <tcp_listen_input+0x1f4>)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	f003 f8d1 	bl	800b774 <tcp_timer_needed>
 80085d2:	4b2b      	ldr	r3, [pc, #172]	; (8008680 <tcp_listen_input+0x1f8>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f001 fd8f 	bl	800a0fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80085de:	4b23      	ldr	r3, [pc, #140]	; (800866c <tcp_listen_input+0x1e4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	89db      	ldrh	r3, [r3, #14]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f005 f833 	bl	800d66c <ip4_route>
 8008606:	4601      	mov	r1, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	3304      	adds	r3, #4
 800860c:	461a      	mov	r2, r3
 800860e:	4620      	mov	r0, r4
 8008610:	f7ff fa30 	bl	8007a74 <tcp_eff_send_mss_netif>
 8008614:	4603      	mov	r3, r0
 8008616:	461a      	mov	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800861c:	2112      	movs	r1, #18
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f002 f844 	bl	800a6ac <tcp_enqueue_flags>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008630:	2100      	movs	r1, #0
 8008632:	6978      	ldr	r0, [r7, #20]
 8008634:	f7fe f97e 	bl	8006934 <tcp_abandon>
      return;
 8008638:	e006      	b.n	8008648 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f002 f924 	bl	800a888 <tcp_output>
  return;
 8008640:	e001      	b.n	8008646 <tcp_listen_input+0x1be>
    return;
 8008642:	bf00      	nop
 8008644:	e000      	b.n	8008648 <tcp_listen_input+0x1c0>
  return;
 8008646:	bf00      	nop
}
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}
 800864e:	bf00      	nop
 8008650:	200082d0 	.word	0x200082d0
 8008654:	08010dc4 	.word	0x08010dc4
 8008658:	08010fbc 	.word	0x08010fbc
 800865c:	08010e10 	.word	0x08010e10
 8008660:	200082c8 	.word	0x200082c8
 8008664:	200082ce 	.word	0x200082ce
 8008668:	200082c4 	.word	0x200082c4
 800866c:	200082b4 	.word	0x200082b4
 8008670:	20004d2c 	.word	0x20004d2c
 8008674:	20004d30 	.word	0x20004d30
 8008678:	20004d1c 	.word	0x20004d1c
 800867c:	20008298 	.word	0x20008298
 8008680:	200082a0 	.word	0x200082a0

08008684 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af04      	add	r7, sp, #16
 800868a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800868c:	4b2f      	ldr	r3, [pc, #188]	; (800874c <tcp_timewait_input+0xc8>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d153      	bne.n	8008740 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <tcp_timewait_input+0x28>
 800869e:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <tcp_timewait_input+0xcc>)
 80086a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80086a4:	492b      	ldr	r1, [pc, #172]	; (8008754 <tcp_timewait_input+0xd0>)
 80086a6:	482c      	ldr	r0, [pc, #176]	; (8008758 <tcp_timewait_input+0xd4>)
 80086a8:	f006 fa16 	bl	800ead8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80086ac:	4b27      	ldr	r3, [pc, #156]	; (800874c <tcp_timewait_input+0xc8>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02a      	beq.n	800870e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80086b8:	4b28      	ldr	r3, [pc, #160]	; (800875c <tcp_timewait_input+0xd8>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	db2d      	blt.n	8008722 <tcp_timewait_input+0x9e>
 80086c6:	4b25      	ldr	r3, [pc, #148]	; (800875c <tcp_timewait_input+0xd8>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086d2:	440b      	add	r3, r1
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	dc23      	bgt.n	8008722 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086da:	4b21      	ldr	r3, [pc, #132]	; (8008760 <tcp_timewait_input+0xdc>)
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	4b21      	ldr	r3, [pc, #132]	; (8008764 <tcp_timewait_input+0xe0>)
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	4b1d      	ldr	r3, [pc, #116]	; (800875c <tcp_timewait_input+0xd8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086ea:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <tcp_timewait_input+0xe4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086f2:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <tcp_timewait_input+0xe4>)
 80086f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086f6:	8812      	ldrh	r2, [r2, #0]
 80086f8:	b292      	uxth	r2, r2
 80086fa:	9202      	str	r2, [sp, #8]
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <tcp_timewait_input+0xe8>)
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <tcp_timewait_input+0xec>)
 8008704:	4602      	mov	r2, r0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f002 fe72 	bl	800b3f0 <tcp_rst>
      return;
 800870c:	e01b      	b.n	8008746 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <tcp_timewait_input+0xc8>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800871a:	4b16      	ldr	r3, [pc, #88]	; (8008774 <tcp_timewait_input+0xf0>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008722:	4b10      	ldr	r3, [pc, #64]	; (8008764 <tcp_timewait_input+0xe0>)
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	8b5b      	ldrh	r3, [r3, #26]
 800872e:	f043 0302 	orr.w	r3, r3, #2
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f002 f8a5 	bl	800a888 <tcp_output>
  }
  return;
 800873e:	e001      	b.n	8008744 <tcp_timewait_input+0xc0>
    return;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <tcp_timewait_input+0xc2>
  return;
 8008744:	bf00      	nop
}
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200082d0 	.word	0x200082d0
 8008750:	08010dc4 	.word	0x08010dc4
 8008754:	08010fdc 	.word	0x08010fdc
 8008758:	08010e10 	.word	0x08010e10
 800875c:	200082c4 	.word	0x200082c4
 8008760:	200082c8 	.word	0x200082c8
 8008764:	200082ce 	.word	0x200082ce
 8008768:	200082b4 	.word	0x200082b4
 800876c:	20004d2c 	.word	0x20004d2c
 8008770:	20004d30 	.word	0x20004d30
 8008774:	2000828c 	.word	0x2000828c

08008778 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b08d      	sub	sp, #52	; 0x34
 800877c:	af04      	add	r7, sp, #16
 800877e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <tcp_process+0x24>
 800878e:	4b9d      	ldr	r3, [pc, #628]	; (8008a04 <tcp_process+0x28c>)
 8008790:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008794:	499c      	ldr	r1, [pc, #624]	; (8008a08 <tcp_process+0x290>)
 8008796:	489d      	ldr	r0, [pc, #628]	; (8008a0c <tcp_process+0x294>)
 8008798:	f006 f99e 	bl	800ead8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800879c:	4b9c      	ldr	r3, [pc, #624]	; (8008a10 <tcp_process+0x298>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d04e      	beq.n	8008846 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7d1b      	ldrb	r3, [r3, #20]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d108      	bne.n	80087c2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b4:	4b97      	ldr	r3, [pc, #604]	; (8008a14 <tcp_process+0x29c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d123      	bne.n	8008804 <tcp_process+0x8c>
        acceptable = 1;
 80087bc:	2301      	movs	r3, #1
 80087be:	76fb      	strb	r3, [r7, #27]
 80087c0:	e020      	b.n	8008804 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087c6:	4b94      	ldr	r3, [pc, #592]	; (8008a18 <tcp_process+0x2a0>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d102      	bne.n	80087d4 <tcp_process+0x5c>
        acceptable = 1;
 80087ce:	2301      	movs	r3, #1
 80087d0:	76fb      	strb	r3, [r7, #27]
 80087d2:	e017      	b.n	8008804 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80087d4:	4b90      	ldr	r3, [pc, #576]	; (8008a18 <tcp_process+0x2a0>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	db10      	blt.n	8008804 <tcp_process+0x8c>
 80087e2:	4b8d      	ldr	r3, [pc, #564]	; (8008a18 <tcp_process+0x2a0>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087ee:	440b      	add	r3, r1
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dc06      	bgt.n	8008804 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8b5b      	ldrh	r3, [r3, #26]
 80087fa:	f043 0302 	orr.w	r3, r3, #2
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008804:	7efb      	ldrb	r3, [r7, #27]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01b      	beq.n	8008842 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <tcp_process+0xa8>
 8008812:	4b7c      	ldr	r3, [pc, #496]	; (8008a04 <tcp_process+0x28c>)
 8008814:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008818:	4980      	ldr	r1, [pc, #512]	; (8008a1c <tcp_process+0x2a4>)
 800881a:	487c      	ldr	r0, [pc, #496]	; (8008a0c <tcp_process+0x294>)
 800881c:	f006 f95c 	bl	800ead8 <iprintf>
      recv_flags |= TF_RESET;
 8008820:	4b7f      	ldr	r3, [pc, #508]	; (8008a20 <tcp_process+0x2a8>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	f043 0308 	orr.w	r3, r3, #8
 8008828:	b2da      	uxtb	r2, r3
 800882a:	4b7d      	ldr	r3, [pc, #500]	; (8008a20 <tcp_process+0x2a8>)
 800882c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	8b5b      	ldrh	r3, [r3, #26]
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800883c:	f06f 030d 	mvn.w	r3, #13
 8008840:	e37a      	b.n	8008f38 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	e378      	b.n	8008f38 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008846:	4b72      	ldr	r3, [pc, #456]	; (8008a10 <tcp_process+0x298>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d010      	beq.n	8008874 <tcp_process+0xfc>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7d1b      	ldrb	r3, [r3, #20]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d00c      	beq.n	8008874 <tcp_process+0xfc>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7d1b      	ldrb	r3, [r3, #20]
 800885e:	2b03      	cmp	r3, #3
 8008860:	d008      	beq.n	8008874 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	8b5b      	ldrh	r3, [r3, #26]
 8008866:	f043 0302 	orr.w	r3, r3, #2
 800886a:	b29a      	uxth	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	e361      	b.n	8008f38 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8b5b      	ldrh	r3, [r3, #26]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008880:	4b68      	ldr	r3, [pc, #416]	; (8008a24 <tcp_process+0x2ac>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fc2f 	bl	800a0fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
 80088a2:	3b02      	subs	r3, #2
 80088a4:	2b07      	cmp	r3, #7
 80088a6:	f200 8337 	bhi.w	8008f18 <tcp_process+0x7a0>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <tcp_process+0x138>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	08008b01 	.word	0x08008b01
 80088b8:	08008c79 	.word	0x08008c79
 80088bc:	08008ca3 	.word	0x08008ca3
 80088c0:	08008dc7 	.word	0x08008dc7
 80088c4:	08008c79 	.word	0x08008c79
 80088c8:	08008e53 	.word	0x08008e53
 80088cc:	08008ee3 	.word	0x08008ee3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80088d0:	4b4f      	ldr	r3, [pc, #316]	; (8008a10 <tcp_process+0x298>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80e4 	beq.w	8008aa6 <tcp_process+0x32e>
 80088de:	4b4c      	ldr	r3, [pc, #304]	; (8008a10 <tcp_process+0x298>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80dd 	beq.w	8008aa6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	4b48      	ldr	r3, [pc, #288]	; (8008a14 <tcp_process+0x29c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	f040 80d5 	bne.w	8008aa6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80088fc:	4b46      	ldr	r3, [pc, #280]	; (8008a18 <tcp_process+0x2a0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800890e:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <tcp_process+0x29c>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008916:	4b44      	ldr	r3, [pc, #272]	; (8008a28 <tcp_process+0x2b0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	89db      	ldrh	r3, [r3, #14]
 800891c:	b29a      	uxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008930:	4b39      	ldr	r3, [pc, #228]	; (8008a18 <tcp_process+0x2a0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	1e5a      	subs	r2, r3, #1
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2204      	movs	r2, #4
 800893e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	4618      	mov	r0, r3
 800894a:	f004 fe8f 	bl	800d66c <ip4_route>
 800894e:	4601      	mov	r1, r0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	461a      	mov	r2, r3
 8008956:	4620      	mov	r0, r4
 8008958:	f7ff f88c 	bl	8007a74 <tcp_eff_send_mss_netif>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008968:	009a      	lsls	r2, r3, #2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	f241 111c 	movw	r1, #4380	; 0x111c
 8008974:	428b      	cmp	r3, r1
 8008976:	bf38      	it	cc
 8008978:	460b      	movcc	r3, r1
 800897a:	429a      	cmp	r2, r3
 800897c:	d204      	bcs.n	8008988 <tcp_process+0x210>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	b29b      	uxth	r3, r3
 8008986:	e00d      	b.n	80089a4 <tcp_process+0x22c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008992:	4293      	cmp	r3, r2
 8008994:	d904      	bls.n	80089a0 <tcp_process+0x228>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	e001      	b.n	80089a4 <tcp_process+0x22c>
 80089a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <tcp_process+0x24a>
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <tcp_process+0x28c>)
 80089b6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80089ba:	491c      	ldr	r1, [pc, #112]	; (8008a2c <tcp_process+0x2b4>)
 80089bc:	4813      	ldr	r0, [pc, #76]	; (8008a0c <tcp_process+0x294>)
 80089be:	f006 f88b 	bl	800ead8 <iprintf>
        --pcb->snd_queuelen;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d12a      	bne.n	8008a34 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <tcp_process+0x280>
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <tcp_process+0x28c>)
 80089ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 80089f0:	490f      	ldr	r1, [pc, #60]	; (8008a30 <tcp_process+0x2b8>)
 80089f2:	4806      	ldr	r0, [pc, #24]	; (8008a0c <tcp_process+0x294>)
 80089f4:	f006 f870 	bl	800ead8 <iprintf>
          pcb->unsent = rseg->next;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a00:	e01c      	b.n	8008a3c <tcp_process+0x2c4>
 8008a02:	bf00      	nop
 8008a04:	08010dc4 	.word	0x08010dc4
 8008a08:	08010ffc 	.word	0x08010ffc
 8008a0c:	08010e10 	.word	0x08010e10
 8008a10:	200082d0 	.word	0x200082d0
 8008a14:	200082c8 	.word	0x200082c8
 8008a18:	200082c4 	.word	0x200082c4
 8008a1c:	08011018 	.word	0x08011018
 8008a20:	200082d1 	.word	0x200082d1
 8008a24:	2000828c 	.word	0x2000828c
 8008a28:	200082b4 	.word	0x200082b4
 8008a2c:	08011038 	.word	0x08011038
 8008a30:	08011050 	.word	0x08011050
        } else {
          pcb->unacked = rseg->next;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008a3c:	69f8      	ldr	r0, [r7, #28]
 8008a3e:	f7fe fd22 	bl	8007486 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d104      	bne.n	8008a54 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a50:	861a      	strh	r2, [r3, #48]	; 0x30
 8008a52:	e006      	b.n	8008a62 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <tcp_process+0x30a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6910      	ldr	r0, [r2, #16]
 8008a76:	2200      	movs	r2, #0
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4798      	blx	r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	76bb      	strb	r3, [r7, #26]
 8008a80:	e001      	b.n	8008a86 <tcp_process+0x30e>
 8008a82:	2300      	movs	r3, #0
 8008a84:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008a86:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008a8a:	f113 0f0d 	cmn.w	r3, #13
 8008a8e:	d102      	bne.n	8008a96 <tcp_process+0x31e>
          return ERR_ABRT;
 8008a90:	f06f 030c 	mvn.w	r3, #12
 8008a94:	e250      	b.n	8008f38 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8b5b      	ldrh	r3, [r3, #26]
 8008a9a:	f043 0302 	orr.w	r3, r3, #2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008aa4:	e23a      	b.n	8008f1c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008aa6:	4b98      	ldr	r3, [pc, #608]	; (8008d08 <tcp_process+0x590>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	f003 0310 	and.w	r3, r3, #16
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8234 	beq.w	8008f1c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ab4:	4b95      	ldr	r3, [pc, #596]	; (8008d0c <tcp_process+0x594>)
 8008ab6:	6819      	ldr	r1, [r3, #0]
 8008ab8:	4b95      	ldr	r3, [pc, #596]	; (8008d10 <tcp_process+0x598>)
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b95      	ldr	r3, [pc, #596]	; (8008d14 <tcp_process+0x59c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ac4:	4b94      	ldr	r3, [pc, #592]	; (8008d18 <tcp_process+0x5a0>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ac8:	885b      	ldrh	r3, [r3, #2]
 8008aca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008acc:	4a92      	ldr	r2, [pc, #584]	; (8008d18 <tcp_process+0x5a0>)
 8008ace:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ad0:	8812      	ldrh	r2, [r2, #0]
 8008ad2:	b292      	uxth	r2, r2
 8008ad4:	9202      	str	r2, [sp, #8]
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	4b90      	ldr	r3, [pc, #576]	; (8008d1c <tcp_process+0x5a4>)
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	4b90      	ldr	r3, [pc, #576]	; (8008d20 <tcp_process+0x5a8>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f002 fc85 	bl	800b3f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	f200 8215 	bhi.w	8008f1c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f002 fa4f 	bl	800af9c <tcp_rexmit_rto>
      break;
 8008afe:	e20d      	b.n	8008f1c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008b00:	4b81      	ldr	r3, [pc, #516]	; (8008d08 <tcp_process+0x590>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 80a1 	beq.w	8008c50 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b0e:	4b7f      	ldr	r3, [pc, #508]	; (8008d0c <tcp_process+0x594>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	db7e      	blt.n	8008c1c <tcp_process+0x4a4>
 8008b1e:	4b7b      	ldr	r3, [pc, #492]	; (8008d0c <tcp_process+0x594>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc77      	bgt.n	8008c1c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008b3a:	23fa      	movs	r3, #250	; 0xfa
 8008b3c:	76bb      	strb	r3, [r7, #26]
 8008b3e:	e01d      	b.n	8008b7c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <tcp_process+0x3e0>
 8008b4a:	4b76      	ldr	r3, [pc, #472]	; (8008d24 <tcp_process+0x5ac>)
 8008b4c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008b50:	4975      	ldr	r1, [pc, #468]	; (8008d28 <tcp_process+0x5b0>)
 8008b52:	4876      	ldr	r0, [pc, #472]	; (8008d2c <tcp_process+0x5b4>)
 8008b54:	f005 ffc0 	bl	800ead8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <tcp_process+0x400>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6910      	ldr	r0, [r2, #16]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	76bb      	strb	r3, [r7, #26]
 8008b76:	e001      	b.n	8008b7c <tcp_process+0x404>
 8008b78:	23f0      	movs	r3, #240	; 0xf0
 8008b7a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008b7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008b84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008b88:	f113 0f0d 	cmn.w	r3, #13
 8008b8c:	d002      	beq.n	8008b94 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7fd ff8e 	bl	8006ab0 <tcp_abort>
            }
            return ERR_ABRT;
 8008b94:	f06f 030c 	mvn.w	r3, #12
 8008b98:	e1ce      	b.n	8008f38 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fae0 	bl	8009160 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008ba0:	4b63      	ldr	r3, [pc, #396]	; (8008d30 <tcp_process+0x5b8>)
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <tcp_process+0x43c>
            recv_acked--;
 8008ba8:	4b61      	ldr	r3, [pc, #388]	; (8008d30 <tcp_process+0x5b8>)
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	4b5f      	ldr	r3, [pc, #380]	; (8008d30 <tcp_process+0x5b8>)
 8008bb2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bb8:	009a      	lsls	r2, r3, #2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	f241 111c 	movw	r1, #4380	; 0x111c
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf38      	it	cc
 8008bc8:	460b      	movcc	r3, r1
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d204      	bcs.n	8008bd8 <tcp_process+0x460>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	e00d      	b.n	8008bf4 <tcp_process+0x47c>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	f241 121c 	movw	r2, #4380	; 0x111c
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d904      	bls.n	8008bf0 <tcp_process+0x478>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	e001      	b.n	8008bf4 <tcp_process+0x47c>
 8008bf0:	f241 131c 	movw	r3, #4380	; 0x111c
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008bfa:	4b4e      	ldr	r3, [pc, #312]	; (8008d34 <tcp_process+0x5bc>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d037      	beq.n	8008c76 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8b5b      	ldrh	r3, [r3, #26]
 8008c0a:	f043 0302 	orr.w	r3, r3, #2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2207      	movs	r2, #7
 8008c18:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008c1a:	e02c      	b.n	8008c76 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c1c:	4b3b      	ldr	r3, [pc, #236]	; (8008d0c <tcp_process+0x594>)
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	4b3b      	ldr	r3, [pc, #236]	; (8008d10 <tcp_process+0x598>)
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4b3b      	ldr	r3, [pc, #236]	; (8008d14 <tcp_process+0x59c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c2c:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <tcp_process+0x5a0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c34:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <tcp_process+0x5a0>)
 8008c36:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c38:	8812      	ldrh	r2, [r2, #0]
 8008c3a:	b292      	uxth	r2, r2
 8008c3c:	9202      	str	r2, [sp, #8]
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	4b36      	ldr	r3, [pc, #216]	; (8008d1c <tcp_process+0x5a4>)
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4b36      	ldr	r3, [pc, #216]	; (8008d20 <tcp_process+0x5a8>)
 8008c46:	4602      	mov	r2, r0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 fbd1 	bl	800b3f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008c4e:	e167      	b.n	8008f20 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008c50:	4b2d      	ldr	r3, [pc, #180]	; (8008d08 <tcp_process+0x590>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8161 	beq.w	8008f20 <tcp_process+0x7a8>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	1e5a      	subs	r2, r3, #1
 8008c64:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <tcp_process+0x59c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 8159 	bne.w	8008f20 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f002 f9b6 	bl	800afe0 <tcp_rexmit>
      break;
 8008c74:	e154      	b.n	8008f20 <tcp_process+0x7a8>
 8008c76:	e153      	b.n	8008f20 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa71 	bl	8009160 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008c7e:	4b2d      	ldr	r3, [pc, #180]	; (8008d34 <tcp_process+0x5bc>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 814c 	beq.w	8008f24 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8b5b      	ldrh	r3, [r3, #26]
 8008c90:	f043 0302 	orr.w	r3, r3, #2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ca0:	e140      	b.n	8008f24 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa5c 	bl	8009160 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008ca8:	4b22      	ldr	r3, [pc, #136]	; (8008d34 <tcp_process+0x5bc>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d071      	beq.n	8008d98 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008cb4:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <tcp_process+0x590>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d060      	beq.n	8008d82 <tcp_process+0x60a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cc4:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <tcp_process+0x594>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d15a      	bne.n	8008d82 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d156      	bne.n	8008d82 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	8b5b      	ldrh	r3, [r3, #26]
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fe fdbc 	bl	8007860 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008ce8:	4b13      	ldr	r3, [pc, #76]	; (8008d38 <tcp_process+0x5c0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d105      	bne.n	8008cfe <tcp_process+0x586>
 8008cf2:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <tcp_process+0x5c0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	4a0f      	ldr	r2, [pc, #60]	; (8008d38 <tcp_process+0x5c0>)
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	e02e      	b.n	8008d5c <tcp_process+0x5e4>
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <tcp_process+0x5c0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e027      	b.n	8008d56 <tcp_process+0x5de>
 8008d06:	bf00      	nop
 8008d08:	200082d0 	.word	0x200082d0
 8008d0c:	200082c8 	.word	0x200082c8
 8008d10:	200082ce 	.word	0x200082ce
 8008d14:	200082c4 	.word	0x200082c4
 8008d18:	200082b4 	.word	0x200082b4
 8008d1c:	20004d2c 	.word	0x20004d2c
 8008d20:	20004d30 	.word	0x20004d30
 8008d24:	08010dc4 	.word	0x08010dc4
 8008d28:	08011064 	.word	0x08011064
 8008d2c:	08010e10 	.word	0x08010e10
 8008d30:	200082cc 	.word	0x200082cc
 8008d34:	200082d1 	.word	0x200082d1
 8008d38:	20008298 	.word	0x20008298
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d104      	bne.n	8008d50 <tcp_process+0x5d8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e005      	b.n	8008d5c <tcp_process+0x5e4>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1ef      	bne.n	8008d3c <tcp_process+0x5c4>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	4b77      	ldr	r3, [pc, #476]	; (8008f40 <tcp_process+0x7c8>)
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008d6e:	4b75      	ldr	r3, [pc, #468]	; (8008f44 <tcp_process+0x7cc>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60da      	str	r2, [r3, #12]
 8008d76:	4a73      	ldr	r2, [pc, #460]	; (8008f44 <tcp_process+0x7cc>)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	f002 fcfa 	bl	800b774 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008d80:	e0d2      	b.n	8008f28 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8b5b      	ldrh	r3, [r3, #26]
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2208      	movs	r2, #8
 8008d94:	751a      	strb	r2, [r3, #20]
      break;
 8008d96:	e0c7      	b.n	8008f28 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d98:	4b6b      	ldr	r3, [pc, #428]	; (8008f48 <tcp_process+0x7d0>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80c1 	beq.w	8008f28 <tcp_process+0x7b0>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008daa:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <tcp_process+0x7d4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	f040 80ba 	bne.w	8008f28 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 80b5 	bne.w	8008f28 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2206      	movs	r2, #6
 8008dc2:	751a      	strb	r2, [r3, #20]
      break;
 8008dc4:	e0b0      	b.n	8008f28 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9ca 	bl	8009160 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008dcc:	4b60      	ldr	r3, [pc, #384]	; (8008f50 <tcp_process+0x7d8>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80a9 	beq.w	8008f2c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	8b5b      	ldrh	r3, [r3, #26]
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7fe fd39 	bl	8007860 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008dee:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <tcp_process+0x7dc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d105      	bne.n	8008e04 <tcp_process+0x68c>
 8008df8:	4b56      	ldr	r3, [pc, #344]	; (8008f54 <tcp_process+0x7dc>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	4a55      	ldr	r2, [pc, #340]	; (8008f54 <tcp_process+0x7dc>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	e013      	b.n	8008e2c <tcp_process+0x6b4>
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <tcp_process+0x7dc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	e00c      	b.n	8008e26 <tcp_process+0x6ae>
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d104      	bne.n	8008e20 <tcp_process+0x6a8>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	60da      	str	r2, [r3, #12]
 8008e1e:	e005      	b.n	8008e2c <tcp_process+0x6b4>
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ef      	bne.n	8008e0c <tcp_process+0x694>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	60da      	str	r2, [r3, #12]
 8008e32:	4b43      	ldr	r3, [pc, #268]	; (8008f40 <tcp_process+0x7c8>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	220a      	movs	r2, #10
 8008e3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008e3e:	4b41      	ldr	r3, [pc, #260]	; (8008f44 <tcp_process+0x7cc>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60da      	str	r2, [r3, #12]
 8008e46:	4a3f      	ldr	r2, [pc, #252]	; (8008f44 <tcp_process+0x7cc>)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	f002 fc92 	bl	800b774 <tcp_timer_needed>
      }
      break;
 8008e50:	e06c      	b.n	8008f2c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f984 	bl	8009160 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008e58:	4b3b      	ldr	r3, [pc, #236]	; (8008f48 <tcp_process+0x7d0>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d065      	beq.n	8008f30 <tcp_process+0x7b8>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e68:	4b38      	ldr	r3, [pc, #224]	; (8008f4c <tcp_process+0x7d4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d15f      	bne.n	8008f30 <tcp_process+0x7b8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d15b      	bne.n	8008f30 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7fe fcf1 	bl	8007860 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e7e:	4b35      	ldr	r3, [pc, #212]	; (8008f54 <tcp_process+0x7dc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d105      	bne.n	8008e94 <tcp_process+0x71c>
 8008e88:	4b32      	ldr	r3, [pc, #200]	; (8008f54 <tcp_process+0x7dc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	4a31      	ldr	r2, [pc, #196]	; (8008f54 <tcp_process+0x7dc>)
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e013      	b.n	8008ebc <tcp_process+0x744>
 8008e94:	4b2f      	ldr	r3, [pc, #188]	; (8008f54 <tcp_process+0x7dc>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	e00c      	b.n	8008eb6 <tcp_process+0x73e>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d104      	bne.n	8008eb0 <tcp_process+0x738>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	e005      	b.n	8008ebc <tcp_process+0x744>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ef      	bne.n	8008e9c <tcp_process+0x724>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	4b1f      	ldr	r3, [pc, #124]	; (8008f40 <tcp_process+0x7c8>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	220a      	movs	r2, #10
 8008ecc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008ece:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <tcp_process+0x7cc>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60da      	str	r2, [r3, #12]
 8008ed6:	4a1b      	ldr	r2, [pc, #108]	; (8008f44 <tcp_process+0x7cc>)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	f002 fc4a 	bl	800b774 <tcp_timer_needed>
      }
      break;
 8008ee0:	e026      	b.n	8008f30 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f93c 	bl	8009160 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ee8:	4b17      	ldr	r3, [pc, #92]	; (8008f48 <tcp_process+0x7d0>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01f      	beq.n	8008f34 <tcp_process+0x7bc>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ef8:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <tcp_process+0x7d4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d119      	bne.n	8008f34 <tcp_process+0x7bc>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d115      	bne.n	8008f34 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008f08:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <tcp_process+0x7d8>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f043 0310 	orr.w	r3, r3, #16
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <tcp_process+0x7d8>)
 8008f14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008f16:	e00d      	b.n	8008f34 <tcp_process+0x7bc>
    default:
      break;
 8008f18:	bf00      	nop
 8008f1a:	e00c      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e00a      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f20:	bf00      	nop
 8008f22:	e008      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f24:	bf00      	nop
 8008f26:	e006      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f28:	bf00      	nop
 8008f2a:	e004      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e002      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f30:	bf00      	nop
 8008f32:	e000      	b.n	8008f36 <tcp_process+0x7be>
      break;
 8008f34:	bf00      	nop
  }
  return ERR_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3724      	adds	r7, #36	; 0x24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}
 8008f40:	200082a0 	.word	0x200082a0
 8008f44:	2000829c 	.word	0x2000829c
 8008f48:	200082d0 	.word	0x200082d0
 8008f4c:	200082c8 	.word	0x200082c8
 8008f50:	200082d1 	.word	0x200082d1
 8008f54:	20008298 	.word	0x20008298

08008f58 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <tcp_oos_insert_segment+0x1e>
 8008f68:	4b3b      	ldr	r3, [pc, #236]	; (8009058 <tcp_oos_insert_segment+0x100>)
 8008f6a:	f240 421f 	movw	r2, #1055	; 0x41f
 8008f6e:	493b      	ldr	r1, [pc, #236]	; (800905c <tcp_oos_insert_segment+0x104>)
 8008f70:	483b      	ldr	r0, [pc, #236]	; (8009060 <tcp_oos_insert_segment+0x108>)
 8008f72:	f005 fdb1 	bl	800ead8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fb fbe4 	bl	800474c <lwip_htons>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d028      	beq.n	8008fe2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008f90:	6838      	ldr	r0, [r7, #0]
 8008f92:	f7fe fa63 	bl	800745c <tcp_segs_free>
    next = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	e056      	b.n	800904a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	899b      	ldrh	r3, [r3, #12]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fb fbd1 	bl	800474c <lwip_htons>
 8008faa:	4603      	mov	r3, r0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	899b      	ldrh	r3, [r3, #12]
 8008fbc:	b29c      	uxth	r4, r3
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	f7fb fbc4 	bl	800474c <lwip_htons>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4322      	orrs	r2, r4
 8008fce:	b292      	uxth	r2, r2
 8008fd0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7fe fa52 	bl	8007486 <tcp_seg_free>
    while (next &&
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00e      	beq.n	8009006 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	891b      	ldrh	r3, [r3, #8]
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <tcp_oos_insert_segment+0x10c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	441a      	add	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	8909      	ldrh	r1, [r1, #8]
 8008ffe:	440b      	add	r3, r1
 8009000:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009002:	2b00      	cmp	r3, #0
 8009004:	daca      	bge.n	8008f9c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01e      	beq.n	800904a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	891b      	ldrh	r3, [r3, #8]
 8009010:	461a      	mov	r2, r3
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <tcp_oos_insert_segment+0x10c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	441a      	add	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd12      	ble.n	800904a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	b29a      	uxth	r2, r3
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <tcp_oos_insert_segment+0x10c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	b29a      	uxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	891b      	ldrh	r3, [r3, #8]
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7fc fe15 	bl	8005c74 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	601a      	str	r2, [r3, #0]
}
 8009050:	bf00      	nop
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bd90      	pop	{r4, r7, pc}
 8009058:	08010dc4 	.word	0x08010dc4
 800905c:	08011084 	.word	0x08011084
 8009060:	08010e10 	.word	0x08010e10
 8009064:	200082c4 	.word	0x200082c4

08009068 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009068:	b5b0      	push	{r4, r5, r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009076:	e03e      	b.n	80090f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	4618      	mov	r0, r3
 8009088:	f7fd f802 	bl	8006090 <pbuf_clen>
 800908c:	4603      	mov	r3, r0
 800908e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009096:	8a7a      	ldrh	r2, [r7, #18]
 8009098:	429a      	cmp	r2, r3
 800909a:	d906      	bls.n	80090aa <tcp_free_acked_segments+0x42>
 800909c:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <tcp_free_acked_segments+0xe0>)
 800909e:	f240 4257 	movw	r2, #1111	; 0x457
 80090a2:	492a      	ldr	r1, [pc, #168]	; (800914c <tcp_free_acked_segments+0xe4>)
 80090a4:	482a      	ldr	r0, [pc, #168]	; (8009150 <tcp_free_acked_segments+0xe8>)
 80090a6:	f005 fd17 	bl	800ead8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80090b0:	8a7b      	ldrh	r3, [r7, #18]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	891a      	ldrh	r2, [r3, #8]
 80090c0:	4b24      	ldr	r3, [pc, #144]	; (8009154 <tcp_free_acked_segments+0xec>)
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	4b22      	ldr	r3, [pc, #136]	; (8009154 <tcp_free_acked_segments+0xec>)
 80090ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80090cc:	6978      	ldr	r0, [r7, #20]
 80090ce:	f7fe f9da 	bl	8007486 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <tcp_free_acked_segments+0x8e>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <tcp_free_acked_segments+0x8e>
 80090e8:	4b17      	ldr	r3, [pc, #92]	; (8009148 <tcp_free_acked_segments+0xe0>)
 80090ea:	f240 4261 	movw	r2, #1121	; 0x461
 80090ee:	491a      	ldr	r1, [pc, #104]	; (8009158 <tcp_free_acked_segments+0xf0>)
 80090f0:	4817      	ldr	r0, [pc, #92]	; (8009150 <tcp_free_acked_segments+0xe8>)
 80090f2:	f005 fcf1 	bl	800ead8 <iprintf>
  while (seg_list != NULL &&
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	f7fb fb37 	bl	8004776 <lwip_htonl>
 8009108:	4604      	mov	r4, r0
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	891b      	ldrh	r3, [r3, #8]
 800910e:	461d      	mov	r5, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	899b      	ldrh	r3, [r3, #12]
 8009116:	b29b      	uxth	r3, r3
 8009118:	4618      	mov	r0, r3
 800911a:	f7fb fb17 	bl	800474c <lwip_htons>
 800911e:	4603      	mov	r3, r0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <tcp_free_acked_segments+0xc6>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <tcp_free_acked_segments+0xc8>
 800912e:	2300      	movs	r3, #0
 8009130:	442b      	add	r3, r5
 8009132:	18e2      	adds	r2, r4, r3
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <tcp_free_acked_segments+0xf4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd9c      	ble.n	8009078 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800913e:	68bb      	ldr	r3, [r7, #8]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bdb0      	pop	{r4, r5, r7, pc}
 8009148:	08010dc4 	.word	0x08010dc4
 800914c:	080110ac 	.word	0x080110ac
 8009150:	08010e10 	.word	0x08010e10
 8009154:	200082cc 	.word	0x200082cc
 8009158:	080110d4 	.word	0x080110d4
 800915c:	200082c8 	.word	0x200082c8

08009160 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b094      	sub	sp, #80	; 0x50
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <tcp_receive+0x20>
 8009172:	4b91      	ldr	r3, [pc, #580]	; (80093b8 <tcp_receive+0x258>)
 8009174:	f240 427b 	movw	r2, #1147	; 0x47b
 8009178:	4990      	ldr	r1, [pc, #576]	; (80093bc <tcp_receive+0x25c>)
 800917a:	4891      	ldr	r0, [pc, #580]	; (80093c0 <tcp_receive+0x260>)
 800917c:	f005 fcac 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7d1b      	ldrb	r3, [r3, #20]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d806      	bhi.n	8009196 <tcp_receive+0x36>
 8009188:	4b8b      	ldr	r3, [pc, #556]	; (80093b8 <tcp_receive+0x258>)
 800918a:	f240 427c 	movw	r2, #1148	; 0x47c
 800918e:	498d      	ldr	r1, [pc, #564]	; (80093c4 <tcp_receive+0x264>)
 8009190:	488b      	ldr	r0, [pc, #556]	; (80093c0 <tcp_receive+0x260>)
 8009192:	f005 fca1 	bl	800ead8 <iprintf>

  if (flags & TCP_ACK) {
 8009196:	4b8c      	ldr	r3, [pc, #560]	; (80093c8 <tcp_receive+0x268>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 8264 	beq.w	800966c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b0:	4413      	add	r3, r2
 80091b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b8:	4b84      	ldr	r3, [pc, #528]	; (80093cc <tcp_receive+0x26c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	db1b      	blt.n	80091fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c6:	4b81      	ldr	r3, [pc, #516]	; (80093cc <tcp_receive+0x26c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d106      	bne.n	80091dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091d2:	4b7f      	ldr	r3, [pc, #508]	; (80093d0 <tcp_receive+0x270>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	db0e      	blt.n	80091fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091e0:	4b7b      	ldr	r3, [pc, #492]	; (80093d0 <tcp_receive+0x270>)
 80091e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d125      	bne.n	8009234 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80091e8:	4b7a      	ldr	r3, [pc, #488]	; (80093d4 <tcp_receive+0x274>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	89db      	ldrh	r3, [r3, #14]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d91c      	bls.n	8009234 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80091fa:	4b76      	ldr	r3, [pc, #472]	; (80093d4 <tcp_receive+0x274>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	89db      	ldrh	r3, [r3, #14]
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009214:	429a      	cmp	r2, r3
 8009216:	d205      	bcs.n	8009224 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009224:	4b69      	ldr	r3, [pc, #420]	; (80093cc <tcp_receive+0x26c>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800922c:	4b68      	ldr	r3, [pc, #416]	; (80093d0 <tcp_receive+0x270>)
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009234:	4b66      	ldr	r3, [pc, #408]	; (80093d0 <tcp_receive+0x270>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	dc58      	bgt.n	80092f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009242:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <tcp_receive+0x278>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d14b      	bne.n	80092e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009254:	4413      	add	r3, r2
 8009256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009258:	429a      	cmp	r2, r3
 800925a:	d142      	bne.n	80092e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009262:	2b00      	cmp	r3, #0
 8009264:	db3d      	blt.n	80092e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800926a:	4b59      	ldr	r3, [pc, #356]	; (80093d0 <tcp_receive+0x270>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d137      	bne.n	80092e2 <tcp_receive+0x182>
              found_dupack = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800927c:	2bff      	cmp	r3, #255	; 0xff
 800927e:	d007      	beq.n	8009290 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009286:	3301      	adds	r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009296:	2b03      	cmp	r3, #3
 8009298:	d91b      	bls.n	80092d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092a4:	4413      	add	r3, r2
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d30a      	bcc.n	80092c8 <tcp_receive+0x168>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092bc:	4413      	add	r3, r2
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80092c6:	e004      	b.n	80092d2 <tcp_receive+0x172>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d902      	bls.n	80092e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 feeb 	bl	800b0b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80092e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8161 	bne.w	80095ac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f2:	e15b      	b.n	80095ac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092f4:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <tcp_receive+0x270>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	f2c0 814e 	blt.w	80095a2 <tcp_receive+0x442>
 8009306:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <tcp_receive+0x270>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	f300 8146 	bgt.w	80095a2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8b5b      	ldrh	r3, [r3, #26]
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	8b5b      	ldrh	r3, [r3, #26]
 8009326:	f023 0304 	bic.w	r3, r3, #4
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009352:	10db      	asrs	r3, r3, #3
 8009354:	b21b      	sxth	r3, r3
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800935e:	b29b      	uxth	r3, r3
 8009360:	4413      	add	r3, r2
 8009362:	b29b      	uxth	r3, r3
 8009364:	b21a      	sxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800936c:	4b18      	ldr	r3, [pc, #96]	; (80093d0 <tcp_receive+0x270>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	b29b      	uxth	r3, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009384:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <tcp_receive+0x270>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7d1b      	ldrb	r3, [r3, #20]
 8009390:	2b03      	cmp	r3, #3
 8009392:	f240 8097 	bls.w	80094c4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d245      	bcs.n	8009432 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	8b5b      	ldrh	r3, [r3, #26]
 80093aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d014      	beq.n	80093dc <tcp_receive+0x27c>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e013      	b.n	80093de <tcp_receive+0x27e>
 80093b6:	bf00      	nop
 80093b8:	08010dc4 	.word	0x08010dc4
 80093bc:	080110f4 	.word	0x080110f4
 80093c0:	08010e10 	.word	0x08010e10
 80093c4:	08011110 	.word	0x08011110
 80093c8:	200082d0 	.word	0x200082d0
 80093cc:	200082c4 	.word	0x200082c4
 80093d0:	200082c8 	.word	0x200082c8
 80093d4:	200082b4 	.word	0x200082b4
 80093d8:	200082ce 	.word	0x200082ce
 80093dc:	2302      	movs	r3, #2
 80093de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80093e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093ec:	fb12 f303 	smulbb	r3, r2, r3
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bf28      	it	cs
 80093f8:	4613      	movcs	r3, r2
 80093fa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009402:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009404:	4413      	add	r3, r2
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800940e:	429a      	cmp	r2, r3
 8009410:	d309      	bcc.n	8009426 <tcp_receive+0x2c6>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800941a:	4413      	add	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009424:	e04e      	b.n	80094c4 <tcp_receive+0x364>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800942c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009430:	e048      	b.n	80094c4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800943a:	4413      	add	r3, r2
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009444:	429a      	cmp	r2, r3
 8009446:	d309      	bcc.n	800945c <tcp_receive+0x2fc>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800944e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009450:	4413      	add	r3, r2
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800945a:	e004      	b.n	8009466 <tcp_receive+0x306>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009472:	429a      	cmp	r2, r3
 8009474:	d326      	bcc.n	80094c4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009496:	4413      	add	r3, r2
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d30a      	bcc.n	80094ba <tcp_receive+0x35a>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ae:	4413      	add	r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80094b8:	e004      	b.n	80094c4 <tcp_receive+0x364>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	4a98      	ldr	r2, [pc, #608]	; (8009730 <tcp_receive+0x5d0>)
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fdca 	bl	8009068 <tcp_free_acked_segments>
 80094d4:	4602      	mov	r2, r0
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	4a94      	ldr	r2, [pc, #592]	; (8009734 <tcp_receive+0x5d4>)
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fdbf 	bl	8009068 <tcp_free_acked_segments>
 80094ea:	4602      	mov	r2, r0
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d104      	bne.n	8009502 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094fe:	861a      	strh	r2, [r3, #48]	; 0x30
 8009500:	e002      	b.n	8009508 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d103      	bne.n	800951e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009524:	4b84      	ldr	r3, [pc, #528]	; (8009738 <tcp_receive+0x5d8>)
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	4413      	add	r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8b5b      	ldrh	r3, [r3, #26]
 8009536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953a:	2b00      	cmp	r3, #0
 800953c:	d035      	beq.n	80095aa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	2b00      	cmp	r3, #0
 8009544:	d118      	bne.n	8009578 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f7fb f90b 	bl	8004776 <lwip_htonl>
 8009560:	4603      	mov	r3, r0
 8009562:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009564:	2b00      	cmp	r3, #0
 8009566:	dc20      	bgt.n	80095aa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8b5b      	ldrh	r3, [r3, #26]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009576:	e018      	b.n	80095aa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fb f8f6 	bl	8004776 <lwip_htonl>
 800958a:	4603      	mov	r3, r0
 800958c:	1ae3      	subs	r3, r4, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	dc0b      	bgt.n	80095aa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8b5b      	ldrh	r3, [r3, #26]
 8009596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095a0:	e003      	b.n	80095aa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 ff76 	bl	800b494 <tcp_send_empty_ack>
 80095a8:	e000      	b.n	80095ac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095aa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d05b      	beq.n	800966c <tcp_receive+0x50c>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b8:	4b60      	ldr	r3, [pc, #384]	; (800973c <tcp_receive+0x5dc>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da54      	bge.n	800966c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80095c2:	4b5f      	ldr	r3, [pc, #380]	; (8009740 <tcp_receive+0x5e0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80095d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095e0:	10db      	asrs	r3, r3, #3
 80095e2:	b21b      	sxth	r3, r3
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095fa:	4413      	add	r3, r2
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b21a      	sxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009604:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009608:	2b00      	cmp	r3, #0
 800960a:	da05      	bge.n	8009618 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800960c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009610:	425b      	negs	r3, r3
 8009612:	b29b      	uxth	r3, r3
 8009614:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009618:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009622:	109b      	asrs	r3, r3, #2
 8009624:	b21b      	sxth	r3, r3
 8009626:	b29b      	uxth	r3, r3
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	b29b      	uxth	r3, r3
 800962c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009636:	b29a      	uxth	r2, r3
 8009638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800963c:	4413      	add	r3, r2
 800963e:	b29b      	uxth	r3, r3
 8009640:	b21a      	sxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800964c:	10db      	asrs	r3, r3, #3
 800964e:	b21b      	sxth	r3, r3
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009658:	b29b      	uxth	r3, r3
 800965a:	4413      	add	r3, r2
 800965c:	b29b      	uxth	r3, r3
 800965e:	b21a      	sxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800966c:	4b35      	ldr	r3, [pc, #212]	; (8009744 <tcp_receive+0x5e4>)
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 84e2 	beq.w	800a03a <tcp_receive+0xeda>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	2b06      	cmp	r3, #6
 800967c:	f200 84dd 	bhi.w	800a03a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009684:	4b30      	ldr	r3, [pc, #192]	; (8009748 <tcp_receive+0x5e8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	f2c0 808f 	blt.w	80097b0 <tcp_receive+0x650>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009696:	4b2b      	ldr	r3, [pc, #172]	; (8009744 <tcp_receive+0x5e4>)
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <tcp_receive+0x5e8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	440b      	add	r3, r1
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f300 8082 	bgt.w	80097b0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80096ac:	4b27      	ldr	r3, [pc, #156]	; (800974c <tcp_receive+0x5ec>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096b6:	4b24      	ldr	r3, [pc, #144]	; (8009748 <tcp_receive+0x5e8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80096be:	4b23      	ldr	r3, [pc, #140]	; (800974c <tcp_receive+0x5ec>)
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <tcp_receive+0x574>
 80096c6:	4b22      	ldr	r3, [pc, #136]	; (8009750 <tcp_receive+0x5f0>)
 80096c8:	f240 5294 	movw	r2, #1428	; 0x594
 80096cc:	4921      	ldr	r1, [pc, #132]	; (8009754 <tcp_receive+0x5f4>)
 80096ce:	4822      	ldr	r0, [pc, #136]	; (8009758 <tcp_receive+0x5f8>)
 80096d0:	f005 fa02 	bl	800ead8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80096da:	4293      	cmp	r3, r2
 80096dc:	d906      	bls.n	80096ec <tcp_receive+0x58c>
 80096de:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <tcp_receive+0x5f0>)
 80096e0:	f240 5295 	movw	r2, #1429	; 0x595
 80096e4:	491d      	ldr	r1, [pc, #116]	; (800975c <tcp_receive+0x5fc>)
 80096e6:	481c      	ldr	r0, [pc, #112]	; (8009758 <tcp_receive+0x5f8>)
 80096e8:	f005 f9f6 	bl	800ead8 <iprintf>
      off = (u16_t)off32;
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <tcp_receive+0x5ec>)
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	891b      	ldrh	r3, [r3, #8]
 80096f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d906      	bls.n	800970e <tcp_receive+0x5ae>
 8009700:	4b13      	ldr	r3, [pc, #76]	; (8009750 <tcp_receive+0x5f0>)
 8009702:	f240 5297 	movw	r2, #1431	; 0x597
 8009706:	4916      	ldr	r1, [pc, #88]	; (8009760 <tcp_receive+0x600>)
 8009708:	4813      	ldr	r0, [pc, #76]	; (8009758 <tcp_receive+0x5f8>)
 800970a:	f005 f9e5 	bl	800ead8 <iprintf>
      inseg.len -= off;
 800970e:	4b0f      	ldr	r3, [pc, #60]	; (800974c <tcp_receive+0x5ec>)
 8009710:	891a      	ldrh	r2, [r3, #8]
 8009712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	b29a      	uxth	r2, r3
 800971a:	4b0c      	ldr	r3, [pc, #48]	; (800974c <tcp_receive+0x5ec>)
 800971c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800971e:	4b0b      	ldr	r3, [pc, #44]	; (800974c <tcp_receive+0x5ec>)
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	891a      	ldrh	r2, [r3, #8]
 8009724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800972c:	e02a      	b.n	8009784 <tcp_receive+0x624>
 800972e:	bf00      	nop
 8009730:	0801112c 	.word	0x0801112c
 8009734:	08011134 	.word	0x08011134
 8009738:	200082cc 	.word	0x200082cc
 800973c:	200082c8 	.word	0x200082c8
 8009740:	2000828c 	.word	0x2000828c
 8009744:	200082ce 	.word	0x200082ce
 8009748:	200082c4 	.word	0x200082c4
 800974c:	200082a4 	.word	0x200082a4
 8009750:	08010dc4 	.word	0x08010dc4
 8009754:	0801113c 	.word	0x0801113c
 8009758:	08010e10 	.word	0x08010e10
 800975c:	0801114c 	.word	0x0801114c
 8009760:	0801115c 	.word	0x0801115c
        off -= p->len;
 8009764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009766:	895b      	ldrh	r3, [r3, #10]
 8009768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009774:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009776:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977a:	2200      	movs	r2, #0
 800977c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800977e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009786:	895b      	ldrh	r3, [r3, #10]
 8009788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800978c:	429a      	cmp	r2, r3
 800978e:	d8e9      	bhi.n	8009764 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009794:	4619      	mov	r1, r3
 8009796:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009798:	f7fc fb6c 	bl	8005e74 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	4a91      	ldr	r2, [pc, #580]	; (80099e8 <tcp_receive+0x888>)
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	4b91      	ldr	r3, [pc, #580]	; (80099ec <tcp_receive+0x88c>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	4a8f      	ldr	r2, [pc, #572]	; (80099e8 <tcp_receive+0x888>)
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097ae:	e00d      	b.n	80097cc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80097b0:	4b8d      	ldr	r3, [pc, #564]	; (80099e8 <tcp_receive+0x888>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da06      	bge.n	80097cc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8b5b      	ldrh	r3, [r3, #26]
 80097c2:	f043 0302 	orr.w	r3, r3, #2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097cc:	4b86      	ldr	r3, [pc, #536]	; (80099e8 <tcp_receive+0x888>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f2c0 842a 	blt.w	800a030 <tcp_receive+0xed0>
 80097dc:	4b82      	ldr	r3, [pc, #520]	; (80099e8 <tcp_receive+0x888>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097e8:	440b      	add	r3, r1
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	3301      	adds	r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f300 841e 	bgt.w	800a030 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097f8:	4b7b      	ldr	r3, [pc, #492]	; (80099e8 <tcp_receive+0x888>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	f040 829a 	bne.w	8009d36 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009802:	4b7a      	ldr	r3, [pc, #488]	; (80099ec <tcp_receive+0x88c>)
 8009804:	891c      	ldrh	r4, [r3, #8]
 8009806:	4b79      	ldr	r3, [pc, #484]	; (80099ec <tcp_receive+0x88c>)
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	899b      	ldrh	r3, [r3, #12]
 800980c:	b29b      	uxth	r3, r3
 800980e:	4618      	mov	r0, r3
 8009810:	f7fa ff9c 	bl	800474c <lwip_htons>
 8009814:	4603      	mov	r3, r0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f003 0303 	and.w	r3, r3, #3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <tcp_receive+0x6c4>
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <tcp_receive+0x6c6>
 8009824:	2300      	movs	r3, #0
 8009826:	4423      	add	r3, r4
 8009828:	b29a      	uxth	r2, r3
 800982a:	4b71      	ldr	r3, [pc, #452]	; (80099f0 <tcp_receive+0x890>)
 800982c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009832:	4b6f      	ldr	r3, [pc, #444]	; (80099f0 <tcp_receive+0x890>)
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d275      	bcs.n	8009926 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800983a:	4b6c      	ldr	r3, [pc, #432]	; (80099ec <tcp_receive+0x88c>)
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	b29b      	uxth	r3, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa ff82 	bl	800474c <lwip_htons>
 8009848:	4603      	mov	r3, r0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01f      	beq.n	8009894 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009854:	4b65      	ldr	r3, [pc, #404]	; (80099ec <tcp_receive+0x88c>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	899b      	ldrh	r3, [r3, #12]
 800985a:	b29b      	uxth	r3, r3
 800985c:	b21b      	sxth	r3, r3
 800985e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009862:	b21c      	sxth	r4, r3
 8009864:	4b61      	ldr	r3, [pc, #388]	; (80099ec <tcp_receive+0x88c>)
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	899b      	ldrh	r3, [r3, #12]
 800986a:	b29b      	uxth	r3, r3
 800986c:	4618      	mov	r0, r3
 800986e:	f7fa ff6d 	bl	800474c <lwip_htons>
 8009872:	4603      	mov	r3, r0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	b29b      	uxth	r3, r3
 8009878:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800987c:	b29b      	uxth	r3, r3
 800987e:	4618      	mov	r0, r3
 8009880:	f7fa ff64 	bl	800474c <lwip_htons>
 8009884:	4603      	mov	r3, r0
 8009886:	b21b      	sxth	r3, r3
 8009888:	4323      	orrs	r3, r4
 800988a:	b21a      	sxth	r2, r3
 800988c:	4b57      	ldr	r3, [pc, #348]	; (80099ec <tcp_receive+0x88c>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	b292      	uxth	r2, r2
 8009892:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009898:	4b54      	ldr	r3, [pc, #336]	; (80099ec <tcp_receive+0x88c>)
 800989a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800989c:	4b53      	ldr	r3, [pc, #332]	; (80099ec <tcp_receive+0x88c>)
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	899b      	ldrh	r3, [r3, #12]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fa ff51 	bl	800474c <lwip_htons>
 80098aa:	4603      	mov	r3, r0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <tcp_receive+0x762>
            inseg.len -= 1;
 80098b6:	4b4d      	ldr	r3, [pc, #308]	; (80099ec <tcp_receive+0x88c>)
 80098b8:	891b      	ldrh	r3, [r3, #8]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	4b4b      	ldr	r3, [pc, #300]	; (80099ec <tcp_receive+0x88c>)
 80098c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80098c2:	4b4a      	ldr	r3, [pc, #296]	; (80099ec <tcp_receive+0x88c>)
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4a49      	ldr	r2, [pc, #292]	; (80099ec <tcp_receive+0x88c>)
 80098c8:	8912      	ldrh	r2, [r2, #8]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fc f9d1 	bl	8005c74 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80098d2:	4b46      	ldr	r3, [pc, #280]	; (80099ec <tcp_receive+0x88c>)
 80098d4:	891c      	ldrh	r4, [r3, #8]
 80098d6:	4b45      	ldr	r3, [pc, #276]	; (80099ec <tcp_receive+0x88c>)
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	899b      	ldrh	r3, [r3, #12]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fa ff34 	bl	800474c <lwip_htons>
 80098e4:	4603      	mov	r3, r0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <tcp_receive+0x794>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <tcp_receive+0x796>
 80098f4:	2300      	movs	r3, #0
 80098f6:	4423      	add	r3, r4
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	4b3d      	ldr	r3, [pc, #244]	; (80099f0 <tcp_receive+0x890>)
 80098fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098fe:	4b3c      	ldr	r3, [pc, #240]	; (80099f0 <tcp_receive+0x890>)
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	4b38      	ldr	r3, [pc, #224]	; (80099e8 <tcp_receive+0x888>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	441a      	add	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009912:	440b      	add	r3, r1
 8009914:	429a      	cmp	r2, r3
 8009916:	d006      	beq.n	8009926 <tcp_receive+0x7c6>
 8009918:	4b36      	ldr	r3, [pc, #216]	; (80099f4 <tcp_receive+0x894>)
 800991a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800991e:	4936      	ldr	r1, [pc, #216]	; (80099f8 <tcp_receive+0x898>)
 8009920:	4836      	ldr	r0, [pc, #216]	; (80099fc <tcp_receive+0x89c>)
 8009922:	f005 f8d9 	bl	800ead8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 80e7 	beq.w	8009afe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009930:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <tcp_receive+0x88c>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	b29b      	uxth	r3, r3
 8009938:	4618      	mov	r0, r3
 800993a:	f7fa ff07 	bl	800474c <lwip_htons>
 800993e:	4603      	mov	r3, r0
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d010      	beq.n	800996c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800994a:	e00a      	b.n	8009962 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009950:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7fd fd92 	bl	8007486 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1f0      	bne.n	800994c <tcp_receive+0x7ec>
 800996a:	e0c8      	b.n	8009afe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009972:	e052      	b.n	8009a1a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	899b      	ldrh	r3, [r3, #12]
 800997a:	b29b      	uxth	r3, r3
 800997c:	4618      	mov	r0, r3
 800997e:	f7fa fee5 	bl	800474c <lwip_htons>
 8009982:	4603      	mov	r3, r0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d03d      	beq.n	8009a0a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800998e:	4b17      	ldr	r3, [pc, #92]	; (80099ec <tcp_receive+0x88c>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	899b      	ldrh	r3, [r3, #12]
 8009994:	b29b      	uxth	r3, r3
 8009996:	4618      	mov	r0, r3
 8009998:	f7fa fed8 	bl	800474c <lwip_htons>
 800999c:	4603      	mov	r3, r0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d130      	bne.n	8009a0a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80099a8:	4b10      	ldr	r3, [pc, #64]	; (80099ec <tcp_receive+0x88c>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	899b      	ldrh	r3, [r3, #12]
 80099ae:	b29c      	uxth	r4, r3
 80099b0:	2001      	movs	r0, #1
 80099b2:	f7fa fecb 	bl	800474c <lwip_htons>
 80099b6:	4603      	mov	r3, r0
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <tcp_receive+0x88c>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4322      	orrs	r2, r4
 80099c0:	b292      	uxth	r2, r2
 80099c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80099c4:	4b09      	ldr	r3, [pc, #36]	; (80099ec <tcp_receive+0x88c>)
 80099c6:	891c      	ldrh	r4, [r3, #8]
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <tcp_receive+0x88c>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	899b      	ldrh	r3, [r3, #12]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fa febb 	bl	800474c <lwip_htons>
 80099d6:	4603      	mov	r3, r0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00e      	beq.n	8009a00 <tcp_receive+0x8a0>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e00d      	b.n	8009a02 <tcp_receive+0x8a2>
 80099e6:	bf00      	nop
 80099e8:	200082c4 	.word	0x200082c4
 80099ec:	200082a4 	.word	0x200082a4
 80099f0:	200082ce 	.word	0x200082ce
 80099f4:	08010dc4 	.word	0x08010dc4
 80099f8:	0801116c 	.word	0x0801116c
 80099fc:	08010e10 	.word	0x08010e10
 8009a00:	2300      	movs	r3, #0
 8009a02:	4423      	add	r3, r4
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	4b98      	ldr	r3, [pc, #608]	; (8009c68 <tcp_receive+0xb08>)
 8009a08:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009a14:	6938      	ldr	r0, [r7, #16]
 8009a16:	f7fd fd36 	bl	8007486 <tcp_seg_free>
            while (next &&
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009a20:	4b91      	ldr	r3, [pc, #580]	; (8009c68 <tcp_receive+0xb08>)
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b91      	ldr	r3, [pc, #580]	; (8009c6c <tcp_receive+0xb0c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	441a      	add	r2, r3
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a34:	8909      	ldrh	r1, [r1, #8]
 8009a36:	440b      	add	r3, r1
 8009a38:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da9a      	bge.n	8009974 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d059      	beq.n	8009af8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009a44:	4b88      	ldr	r3, [pc, #544]	; (8009c68 <tcp_receive+0xb08>)
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4b88      	ldr	r3, [pc, #544]	; (8009c6c <tcp_receive+0xb0c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	441a      	add	r2, r3
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dd4d      	ble.n	8009af8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	4b81      	ldr	r3, [pc, #516]	; (8009c6c <tcp_receive+0xb0c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	4b80      	ldr	r3, [pc, #512]	; (8009c70 <tcp_receive+0xb10>)
 8009a70:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009a72:	4b7f      	ldr	r3, [pc, #508]	; (8009c70 <tcp_receive+0xb10>)
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	899b      	ldrh	r3, [r3, #12]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fa fe66 	bl	800474c <lwip_htons>
 8009a80:	4603      	mov	r3, r0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <tcp_receive+0x938>
                inseg.len -= 1;
 8009a8c:	4b78      	ldr	r3, [pc, #480]	; (8009c70 <tcp_receive+0xb10>)
 8009a8e:	891b      	ldrh	r3, [r3, #8]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	4b76      	ldr	r3, [pc, #472]	; (8009c70 <tcp_receive+0xb10>)
 8009a96:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009a98:	4b75      	ldr	r3, [pc, #468]	; (8009c70 <tcp_receive+0xb10>)
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	4a74      	ldr	r2, [pc, #464]	; (8009c70 <tcp_receive+0xb10>)
 8009a9e:	8912      	ldrh	r2, [r2, #8]
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fc f8e6 	bl	8005c74 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009aa8:	4b71      	ldr	r3, [pc, #452]	; (8009c70 <tcp_receive+0xb10>)
 8009aaa:	891c      	ldrh	r4, [r3, #8]
 8009aac:	4b70      	ldr	r3, [pc, #448]	; (8009c70 <tcp_receive+0xb10>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	899b      	ldrh	r3, [r3, #12]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fa fe49 	bl	800474c <lwip_htons>
 8009aba:	4603      	mov	r3, r0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <tcp_receive+0x96a>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <tcp_receive+0x96c>
 8009aca:	2300      	movs	r3, #0
 8009acc:	4423      	add	r3, r4
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	4b65      	ldr	r3, [pc, #404]	; (8009c68 <tcp_receive+0xb08>)
 8009ad2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ad4:	4b64      	ldr	r3, [pc, #400]	; (8009c68 <tcp_receive+0xb08>)
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4b64      	ldr	r3, [pc, #400]	; (8009c6c <tcp_receive+0xb0c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	441a      	add	r2, r3
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d006      	beq.n	8009af8 <tcp_receive+0x998>
 8009aea:	4b62      	ldr	r3, [pc, #392]	; (8009c74 <tcp_receive+0xb14>)
 8009aec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009af0:	4961      	ldr	r1, [pc, #388]	; (8009c78 <tcp_receive+0xb18>)
 8009af2:	4862      	ldr	r0, [pc, #392]	; (8009c7c <tcp_receive+0xb1c>)
 8009af4:	f004 fff0 	bl	800ead8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009afc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009afe:	4b5a      	ldr	r3, [pc, #360]	; (8009c68 <tcp_receive+0xb08>)
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	4b59      	ldr	r3, [pc, #356]	; (8009c6c <tcp_receive+0xb0c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	441a      	add	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b12:	4b55      	ldr	r3, [pc, #340]	; (8009c68 <tcp_receive+0xb08>)
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d206      	bcs.n	8009b28 <tcp_receive+0x9c8>
 8009b1a:	4b56      	ldr	r3, [pc, #344]	; (8009c74 <tcp_receive+0xb14>)
 8009b1c:	f240 6207 	movw	r2, #1543	; 0x607
 8009b20:	4957      	ldr	r1, [pc, #348]	; (8009c80 <tcp_receive+0xb20>)
 8009b22:	4856      	ldr	r0, [pc, #344]	; (8009c7c <tcp_receive+0xb1c>)
 8009b24:	f004 ffd8 	bl	800ead8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b2c:	4b4e      	ldr	r3, [pc, #312]	; (8009c68 <tcp_receive+0xb08>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fc ffc5 	bl	8006ac8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009b3e:	4b4c      	ldr	r3, [pc, #304]	; (8009c70 <tcp_receive+0xb10>)
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	891b      	ldrh	r3, [r3, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d006      	beq.n	8009b56 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009b48:	4b49      	ldr	r3, [pc, #292]	; (8009c70 <tcp_receive+0xb10>)
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	4a4d      	ldr	r2, [pc, #308]	; (8009c84 <tcp_receive+0xb24>)
 8009b4e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009b50:	4b47      	ldr	r3, [pc, #284]	; (8009c70 <tcp_receive+0xb10>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b56:	4b46      	ldr	r3, [pc, #280]	; (8009c70 <tcp_receive+0xb10>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	899b      	ldrh	r3, [r3, #12]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fa fdf4 	bl	800474c <lwip_htons>
 8009b64:	4603      	mov	r3, r0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80b8 	beq.w	8009ce2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009b72:	4b45      	ldr	r3, [pc, #276]	; (8009c88 <tcp_receive+0xb28>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f043 0320 	orr.w	r3, r3, #32
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	4b42      	ldr	r3, [pc, #264]	; (8009c88 <tcp_receive+0xb28>)
 8009b7e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009b80:	e0af      	b.n	8009ce2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b86:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a36      	ldr	r2, [pc, #216]	; (8009c6c <tcp_receive+0xb0c>)
 8009b92:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	891b      	ldrh	r3, [r3, #8]
 8009b98:	461c      	mov	r4, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	899b      	ldrh	r3, [r3, #12]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fa fdd2 	bl	800474c <lwip_htons>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <tcp_receive+0xa58>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e000      	b.n	8009bba <tcp_receive+0xa5a>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	191a      	adds	r2, r3, r4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	441a      	add	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bca:	461c      	mov	r4, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	891b      	ldrh	r3, [r3, #8]
 8009bd0:	461d      	mov	r5, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	899b      	ldrh	r3, [r3, #12]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa fdb6 	bl	800474c <lwip_htons>
 8009be0:	4603      	mov	r3, r0
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0303 	and.w	r3, r3, #3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <tcp_receive+0xa90>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <tcp_receive+0xa92>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	442b      	add	r3, r5
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d206      	bcs.n	8009c06 <tcp_receive+0xaa6>
 8009bf8:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <tcp_receive+0xb14>)
 8009bfa:	f240 622b 	movw	r2, #1579	; 0x62b
 8009bfe:	4923      	ldr	r1, [pc, #140]	; (8009c8c <tcp_receive+0xb2c>)
 8009c00:	481e      	ldr	r0, [pc, #120]	; (8009c7c <tcp_receive+0xb1c>)
 8009c02:	f004 ff69 	bl	800ead8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	891b      	ldrh	r3, [r3, #8]
 8009c0a:	461c      	mov	r4, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	899b      	ldrh	r3, [r3, #12]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fa fd99 	bl	800474c <lwip_htons>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <tcp_receive+0xaca>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <tcp_receive+0xacc>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	1919      	adds	r1, r3, r4
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c32:	b28b      	uxth	r3, r1
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7fc ff43 	bl	8006ac8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	891b      	ldrh	r3, [r3, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d028      	beq.n	8009c9e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009c4c:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <tcp_receive+0xb24>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01d      	beq.n	8009c90 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <tcp_receive+0xb24>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fc fa50 	bl	8006104 <pbuf_cat>
 8009c64:	e018      	b.n	8009c98 <tcp_receive+0xb38>
 8009c66:	bf00      	nop
 8009c68:	200082ce 	.word	0x200082ce
 8009c6c:	200082c4 	.word	0x200082c4
 8009c70:	200082a4 	.word	0x200082a4
 8009c74:	08010dc4 	.word	0x08010dc4
 8009c78:	080111a4 	.word	0x080111a4
 8009c7c:	08010e10 	.word	0x08010e10
 8009c80:	080111e0 	.word	0x080111e0
 8009c84:	200082d4 	.word	0x200082d4
 8009c88:	200082d1 	.word	0x200082d1
 8009c8c:	08011200 	.word	0x08011200
            } else {
              recv_data = cseg->p;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	4a70      	ldr	r2, [pc, #448]	; (8009e58 <tcp_receive+0xcf8>)
 8009c96:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	899b      	ldrh	r3, [r3, #12]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fa fd50 	bl	800474c <lwip_htons>
 8009cac:	4603      	mov	r3, r0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00d      	beq.n	8009cd4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009cb8:	4b68      	ldr	r3, [pc, #416]	; (8009e5c <tcp_receive+0xcfc>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f043 0320 	orr.w	r3, r3, #32
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	4b66      	ldr	r3, [pc, #408]	; (8009e5c <tcp_receive+0xcfc>)
 8009cc4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7d1b      	ldrb	r3, [r3, #20]
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d102      	bne.n	8009cd4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	f7fd fbd2 	bl	8007486 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d008      	beq.n	8009cfc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	f43f af43 	beq.w	8009b82 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8b5b      	ldrh	r3, [r3, #26]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00e      	beq.n	8009d26 <tcp_receive+0xbc6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8b5b      	ldrh	r3, [r3, #26]
 8009d0c:	f023 0301 	bic.w	r3, r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	835a      	strh	r2, [r3, #26]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	8b5b      	ldrh	r3, [r3, #26]
 8009d1a:	f043 0302 	orr.w	r3, r3, #2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d24:	e188      	b.n	800a038 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	8b5b      	ldrh	r3, [r3, #26]
 8009d2a:	f043 0301 	orr.w	r3, r3, #1
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d34:	e180      	b.n	800a038 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d3e:	4848      	ldr	r0, [pc, #288]	; (8009e60 <tcp_receive+0xd00>)
 8009d40:	f7fd fbba 	bl	80074b8 <tcp_seg_copy>
 8009d44:	4602      	mov	r2, r0
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	675a      	str	r2, [r3, #116]	; 0x74
 8009d4a:	e16d      	b.n	800a028 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d56:	e157      	b.n	800a008 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	4b41      	ldr	r3, [pc, #260]	; (8009e64 <tcp_receive+0xd04>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d11d      	bne.n	8009da2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009d66:	4b3e      	ldr	r3, [pc, #248]	; (8009e60 <tcp_receive+0xd00>)
 8009d68:	891a      	ldrh	r2, [r3, #8]
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	891b      	ldrh	r3, [r3, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	f240 814f 	bls.w	800a012 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009d74:	483a      	ldr	r0, [pc, #232]	; (8009e60 <tcp_receive+0xd00>)
 8009d76:	f7fd fb9f 	bl	80074b8 <tcp_seg_copy>
 8009d7a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 8149 	beq.w	800a016 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <tcp_receive+0xc32>
                    prev->next = cseg;
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	e002      	b.n	8009d98 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d9a:	6978      	ldr	r0, [r7, #20]
 8009d9c:	f7ff f8dc 	bl	8008f58 <tcp_oos_insert_segment>
                }
                break;
 8009da0:	e139      	b.n	800a016 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d117      	bne.n	8009dd8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009da8:	4b2e      	ldr	r3, [pc, #184]	; (8009e64 <tcp_receive+0xd04>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da57      	bge.n	8009e68 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009db8:	4829      	ldr	r0, [pc, #164]	; (8009e60 <tcp_receive+0xd00>)
 8009dba:	f7fd fb7d 	bl	80074b8 <tcp_seg_copy>
 8009dbe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 8129 	beq.w	800a01a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009dce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dd0:	69b8      	ldr	r0, [r7, #24]
 8009dd2:	f7ff f8c1 	bl	8008f58 <tcp_oos_insert_segment>
                  }
                  break;
 8009dd6:	e120      	b.n	800a01a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009dd8:	4b22      	ldr	r3, [pc, #136]	; (8009e64 <tcp_receive+0xd04>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	3b01      	subs	r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	db3e      	blt.n	8009e68 <tcp_receive+0xd08>
 8009dea:	4b1e      	ldr	r3, [pc, #120]	; (8009e64 <tcp_receive+0xd04>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	3301      	adds	r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dc35      	bgt.n	8009e68 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dfc:	4818      	ldr	r0, [pc, #96]	; (8009e60 <tcp_receive+0xd00>)
 8009dfe:	f7fd fb5b 	bl	80074b8 <tcp_seg_copy>
 8009e02:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8109 	beq.w	800a01e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e14:	8912      	ldrh	r2, [r2, #8]
 8009e16:	441a      	add	r2, r3
 8009e18:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <tcp_receive+0xd04>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd12      	ble.n	8009e48 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <tcp_receive+0xd04>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f7fb ff16 	bl	8005c74 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e50:	69f8      	ldr	r0, [r7, #28]
 8009e52:	f7ff f881 	bl	8008f58 <tcp_oos_insert_segment>
                  }
                  break;
 8009e56:	e0e2      	b.n	800a01e <tcp_receive+0xebe>
 8009e58:	200082d4 	.word	0x200082d4
 8009e5c:	200082d1 	.word	0x200082d1
 8009e60:	200082a4 	.word	0x200082a4
 8009e64:	200082c4 	.word	0x200082c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f040 80c6 	bne.w	800a002 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009e76:	4b80      	ldr	r3, [pc, #512]	; (800a078 <tcp_receive+0xf18>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f340 80bd 	ble.w	800a002 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	899b      	ldrh	r3, [r3, #12]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fa fc5b 	bl	800474c <lwip_htons>
 8009e96:	4603      	mov	r3, r0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f040 80bf 	bne.w	800a022 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009ea4:	4875      	ldr	r0, [pc, #468]	; (800a07c <tcp_receive+0xf1c>)
 8009ea6:	f7fd fb07 	bl	80074b8 <tcp_seg_copy>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 80b6 	beq.w	800a026 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec2:	8912      	ldrh	r2, [r2, #8]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	4b6c      	ldr	r3, [pc, #432]	; (800a078 <tcp_receive+0xf18>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd12      	ble.n	8009ef6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009ed0:	4b69      	ldr	r3, [pc, #420]	; (800a078 <tcp_receive+0xf18>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	891b      	ldrh	r3, [r3, #8]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f7fb febf 	bl	8005c74 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009ef6:	4b62      	ldr	r3, [pc, #392]	; (800a080 <tcp_receive+0xf20>)
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	4b5e      	ldr	r3, [pc, #376]	; (800a078 <tcp_receive+0xf18>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	441a      	add	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f0a:	440b      	add	r3, r1
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f340 8089 	ble.w	800a026 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	899b      	ldrh	r3, [r3, #12]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fa fc14 	bl	800474c <lwip_htons>
 8009f24:	4603      	mov	r3, r0
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d022      	beq.n	8009f76 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	899b      	ldrh	r3, [r3, #12]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	b21b      	sxth	r3, r3
 8009f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f40:	b21c      	sxth	r4, r3
 8009f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	899b      	ldrh	r3, [r3, #12]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fa fbfd 	bl	800474c <lwip_htons>
 8009f52:	4603      	mov	r3, r0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa fbf4 	bl	800474c <lwip_htons>
 8009f64:	4603      	mov	r3, r0
 8009f66:	b21b      	sxth	r3, r3
 8009f68:	4323      	orrs	r3, r4
 8009f6a:	b21a      	sxth	r2, r3
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	b292      	uxth	r2, r2
 8009f74:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f80:	4413      	add	r3, r2
 8009f82:	b299      	uxth	r1, r3
 8009f84:	4b3c      	ldr	r3, [pc, #240]	; (800a078 <tcp_receive+0xf18>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1a8a      	subs	r2, r1, r2
 8009f90:	b292      	uxth	r2, r2
 8009f92:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	891b      	ldrh	r3, [r3, #8]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f7fb fe66 	bl	8005c74 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	891c      	ldrh	r4, [r3, #8]
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa fbc7 	bl	800474c <lwip_htons>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <tcp_receive+0xe6e>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <tcp_receive+0xe70>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4423      	add	r3, r4
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <tcp_receive+0xf20>)
 8009fd6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fd8:	4b29      	ldr	r3, [pc, #164]	; (800a080 <tcp_receive+0xf20>)
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <tcp_receive+0xf18>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	441a      	add	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009fec:	440b      	add	r3, r1
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d019      	beq.n	800a026 <tcp_receive+0xec6>
 8009ff2:	4b24      	ldr	r3, [pc, #144]	; (800a084 <tcp_receive+0xf24>)
 8009ff4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009ff8:	4923      	ldr	r1, [pc, #140]	; (800a088 <tcp_receive+0xf28>)
 8009ffa:	4824      	ldr	r0, [pc, #144]	; (800a08c <tcp_receive+0xf2c>)
 8009ffc:	f004 fd6c 	bl	800ead8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a000:	e011      	b.n	800a026 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	63bb      	str	r3, [r7, #56]	; 0x38
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f47f aea4 	bne.w	8009d58 <tcp_receive+0xbf8>
 800a010:	e00a      	b.n	800a028 <tcp_receive+0xec8>
                break;
 800a012:	bf00      	nop
 800a014:	e008      	b.n	800a028 <tcp_receive+0xec8>
                break;
 800a016:	bf00      	nop
 800a018:	e006      	b.n	800a028 <tcp_receive+0xec8>
                  break;
 800a01a:	bf00      	nop
 800a01c:	e004      	b.n	800a028 <tcp_receive+0xec8>
                  break;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <tcp_receive+0xec8>
                  break;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <tcp_receive+0xec8>
                break;
 800a026:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 fa33 	bl	800b494 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a02e:	e003      	b.n	800a038 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fa2f 	bl	800b494 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a036:	e01a      	b.n	800a06e <tcp_receive+0xf0e>
 800a038:	e019      	b.n	800a06e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a03a:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <tcp_receive+0xf18>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	db0a      	blt.n	800a05e <tcp_receive+0xefe>
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <tcp_receive+0xf18>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a054:	440b      	add	r3, r1
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	3301      	adds	r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd07      	ble.n	800a06e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8b5b      	ldrh	r3, [r3, #26]
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a06c:	e7ff      	b.n	800a06e <tcp_receive+0xf0e>
 800a06e:	bf00      	nop
 800a070:	3750      	adds	r7, #80	; 0x50
 800a072:	46bd      	mov	sp, r7
 800a074:	bdb0      	pop	{r4, r5, r7, pc}
 800a076:	bf00      	nop
 800a078:	200082c4 	.word	0x200082c4
 800a07c:	200082a4 	.word	0x200082a4
 800a080:	200082ce 	.word	0x200082ce
 800a084:	08010dc4 	.word	0x08010dc4
 800a088:	0801116c 	.word	0x0801116c
 800a08c:	08010e10 	.word	0x08010e10

0800a090 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a096:	4b15      	ldr	r3, [pc, #84]	; (800a0ec <tcp_get_next_optbyte+0x5c>)
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	b291      	uxth	r1, r2
 800a09e:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <tcp_get_next_optbyte+0x5c>)
 800a0a0:	8011      	strh	r1, [r2, #0]
 800a0a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0a4:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <tcp_get_next_optbyte+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <tcp_get_next_optbyte+0x26>
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <tcp_get_next_optbyte+0x64>)
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d208      	bcs.n	800a0c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a0b6:	4b10      	ldr	r3, [pc, #64]	; (800a0f8 <tcp_get_next_optbyte+0x68>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3314      	adds	r3, #20
 800a0bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	e00b      	b.n	800a0e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <tcp_get_next_optbyte+0x64>)
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a0d6:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <tcp_get_next_optbyte+0x60>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	797b      	ldrb	r3, [r7, #5]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	200082c0 	.word	0x200082c0
 800a0f0:	200082bc 	.word	0x200082bc
 800a0f4:	200082ba 	.word	0x200082ba
 800a0f8:	200082b4 	.word	0x200082b4

0800a0fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <tcp_parseopt+0x1c>
 800a10a:	4b32      	ldr	r3, [pc, #200]	; (800a1d4 <tcp_parseopt+0xd8>)
 800a10c:	f240 727d 	movw	r2, #1917	; 0x77d
 800a110:	4931      	ldr	r1, [pc, #196]	; (800a1d8 <tcp_parseopt+0xdc>)
 800a112:	4832      	ldr	r0, [pc, #200]	; (800a1dc <tcp_parseopt+0xe0>)
 800a114:	f004 fce0 	bl	800ead8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a118:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <tcp_parseopt+0xe4>)
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d055      	beq.n	800a1cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a120:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <tcp_parseopt+0xe8>)
 800a122:	2200      	movs	r2, #0
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	e045      	b.n	800a1b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a128:	f7ff ffb2 	bl	800a090 <tcp_get_next_optbyte>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d006      	beq.n	800a144 <tcp_parseopt+0x48>
 800a136:	2b02      	cmp	r3, #2
 800a138:	dc2b      	bgt.n	800a192 <tcp_parseopt+0x96>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d041      	beq.n	800a1c2 <tcp_parseopt+0xc6>
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d127      	bne.n	800a192 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a142:	e037      	b.n	800a1b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a144:	f7ff ffa4 	bl	800a090 <tcp_get_next_optbyte>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d13b      	bne.n	800a1c6 <tcp_parseopt+0xca>
 800a14e:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <tcp_parseopt+0xe8>)
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	4a22      	ldr	r2, [pc, #136]	; (800a1e0 <tcp_parseopt+0xe4>)
 800a156:	8812      	ldrh	r2, [r2, #0]
 800a158:	4293      	cmp	r3, r2
 800a15a:	da34      	bge.n	800a1c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a15c:	f7ff ff98 	bl	800a090 <tcp_get_next_optbyte>
 800a160:	4603      	mov	r3, r0
 800a162:	b29b      	uxth	r3, r3
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a168:	f7ff ff92 	bl	800a090 <tcp_get_next_optbyte>
 800a16c:	4603      	mov	r3, r0
 800a16e:	b29a      	uxth	r2, r3
 800a170:	89bb      	ldrh	r3, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a176:	89bb      	ldrh	r3, [r7, #12]
 800a178:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a17c:	d804      	bhi.n	800a188 <tcp_parseopt+0x8c>
 800a17e:	89bb      	ldrh	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <tcp_parseopt+0x8c>
 800a184:	89ba      	ldrh	r2, [r7, #12]
 800a186:	e001      	b.n	800a18c <tcp_parseopt+0x90>
 800a188:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a190:	e010      	b.n	800a1b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a192:	f7ff ff7d 	bl	800a090 <tcp_get_next_optbyte>
 800a196:	4603      	mov	r3, r0
 800a198:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d914      	bls.n	800a1ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <tcp_parseopt+0xe8>)
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3b02      	subs	r3, #2
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <tcp_parseopt+0xe8>)
 800a1b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a1b4:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <tcp_parseopt+0xe8>)
 800a1b6:	881a      	ldrh	r2, [r3, #0]
 800a1b8:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <tcp_parseopt+0xe4>)
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d3b3      	bcc.n	800a128 <tcp_parseopt+0x2c>
 800a1c0:	e004      	b.n	800a1cc <tcp_parseopt+0xd0>
          return;
 800a1c2:	bf00      	nop
 800a1c4:	e002      	b.n	800a1cc <tcp_parseopt+0xd0>
            return;
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <tcp_parseopt+0xd0>
            return;
 800a1ca:	bf00      	nop
      }
    }
  }
}
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	08010dc4 	.word	0x08010dc4
 800a1d8:	08011228 	.word	0x08011228
 800a1dc:	08010e10 	.word	0x08010e10
 800a1e0:	200082b8 	.word	0x200082b8
 800a1e4:	200082c0 	.word	0x200082c0

0800a1e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <tcp_trigger_input_pcb_close+0x1c>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f043 0310 	orr.w	r3, r3, #16
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	4b03      	ldr	r3, [pc, #12]	; (800a204 <tcp_trigger_input_pcb_close+0x1c>)
 800a1f8:	701a      	strb	r2, [r3, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	200082d1 	.word	0x200082d1

0800a208 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <tcp_route+0x28>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	7a1b      	ldrb	r3, [r3, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d006      	beq.n	800a230 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	7a1b      	ldrb	r3, [r3, #8]
 800a226:	4618      	mov	r0, r3
 800a228:	f7fb fb4a 	bl	80058c0 <netif_get_by_index>
 800a22c:	4603      	mov	r3, r0
 800a22e:	e003      	b.n	800a238 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f003 fa1b 	bl	800d66c <ip4_route>
 800a236:	4603      	mov	r3, r0
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <tcp_create_segment+0x22>
 800a256:	4b44      	ldr	r3, [pc, #272]	; (800a368 <tcp_create_segment+0x128>)
 800a258:	22a3      	movs	r2, #163	; 0xa3
 800a25a:	4944      	ldr	r1, [pc, #272]	; (800a36c <tcp_create_segment+0x12c>)
 800a25c:	4844      	ldr	r0, [pc, #272]	; (800a370 <tcp_create_segment+0x130>)
 800a25e:	f004 fc3b 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d105      	bne.n	800a274 <tcp_create_segment+0x34>
 800a268:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <tcp_create_segment+0x128>)
 800a26a:	22a4      	movs	r2, #164	; 0xa4
 800a26c:	4941      	ldr	r1, [pc, #260]	; (800a374 <tcp_create_segment+0x134>)
 800a26e:	4840      	ldr	r0, [pc, #256]	; (800a370 <tcp_create_segment+0x130>)
 800a270:	f004 fc32 	bl	800ead8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a274:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a282:	2003      	movs	r0, #3
 800a284:	f7fa ff96 	bl	80051b4 <memp_malloc>
 800a288:	6138      	str	r0, [r7, #16]
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d104      	bne.n	800a29a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	f7fb fe75 	bl	8005f80 <pbuf_free>
    return NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	e061      	b.n	800a35e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a2a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	891a      	ldrh	r2, [r3, #8]
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d205      	bcs.n	800a2c6 <tcp_create_segment+0x86>
 800a2ba:	4b2b      	ldr	r3, [pc, #172]	; (800a368 <tcp_create_segment+0x128>)
 800a2bc:	22b0      	movs	r2, #176	; 0xb0
 800a2be:	492e      	ldr	r1, [pc, #184]	; (800a378 <tcp_create_segment+0x138>)
 800a2c0:	482b      	ldr	r0, [pc, #172]	; (800a370 <tcp_create_segment+0x130>)
 800a2c2:	f004 fc09 	bl	800ead8 <iprintf>
  seg->len = p->tot_len - optlen;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	891a      	ldrh	r2, [r3, #8]
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a2d6:	2114      	movs	r1, #20
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f7fb fdbb 	bl	8005e54 <pbuf_add_header>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a2e4:	6938      	ldr	r0, [r7, #16]
 800a2e6:	f7fd f8ce 	bl	8007486 <tcp_seg_free>
    return NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e037      	b.n	800a35e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8ada      	ldrh	r2, [r3, #22]
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	68dc      	ldr	r4, [r3, #12]
 800a300:	4610      	mov	r0, r2
 800a302:	f7fa fa23 	bl	800474c <lwip_htons>
 800a306:	4603      	mov	r3, r0
 800a308:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	8b1a      	ldrh	r2, [r3, #24]
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	68dc      	ldr	r4, [r3, #12]
 800a312:	4610      	mov	r0, r2
 800a314:	f7fa fa1a 	bl	800474c <lwip_htons>
 800a318:	4603      	mov	r3, r0
 800a31a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	68dc      	ldr	r4, [r3, #12]
 800a320:	6838      	ldr	r0, [r7, #0]
 800a322:	f7fa fa28 	bl	8004776 <lwip_htonl>
 800a326:	4603      	mov	r3, r0
 800a328:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	089b      	lsrs	r3, r3, #2
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	b29b      	uxth	r3, r3
 800a332:	3305      	adds	r3, #5
 800a334:	b29b      	uxth	r3, r3
 800a336:	031b      	lsls	r3, r3, #12
 800a338:	b29a      	uxth	r2, r3
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4313      	orrs	r3, r2
 800a340:	b29a      	uxth	r2, r3
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	68dc      	ldr	r4, [r3, #12]
 800a346:	4610      	mov	r0, r2
 800a348:	f7fa fa00 	bl	800474c <lwip_htons>
 800a34c:	4603      	mov	r3, r0
 800a34e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	749a      	strb	r2, [r3, #18]
 800a358:	2200      	movs	r2, #0
 800a35a:	74da      	strb	r2, [r3, #19]
  return seg;
 800a35c:	693b      	ldr	r3, [r7, #16]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd90      	pop	{r4, r7, pc}
 800a366:	bf00      	nop
 800a368:	08011244 	.word	0x08011244
 800a36c:	08011278 	.word	0x08011278
 800a370:	08011298 	.word	0x08011298
 800a374:	080112c0 	.word	0x080112c0
 800a378:	080112e4 	.word	0x080112e4

0800a37c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b08b      	sub	sp, #44	; 0x2c
 800a380:	af02      	add	r7, sp, #8
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <tcp_split_unsent_seg+0x2c>
 800a39a:	4b95      	ldr	r3, [pc, #596]	; (800a5f0 <tcp_split_unsent_seg+0x274>)
 800a39c:	f240 324b 	movw	r2, #843	; 0x34b
 800a3a0:	4994      	ldr	r1, [pc, #592]	; (800a5f4 <tcp_split_unsent_seg+0x278>)
 800a3a2:	4895      	ldr	r0, [pc, #596]	; (800a5f8 <tcp_split_unsent_seg+0x27c>)
 800a3a4:	f004 fb98 	bl	800ead8 <iprintf>

  useg = pcb->unsent;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d102      	bne.n	800a3ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b8:	e116      	b.n	800a5e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a3ba:	887b      	ldrh	r3, [r7, #2]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a3c0:	4b8b      	ldr	r3, [pc, #556]	; (800a5f0 <tcp_split_unsent_seg+0x274>)
 800a3c2:	f240 3253 	movw	r2, #851	; 0x353
 800a3c6:	498d      	ldr	r1, [pc, #564]	; (800a5fc <tcp_split_unsent_seg+0x280>)
 800a3c8:	488b      	ldr	r0, [pc, #556]	; (800a5f8 <tcp_split_unsent_seg+0x27c>)
 800a3ca:	f004 fb85 	bl	800ead8 <iprintf>
    return ERR_VAL;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	e109      	b.n	800a5e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	891b      	ldrh	r3, [r3, #8]
 800a3d8:	887a      	ldrh	r2, [r7, #2]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d301      	bcc.n	800a3e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	e102      	b.n	800a5e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3e6:	887a      	ldrh	r2, [r7, #2]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d906      	bls.n	800a3fa <tcp_split_unsent_seg+0x7e>
 800a3ec:	4b80      	ldr	r3, [pc, #512]	; (800a5f0 <tcp_split_unsent_seg+0x274>)
 800a3ee:	f240 325b 	movw	r2, #859	; 0x35b
 800a3f2:	4983      	ldr	r1, [pc, #524]	; (800a600 <tcp_split_unsent_seg+0x284>)
 800a3f4:	4880      	ldr	r0, [pc, #512]	; (800a5f8 <tcp_split_unsent_seg+0x27c>)
 800a3f6:	f004 fb6f 	bl	800ead8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	891b      	ldrh	r3, [r3, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <tcp_split_unsent_seg+0x94>
 800a402:	4b7b      	ldr	r3, [pc, #492]	; (800a5f0 <tcp_split_unsent_seg+0x274>)
 800a404:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a408:	497e      	ldr	r1, [pc, #504]	; (800a604 <tcp_split_unsent_seg+0x288>)
 800a40a:	487b      	ldr	r0, [pc, #492]	; (800a5f8 <tcp_split_unsent_seg+0x27c>)
 800a40c:	f004 fb64 	bl	800ead8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	7a9b      	ldrb	r3, [r3, #10]
 800a414:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	891a      	ldrh	r2, [r3, #8]
 800a426:	887b      	ldrh	r3, [r7, #2]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	89bb      	ldrh	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	b29b      	uxth	r3, r3
 800a436:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a43a:	4619      	mov	r1, r3
 800a43c:	2036      	movs	r0, #54	; 0x36
 800a43e:	f7fb fabb 	bl	80059b8 <pbuf_alloc>
 800a442:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80b7 	beq.w	800a5ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	891a      	ldrh	r2, [r3, #8]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	891b      	ldrh	r3, [r3, #8]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	b29a      	uxth	r2, r3
 800a45a:	887b      	ldrh	r3, [r7, #2]
 800a45c:	4413      	add	r3, r2
 800a45e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	6858      	ldr	r0, [r3, #4]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	18d1      	adds	r1, r2, r3
 800a46c:	897b      	ldrh	r3, [r7, #10]
 800a46e:	89ba      	ldrh	r2, [r7, #12]
 800a470:	f7fb ff80 	bl	8006374 <pbuf_copy_partial>
 800a474:	4603      	mov	r3, r0
 800a476:	461a      	mov	r2, r3
 800a478:	89bb      	ldrh	r3, [r7, #12]
 800a47a:	4293      	cmp	r3, r2
 800a47c:	f040 809f 	bne.w	800a5be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	899b      	ldrh	r3, [r3, #12]
 800a486:	b29b      	uxth	r3, r3
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fa f95f 	bl	800474c <lwip_htons>
 800a48e:	4603      	mov	r3, r0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a496:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a498:	2300      	movs	r3, #0
 800a49a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a49c:	7efb      	ldrb	r3, [r7, #27]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a4a6:	7efb      	ldrb	r3, [r7, #27]
 800a4a8:	f023 0308 	bic.w	r3, r3, #8
 800a4ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a4ae:	7ebb      	ldrb	r3, [r7, #26]
 800a4b0:	f043 0308 	orr.w	r3, r3, #8
 800a4b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a4b6:	7efb      	ldrb	r3, [r7, #27]
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d007      	beq.n	800a4d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a4c0:	7efb      	ldrb	r3, [r7, #27]
 800a4c2:	f023 0301 	bic.w	r3, r3, #1
 800a4c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a4c8:	7ebb      	ldrb	r3, [r7, #26]
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fa f94d 	bl	8004776 <lwip_htonl>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	887b      	ldrh	r3, [r7, #2]
 800a4e0:	18d1      	adds	r1, r2, r3
 800a4e2:	7eba      	ldrb	r2, [r7, #26]
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	6939      	ldr	r1, [r7, #16]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fea7 	bl	800a240 <tcp_create_segment>
 800a4f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d063      	beq.n	800a5c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fb fdc6 	bl	8006090 <pbuf_clen>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a50e:	1a9b      	subs	r3, r3, r2
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	6858      	ldr	r0, [r3, #4]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	891a      	ldrh	r2, [r3, #8]
 800a522:	89bb      	ldrh	r3, [r7, #12]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	b29b      	uxth	r3, r3
 800a528:	4619      	mov	r1, r3
 800a52a:	f7fb fba3 	bl	8005c74 <pbuf_realloc>
  useg->len -= remainder;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	891a      	ldrh	r2, [r3, #8]
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	b29a      	uxth	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	899b      	ldrh	r3, [r3, #12]
 800a542:	b29c      	uxth	r4, r3
 800a544:	7efb      	ldrb	r3, [r7, #27]
 800a546:	b29b      	uxth	r3, r3
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fa f8ff 	bl	800474c <lwip_htons>
 800a54e:	4603      	mov	r3, r0
 800a550:	461a      	mov	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	4322      	orrs	r2, r4
 800a558:	b292      	uxth	r2, r2
 800a55a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	f7fb fd95 	bl	8006090 <pbuf_clen>
 800a566:	4603      	mov	r3, r0
 800a568:	461a      	mov	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a570:	4413      	add	r3, r2
 800a572:	b29a      	uxth	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fb fd86 	bl	8006090 <pbuf_clen>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a58e:	4413      	add	r3, r2
 800a590:	b29a      	uxth	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d103      	bne.n	800a5b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e016      	b.n	800a5e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a5ba:	bf00      	nop
 800a5bc:	e002      	b.n	800a5c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a5be:	bf00      	nop
 800a5c0:	e000      	b.n	800a5c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a5c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d006      	beq.n	800a5d8 <tcp_split_unsent_seg+0x25c>
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <tcp_split_unsent_seg+0x274>)
 800a5cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a5d0:	490d      	ldr	r1, [pc, #52]	; (800a608 <tcp_split_unsent_seg+0x28c>)
 800a5d2:	4809      	ldr	r0, [pc, #36]	; (800a5f8 <tcp_split_unsent_seg+0x27c>)
 800a5d4:	f004 fa80 	bl	800ead8 <iprintf>
  if (p != NULL) {
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a5de:	6938      	ldr	r0, [r7, #16]
 800a5e0:	f7fb fcce 	bl	8005f80 <pbuf_free>
  }

  return ERR_MEM;
 800a5e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3724      	adds	r7, #36	; 0x24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd90      	pop	{r4, r7, pc}
 800a5f0:	08011244 	.word	0x08011244
 800a5f4:	080115d8 	.word	0x080115d8
 800a5f8:	08011298 	.word	0x08011298
 800a5fc:	080115fc 	.word	0x080115fc
 800a600:	08011620 	.word	0x08011620
 800a604:	08011630 	.word	0x08011630
 800a608:	08011640 	.word	0x08011640

0800a60c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <tcp_send_fin+0x1c>
 800a61a:	4b21      	ldr	r3, [pc, #132]	; (800a6a0 <tcp_send_fin+0x94>)
 800a61c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a620:	4920      	ldr	r1, [pc, #128]	; (800a6a4 <tcp_send_fin+0x98>)
 800a622:	4821      	ldr	r0, [pc, #132]	; (800a6a8 <tcp_send_fin+0x9c>)
 800a624:	f004 fa58 	bl	800ead8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d02e      	beq.n	800a68e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	e002      	b.n	800a63e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f8      	bne.n	800a638 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	899b      	ldrh	r3, [r3, #12]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fa f87c 	bl	800474c <lwip_htons>
 800a654:	4603      	mov	r3, r0
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d116      	bne.n	800a68e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	899b      	ldrh	r3, [r3, #12]
 800a666:	b29c      	uxth	r4, r3
 800a668:	2001      	movs	r0, #1
 800a66a:	f7fa f86f 	bl	800474c <lwip_htons>
 800a66e:	4603      	mov	r3, r0
 800a670:	461a      	mov	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	4322      	orrs	r2, r4
 800a678:	b292      	uxth	r2, r2
 800a67a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8b5b      	ldrh	r3, [r3, #26]
 800a680:	f043 0320 	orr.w	r3, r3, #32
 800a684:	b29a      	uxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	e004      	b.n	800a698 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a68e:	2101      	movs	r1, #1
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f80b 	bl	800a6ac <tcp_enqueue_flags>
 800a696:	4603      	mov	r3, r0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd90      	pop	{r4, r7, pc}
 800a6a0:	08011244 	.word	0x08011244
 800a6a4:	0801164c 	.word	0x0801164c
 800a6a8:	08011298 	.word	0x08011298

0800a6ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08a      	sub	sp, #40	; 0x28
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <tcp_enqueue_flags+0x2c>
 800a6ca:	4b67      	ldr	r3, [pc, #412]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a6cc:	f240 4211 	movw	r2, #1041	; 0x411
 800a6d0:	4966      	ldr	r1, [pc, #408]	; (800a86c <tcp_enqueue_flags+0x1c0>)
 800a6d2:	4867      	ldr	r0, [pc, #412]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a6d4:	f004 fa00 	bl	800ead8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <tcp_enqueue_flags+0x40>
 800a6de:	4b62      	ldr	r3, [pc, #392]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a6e0:	f240 4213 	movw	r2, #1043	; 0x413
 800a6e4:	4963      	ldr	r1, [pc, #396]	; (800a874 <tcp_enqueue_flags+0x1c8>)
 800a6e6:	4862      	ldr	r0, [pc, #392]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a6e8:	f004 f9f6 	bl	800ead8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a6fa:	7ffb      	ldrb	r3, [r7, #31]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a70e:	4619      	mov	r1, r3
 800a710:	2036      	movs	r0, #54	; 0x36
 800a712:	f7fb f951 	bl	80059b8 <pbuf_alloc>
 800a716:	6138      	str	r0, [r7, #16]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8b5b      	ldrh	r3, [r3, #26]
 800a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	e095      	b.n	800a85e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	895a      	ldrh	r2, [r3, #10]
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d206      	bcs.n	800a74c <tcp_enqueue_flags+0xa0>
 800a73e:	4b4a      	ldr	r3, [pc, #296]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a740:	f240 4239 	movw	r2, #1081	; 0x439
 800a744:	494c      	ldr	r1, [pc, #304]	; (800a878 <tcp_enqueue_flags+0x1cc>)
 800a746:	484a      	ldr	r0, [pc, #296]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a748:	f004 f9c6 	bl	800ead8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a750:	78fa      	ldrb	r2, [r7, #3]
 800a752:	7ffb      	ldrb	r3, [r7, #31]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	460b      	mov	r3, r1
 800a758:	6939      	ldr	r1, [r7, #16]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fd70 	bl	800a240 <tcp_create_segment>
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d109      	bne.n	800a77c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a776:	f04f 33ff 	mov.w	r3, #4294967295
 800a77a:	e070      	b.n	800a85e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <tcp_enqueue_flags+0xea>
 800a788:	4b37      	ldr	r3, [pc, #220]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a78a:	f240 4242 	movw	r2, #1090	; 0x442
 800a78e:	493b      	ldr	r1, [pc, #236]	; (800a87c <tcp_enqueue_flags+0x1d0>)
 800a790:	4837      	ldr	r0, [pc, #220]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a792:	f004 f9a1 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	891b      	ldrh	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d006      	beq.n	800a7ac <tcp_enqueue_flags+0x100>
 800a79e:	4b32      	ldr	r3, [pc, #200]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a7a0:	f240 4243 	movw	r2, #1091	; 0x443
 800a7a4:	4936      	ldr	r1, [pc, #216]	; (800a880 <tcp_enqueue_flags+0x1d4>)
 800a7a6:	4832      	ldr	r0, [pc, #200]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a7a8:	f004 f996 	bl	800ead8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a7ba:	e00d      	b.n	800a7d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	e002      	b.n	800a7ca <tcp_enqueue_flags+0x11e>
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	61bb      	str	r3, [r7, #24]
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f8      	bne.n	800a7c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	f003 0302 	and.w	r3, r3, #2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <tcp_enqueue_flags+0x148>
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d004      	beq.n	800a7fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	d006      	beq.n	800a816 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	8b5b      	ldrh	r3, [r3, #26]
 800a80c:	f043 0320 	orr.w	r3, r3, #32
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fb fc38 	bl	8006090 <pbuf_clen>
 800a820:	4603      	mov	r3, r0
 800a822:	461a      	mov	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a82a:	4413      	add	r3, r2
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00e      	beq.n	800a85c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10a      	bne.n	800a85c <tcp_enqueue_flags+0x1b0>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <tcp_enqueue_flags+0x1b0>
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <tcp_enqueue_flags+0x1bc>)
 800a850:	f240 4265 	movw	r2, #1125	; 0x465
 800a854:	490b      	ldr	r1, [pc, #44]	; (800a884 <tcp_enqueue_flags+0x1d8>)
 800a856:	4806      	ldr	r0, [pc, #24]	; (800a870 <tcp_enqueue_flags+0x1c4>)
 800a858:	f004 f93e 	bl	800ead8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08011244 	.word	0x08011244
 800a86c:	08011668 	.word	0x08011668
 800a870:	08011298 	.word	0x08011298
 800a874:	080116c0 	.word	0x080116c0
 800a878:	080116e0 	.word	0x080116e0
 800a87c:	0801171c 	.word	0x0801171c
 800a880:	08011734 	.word	0x08011734
 800a884:	08011760 	.word	0x08011760

0800a888 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a888:	b5b0      	push	{r4, r5, r7, lr}
 800a88a:	b08a      	sub	sp, #40	; 0x28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <tcp_output+0x1c>
 800a896:	4b8a      	ldr	r3, [pc, #552]	; (800aac0 <tcp_output+0x238>)
 800a898:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a89c:	4989      	ldr	r1, [pc, #548]	; (800aac4 <tcp_output+0x23c>)
 800a89e:	488a      	ldr	r0, [pc, #552]	; (800aac8 <tcp_output+0x240>)
 800a8a0:	f004 f91a 	bl	800ead8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	7d1b      	ldrb	r3, [r3, #20]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d106      	bne.n	800a8ba <tcp_output+0x32>
 800a8ac:	4b84      	ldr	r3, [pc, #528]	; (800aac0 <tcp_output+0x238>)
 800a8ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a8b2:	4986      	ldr	r1, [pc, #536]	; (800aacc <tcp_output+0x244>)
 800a8b4:	4884      	ldr	r0, [pc, #528]	; (800aac8 <tcp_output+0x240>)
 800a8b6:	f004 f90f 	bl	800ead8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a8ba:	4b85      	ldr	r3, [pc, #532]	; (800aad0 <tcp_output+0x248>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d101      	bne.n	800a8c8 <tcp_output+0x40>
    return ERR_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e1ce      	b.n	800ac66 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	bf28      	it	cs
 800a8d8:	4613      	movcs	r3, r2
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10b      	bne.n	800a902 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	8b5b      	ldrh	r3, [r3, #26]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 81aa 	beq.w	800ac4c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fdcb 	bl	800b494 <tcp_send_empty_ack>
 800a8fe:	4603      	mov	r3, r0
 800a900:	e1b1      	b.n	800ac66 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a902:	6879      	ldr	r1, [r7, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3304      	adds	r3, #4
 800a908:	461a      	mov	r2, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fc7c 	bl	800a208 <tcp_route>
 800a910:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <tcp_output+0x96>
    return ERR_RTE;
 800a918:	f06f 0303 	mvn.w	r3, #3
 800a91c:	e1a3      	b.n	800ac66 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <tcp_output+0xa4>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d111      	bne.n	800a950 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <tcp_output+0xb0>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	3304      	adds	r3, #4
 800a936:	e000      	b.n	800a93a <tcp_output+0xb2>
 800a938:	2300      	movs	r3, #0
 800a93a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <tcp_output+0xc0>
      return ERR_RTE;
 800a942:	f06f 0303 	mvn.w	r3, #3
 800a946:	e18e      	b.n	800ac66 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	4618      	mov	r0, r3
 800a958:	f7f9 ff0d 	bl	8004776 <lwip_htonl>
 800a95c:	4602      	mov	r2, r0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a966:	8912      	ldrh	r2, [r2, #8]
 800a968:	4413      	add	r3, r2
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d227      	bcs.n	800a9c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a976:	461a      	mov	r2, r3
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d114      	bne.n	800a9a8 <tcp_output+0x120>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a982:	2b00      	cmp	r3, #0
 800a984:	d110      	bne.n	800a9a8 <tcp_output+0x120>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	8b5b      	ldrh	r3, [r3, #26]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 814d 	beq.w	800ac50 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fd6c 	bl	800b494 <tcp_send_empty_ack>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e152      	b.n	800ac66 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 811c 	beq.w	800ac0e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a9d6:	e002      	b.n	800a9de <tcp_output+0x156>
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	623b      	str	r3, [r7, #32]
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f8      	bne.n	800a9d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a9e6:	e112      	b.n	800ac0e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	899b      	ldrh	r3, [r3, #12]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7f9 feab 	bl	800474c <lwip_htons>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d006      	beq.n	800aa10 <tcp_output+0x188>
 800aa02:	4b2f      	ldr	r3, [pc, #188]	; (800aac0 <tcp_output+0x238>)
 800aa04:	f240 5236 	movw	r2, #1334	; 0x536
 800aa08:	4932      	ldr	r1, [pc, #200]	; (800aad4 <tcp_output+0x24c>)
 800aa0a:	482f      	ldr	r0, [pc, #188]	; (800aac8 <tcp_output+0x240>)
 800aa0c:	f004 f864 	bl	800ead8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01f      	beq.n	800aa58 <tcp_output+0x1d0>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	8b5b      	ldrh	r3, [r3, #26]
 800aa1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d119      	bne.n	800aa58 <tcp_output+0x1d0>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00b      	beq.n	800aa44 <tcp_output+0x1bc>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <tcp_output+0x1d0>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3a:	891a      	ldrh	r2, [r3, #8]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d209      	bcs.n	800aa58 <tcp_output+0x1d0>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <tcp_output+0x1d0>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	d901      	bls.n	800aa5c <tcp_output+0x1d4>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e000      	b.n	800aa5e <tcp_output+0x1d6>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	8b5b      	ldrh	r3, [r3, #26]
 800aa66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 80e4 	beq.w	800ac38 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7d1b      	ldrb	r3, [r3, #20]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d00d      	beq.n	800aa94 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	899b      	ldrh	r3, [r3, #12]
 800aa7e:	b29c      	uxth	r4, r3
 800aa80:	2010      	movs	r0, #16
 800aa82:	f7f9 fe63 	bl	800474c <lwip_htons>
 800aa86:	4603      	mov	r3, r0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4322      	orrs	r2, r4
 800aa90:	b292      	uxth	r2, r2
 800aa92:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa9a:	f000 f909 	bl	800acb0 <tcp_output_segment>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aaa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d016      	beq.n	800aad8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8b5b      	ldrh	r3, [r3, #26]
 800aaae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	835a      	strh	r2, [r3, #26]
      return err;
 800aab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aabc:	e0d3      	b.n	800ac66 <tcp_output+0x3de>
 800aabe:	bf00      	nop
 800aac0:	08011244 	.word	0x08011244
 800aac4:	08011788 	.word	0x08011788
 800aac8:	08011298 	.word	0x08011298
 800aacc:	080117a0 	.word	0x080117a0
 800aad0:	200082d8 	.word	0x200082d8
 800aad4:	080117c8 	.word	0x080117c8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7d1b      	ldrb	r3, [r3, #20]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d006      	beq.n	800aaf6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	8b5b      	ldrh	r3, [r3, #26]
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f9 fe3a 	bl	8004776 <lwip_htonl>
 800ab02:	4604      	mov	r4, r0
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	891b      	ldrh	r3, [r3, #8]
 800ab08:	461d      	mov	r5, r3
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	899b      	ldrh	r3, [r3, #12]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7f9 fe1a 	bl	800474c <lwip_htons>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <tcp_output+0x2a0>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e000      	b.n	800ab2a <tcp_output+0x2a2>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	442b      	add	r3, r5
 800ab2c:	4423      	add	r3, r4
 800ab2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da02      	bge.n	800ab42 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	891b      	ldrh	r3, [r3, #8]
 800ab46:	461c      	mov	r4, r3
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	899b      	ldrh	r3, [r3, #12]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f9 fdfb 	bl	800474c <lwip_htons>
 800ab56:	4603      	mov	r3, r0
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <tcp_output+0x2de>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <tcp_output+0x2e0>
 800ab66:	2300      	movs	r3, #0
 800ab68:	4423      	add	r3, r4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d049      	beq.n	800ac02 <tcp_output+0x37a>
      seg->next = NULL;
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d105      	bne.n	800ab88 <tcp_output+0x300>
        pcb->unacked = seg;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	623b      	str	r3, [r7, #32]
 800ab86:	e03f      	b.n	800ac08 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7f9 fdf1 	bl	8004776 <lwip_htonl>
 800ab94:	4604      	mov	r4, r0
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7f9 fdea 	bl	8004776 <lwip_htonl>
 800aba2:	4603      	mov	r3, r0
 800aba4:	1ae3      	subs	r3, r4, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da24      	bge.n	800abf4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3370      	adds	r3, #112	; 0x70
 800abae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abb0:	e002      	b.n	800abb8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d011      	beq.n	800abe4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f9 fdd4 	bl	8004776 <lwip_htonl>
 800abce:	4604      	mov	r4, r0
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f9 fdcd 	bl	8004776 <lwip_htonl>
 800abdc:	4603      	mov	r3, r0
 800abde:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dbe6      	blt.n	800abb2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	e009      	b.n	800ac08 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	623b      	str	r3, [r7, #32]
 800ac00:	e002      	b.n	800ac08 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac04:	f7fc fc3f 	bl	8007486 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d012      	beq.n	800ac3a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7f9 fdab 	bl	8004776 <lwip_htonl>
 800ac20:	4602      	mov	r2, r0
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2a:	8912      	ldrh	r2, [r2, #8]
 800ac2c:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	f4bf aed9 	bcs.w	800a9e8 <tcp_output+0x160>
 800ac36:	e000      	b.n	800ac3a <tcp_output+0x3b2>
      break;
 800ac38:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d108      	bne.n	800ac54 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ac4a:	e004      	b.n	800ac56 <tcp_output+0x3ce>
    goto output_done;
 800ac4c:	bf00      	nop
 800ac4e:	e002      	b.n	800ac56 <tcp_output+0x3ce>
    goto output_done;
 800ac50:	bf00      	nop
 800ac52:	e000      	b.n	800ac56 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ac54:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	8b5b      	ldrh	r3, [r3, #26]
 800ac5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3728      	adds	r7, #40	; 0x28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <tcp_output_segment_busy+0x1c>
 800ac7e:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <tcp_output_segment_busy+0x34>)
 800ac80:	f240 529a 	movw	r2, #1434	; 0x59a
 800ac84:	4908      	ldr	r1, [pc, #32]	; (800aca8 <tcp_output_segment_busy+0x38>)
 800ac86:	4809      	ldr	r0, [pc, #36]	; (800acac <tcp_output_segment_busy+0x3c>)
 800ac88:	f003 ff26 	bl	800ead8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	7b9b      	ldrb	r3, [r3, #14]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d001      	beq.n	800ac9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	08011244 	.word	0x08011244
 800aca8:	080117e0 	.word	0x080117e0
 800acac:	08011298 	.word	0x08011298

0800acb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800acb0:	b5b0      	push	{r4, r5, r7, lr}
 800acb2:	b08c      	sub	sp, #48	; 0x30
 800acb4:	af04      	add	r7, sp, #16
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_output_segment+0x20>
 800acc2:	4b63      	ldr	r3, [pc, #396]	; (800ae50 <tcp_output_segment+0x1a0>)
 800acc4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800acc8:	4962      	ldr	r1, [pc, #392]	; (800ae54 <tcp_output_segment+0x1a4>)
 800acca:	4863      	ldr	r0, [pc, #396]	; (800ae58 <tcp_output_segment+0x1a8>)
 800accc:	f003 ff04 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <tcp_output_segment+0x34>
 800acd6:	4b5e      	ldr	r3, [pc, #376]	; (800ae50 <tcp_output_segment+0x1a0>)
 800acd8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800acdc:	495f      	ldr	r1, [pc, #380]	; (800ae5c <tcp_output_segment+0x1ac>)
 800acde:	485e      	ldr	r0, [pc, #376]	; (800ae58 <tcp_output_segment+0x1a8>)
 800ace0:	f003 fefa 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <tcp_output_segment+0x48>
 800acea:	4b59      	ldr	r3, [pc, #356]	; (800ae50 <tcp_output_segment+0x1a0>)
 800acec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800acf0:	495b      	ldr	r1, [pc, #364]	; (800ae60 <tcp_output_segment+0x1b0>)
 800acf2:	4859      	ldr	r0, [pc, #356]	; (800ae58 <tcp_output_segment+0x1a8>)
 800acf4:	f003 fef0 	bl	800ead8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7ff ffb9 	bl	800ac70 <tcp_output_segment_busy>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	e09f      	b.n	800ae48 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68dc      	ldr	r4, [r3, #12]
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7f9 fd30 	bl	8004776 <lwip_htonl>
 800ad16:	4603      	mov	r3, r0
 800ad18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	68dc      	ldr	r4, [r3, #12]
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7f9 fd12 	bl	800474c <lwip_htons>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad34:	441a      	add	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	3314      	adds	r3, #20
 800ad40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	7a9b      	ldrb	r3, [r3, #10]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d015      	beq.n	800ad7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	3304      	adds	r3, #4
 800ad52:	461a      	mov	r2, r3
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ad5a:	f7fc fe8b 	bl	8007a74 <tcp_eff_send_mss_netif>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ad62:	8b7b      	ldrh	r3, [r7, #26]
 800ad64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f9 fd04 	bl	8004776 <lwip_htonl>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	3304      	adds	r3, #4
 800ad78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da02      	bge.n	800ad8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2200      	movs	r2, #0
 800ad88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10c      	bne.n	800adac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ad92:	4b34      	ldr	r3, [pc, #208]	; (800ae64 <tcp_output_segment+0x1b4>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f9 fce8 	bl	8004776 <lwip_htonl>
 800ada6:	4602      	mov	r2, r0
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	8959      	ldrh	r1, [r3, #10]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	8b3a      	ldrh	r2, [r7, #24]
 800adc6:	1a8a      	subs	r2, r1, r2
 800adc8:	b292      	uxth	r2, r2
 800adca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	8919      	ldrh	r1, [r3, #8]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	8b3a      	ldrh	r2, [r7, #24]
 800add8:	1a8a      	subs	r2, r1, r2
 800adda:	b292      	uxth	r2, r2
 800addc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	68d2      	ldr	r2, [r2, #12]
 800ade6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	741a      	strb	r2, [r3, #16]
 800adf0:	2200      	movs	r2, #0
 800adf2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f103 0214 	add.w	r2, r3, #20
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	7a9b      	ldrb	r3, [r3, #10]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	4413      	add	r3, r2
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d006      	beq.n	800ae1c <tcp_output_segment+0x16c>
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <tcp_output_segment+0x1a0>)
 800ae10:	f240 621c 	movw	r2, #1564	; 0x61c
 800ae14:	4914      	ldr	r1, [pc, #80]	; (800ae68 <tcp_output_segment+0x1b8>)
 800ae16:	4810      	ldr	r0, [pc, #64]	; (800ae58 <tcp_output_segment+0x1a8>)
 800ae18:	f003 fe5e 	bl	800ead8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6858      	ldr	r0, [r3, #4]
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	1d1c      	adds	r4, r3, #4
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	7add      	ldrb	r5, [r3, #11]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	7a9b      	ldrb	r3, [r3, #10]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	9202      	str	r2, [sp, #8]
 800ae32:	2206      	movs	r2, #6
 800ae34:	9201      	str	r2, [sp, #4]
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	462b      	mov	r3, r5
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	f002 fdd4 	bl	800d9e8 <ip4_output_if>
 800ae40:	4603      	mov	r3, r0
 800ae42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ae44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae50:	08011244 	.word	0x08011244
 800ae54:	08011808 	.word	0x08011808
 800ae58:	08011298 	.word	0x08011298
 800ae5c:	08011828 	.word	0x08011828
 800ae60:	08011848 	.word	0x08011848
 800ae64:	2000828c 	.word	0x2000828c
 800ae68:	0801186c 	.word	0x0801186c

0800ae6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ae6c:	b5b0      	push	{r4, r5, r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_rexmit_rto_prepare+0x1c>
 800ae7a:	4b31      	ldr	r3, [pc, #196]	; (800af40 <tcp_rexmit_rto_prepare+0xd4>)
 800ae7c:	f240 6263 	movw	r2, #1635	; 0x663
 800ae80:	4930      	ldr	r1, [pc, #192]	; (800af44 <tcp_rexmit_rto_prepare+0xd8>)
 800ae82:	4831      	ldr	r0, [pc, #196]	; (800af48 <tcp_rexmit_rto_prepare+0xdc>)
 800ae84:	f003 fe28 	bl	800ead8 <iprintf>

  if (pcb->unacked == NULL) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ae90:	f06f 0305 	mvn.w	r3, #5
 800ae94:	e050      	b.n	800af38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	e00b      	b.n	800aeb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fee6 	bl	800ac70 <tcp_output_segment_busy>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800aeaa:	f06f 0305 	mvn.w	r3, #5
 800aeae:	e043      	b.n	800af38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1ef      	bne.n	800ae9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fed6 	bl	800ac70 <tcp_output_segment_busy>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800aeca:	f06f 0305 	mvn.w	r3, #5
 800aece:	e033      	b.n	800af38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8b5b      	ldrh	r3, [r3, #26]
 800aeea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f9 fc3b 	bl	8004776 <lwip_htonl>
 800af00:	4604      	mov	r4, r0
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	891b      	ldrh	r3, [r3, #8]
 800af06:	461d      	mov	r5, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4618      	mov	r0, r3
 800af12:	f7f9 fc1b 	bl	800474c <lwip_htons>
 800af16:	4603      	mov	r3, r0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <tcp_rexmit_rto_prepare+0xba>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <tcp_rexmit_rto_prepare+0xbc>
 800af26:	2300      	movs	r3, #0
 800af28:	442b      	add	r3, r5
 800af2a:	18e2      	adds	r2, r4, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bdb0      	pop	{r4, r5, r7, pc}
 800af40:	08011244 	.word	0x08011244
 800af44:	08011880 	.word	0x08011880
 800af48:	08011298 	.word	0x08011298

0800af4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <tcp_rexmit_rto_commit+0x1c>
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <tcp_rexmit_rto_commit+0x44>)
 800af5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800af60:	490c      	ldr	r1, [pc, #48]	; (800af94 <tcp_rexmit_rto_commit+0x48>)
 800af62:	480d      	ldr	r0, [pc, #52]	; (800af98 <tcp_rexmit_rto_commit+0x4c>)
 800af64:	f003 fdb8 	bl	800ead8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af6e:	2bff      	cmp	r3, #255	; 0xff
 800af70:	d007      	beq.n	800af82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af78:	3301      	adds	r3, #1
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fc80 	bl	800a888 <tcp_output>
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	08011244 	.word	0x08011244
 800af94:	080118a4 	.word	0x080118a4
 800af98:	08011298 	.word	0x08011298

0800af9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <tcp_rexmit_rto+0x1c>
 800afaa:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <tcp_rexmit_rto+0x38>)
 800afac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800afb0:	4909      	ldr	r1, [pc, #36]	; (800afd8 <tcp_rexmit_rto+0x3c>)
 800afb2:	480a      	ldr	r0, [pc, #40]	; (800afdc <tcp_rexmit_rto+0x40>)
 800afb4:	f003 fd90 	bl	800ead8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff ff57 	bl	800ae6c <tcp_rexmit_rto_prepare>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff ffc1 	bl	800af4c <tcp_rexmit_rto_commit>
  }
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	08011244 	.word	0x08011244
 800afd8:	080118c8 	.word	0x080118c8
 800afdc:	08011298 	.word	0x08011298

0800afe0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d106      	bne.n	800affc <tcp_rexmit+0x1c>
 800afee:	4b2f      	ldr	r3, [pc, #188]	; (800b0ac <tcp_rexmit+0xcc>)
 800aff0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800aff4:	492e      	ldr	r1, [pc, #184]	; (800b0b0 <tcp_rexmit+0xd0>)
 800aff6:	482f      	ldr	r0, [pc, #188]	; (800b0b4 <tcp_rexmit+0xd4>)
 800aff8:	f003 fd6e 	bl	800ead8 <iprintf>

  if (pcb->unacked == NULL) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b004:	f06f 0305 	mvn.w	r3, #5
 800b008:	e04c      	b.n	800b0a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b010:	68b8      	ldr	r0, [r7, #8]
 800b012:	f7ff fe2d 	bl	800ac70 <tcp_output_segment_busy>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b01c:	f06f 0305 	mvn.w	r3, #5
 800b020:	e040      	b.n	800b0a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	336c      	adds	r3, #108	; 0x6c
 800b02e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b030:	e002      	b.n	800b038 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d011      	beq.n	800b064 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 fb94 	bl	8004776 <lwip_htonl>
 800b04e:	4604      	mov	r4, r0
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	4618      	mov	r0, r3
 800b058:	f7f9 fb8d 	bl	8004776 <lwip_htonl>
 800b05c:	4603      	mov	r3, r0
 800b05e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b060:	2b00      	cmp	r3, #0
 800b062:	dbe6      	blt.n	800b032 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d103      	bne.n	800b082 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b088:	2bff      	cmp	r3, #255	; 0xff
 800b08a:	d007      	beq.n	800b09c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b092:	3301      	adds	r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	08011244 	.word	0x08011244
 800b0b0:	080118e4 	.word	0x080118e4
 800b0b4:	08011298 	.word	0x08011298

0800b0b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <tcp_rexmit_fast+0x1c>
 800b0c6:	4b2a      	ldr	r3, [pc, #168]	; (800b170 <tcp_rexmit_fast+0xb8>)
 800b0c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b0cc:	4929      	ldr	r1, [pc, #164]	; (800b174 <tcp_rexmit_fast+0xbc>)
 800b0ce:	482a      	ldr	r0, [pc, #168]	; (800b178 <tcp_rexmit_fast+0xc0>)
 800b0d0:	f003 fd02 	bl	800ead8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d044      	beq.n	800b166 <tcp_rexmit_fast+0xae>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8b5b      	ldrh	r3, [r3, #26]
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d13e      	bne.n	800b166 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff ff79 	bl	800afe0 <tcp_rexmit>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d138      	bne.n	800b166 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b100:	4293      	cmp	r3, r2
 800b102:	bf28      	it	cs
 800b104:	4613      	movcs	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	0fda      	lsrs	r2, r3, #31
 800b10a:	4413      	add	r3, r2
 800b10c:	105b      	asrs	r3, r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b11c:	461a      	mov	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	429a      	cmp	r2, r3
 800b126:	d206      	bcs.n	800b136 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b140:	4619      	mov	r1, r3
 800b142:	0049      	lsls	r1, r1, #1
 800b144:	440b      	add	r3, r1
 800b146:	b29b      	uxth	r3, r3
 800b148:	4413      	add	r3, r2
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	8b5b      	ldrh	r3, [r3, #26]
 800b156:	f043 0304 	orr.w	r3, r3, #4
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	08011244 	.word	0x08011244
 800b174:	080118fc 	.word	0x080118fc
 800b178:	08011298 	.word	0x08011298

0800b17c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	817b      	strh	r3, [r7, #10]
 800b18a:	4613      	mov	r3, r2
 800b18c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b18e:	897a      	ldrh	r2, [r7, #10]
 800b190:	893b      	ldrh	r3, [r7, #8]
 800b192:	4413      	add	r3, r2
 800b194:	b29b      	uxth	r3, r3
 800b196:	3314      	adds	r3, #20
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b19e:	4619      	mov	r1, r3
 800b1a0:	2022      	movs	r0, #34	; 0x22
 800b1a2:	f7fa fc09 	bl	80059b8 <pbuf_alloc>
 800b1a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d04d      	beq.n	800b24a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b1ae:	897b      	ldrh	r3, [r7, #10]
 800b1b0:	3313      	adds	r3, #19
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	8952      	ldrh	r2, [r2, #10]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	db06      	blt.n	800b1c8 <tcp_output_alloc_header_common+0x4c>
 800b1ba:	4b26      	ldr	r3, [pc, #152]	; (800b254 <tcp_output_alloc_header_common+0xd8>)
 800b1bc:	f240 7223 	movw	r2, #1827	; 0x723
 800b1c0:	4925      	ldr	r1, [pc, #148]	; (800b258 <tcp_output_alloc_header_common+0xdc>)
 800b1c2:	4826      	ldr	r0, [pc, #152]	; (800b25c <tcp_output_alloc_header_common+0xe0>)
 800b1c4:	f003 fc88 	bl	800ead8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b1ce:	8c3b      	ldrh	r3, [r7, #32]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f9 fabb 	bl	800474c <lwip_htons>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	461a      	mov	r2, r3
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7f9 fab3 	bl	800474c <lwip_htons>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7f9 fabe 	bl	8004776 <lwip_htonl>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b200:	897b      	ldrh	r3, [r7, #10]
 800b202:	089b      	lsrs	r3, r3, #2
 800b204:	b29b      	uxth	r3, r3
 800b206:	3305      	adds	r3, #5
 800b208:	b29b      	uxth	r3, r3
 800b20a:	031b      	lsls	r3, r3, #12
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b212:	b29b      	uxth	r3, r3
 800b214:	4313      	orrs	r3, r2
 800b216:	b29b      	uxth	r3, r3
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f9 fa97 	bl	800474c <lwip_htons>
 800b21e:	4603      	mov	r3, r0
 800b220:	461a      	mov	r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f9 fa8f 	bl	800474c <lwip_htons>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2200      	movs	r2, #0
 800b23a:	741a      	strb	r2, [r3, #16]
 800b23c:	2200      	movs	r2, #0
 800b23e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2200      	movs	r2, #0
 800b244:	749a      	strb	r2, [r3, #18]
 800b246:	2200      	movs	r2, #0
 800b248:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b24a:	697b      	ldr	r3, [r7, #20]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	08011244 	.word	0x08011244
 800b258:	0801191c 	.word	0x0801191c
 800b25c:	08011298 	.word	0x08011298

0800b260 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b260:	b5b0      	push	{r4, r5, r7, lr}
 800b262:	b08a      	sub	sp, #40	; 0x28
 800b264:	af04      	add	r7, sp, #16
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	817b      	strh	r3, [r7, #10]
 800b26e:	4613      	mov	r3, r2
 800b270:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d106      	bne.n	800b286 <tcp_output_alloc_header+0x26>
 800b278:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <tcp_output_alloc_header+0x70>)
 800b27a:	f240 7242 	movw	r2, #1858	; 0x742
 800b27e:	4915      	ldr	r1, [pc, #84]	; (800b2d4 <tcp_output_alloc_header+0x74>)
 800b280:	4815      	ldr	r0, [pc, #84]	; (800b2d8 <tcp_output_alloc_header+0x78>)
 800b282:	f003 fc29 	bl	800ead8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	8adb      	ldrh	r3, [r3, #22]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	8b12      	ldrh	r2, [r2, #24]
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b296:	893d      	ldrh	r5, [r7, #8]
 800b298:	897c      	ldrh	r4, [r7, #10]
 800b29a:	9103      	str	r1, [sp, #12]
 800b29c:	2110      	movs	r1, #16
 800b29e:	9102      	str	r1, [sp, #8]
 800b2a0:	9201      	str	r2, [sp, #4]
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7ff ff67 	bl	800b17c <tcp_output_alloc_header_common>
 800b2ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d006      	beq.n	800b2c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b2be:	441a      	add	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b2c4:	697b      	ldr	r3, [r7, #20]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	08011244 	.word	0x08011244
 800b2d4:	0801194c 	.word	0x0801194c
 800b2d8:	08011298 	.word	0x08011298

0800b2dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	71fb      	strb	r3, [r7, #7]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_output_fill_options+0x2e>
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <tcp_output_fill_options+0x70>)
 800b2fe:	f240 7256 	movw	r2, #1878	; 0x756
 800b302:	4913      	ldr	r1, [pc, #76]	; (800b350 <tcp_output_fill_options+0x74>)
 800b304:	4813      	ldr	r0, [pc, #76]	; (800b354 <tcp_output_fill_options+0x78>)
 800b306:	f003 fbe7 	bl	800ead8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	3314      	adds	r3, #20
 800b314:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	f103 0214 	add.w	r2, r3, #20
 800b31c:	8bfb      	ldrh	r3, [r7, #30]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4619      	mov	r1, r3
 800b322:	79fb      	ldrb	r3, [r7, #7]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	440b      	add	r3, r1
 800b32c:	4413      	add	r3, r2
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d006      	beq.n	800b342 <tcp_output_fill_options+0x66>
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <tcp_output_fill_options+0x70>)
 800b336:	f240 7275 	movw	r2, #1909	; 0x775
 800b33a:	4907      	ldr	r1, [pc, #28]	; (800b358 <tcp_output_fill_options+0x7c>)
 800b33c:	4805      	ldr	r0, [pc, #20]	; (800b354 <tcp_output_fill_options+0x78>)
 800b33e:	f003 fbcb 	bl	800ead8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b342:	bf00      	nop
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	08011244 	.word	0x08011244
 800b350:	08011974 	.word	0x08011974
 800b354:	08011298 	.word	0x08011298
 800b358:	0801186c 	.word	0x0801186c

0800b35c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af04      	add	r7, sp, #16
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <tcp_output_control_segment+0x22>
 800b370:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <tcp_output_control_segment+0x88>)
 800b372:	f240 7287 	movw	r2, #1927	; 0x787
 800b376:	491c      	ldr	r1, [pc, #112]	; (800b3e8 <tcp_output_control_segment+0x8c>)
 800b378:	481c      	ldr	r0, [pc, #112]	; (800b3ec <tcp_output_control_segment+0x90>)
 800b37a:	f003 fbad 	bl	800ead8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7fe ff40 	bl	800a208 <tcp_route>
 800b388:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b390:	23fc      	movs	r3, #252	; 0xfc
 800b392:	75fb      	strb	r3, [r7, #23]
 800b394:	e01c      	b.n	800b3d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	7adb      	ldrb	r3, [r3, #11]
 800b3a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	7a9b      	ldrb	r3, [r3, #10]
 800b3a6:	757b      	strb	r3, [r7, #21]
 800b3a8:	e003      	b.n	800b3b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b3aa:	23ff      	movs	r3, #255	; 0xff
 800b3ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b3b2:	7dba      	ldrb	r2, [r7, #22]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	2306      	movs	r3, #6
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	7d7b      	ldrb	r3, [r7, #21]
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	68b8      	ldr	r0, [r7, #8]
 800b3c8:	f002 fb0e 	bl	800d9e8 <ip4_output_if>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f7fa fdd5 	bl	8005f80 <pbuf_free>
  return err;
 800b3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	08011244 	.word	0x08011244
 800b3e8:	0801199c 	.word	0x0801199c
 800b3ec:	08011298 	.word	0x08011298

0800b3f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b08b      	sub	sp, #44	; 0x2c
 800b3f4:	af04      	add	r7, sp, #16
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <tcp_rst+0x22>
 800b404:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <tcp_rst+0x94>)
 800b406:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b40a:	491f      	ldr	r1, [pc, #124]	; (800b488 <tcp_rst+0x98>)
 800b40c:	481f      	ldr	r0, [pc, #124]	; (800b48c <tcp_rst+0x9c>)
 800b40e:	f003 fb63 	bl	800ead8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <tcp_rst+0x36>
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <tcp_rst+0x94>)
 800b41a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b41e:	491c      	ldr	r1, [pc, #112]	; (800b490 <tcp_rst+0xa0>)
 800b420:	481a      	ldr	r0, [pc, #104]	; (800b48c <tcp_rst+0x9c>)
 800b422:	f003 fb59 	bl	800ead8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b42a:	f246 0308 	movw	r3, #24584	; 0x6008
 800b42e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	b29c      	uxth	r4, r3
 800b434:	68b8      	ldr	r0, [r7, #8]
 800b436:	f7f9 f99e 	bl	8004776 <lwip_htonl>
 800b43a:	4602      	mov	r2, r0
 800b43c:	8abb      	ldrh	r3, [r7, #20]
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	2314      	movs	r3, #20
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	4613      	mov	r3, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	4621      	mov	r1, r4
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fe92 	bl	800b17c <tcp_output_alloc_header_common>
 800b458:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00c      	beq.n	800b47a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	2200      	movs	r2, #0
 800b464:	6939      	ldr	r1, [r7, #16]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7ff ff38 	bl	800b2dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	6939      	ldr	r1, [r7, #16]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff ff72 	bl	800b35c <tcp_output_control_segment>
 800b478:	e000      	b.n	800b47c <tcp_rst+0x8c>
    return;
 800b47a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd90      	pop	{r4, r7, pc}
 800b482:	bf00      	nop
 800b484:	08011244 	.word	0x08011244
 800b488:	080119c8 	.word	0x080119c8
 800b48c:	08011298 	.word	0x08011298
 800b490:	080119e4 	.word	0x080119e4

0800b494 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b494:	b590      	push	{r4, r7, lr}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <tcp_send_empty_ack+0x24>
 800b4aa:	4b28      	ldr	r3, [pc, #160]	; (800b54c <tcp_send_empty_ack+0xb8>)
 800b4ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b4b0:	4927      	ldr	r1, [pc, #156]	; (800b550 <tcp_send_empty_ack+0xbc>)
 800b4b2:	4828      	ldr	r0, [pc, #160]	; (800b554 <tcp_send_empty_ack+0xc0>)
 800b4b4:	f003 fb10 	bl	800ead8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b4c4:	7d7b      	ldrb	r3, [r7, #21]
 800b4c6:	b29c      	uxth	r4, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f9 f952 	bl	8004776 <lwip_htonl>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7ff fec1 	bl	800b260 <tcp_output_alloc_header>
 800b4de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8b5b      	ldrh	r3, [r3, #26]
 800b4ea:	f043 0303 	orr.w	r3, r3, #3
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b4f4:	f06f 0301 	mvn.w	r3, #1
 800b4f8:	e023      	b.n	800b542 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b4fa:	7dbb      	ldrb	r3, [r7, #22]
 800b4fc:	7dfa      	ldrb	r2, [r7, #23]
 800b4fe:	6939      	ldr	r1, [r7, #16]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff feeb 	bl	800b2dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3304      	adds	r3, #4
 800b50c:	6939      	ldr	r1, [r7, #16]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff ff24 	bl	800b35c <tcp_output_control_segment>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d007      	beq.n	800b530 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	8b5b      	ldrh	r3, [r3, #26]
 800b524:	f043 0303 	orr.w	r3, r3, #3
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	835a      	strh	r2, [r3, #26]
 800b52e:	e006      	b.n	800b53e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8b5b      	ldrh	r3, [r3, #26]
 800b534:	f023 0303 	bic.w	r3, r3, #3
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	bf00      	nop
 800b54c:	08011244 	.word	0x08011244
 800b550:	08011a00 	.word	0x08011a00
 800b554:	08011298 	.word	0x08011298

0800b558 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b560:	2300      	movs	r3, #0
 800b562:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <tcp_keepalive+0x20>
 800b56a:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <tcp_keepalive+0x74>)
 800b56c:	f640 0224 	movw	r2, #2084	; 0x824
 800b570:	4917      	ldr	r1, [pc, #92]	; (800b5d0 <tcp_keepalive+0x78>)
 800b572:	4818      	ldr	r0, [pc, #96]	; (800b5d4 <tcp_keepalive+0x7c>)
 800b574:	f003 fab0 	bl	800ead8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	b29c      	uxth	r4, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b580:	3b01      	subs	r3, #1
 800b582:	4618      	mov	r0, r3
 800b584:	f7f9 f8f7 	bl	8004776 <lwip_htonl>
 800b588:	4603      	mov	r3, r0
 800b58a:	2200      	movs	r2, #0
 800b58c:	4621      	mov	r1, r4
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff fe66 	bl	800b260 <tcp_output_alloc_header>
 800b594:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a0:	e010      	b.n	800b5c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6939      	ldr	r1, [r7, #16]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff fe97 	bl	800b2dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	6939      	ldr	r1, [r7, #16]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff fed0 	bl	800b35c <tcp_output_control_segment>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	371c      	adds	r7, #28
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd90      	pop	{r4, r7, pc}
 800b5cc:	08011244 	.word	0x08011244
 800b5d0:	08011a20 	.word	0x08011a20
 800b5d4:	08011298 	.word	0x08011298

0800b5d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b08b      	sub	sp, #44	; 0x2c
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <tcp_zero_window_probe+0x22>
 800b5ec:	4b4c      	ldr	r3, [pc, #304]	; (800b720 <tcp_zero_window_probe+0x148>)
 800b5ee:	f640 024f 	movw	r2, #2127	; 0x84f
 800b5f2:	494c      	ldr	r1, [pc, #304]	; (800b724 <tcp_zero_window_probe+0x14c>)
 800b5f4:	484c      	ldr	r0, [pc, #304]	; (800b728 <tcp_zero_window_probe+0x150>)
 800b5f6:	f003 fa6f 	bl	800ead8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	e086      	b.n	800b718 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b610:	2bff      	cmp	r3, #255	; 0xff
 800b612:	d007      	beq.n	800b624 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b61a:	3301      	adds	r3, #1
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f9 f88d 	bl	800474c <lwip_htons>
 800b632:	4603      	mov	r3, r0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <tcp_zero_window_probe+0x72>
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	891b      	ldrh	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <tcp_zero_window_probe+0x72>
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <tcp_zero_window_probe+0x74>
 800b64a:	2300      	movs	r3, #0
 800b64c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b64e:	7ffb      	ldrb	r3, [r7, #31]
 800b650:	2b00      	cmp	r3, #0
 800b652:	bf0c      	ite	eq
 800b654:	2301      	moveq	r3, #1
 800b656:	2300      	movne	r3, #0
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b660:	b299      	uxth	r1, r3
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	8bba      	ldrh	r2, [r7, #28]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fdf8 	bl	800b260 <tcp_output_alloc_header>
 800b670:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b678:	f04f 33ff 	mov.w	r3, #4294967295
 800b67c:	e04c      	b.n	800b718 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b684:	7ffb      	ldrb	r3, [r7, #31]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d011      	beq.n	800b6ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	899b      	ldrh	r3, [r3, #12]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	b21b      	sxth	r3, r3
 800b692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b696:	b21c      	sxth	r4, r3
 800b698:	2011      	movs	r0, #17
 800b69a:	f7f9 f857 	bl	800474c <lwip_htons>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	b21b      	sxth	r3, r3
 800b6a2:	4323      	orrs	r3, r4
 800b6a4:	b21b      	sxth	r3, r3
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	819a      	strh	r2, [r3, #12]
 800b6ac:	e010      	b.n	800b6d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	3314      	adds	r3, #20
 800b6b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	6858      	ldr	r0, [r3, #4]
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	891a      	ldrh	r2, [r3, #8]
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	891b      	ldrh	r3, [r3, #8]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	6939      	ldr	r1, [r7, #16]
 800b6cc:	f7fa fe52 	bl	8006374 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f9 f84d 	bl	8004776 <lwip_htonl>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	da02      	bge.n	800b6f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	69b9      	ldr	r1, [r7, #24]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fded 	bl	800b2dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3304      	adds	r3, #4
 800b708:	69b9      	ldr	r1, [r7, #24]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fe26 	bl	800b35c <tcp_output_control_segment>
 800b710:	4603      	mov	r3, r0
 800b712:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b714:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	372c      	adds	r7, #44	; 0x2c
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd90      	pop	{r4, r7, pc}
 800b720:	08011244 	.word	0x08011244
 800b724:	08011a3c 	.word	0x08011a3c
 800b728:	08011298 	.word	0x08011298

0800b72c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b734:	f7fa ff0c 	bl	8006550 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b738:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <tcpip_tcp_timer+0x38>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d103      	bne.n	800b748 <tcpip_tcp_timer+0x1c>
 800b740:	4b09      	ldr	r3, [pc, #36]	; (800b768 <tcpip_tcp_timer+0x3c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b748:	2200      	movs	r2, #0
 800b74a:	4908      	ldr	r1, [pc, #32]	; (800b76c <tcpip_tcp_timer+0x40>)
 800b74c:	20fa      	movs	r0, #250	; 0xfa
 800b74e:	f000 f8f3 	bl	800b938 <sys_timeout>
 800b752:	e003      	b.n	800b75c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b754:	4b06      	ldr	r3, [pc, #24]	; (800b770 <tcpip_tcp_timer+0x44>)
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
  }
}
 800b75a:	bf00      	nop
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	20008298 	.word	0x20008298
 800b768:	2000829c 	.word	0x2000829c
 800b76c:	0800b72d 	.word	0x0800b72d
 800b770:	200082e4 	.word	0x200082e4

0800b774 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <tcp_timer_needed+0x30>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10f      	bne.n	800b7a0 <tcp_timer_needed+0x2c>
 800b780:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <tcp_timer_needed+0x34>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <tcp_timer_needed+0x1c>
 800b788:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <tcp_timer_needed+0x38>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <tcp_timer_needed+0x30>)
 800b792:	2201      	movs	r2, #1
 800b794:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b796:	2200      	movs	r2, #0
 800b798:	4905      	ldr	r1, [pc, #20]	; (800b7b0 <tcp_timer_needed+0x3c>)
 800b79a:	20fa      	movs	r0, #250	; 0xfa
 800b79c:	f000 f8cc 	bl	800b938 <sys_timeout>
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	200082e4 	.word	0x200082e4
 800b7a8:	20008298 	.word	0x20008298
 800b7ac:	2000829c 	.word	0x2000829c
 800b7b0:	0800b72d 	.word	0x0800b72d

0800b7b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b7c0:	2006      	movs	r0, #6
 800b7c2:	f7f9 fcf7 	bl	80051b4 <memp_malloc>
 800b7c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d151      	bne.n	800b878 <sys_timeout_abs+0xc4>
 800b7d4:	4b2a      	ldr	r3, [pc, #168]	; (800b880 <sys_timeout_abs+0xcc>)
 800b7d6:	22be      	movs	r2, #190	; 0xbe
 800b7d8:	492a      	ldr	r1, [pc, #168]	; (800b884 <sys_timeout_abs+0xd0>)
 800b7da:	482b      	ldr	r0, [pc, #172]	; (800b888 <sys_timeout_abs+0xd4>)
 800b7dc:	f003 f97c 	bl	800ead8 <iprintf>
    return;
 800b7e0:	e04a      	b.n	800b878 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <sys_timeout_abs+0xd8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d103      	bne.n	800b80a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b802:	4a22      	ldr	r2, [pc, #136]	; (800b88c <sys_timeout_abs+0xd8>)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6013      	str	r3, [r2, #0]
    return;
 800b808:	e037      	b.n	800b87a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	4b1f      	ldr	r3, [pc, #124]	; (800b88c <sys_timeout_abs+0xd8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	0fdb      	lsrs	r3, r3, #31
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b822:	4b1a      	ldr	r3, [pc, #104]	; (800b88c <sys_timeout_abs+0xd8>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b82a:	4a18      	ldr	r2, [pc, #96]	; (800b88c <sys_timeout_abs+0xd8>)
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	e023      	b.n	800b87a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b832:	4b16      	ldr	r3, [pc, #88]	; (800b88c <sys_timeout_abs+0xd8>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	e01a      	b.n	800b870 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <sys_timeout_abs+0xa6>
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	0fdb      	lsrs	r3, r3, #31
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	601a      	str	r2, [r3, #0]
        break;
 800b868:	e007      	b.n	800b87a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	617b      	str	r3, [r7, #20]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e1      	bne.n	800b83a <sys_timeout_abs+0x86>
 800b876:	e000      	b.n	800b87a <sys_timeout_abs+0xc6>
    return;
 800b878:	bf00      	nop
      }
    }
  }
}
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	08011a60 	.word	0x08011a60
 800b884:	08011a94 	.word	0x08011a94
 800b888:	08011ad4 	.word	0x08011ad4
 800b88c:	200082dc 	.word	0x200082dc

0800b890 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4798      	blx	r3

  now = sys_now();
 800b8a2:	f7f8 fd5b 	bl	800435c <sys_now>
 800b8a6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	4b0f      	ldr	r3, [pc, #60]	; (800b8ec <lwip_cyclic_timer+0x5c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	0fdb      	lsrs	r3, r3, #31
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d009      	beq.n	800b8da <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4907      	ldr	r1, [pc, #28]	; (800b8f0 <lwip_cyclic_timer+0x60>)
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff ff6e 	bl	800b7b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b8d8:	e004      	b.n	800b8e4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4904      	ldr	r1, [pc, #16]	; (800b8f0 <lwip_cyclic_timer+0x60>)
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff ff68 	bl	800b7b4 <sys_timeout_abs>
}
 800b8e4:	bf00      	nop
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	200082e0 	.word	0x200082e0
 800b8f0:	0800b891 	.word	0x0800b891

0800b8f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	e00e      	b.n	800b91e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b900:	4a0b      	ldr	r2, [pc, #44]	; (800b930 <sys_timeouts_init+0x3c>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	4a08      	ldr	r2, [pc, #32]	; (800b930 <sys_timeouts_init+0x3c>)
 800b90e:	4413      	add	r3, r2
 800b910:	461a      	mov	r2, r3
 800b912:	4908      	ldr	r1, [pc, #32]	; (800b934 <sys_timeouts_init+0x40>)
 800b914:	f000 f810 	bl	800b938 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3301      	adds	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d9ed      	bls.n	800b900 <sys_timeouts_init+0xc>
  }
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	0801264c 	.word	0x0801264c
 800b934:	0800b891 	.word	0x0800b891

0800b938 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94a:	d306      	bcc.n	800b95a <sys_timeout+0x22>
 800b94c:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <sys_timeout+0x40>)
 800b94e:	f240 1229 	movw	r2, #297	; 0x129
 800b952:	490a      	ldr	r1, [pc, #40]	; (800b97c <sys_timeout+0x44>)
 800b954:	480a      	ldr	r0, [pc, #40]	; (800b980 <sys_timeout+0x48>)
 800b956:	f003 f8bf 	bl	800ead8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b95a:	f7f8 fcff 	bl	800435c <sys_now>
 800b95e:	4602      	mov	r2, r0
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	6978      	ldr	r0, [r7, #20]
 800b96c:	f7ff ff22 	bl	800b7b4 <sys_timeout_abs>
#endif
}
 800b970:	bf00      	nop
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	08011a60 	.word	0x08011a60
 800b97c:	08011afc 	.word	0x08011afc
 800b980:	08011ad4 	.word	0x08011ad4

0800b984 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b98a:	f7f8 fce7 	bl	800435c <sys_now>
 800b98e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b990:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <sys_check_timeouts+0x78>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <sys_check_timeouts+0x1a>
 800b99a:	f7f9 ffb7 	bl	800590c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b99e:	4b18      	ldr	r3, [pc, #96]	; (800ba00 <sys_check_timeouts+0x7c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d022      	beq.n	800b9f0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	0fdb      	lsrs	r3, r3, #31
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d11a      	bne.n	800b9f4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a0f      	ldr	r2, [pc, #60]	; (800ba00 <sys_check_timeouts+0x7c>)
 800b9c4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4a0b      	ldr	r2, [pc, #44]	; (800ba04 <sys_check_timeouts+0x80>)
 800b9d8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	2006      	movs	r0, #6
 800b9de:	f7f9 fc59 	bl	8005294 <memp_free>
    if (handler != NULL) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0d3      	beq.n	800b990 <sys_check_timeouts+0xc>
      handler(arg);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6838      	ldr	r0, [r7, #0]
 800b9ec:	4798      	blx	r3
  do {
 800b9ee:	e7cf      	b.n	800b990 <sys_check_timeouts+0xc>
      return;
 800b9f0:	bf00      	nop
 800b9f2:	e000      	b.n	800b9f6 <sys_check_timeouts+0x72>
      return;
 800b9f4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20008289 	.word	0x20008289
 800ba00:	200082dc 	.word	0x200082dc
 800ba04:	200082e0 	.word	0x200082e0

0800ba08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba0c:	f003 f87c 	bl	800eb08 <rand>
 800ba10:	4603      	mov	r3, r0
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	4b01      	ldr	r3, [pc, #4]	; (800ba28 <udp_init+0x20>)
 800ba22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba24:	bf00      	nop
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20000028 	.word	0x20000028

0800ba2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ba36:	4b17      	ldr	r3, [pc, #92]	; (800ba94 <udp_new_port+0x68>)
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	b291      	uxth	r1, r2
 800ba3e:	4a15      	ldr	r2, [pc, #84]	; (800ba94 <udp_new_port+0x68>)
 800ba40:	8011      	strh	r1, [r2, #0]
 800ba42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d103      	bne.n	800ba52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ba4a:	4b12      	ldr	r3, [pc, #72]	; (800ba94 <udp_new_port+0x68>)
 800ba4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ba50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba52:	4b11      	ldr	r3, [pc, #68]	; (800ba98 <udp_new_port+0x6c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	e011      	b.n	800ba7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	8a5a      	ldrh	r2, [r3, #18]
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <udp_new_port+0x68>)
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d108      	bne.n	800ba78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	80fb      	strh	r3, [r7, #6]
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba72:	d3e0      	bcc.n	800ba36 <udp_new_port+0xa>
        return 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	e007      	b.n	800ba88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	603b      	str	r3, [r7, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1ea      	bne.n	800ba5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ba84:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <udp_new_port+0x68>)
 800ba86:	881b      	ldrh	r3, [r3, #0]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	20000028 	.word	0x20000028
 800ba98:	200082e8 	.word	0x200082e8

0800ba9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	4613      	mov	r3, r2
 800baa8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d105      	bne.n	800babc <udp_input_local_match+0x20>
 800bab0:	4b27      	ldr	r3, [pc, #156]	; (800bb50 <udp_input_local_match+0xb4>)
 800bab2:	2287      	movs	r2, #135	; 0x87
 800bab4:	4927      	ldr	r1, [pc, #156]	; (800bb54 <udp_input_local_match+0xb8>)
 800bab6:	4828      	ldr	r0, [pc, #160]	; (800bb58 <udp_input_local_match+0xbc>)
 800bab8:	f003 f80e 	bl	800ead8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d105      	bne.n	800bace <udp_input_local_match+0x32>
 800bac2:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <udp_input_local_match+0xb4>)
 800bac4:	2288      	movs	r2, #136	; 0x88
 800bac6:	4925      	ldr	r1, [pc, #148]	; (800bb5c <udp_input_local_match+0xc0>)
 800bac8:	4823      	ldr	r0, [pc, #140]	; (800bb58 <udp_input_local_match+0xbc>)
 800baca:	f003 f805 	bl	800ead8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	7a1b      	ldrb	r3, [r3, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00b      	beq.n	800baee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7a1a      	ldrb	r2, [r3, #8]
 800bada:	4b21      	ldr	r3, [pc, #132]	; (800bb60 <udp_input_local_match+0xc4>)
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bae2:	3301      	adds	r3, #1
 800bae4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d001      	beq.n	800baee <udp_input_local_match+0x52>
    return 0;
 800baea:	2300      	movs	r3, #0
 800baec:	e02b      	b.n	800bb46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d018      	beq.n	800bb26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d013      	beq.n	800bb22 <udp_input_local_match+0x86>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bb02:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <udp_input_local_match+0xc4>)
 800bb04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d00a      	beq.n	800bb22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <udp_input_local_match+0xc4>)
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	405a      	eors	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	3308      	adds	r3, #8
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d110      	bne.n	800bb44 <udp_input_local_match+0xa8>
          return 1;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e00f      	b.n	800bb46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <udp_input_local_match+0xa4>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <udp_input_local_match+0xa4>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <udp_input_local_match+0xc4>)
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d101      	bne.n	800bb44 <udp_input_local_match+0xa8>
        return 1;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	08011b48 	.word	0x08011b48
 800bb54:	08011b78 	.word	0x08011b78
 800bb58:	08011b9c 	.word	0x08011b9c
 800bb5c:	08011bc4 	.word	0x08011bc4
 800bb60:	20004d1c 	.word	0x20004d1c

0800bb64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b08d      	sub	sp, #52	; 0x34
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d105      	bne.n	800bb84 <udp_input+0x20>
 800bb78:	4b7c      	ldr	r3, [pc, #496]	; (800bd6c <udp_input+0x208>)
 800bb7a:	22cf      	movs	r2, #207	; 0xcf
 800bb7c:	497c      	ldr	r1, [pc, #496]	; (800bd70 <udp_input+0x20c>)
 800bb7e:	487d      	ldr	r0, [pc, #500]	; (800bd74 <udp_input+0x210>)
 800bb80:	f002 ffaa 	bl	800ead8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d105      	bne.n	800bb96 <udp_input+0x32>
 800bb8a:	4b78      	ldr	r3, [pc, #480]	; (800bd6c <udp_input+0x208>)
 800bb8c:	22d0      	movs	r2, #208	; 0xd0
 800bb8e:	497a      	ldr	r1, [pc, #488]	; (800bd78 <udp_input+0x214>)
 800bb90:	4878      	ldr	r0, [pc, #480]	; (800bd74 <udp_input+0x210>)
 800bb92:	f002 ffa1 	bl	800ead8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	895b      	ldrh	r3, [r3, #10]
 800bb9a:	2b07      	cmp	r3, #7
 800bb9c:	d803      	bhi.n	800bba6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7fa f9ee 	bl	8005f80 <pbuf_free>
    goto end;
 800bba4:	e0de      	b.n	800bd64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bbac:	4b73      	ldr	r3, [pc, #460]	; (800bd7c <udp_input+0x218>)
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	4a72      	ldr	r2, [pc, #456]	; (800bd7c <udp_input+0x218>)
 800bbb2:	6812      	ldr	r2, [r2, #0]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f001 ffee 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7f8 fdc0 	bl	800474c <lwip_htons>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	885b      	ldrh	r3, [r3, #2]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7f8 fdb8 	bl	800474c <lwip_htons>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbec:	4b64      	ldr	r3, [pc, #400]	; (800bd80 <udp_input+0x21c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf2:	e054      	b.n	800bc9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	8a5b      	ldrh	r3, [r3, #18]
 800bbf8:	89fa      	ldrh	r2, [r7, #14]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d14a      	bne.n	800bc94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bbfe:	7cfb      	ldrb	r3, [r7, #19]
 800bc00:	461a      	mov	r2, r3
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc06:	f7ff ff49 	bl	800ba9c <udp_input_local_match>
 800bc0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d041      	beq.n	800bc94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	7c1b      	ldrb	r3, [r3, #16]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d11d      	bne.n	800bc58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d102      	bne.n	800bc28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	61fb      	str	r3, [r7, #28]
 800bc26:	e017      	b.n	800bc58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bc28:	7cfb      	ldrb	r3, [r7, #19]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d014      	beq.n	800bc58 <udp_input+0xf4>
 800bc2e:	4b53      	ldr	r3, [pc, #332]	; (800bd7c <udp_input+0x218>)
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc36:	d10f      	bne.n	800bc58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d008      	beq.n	800bc58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d101      	bne.n	800bc58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	8a9b      	ldrh	r3, [r3, #20]
 800bc5c:	8a3a      	ldrh	r2, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d118      	bne.n	800bc94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	4b43      	ldr	r3, [pc, #268]	; (800bd7c <udp_input+0x218>)
 800bc70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d10e      	bne.n	800bc94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d014      	beq.n	800bca6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	68da      	ldr	r2, [r3, #12]
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc84:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <udp_input+0x21c>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc8c:	4a3c      	ldr	r2, [pc, #240]	; (800bd80 <udp_input+0x21c>)
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc92:	e008      	b.n	800bca6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1a7      	bne.n	800bbf4 <udp_input+0x90>
 800bca4:	e000      	b.n	800bca8 <udp_input+0x144>
        break;
 800bca6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <udp_input+0x15a>
    for_us = 1;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	76fb      	strb	r3, [r7, #27]
 800bcbc:	e00a      	b.n	800bcd4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	4b2d      	ldr	r3, [pc, #180]	; (800bd7c <udp_input+0x218>)
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bf0c      	ite	eq
 800bccc:	2301      	moveq	r3, #1
 800bcce:	2300      	movne	r3, #0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bcd4:	7efb      	ldrb	r3, [r7, #27]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d041      	beq.n	800bd5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bcda:	2108      	movs	r1, #8
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7fa f8c9 	bl	8005e74 <pbuf_remove_header>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00a      	beq.n	800bcfe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bce8:	4b20      	ldr	r3, [pc, #128]	; (800bd6c <udp_input+0x208>)
 800bcea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bcee:	4925      	ldr	r1, [pc, #148]	; (800bd84 <udp_input+0x220>)
 800bcf0:	4820      	ldr	r0, [pc, #128]	; (800bd74 <udp_input+0x210>)
 800bcf2:	f002 fef1 	bl	800ead8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7fa f942 	bl	8005f80 <pbuf_free>
      goto end;
 800bcfc:	e032      	b.n	800bd64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d012      	beq.n	800bd2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00a      	beq.n	800bd22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0e:	699c      	ldr	r4, [r3, #24]
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	69d8      	ldr	r0, [r3, #28]
 800bd14:	8a3b      	ldrh	r3, [r7, #16]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <udp_input+0x224>)
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bd20:	e021      	b.n	800bd66 <udp_input+0x202>
        pbuf_free(p);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7fa f92c 	bl	8005f80 <pbuf_free>
        goto end;
 800bd28:	e01c      	b.n	800bd64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bd2a:	7cfb      	ldrb	r3, [r7, #19]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d112      	bne.n	800bd56 <udp_input+0x1f2>
 800bd30:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <udp_input+0x218>)
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd38:	2be0      	cmp	r3, #224	; 0xe0
 800bd3a:	d00c      	beq.n	800bd56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <udp_input+0x218>)
 800bd3e:	899b      	ldrh	r3, [r3, #12]
 800bd40:	3308      	adds	r3, #8
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7fa f906 	bl	8005f5a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bd4e:	2103      	movs	r1, #3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f001 fbf7 	bl	800d544 <icmp_dest_unreach>
      pbuf_free(p);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7fa f912 	bl	8005f80 <pbuf_free>
  return;
 800bd5c:	e003      	b.n	800bd66 <udp_input+0x202>
    pbuf_free(p);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fa f90e 	bl	8005f80 <pbuf_free>
  return;
 800bd64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd66:	372c      	adds	r7, #44	; 0x2c
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd90      	pop	{r4, r7, pc}
 800bd6c:	08011b48 	.word	0x08011b48
 800bd70:	08011bec 	.word	0x08011bec
 800bd74:	08011b9c 	.word	0x08011b9c
 800bd78:	08011c04 	.word	0x08011c04
 800bd7c:	20004d1c 	.word	0x20004d1c
 800bd80:	200082e8 	.word	0x200082e8
 800bd84:	08011c20 	.word	0x08011c20
 800bd88:	20004d2c 	.word	0x20004d2c

0800bd8c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <udp_send+0x24>
 800bd9c:	4b11      	ldr	r3, [pc, #68]	; (800bde4 <udp_send+0x58>)
 800bd9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bda2:	4911      	ldr	r1, [pc, #68]	; (800bde8 <udp_send+0x5c>)
 800bda4:	4811      	ldr	r0, [pc, #68]	; (800bdec <udp_send+0x60>)
 800bda6:	f002 fe97 	bl	800ead8 <iprintf>
 800bdaa:	f06f 030f 	mvn.w	r3, #15
 800bdae:	e015      	b.n	800bddc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d109      	bne.n	800bdca <udp_send+0x3e>
 800bdb6:	4b0b      	ldr	r3, [pc, #44]	; (800bde4 <udp_send+0x58>)
 800bdb8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bdbc:	490c      	ldr	r1, [pc, #48]	; (800bdf0 <udp_send+0x64>)
 800bdbe:	480b      	ldr	r0, [pc, #44]	; (800bdec <udp_send+0x60>)
 800bdc0:	f002 fe8a 	bl	800ead8 <iprintf>
 800bdc4:	f06f 030f 	mvn.w	r3, #15
 800bdc8:	e008      	b.n	800bddc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	1d1a      	adds	r2, r3, #4
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	8a9b      	ldrh	r3, [r3, #20]
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f80d 	bl	800bdf4 <udp_sendto>
 800bdda:	4603      	mov	r3, r0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	08011b48 	.word	0x08011b48
 800bde8:	08011c3c 	.word	0x08011c3c
 800bdec:	08011b9c 	.word	0x08011b9c
 800bdf0:	08011c54 	.word	0x08011c54

0800bdf4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d109      	bne.n	800be1c <udp_sendto+0x28>
 800be08:	4b23      	ldr	r3, [pc, #140]	; (800be98 <udp_sendto+0xa4>)
 800be0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800be0e:	4923      	ldr	r1, [pc, #140]	; (800be9c <udp_sendto+0xa8>)
 800be10:	4823      	ldr	r0, [pc, #140]	; (800bea0 <udp_sendto+0xac>)
 800be12:	f002 fe61 	bl	800ead8 <iprintf>
 800be16:	f06f 030f 	mvn.w	r3, #15
 800be1a:	e038      	b.n	800be8e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d109      	bne.n	800be36 <udp_sendto+0x42>
 800be22:	4b1d      	ldr	r3, [pc, #116]	; (800be98 <udp_sendto+0xa4>)
 800be24:	f240 2219 	movw	r2, #537	; 0x219
 800be28:	491e      	ldr	r1, [pc, #120]	; (800bea4 <udp_sendto+0xb0>)
 800be2a:	481d      	ldr	r0, [pc, #116]	; (800bea0 <udp_sendto+0xac>)
 800be2c:	f002 fe54 	bl	800ead8 <iprintf>
 800be30:	f06f 030f 	mvn.w	r3, #15
 800be34:	e02b      	b.n	800be8e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d109      	bne.n	800be50 <udp_sendto+0x5c>
 800be3c:	4b16      	ldr	r3, [pc, #88]	; (800be98 <udp_sendto+0xa4>)
 800be3e:	f240 221a 	movw	r2, #538	; 0x21a
 800be42:	4919      	ldr	r1, [pc, #100]	; (800bea8 <udp_sendto+0xb4>)
 800be44:	4816      	ldr	r0, [pc, #88]	; (800bea0 <udp_sendto+0xac>)
 800be46:	f002 fe47 	bl	800ead8 <iprintf>
 800be4a:	f06f 030f 	mvn.w	r3, #15
 800be4e:	e01e      	b.n	800be8e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	7a1b      	ldrb	r3, [r3, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d006      	beq.n	800be66 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	7a1b      	ldrb	r3, [r3, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f9 fd2f 	bl	80058c0 <netif_get_by_index>
 800be62:	6178      	str	r0, [r7, #20]
 800be64:	e003      	b.n	800be6e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 fc00 	bl	800d66c <ip4_route>
 800be6c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d102      	bne.n	800be7a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800be74:	f06f 0303 	mvn.w	r3, #3
 800be78:	e009      	b.n	800be8e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800be7a:	887a      	ldrh	r2, [r7, #2]
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	4613      	mov	r3, r2
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f810 	bl	800beac <udp_sendto_if>
 800be8c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	08011b48 	.word	0x08011b48
 800be9c:	08011c6c 	.word	0x08011c6c
 800bea0:	08011b9c 	.word	0x08011b9c
 800bea4:	08011c84 	.word	0x08011c84
 800bea8:	08011ca0 	.word	0x08011ca0

0800beac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d109      	bne.n	800bed4 <udp_sendto_if+0x28>
 800bec0:	4b2e      	ldr	r3, [pc, #184]	; (800bf7c <udp_sendto_if+0xd0>)
 800bec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bec6:	492e      	ldr	r1, [pc, #184]	; (800bf80 <udp_sendto_if+0xd4>)
 800bec8:	482e      	ldr	r0, [pc, #184]	; (800bf84 <udp_sendto_if+0xd8>)
 800beca:	f002 fe05 	bl	800ead8 <iprintf>
 800bece:	f06f 030f 	mvn.w	r3, #15
 800bed2:	e04f      	b.n	800bf74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <udp_sendto_if+0x42>
 800beda:	4b28      	ldr	r3, [pc, #160]	; (800bf7c <udp_sendto_if+0xd0>)
 800bedc:	f240 2281 	movw	r2, #641	; 0x281
 800bee0:	4929      	ldr	r1, [pc, #164]	; (800bf88 <udp_sendto_if+0xdc>)
 800bee2:	4828      	ldr	r0, [pc, #160]	; (800bf84 <udp_sendto_if+0xd8>)
 800bee4:	f002 fdf8 	bl	800ead8 <iprintf>
 800bee8:	f06f 030f 	mvn.w	r3, #15
 800beec:	e042      	b.n	800bf74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d109      	bne.n	800bf08 <udp_sendto_if+0x5c>
 800bef4:	4b21      	ldr	r3, [pc, #132]	; (800bf7c <udp_sendto_if+0xd0>)
 800bef6:	f240 2282 	movw	r2, #642	; 0x282
 800befa:	4924      	ldr	r1, [pc, #144]	; (800bf8c <udp_sendto_if+0xe0>)
 800befc:	4821      	ldr	r0, [pc, #132]	; (800bf84 <udp_sendto_if+0xd8>)
 800befe:	f002 fdeb 	bl	800ead8 <iprintf>
 800bf02:	f06f 030f 	mvn.w	r3, #15
 800bf06:	e035      	b.n	800bf74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <udp_sendto_if+0x76>
 800bf0e:	4b1b      	ldr	r3, [pc, #108]	; (800bf7c <udp_sendto_if+0xd0>)
 800bf10:	f240 2283 	movw	r2, #643	; 0x283
 800bf14:	491e      	ldr	r1, [pc, #120]	; (800bf90 <udp_sendto_if+0xe4>)
 800bf16:	481b      	ldr	r0, [pc, #108]	; (800bf84 <udp_sendto_if+0xd8>)
 800bf18:	f002 fdde 	bl	800ead8 <iprintf>
 800bf1c:	f06f 030f 	mvn.w	r3, #15
 800bf20:	e028      	b.n	800bf74 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d009      	beq.n	800bf3c <udp_sendto_if+0x90>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf38:	2be0      	cmp	r3, #224	; 0xe0
 800bf3a:	d103      	bne.n	800bf44 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	617b      	str	r3, [r7, #20]
 800bf42:	e00b      	b.n	800bf5c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d002      	beq.n	800bf58 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bf52:	f06f 0303 	mvn.w	r3, #3
 800bf56:	e00d      	b.n	800bf74 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bf5c:	887a      	ldrh	r2, [r7, #2]
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4613      	mov	r3, r2
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f811 	bl	800bf94 <udp_sendto_if_src>
 800bf72:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	08011b48 	.word	0x08011b48
 800bf80:	08011cbc 	.word	0x08011cbc
 800bf84:	08011b9c 	.word	0x08011b9c
 800bf88:	08011cd8 	.word	0x08011cd8
 800bf8c:	08011cf4 	.word	0x08011cf4
 800bf90:	08011d14 	.word	0x08011d14

0800bf94 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08c      	sub	sp, #48	; 0x30
 800bf98:	af04      	add	r7, sp, #16
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d109      	bne.n	800bfbc <udp_sendto_if_src+0x28>
 800bfa8:	4b65      	ldr	r3, [pc, #404]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800bfaa:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bfae:	4965      	ldr	r1, [pc, #404]	; (800c144 <udp_sendto_if_src+0x1b0>)
 800bfb0:	4865      	ldr	r0, [pc, #404]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800bfb2:	f002 fd91 	bl	800ead8 <iprintf>
 800bfb6:	f06f 030f 	mvn.w	r3, #15
 800bfba:	e0bc      	b.n	800c136 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d109      	bne.n	800bfd6 <udp_sendto_if_src+0x42>
 800bfc2:	4b5f      	ldr	r3, [pc, #380]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800bfc4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bfc8:	4960      	ldr	r1, [pc, #384]	; (800c14c <udp_sendto_if_src+0x1b8>)
 800bfca:	485f      	ldr	r0, [pc, #380]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800bfcc:	f002 fd84 	bl	800ead8 <iprintf>
 800bfd0:	f06f 030f 	mvn.w	r3, #15
 800bfd4:	e0af      	b.n	800c136 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d109      	bne.n	800bff0 <udp_sendto_if_src+0x5c>
 800bfdc:	4b58      	ldr	r3, [pc, #352]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800bfde:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bfe2:	495b      	ldr	r1, [pc, #364]	; (800c150 <udp_sendto_if_src+0x1bc>)
 800bfe4:	4858      	ldr	r0, [pc, #352]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800bfe6:	f002 fd77 	bl	800ead8 <iprintf>
 800bfea:	f06f 030f 	mvn.w	r3, #15
 800bfee:	e0a2      	b.n	800c136 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d109      	bne.n	800c00a <udp_sendto_if_src+0x76>
 800bff6:	4b52      	ldr	r3, [pc, #328]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800bff8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bffc:	4955      	ldr	r1, [pc, #340]	; (800c154 <udp_sendto_if_src+0x1c0>)
 800bffe:	4852      	ldr	r0, [pc, #328]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800c000:	f002 fd6a 	bl	800ead8 <iprintf>
 800c004:	f06f 030f 	mvn.w	r3, #15
 800c008:	e095      	b.n	800c136 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d109      	bne.n	800c024 <udp_sendto_if_src+0x90>
 800c010:	4b4b      	ldr	r3, [pc, #300]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800c012:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c016:	4950      	ldr	r1, [pc, #320]	; (800c158 <udp_sendto_if_src+0x1c4>)
 800c018:	484b      	ldr	r0, [pc, #300]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800c01a:	f002 fd5d 	bl	800ead8 <iprintf>
 800c01e:	f06f 030f 	mvn.w	r3, #15
 800c022:	e088      	b.n	800c136 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	8a5b      	ldrh	r3, [r3, #18]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10f      	bne.n	800c04c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c02c:	68f9      	ldr	r1, [r7, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	8a5b      	ldrh	r3, [r3, #18]
 800c032:	461a      	mov	r2, r3
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 f893 	bl	800c160 <udp_bind>
 800c03a:	4603      	mov	r3, r0
 800c03c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c03e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c046:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c04a:	e074      	b.n	800c136 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	891b      	ldrh	r3, [r3, #8]
 800c050:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c054:	4293      	cmp	r3, r2
 800c056:	d902      	bls.n	800c05e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c058:	f04f 33ff 	mov.w	r3, #4294967295
 800c05c:	e06b      	b.n	800c136 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c05e:	2108      	movs	r1, #8
 800c060:	68b8      	ldr	r0, [r7, #8]
 800c062:	f7f9 fef7 	bl	8005e54 <pbuf_add_header>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d015      	beq.n	800c098 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c06c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c070:	2108      	movs	r1, #8
 800c072:	2022      	movs	r0, #34	; 0x22
 800c074:	f7f9 fca0 	bl	80059b8 <pbuf_alloc>
 800c078:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c080:	f04f 33ff 	mov.w	r3, #4294967295
 800c084:	e057      	b.n	800c136 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	891b      	ldrh	r3, [r3, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	69f8      	ldr	r0, [r7, #28]
 800c092:	f7fa f88d 	bl	80061b0 <pbuf_chain>
 800c096:	e001      	b.n	800c09c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	895b      	ldrh	r3, [r3, #10]
 800c0a0:	2b07      	cmp	r3, #7
 800c0a2:	d806      	bhi.n	800c0b2 <udp_sendto_if_src+0x11e>
 800c0a4:	4b26      	ldr	r3, [pc, #152]	; (800c140 <udp_sendto_if_src+0x1ac>)
 800c0a6:	f240 320d 	movw	r2, #781	; 0x30d
 800c0aa:	492c      	ldr	r1, [pc, #176]	; (800c15c <udp_sendto_if_src+0x1c8>)
 800c0ac:	4826      	ldr	r0, [pc, #152]	; (800c148 <udp_sendto_if_src+0x1b4>)
 800c0ae:	f002 fd13 	bl	800ead8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	8a5b      	ldrh	r3, [r3, #18]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7f8 fb45 	bl	800474c <lwip_htons>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c0ca:	887b      	ldrh	r3, [r7, #2]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f8 fb3d 	bl	800474c <lwip_htons>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	719a      	strb	r2, [r3, #6]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	891b      	ldrh	r3, [r3, #8]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f8 fb2f 	bl	800474c <lwip_htons>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c0f6:	2311      	movs	r3, #17
 800c0f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	7adb      	ldrb	r3, [r3, #11]
 800c0fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	7a9b      	ldrb	r3, [r3, #10]
 800c104:	7cb9      	ldrb	r1, [r7, #18]
 800c106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c108:	9202      	str	r2, [sp, #8]
 800c10a:	7cfa      	ldrb	r2, [r7, #19]
 800c10c:	9201      	str	r2, [sp, #4]
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c116:	69f8      	ldr	r0, [r7, #28]
 800c118:	f001 fc90 	bl	800da3c <ip4_output_if_src>
 800c11c:	4603      	mov	r3, r0
 800c11e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	429a      	cmp	r2, r3
 800c126:	d004      	beq.n	800c132 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c128:	69f8      	ldr	r0, [r7, #28]
 800c12a:	f7f9 ff29 	bl	8005f80 <pbuf_free>
    q = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c132:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3720      	adds	r7, #32
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08011b48 	.word	0x08011b48
 800c144:	08011d34 	.word	0x08011d34
 800c148:	08011b9c 	.word	0x08011b9c
 800c14c:	08011d54 	.word	0x08011d54
 800c150:	08011d74 	.word	0x08011d74
 800c154:	08011d98 	.word	0x08011d98
 800c158:	08011dbc 	.word	0x08011dbc
 800c15c:	08011de0 	.word	0x08011de0

0800c160 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	4613      	mov	r3, r2
 800c16c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c174:	4b39      	ldr	r3, [pc, #228]	; (800c25c <udp_bind+0xfc>)
 800c176:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d109      	bne.n	800c192 <udp_bind+0x32>
 800c17e:	4b38      	ldr	r3, [pc, #224]	; (800c260 <udp_bind+0x100>)
 800c180:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c184:	4937      	ldr	r1, [pc, #220]	; (800c264 <udp_bind+0x104>)
 800c186:	4838      	ldr	r0, [pc, #224]	; (800c268 <udp_bind+0x108>)
 800c188:	f002 fca6 	bl	800ead8 <iprintf>
 800c18c:	f06f 030f 	mvn.w	r3, #15
 800c190:	e060      	b.n	800c254 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c196:	4b35      	ldr	r3, [pc, #212]	; (800c26c <udp_bind+0x10c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	617b      	str	r3, [r7, #20]
 800c19c:	e009      	b.n	800c1b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d102      	bne.n	800c1ac <udp_bind+0x4c>
      rebind = 1;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	74fb      	strb	r3, [r7, #19]
      break;
 800c1aa:	e005      	b.n	800c1b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	617b      	str	r3, [r7, #20]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1f2      	bne.n	800c19e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c1b8:	88fb      	ldrh	r3, [r7, #6]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <udp_bind+0x72>
    port = udp_new_port();
 800c1be:	f7ff fc35 	bl	800ba2c <udp_new_port>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d12c      	bne.n	800c226 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c1cc:	f06f 0307 	mvn.w	r3, #7
 800c1d0:	e040      	b.n	800c254 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1d2:	4b26      	ldr	r3, [pc, #152]	; (800c26c <udp_bind+0x10c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	617b      	str	r3, [r7, #20]
 800c1d8:	e022      	b.n	800c220 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d01b      	beq.n	800c21a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	8a5b      	ldrh	r3, [r3, #18]
 800c1e6:	88fa      	ldrh	r2, [r7, #6]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d116      	bne.n	800c21a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d00d      	beq.n	800c214 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <udp_bind+0xb4>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d006      	beq.n	800c214 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c206:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c214:	f06f 0307 	mvn.w	r3, #7
 800c218:	e01c      	b.n	800c254 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1d9      	bne.n	800c1da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <udp_bind+0xd2>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	e000      	b.n	800c234 <udp_bind+0xd4>
 800c232:	2300      	movs	r3, #0
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	88fa      	ldrh	r2, [r7, #6]
 800c23c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c23e:	7cfb      	ldrb	r3, [r7, #19]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c244:	4b09      	ldr	r3, [pc, #36]	; (800c26c <udp_bind+0x10c>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c24c:	4a07      	ldr	r2, [pc, #28]	; (800c26c <udp_bind+0x10c>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	08012664 	.word	0x08012664
 800c260:	08011b48 	.word	0x08011b48
 800c264:	08011e10 	.word	0x08011e10
 800c268:	08011b9c 	.word	0x08011b9c
 800c26c:	200082e8 	.word	0x200082e8

0800c270 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	4613      	mov	r3, r2
 800c27c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d109      	bne.n	800c298 <udp_connect+0x28>
 800c284:	4b2c      	ldr	r3, [pc, #176]	; (800c338 <udp_connect+0xc8>)
 800c286:	f240 4235 	movw	r2, #1077	; 0x435
 800c28a:	492c      	ldr	r1, [pc, #176]	; (800c33c <udp_connect+0xcc>)
 800c28c:	482c      	ldr	r0, [pc, #176]	; (800c340 <udp_connect+0xd0>)
 800c28e:	f002 fc23 	bl	800ead8 <iprintf>
 800c292:	f06f 030f 	mvn.w	r3, #15
 800c296:	e04b      	b.n	800c330 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <udp_connect+0x42>
 800c29e:	4b26      	ldr	r3, [pc, #152]	; (800c338 <udp_connect+0xc8>)
 800c2a0:	f240 4236 	movw	r2, #1078	; 0x436
 800c2a4:	4927      	ldr	r1, [pc, #156]	; (800c344 <udp_connect+0xd4>)
 800c2a6:	4826      	ldr	r0, [pc, #152]	; (800c340 <udp_connect+0xd0>)
 800c2a8:	f002 fc16 	bl	800ead8 <iprintf>
 800c2ac:	f06f 030f 	mvn.w	r3, #15
 800c2b0:	e03e      	b.n	800c330 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	8a5b      	ldrh	r3, [r3, #18]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10f      	bne.n	800c2da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c2ba:	68f9      	ldr	r1, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8a5b      	ldrh	r3, [r3, #18]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff ff4c 	bl	800c160 <udp_bind>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c2cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <udp_connect+0x6a>
      return err;
 800c2d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2d8:	e02a      	b.n	800c330 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <udp_connect+0x76>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	e000      	b.n	800c2e8 <udp_connect+0x78>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	88fa      	ldrh	r2, [r7, #6]
 800c2f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	7c1b      	ldrb	r3, [r3, #16]
 800c2f6:	f043 0304 	orr.w	r3, r3, #4
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c300:	4b11      	ldr	r3, [pc, #68]	; (800c348 <udp_connect+0xd8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e008      	b.n	800c31a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d101      	bne.n	800c314 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e00d      	b.n	800c330 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f3      	bne.n	800c308 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c320:	4b09      	ldr	r3, [pc, #36]	; (800c348 <udp_connect+0xd8>)
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c328:	4a07      	ldr	r2, [pc, #28]	; (800c348 <udp_connect+0xd8>)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3718      	adds	r7, #24
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	08011b48 	.word	0x08011b48
 800c33c:	08011e28 	.word	0x08011e28
 800c340:	08011b9c 	.word	0x08011b9c
 800c344:	08011e44 	.word	0x08011e44
 800c348:	200082e8 	.word	0x200082e8

0800c34c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d107      	bne.n	800c36a <udp_disconnect+0x1e>
 800c35a:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <udp_disconnect+0x44>)
 800c35c:	f240 426a 	movw	r2, #1130	; 0x46a
 800c360:	490c      	ldr	r1, [pc, #48]	; (800c394 <udp_disconnect+0x48>)
 800c362:	480d      	ldr	r0, [pc, #52]	; (800c398 <udp_disconnect+0x4c>)
 800c364:	f002 fbb8 	bl	800ead8 <iprintf>
 800c368:	e00f      	b.n	800c38a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7c1b      	ldrb	r3, [r3, #16]
 800c380:	f023 0304 	bic.w	r3, r3, #4
 800c384:	b2da      	uxtb	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	741a      	strb	r2, [r3, #16]
}
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	08011b48 	.word	0x08011b48
 800c394:	08011e60 	.word	0x08011e60
 800c398:	08011b9c 	.word	0x08011b9c

0800c39c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d107      	bne.n	800c3be <udp_recv+0x22>
 800c3ae:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <udp_recv+0x34>)
 800c3b0:	f240 428a 	movw	r2, #1162	; 0x48a
 800c3b4:	4907      	ldr	r1, [pc, #28]	; (800c3d4 <udp_recv+0x38>)
 800c3b6:	4808      	ldr	r0, [pc, #32]	; (800c3d8 <udp_recv+0x3c>)
 800c3b8:	f002 fb8e 	bl	800ead8 <iprintf>
 800c3bc:	e005      	b.n	800c3ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	61da      	str	r2, [r3, #28]
}
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	08011b48 	.word	0x08011b48
 800c3d4:	08011e7c 	.word	0x08011e7c
 800c3d8:	08011b9c 	.word	0x08011b9c

0800c3dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7f8 fee6 	bl	80051b4 <memp_malloc>
 800c3e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f002 fb67 	bl	800eac8 <memset>
    pcb->ttl = UDP_TTL;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	22ff      	movs	r2, #255	; 0xff
 800c3fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c400:	687b      	ldr	r3, [r7, #4]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01e      	beq.n	800c45a <udp_netif_ip_addr_changed+0x4e>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d01a      	beq.n	800c45a <udp_netif_ip_addr_changed+0x4e>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d017      	beq.n	800c45a <udp_netif_ip_addr_changed+0x4e>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d013      	beq.n	800c45a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c432:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <udp_netif_ip_addr_changed+0x5c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	e00c      	b.n	800c454 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d103      	bne.n	800c44e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1ef      	bne.n	800c43a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	200082e8 	.word	0x200082e8

0800c46c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c474:	4915      	ldr	r1, [pc, #84]	; (800c4cc <etharp_free_entry+0x60>)
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	440b      	add	r3, r1
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d013      	beq.n	800c4b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c488:	4910      	ldr	r1, [pc, #64]	; (800c4cc <etharp_free_entry+0x60>)
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	440b      	add	r3, r1
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f7f9 fd71 	bl	8005f80 <pbuf_free>
    arp_table[i].q = NULL;
 800c49e:	490b      	ldr	r1, [pc, #44]	; (800c4cc <etharp_free_entry+0x60>)
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	4413      	add	r3, r2
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	440b      	add	r3, r1
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c4b0:	4906      	ldr	r1, [pc, #24]	; (800c4cc <etharp_free_entry+0x60>)
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	440b      	add	r3, r1
 800c4be:	3314      	adds	r3, #20
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	200082ec 	.word	0x200082ec

0800c4d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	607b      	str	r3, [r7, #4]
 800c4da:	e096      	b.n	800c60a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c4dc:	494f      	ldr	r1, [pc, #316]	; (800c61c <etharp_tmr+0x14c>)
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	4413      	add	r3, r2
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3314      	adds	r3, #20
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 8086 	beq.w	800c604 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c4f8:	4948      	ldr	r1, [pc, #288]	; (800c61c <etharp_tmr+0x14c>)
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	440b      	add	r3, r1
 800c506:	3312      	adds	r3, #18
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	3301      	adds	r3, #1
 800c50c:	b298      	uxth	r0, r3
 800c50e:	4943      	ldr	r1, [pc, #268]	; (800c61c <etharp_tmr+0x14c>)
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	4613      	mov	r3, r2
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4413      	add	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	440b      	add	r3, r1
 800c51c:	3312      	adds	r3, #18
 800c51e:	4602      	mov	r2, r0
 800c520:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c522:	493e      	ldr	r1, [pc, #248]	; (800c61c <etharp_tmr+0x14c>)
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4613      	mov	r3, r2
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4413      	add	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	440b      	add	r3, r1
 800c530:	3312      	adds	r3, #18
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c538:	d215      	bcs.n	800c566 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c53a:	4938      	ldr	r1, [pc, #224]	; (800c61c <etharp_tmr+0x14c>)
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4613      	mov	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	4413      	add	r3, r2
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	440b      	add	r3, r1
 800c548:	3314      	adds	r3, #20
 800c54a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d10e      	bne.n	800c56e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c550:	4932      	ldr	r1, [pc, #200]	; (800c61c <etharp_tmr+0x14c>)
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	4613      	mov	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	4413      	add	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	440b      	add	r3, r1
 800c55e:	3312      	adds	r3, #18
 800c560:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c562:	2b04      	cmp	r3, #4
 800c564:	d903      	bls.n	800c56e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff ff80 	bl	800c46c <etharp_free_entry>
 800c56c:	e04a      	b.n	800c604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c56e:	492b      	ldr	r1, [pc, #172]	; (800c61c <etharp_tmr+0x14c>)
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	4613      	mov	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	4413      	add	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	440b      	add	r3, r1
 800c57c:	3314      	adds	r3, #20
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d10a      	bne.n	800c59a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c584:	4925      	ldr	r1, [pc, #148]	; (800c61c <etharp_tmr+0x14c>)
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	4613      	mov	r3, r2
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	4413      	add	r3, r2
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	440b      	add	r3, r1
 800c592:	3314      	adds	r3, #20
 800c594:	2204      	movs	r2, #4
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	e034      	b.n	800c604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c59a:	4920      	ldr	r1, [pc, #128]	; (800c61c <etharp_tmr+0x14c>)
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	4413      	add	r3, r2
 800c5a4:	00db      	lsls	r3, r3, #3
 800c5a6:	440b      	add	r3, r1
 800c5a8:	3314      	adds	r3, #20
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	d10a      	bne.n	800c5c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c5b0:	491a      	ldr	r1, [pc, #104]	; (800c61c <etharp_tmr+0x14c>)
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	4413      	add	r3, r2
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	440b      	add	r3, r1
 800c5be:	3314      	adds	r3, #20
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	e01e      	b.n	800c604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c5c6:	4915      	ldr	r1, [pc, #84]	; (800c61c <etharp_tmr+0x14c>)
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	4413      	add	r3, r2
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	440b      	add	r3, r1
 800c5d4:	3314      	adds	r3, #20
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d113      	bne.n	800c604 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c5dc:	490f      	ldr	r1, [pc, #60]	; (800c61c <etharp_tmr+0x14c>)
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	4413      	add	r3, r2
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	440b      	add	r3, r1
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	6818      	ldr	r0, [r3, #0]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	4413      	add	r3, r2
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	4a08      	ldr	r2, [pc, #32]	; (800c61c <etharp_tmr+0x14c>)
 800c5fa:	4413      	add	r3, r2
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	4619      	mov	r1, r3
 800c600:	f000 fe6e 	bl	800d2e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3301      	adds	r3, #1
 800c608:	607b      	str	r3, [r7, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b09      	cmp	r3, #9
 800c60e:	f77f af65 	ble.w	800c4dc <etharp_tmr+0xc>
      }
    }
  }
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	200082ec 	.word	0x200082ec

0800c620 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08a      	sub	sp, #40	; 0x28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	460b      	mov	r3, r1
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c62e:	230a      	movs	r3, #10
 800c630:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c632:	230a      	movs	r3, #10
 800c634:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c636:	230a      	movs	r3, #10
 800c638:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c63e:	230a      	movs	r3, #10
 800c640:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	83bb      	strh	r3, [r7, #28]
 800c646:	2300      	movs	r3, #0
 800c648:	837b      	strh	r3, [r7, #26]
 800c64a:	2300      	movs	r3, #0
 800c64c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c64e:	2300      	movs	r3, #0
 800c650:	843b      	strh	r3, [r7, #32]
 800c652:	e0ae      	b.n	800c7b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c658:	49a6      	ldr	r1, [pc, #664]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c65a:	4613      	mov	r3, r2
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	4413      	add	r3, r2
 800c660:	00db      	lsls	r3, r3, #3
 800c662:	440b      	add	r3, r1
 800c664:	3314      	adds	r3, #20
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c66a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c66e:	2b0a      	cmp	r3, #10
 800c670:	d105      	bne.n	800c67e <etharp_find_entry+0x5e>
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c678:	8c3b      	ldrh	r3, [r7, #32]
 800c67a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c67c:	e095      	b.n	800c7aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 8092 	beq.w	800c7aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d009      	beq.n	800c6a0 <etharp_find_entry+0x80>
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d806      	bhi.n	800c6a0 <etharp_find_entry+0x80>
 800c692:	4b99      	ldr	r3, [pc, #612]	; (800c8f8 <etharp_find_entry+0x2d8>)
 800c694:	f240 1223 	movw	r2, #291	; 0x123
 800c698:	4998      	ldr	r1, [pc, #608]	; (800c8fc <etharp_find_entry+0x2dc>)
 800c69a:	4899      	ldr	r0, [pc, #612]	; (800c900 <etharp_find_entry+0x2e0>)
 800c69c:	f002 fa1c 	bl	800ead8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d020      	beq.n	800c6e8 <etharp_find_entry+0xc8>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6819      	ldr	r1, [r3, #0]
 800c6aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6ae:	4891      	ldr	r0, [pc, #580]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	4403      	add	r3, r0
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4299      	cmp	r1, r3
 800c6c0:	d112      	bne.n	800c6e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00c      	beq.n	800c6e2 <etharp_find_entry+0xc2>
 800c6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6cc:	4989      	ldr	r1, [pc, #548]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	440b      	add	r3, r1
 800c6d8:	3308      	adds	r3, #8
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d102      	bne.n	800c6e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c6e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6e6:	e100      	b.n	800c8ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d140      	bne.n	800c770 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6f2:	4980      	ldr	r1, [pc, #512]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	4413      	add	r3, r2
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	440b      	add	r3, r1
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d01a      	beq.n	800c73a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c708:	497a      	ldr	r1, [pc, #488]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c70a:	4613      	mov	r3, r2
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	4413      	add	r3, r2
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	440b      	add	r3, r1
 800c714:	3312      	adds	r3, #18
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	8bba      	ldrh	r2, [r7, #28]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d845      	bhi.n	800c7aa <etharp_find_entry+0x18a>
            old_queue = i;
 800c71e:	8c3b      	ldrh	r3, [r7, #32]
 800c720:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c722:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c726:	4973      	ldr	r1, [pc, #460]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c728:	4613      	mov	r3, r2
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	4413      	add	r3, r2
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	440b      	add	r3, r1
 800c732:	3312      	adds	r3, #18
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	83bb      	strh	r3, [r7, #28]
 800c738:	e037      	b.n	800c7aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c73a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c73e:	496d      	ldr	r1, [pc, #436]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c740:	4613      	mov	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	4413      	add	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	440b      	add	r3, r1
 800c74a:	3312      	adds	r3, #18
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	8b7a      	ldrh	r2, [r7, #26]
 800c750:	429a      	cmp	r2, r3
 800c752:	d82a      	bhi.n	800c7aa <etharp_find_entry+0x18a>
            old_pending = i;
 800c754:	8c3b      	ldrh	r3, [r7, #32]
 800c756:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c758:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c75c:	4965      	ldr	r1, [pc, #404]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	440b      	add	r3, r1
 800c768:	3312      	adds	r3, #18
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	837b      	strh	r3, [r7, #26]
 800c76e:	e01c      	b.n	800c7aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d919      	bls.n	800c7aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c77a:	495e      	ldr	r1, [pc, #376]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c77c:	4613      	mov	r3, r2
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	4413      	add	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	440b      	add	r3, r1
 800c786:	3312      	adds	r3, #18
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	8b3a      	ldrh	r2, [r7, #24]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d80c      	bhi.n	800c7aa <etharp_find_entry+0x18a>
            old_stable = i;
 800c790:	8c3b      	ldrh	r3, [r7, #32]
 800c792:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c798:	4956      	ldr	r1, [pc, #344]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3312      	adds	r3, #18
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7aa:	8c3b      	ldrh	r3, [r7, #32]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	843b      	strh	r3, [r7, #32]
 800c7b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c7b6:	2b09      	cmp	r3, #9
 800c7b8:	f77f af4c 	ble.w	800c654 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d108      	bne.n	800c7d8 <etharp_find_entry+0x1b8>
 800c7c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c7ca:	2b0a      	cmp	r3, #10
 800c7cc:	d107      	bne.n	800c7de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c7ce:	7afb      	ldrb	r3, [r7, #11]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7dc:	e085      	b.n	800c8ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c7de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c7e2:	2b09      	cmp	r3, #9
 800c7e4:	dc02      	bgt.n	800c7ec <etharp_find_entry+0x1cc>
    i = empty;
 800c7e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7e8:	843b      	strh	r3, [r7, #32]
 800c7ea:	e039      	b.n	800c860 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c7ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c7f0:	2b09      	cmp	r3, #9
 800c7f2:	dc14      	bgt.n	800c81e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c7f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7fc:	493d      	ldr	r1, [pc, #244]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c7fe:	4613      	mov	r3, r2
 800c800:	005b      	lsls	r3, r3, #1
 800c802:	4413      	add	r3, r2
 800c804:	00db      	lsls	r3, r3, #3
 800c806:	440b      	add	r3, r1
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d018      	beq.n	800c840 <etharp_find_entry+0x220>
 800c80e:	4b3a      	ldr	r3, [pc, #232]	; (800c8f8 <etharp_find_entry+0x2d8>)
 800c810:	f240 126d 	movw	r2, #365	; 0x16d
 800c814:	493b      	ldr	r1, [pc, #236]	; (800c904 <etharp_find_entry+0x2e4>)
 800c816:	483a      	ldr	r0, [pc, #232]	; (800c900 <etharp_find_entry+0x2e0>)
 800c818:	f002 f95e 	bl	800ead8 <iprintf>
 800c81c:	e010      	b.n	800c840 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c81e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c822:	2b09      	cmp	r3, #9
 800c824:	dc02      	bgt.n	800c82c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c828:	843b      	strh	r3, [r7, #32]
 800c82a:	e009      	b.n	800c840 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c82c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c830:	2b09      	cmp	r3, #9
 800c832:	dc02      	bgt.n	800c83a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c834:	8bfb      	ldrh	r3, [r7, #30]
 800c836:	843b      	strh	r3, [r7, #32]
 800c838:	e002      	b.n	800c840 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c83a:	f04f 33ff 	mov.w	r3, #4294967295
 800c83e:	e054      	b.n	800c8ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c840:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c844:	2b09      	cmp	r3, #9
 800c846:	dd06      	ble.n	800c856 <etharp_find_entry+0x236>
 800c848:	4b2b      	ldr	r3, [pc, #172]	; (800c8f8 <etharp_find_entry+0x2d8>)
 800c84a:	f240 127f 	movw	r2, #383	; 0x17f
 800c84e:	492e      	ldr	r1, [pc, #184]	; (800c908 <etharp_find_entry+0x2e8>)
 800c850:	482b      	ldr	r0, [pc, #172]	; (800c900 <etharp_find_entry+0x2e0>)
 800c852:	f002 f941 	bl	800ead8 <iprintf>
    etharp_free_entry(i);
 800c856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff fe06 	bl	800c46c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c860:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c864:	2b09      	cmp	r3, #9
 800c866:	dd06      	ble.n	800c876 <etharp_find_entry+0x256>
 800c868:	4b23      	ldr	r3, [pc, #140]	; (800c8f8 <etharp_find_entry+0x2d8>)
 800c86a:	f240 1283 	movw	r2, #387	; 0x183
 800c86e:	4926      	ldr	r1, [pc, #152]	; (800c908 <etharp_find_entry+0x2e8>)
 800c870:	4823      	ldr	r0, [pc, #140]	; (800c900 <etharp_find_entry+0x2e0>)
 800c872:	f002 f931 	bl	800ead8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c87a:	491e      	ldr	r1, [pc, #120]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c87c:	4613      	mov	r3, r2
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	4413      	add	r3, r2
 800c882:	00db      	lsls	r3, r3, #3
 800c884:	440b      	add	r3, r1
 800c886:	3314      	adds	r3, #20
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d006      	beq.n	800c89c <etharp_find_entry+0x27c>
 800c88e:	4b1a      	ldr	r3, [pc, #104]	; (800c8f8 <etharp_find_entry+0x2d8>)
 800c890:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c894:	491d      	ldr	r1, [pc, #116]	; (800c90c <etharp_find_entry+0x2ec>)
 800c896:	481a      	ldr	r0, [pc, #104]	; (800c900 <etharp_find_entry+0x2e0>)
 800c898:	f002 f91e 	bl	800ead8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00b      	beq.n	800c8ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c8a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6819      	ldr	r1, [r3, #0]
 800c8aa:	4812      	ldr	r0, [pc, #72]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	4413      	add	r3, r2
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	4403      	add	r3, r0
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c8ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8be:	490d      	ldr	r1, [pc, #52]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	4413      	add	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	440b      	add	r3, r1
 800c8ca:	3312      	adds	r3, #18
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c8d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8d4:	4907      	ldr	r1, [pc, #28]	; (800c8f4 <etharp_find_entry+0x2d4>)
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	4413      	add	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	440b      	add	r3, r1
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c8e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3728      	adds	r7, #40	; 0x28
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	200082ec 	.word	0x200082ec
 800c8f8:	08011eac 	.word	0x08011eac
 800c8fc:	08011ee4 	.word	0x08011ee4
 800c900:	08011f24 	.word	0x08011f24
 800c904:	08011f4c 	.word	0x08011f4c
 800c908:	08011f64 	.word	0x08011f64
 800c90c:	08011f78 	.word	0x08011f78

0800c910 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af02      	add	r7, sp, #8
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c924:	2b06      	cmp	r3, #6
 800c926:	d006      	beq.n	800c936 <etharp_update_arp_entry+0x26>
 800c928:	4b48      	ldr	r3, [pc, #288]	; (800ca4c <etharp_update_arp_entry+0x13c>)
 800c92a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c92e:	4948      	ldr	r1, [pc, #288]	; (800ca50 <etharp_update_arp_entry+0x140>)
 800c930:	4848      	ldr	r0, [pc, #288]	; (800ca54 <etharp_update_arp_entry+0x144>)
 800c932:	f002 f8d1 	bl	800ead8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d012      	beq.n	800c962 <etharp_update_arp_entry+0x52>
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00e      	beq.n	800c962 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68f9      	ldr	r1, [r7, #12]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f001 f924 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800c950:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c952:	2b00      	cmp	r3, #0
 800c954:	d105      	bne.n	800c962 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c95e:	2be0      	cmp	r3, #224	; 0xe0
 800c960:	d102      	bne.n	800c968 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c962:	f06f 030f 	mvn.w	r3, #15
 800c966:	e06c      	b.n	800ca42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c968:	78fb      	ldrb	r3, [r7, #3]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4619      	mov	r1, r3
 800c96e:	68b8      	ldr	r0, [r7, #8]
 800c970:	f7ff fe56 	bl	800c620 <etharp_find_entry>
 800c974:	4603      	mov	r3, r0
 800c976:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c978:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	da02      	bge.n	800c986 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c980:	8afb      	ldrh	r3, [r7, #22]
 800c982:	b25b      	sxtb	r3, r3
 800c984:	e05d      	b.n	800ca42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c986:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c98a:	4933      	ldr	r1, [pc, #204]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800c98c:	4613      	mov	r3, r2
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	440b      	add	r3, r1
 800c996:	3314      	adds	r3, #20
 800c998:	2202      	movs	r2, #2
 800c99a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c99c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9a0:	492d      	ldr	r1, [pc, #180]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4413      	add	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c9b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	3308      	adds	r3, #8
 800c9c0:	4a25      	ldr	r2, [pc, #148]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	2206      	movs	r2, #6
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f002 f86e 	bl	800eaac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c9d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9d4:	4920      	ldr	r1, [pc, #128]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	4413      	add	r3, r2
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	440b      	add	r3, r1
 800c9e0:	3312      	adds	r3, #18
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c9e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9ea:	491b      	ldr	r1, [pc, #108]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d021      	beq.n	800ca40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c9fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca00:	4915      	ldr	r1, [pc, #84]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	440b      	add	r3, r1
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ca10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca14:	4910      	ldr	r1, [pc, #64]	; (800ca58 <etharp_update_arp_entry+0x148>)
 800ca16:	4613      	mov	r3, r2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	440b      	add	r3, r1
 800ca20:	2200      	movs	r2, #0
 800ca22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ca2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6939      	ldr	r1, [r7, #16]
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 ffbd 	bl	800e9b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f7f9 faa0 	bl	8005f80 <pbuf_free>
  }
  return ERR_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	08011eac 	.word	0x08011eac
 800ca50:	08011fa4 	.word	0x08011fa4
 800ca54:	08011f24 	.word	0x08011f24
 800ca58:	200082ec 	.word	0x200082ec

0800ca5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca64:	2300      	movs	r3, #0
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e01e      	b.n	800caa8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ca6a:	4913      	ldr	r1, [pc, #76]	; (800cab8 <etharp_cleanup_netif+0x5c>)
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	440b      	add	r3, r1
 800ca78:	3314      	adds	r3, #20
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00e      	beq.n	800caa2 <etharp_cleanup_netif+0x46>
 800ca84:	490c      	ldr	r1, [pc, #48]	; (800cab8 <etharp_cleanup_netif+0x5c>)
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	440b      	add	r3, r1
 800ca92:	3308      	adds	r3, #8
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d102      	bne.n	800caa2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f7ff fce5 	bl	800c46c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3301      	adds	r3, #1
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b09      	cmp	r3, #9
 800caac:	dddd      	ble.n	800ca6a <etharp_cleanup_netif+0xe>
    }
  }
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	200082ec 	.word	0x200082ec

0800cabc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cabc:	b5b0      	push	{r4, r5, r7, lr}
 800cabe:	b08a      	sub	sp, #40	; 0x28
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <etharp_input+0x20>
 800cacc:	4b3d      	ldr	r3, [pc, #244]	; (800cbc4 <etharp_input+0x108>)
 800cace:	f240 228a 	movw	r2, #650	; 0x28a
 800cad2:	493d      	ldr	r1, [pc, #244]	; (800cbc8 <etharp_input+0x10c>)
 800cad4:	483d      	ldr	r0, [pc, #244]	; (800cbcc <etharp_input+0x110>)
 800cad6:	f001 ffff 	bl	800ead8 <iprintf>
 800cada:	e06f      	b.n	800cbbc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caec:	d10c      	bne.n	800cb08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800caf2:	2b06      	cmp	r3, #6
 800caf4:	d108      	bne.n	800cb08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	d104      	bne.n	800cb08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	885b      	ldrh	r3, [r3, #2]
 800cb02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cb04:	2b08      	cmp	r3, #8
 800cb06:	d003      	beq.n	800cb10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7f9 fa39 	bl	8005f80 <pbuf_free>
    return;
 800cb0e:	e055      	b.n	800cbbc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	330e      	adds	r3, #14
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	3318      	adds	r3, #24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	3304      	adds	r3, #4
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <etharp_input+0x74>
    for_us = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]
 800cb2e:	e009      	b.n	800cb44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	3304      	adds	r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	bf0c      	ite	eq
 800cb3c:	2301      	moveq	r3, #1
 800cb3e:	2300      	movne	r3, #0
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f103 0208 	add.w	r2, r3, #8
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <etharp_input+0x98>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e000      	b.n	800cb56 <etharp_input+0x9a>
 800cb54:	2302      	movs	r3, #2
 800cb56:	f107 010c 	add.w	r1, r7, #12
 800cb5a:	6838      	ldr	r0, [r7, #0]
 800cb5c:	f7ff fed8 	bl	800c910 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	88db      	ldrh	r3, [r3, #6]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb6a:	d003      	beq.n	800cb74 <etharp_input+0xb8>
 800cb6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb70:	d01e      	beq.n	800cbb0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cb72:	e020      	b.n	800cbb6 <etharp_input+0xfa>
      if (for_us) {
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d01c      	beq.n	800cbb4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cb94:	2102      	movs	r1, #2
 800cb96:	9103      	str	r1, [sp, #12]
 800cb98:	f107 010c 	add.w	r1, r7, #12
 800cb9c:	9102      	str	r1, [sp, #8]
 800cb9e:	9201      	str	r2, [sp, #4]
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462b      	mov	r3, r5
 800cba4:	4622      	mov	r2, r4
 800cba6:	4601      	mov	r1, r0
 800cba8:	6838      	ldr	r0, [r7, #0]
 800cbaa:	f000 faeb 	bl	800d184 <etharp_raw>
      break;
 800cbae:	e001      	b.n	800cbb4 <etharp_input+0xf8>
      break;
 800cbb0:	bf00      	nop
 800cbb2:	e000      	b.n	800cbb6 <etharp_input+0xfa>
      break;
 800cbb4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7f9 f9e2 	bl	8005f80 <pbuf_free>
}
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	08011eac 	.word	0x08011eac
 800cbc8:	08011ffc 	.word	0x08011ffc
 800cbcc:	08011f24 	.word	0x08011f24

0800cbd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cbde:	79fa      	ldrb	r2, [r7, #7]
 800cbe0:	4944      	ldr	r1, [pc, #272]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	4413      	add	r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	440b      	add	r3, r1
 800cbec:	3314      	adds	r3, #20
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d806      	bhi.n	800cc02 <etharp_output_to_arp_index+0x32>
 800cbf4:	4b40      	ldr	r3, [pc, #256]	; (800ccf8 <etharp_output_to_arp_index+0x128>)
 800cbf6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cbfa:	4940      	ldr	r1, [pc, #256]	; (800ccfc <etharp_output_to_arp_index+0x12c>)
 800cbfc:	4840      	ldr	r0, [pc, #256]	; (800cd00 <etharp_output_to_arp_index+0x130>)
 800cbfe:	f001 ff6b 	bl	800ead8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cc02:	79fa      	ldrb	r2, [r7, #7]
 800cc04:	493b      	ldr	r1, [pc, #236]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc06:	4613      	mov	r3, r2
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	4413      	add	r3, r2
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	440b      	add	r3, r1
 800cc10:	3314      	adds	r3, #20
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d153      	bne.n	800ccc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cc18:	79fa      	ldrb	r2, [r7, #7]
 800cc1a:	4936      	ldr	r1, [pc, #216]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4413      	add	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	440b      	add	r3, r1
 800cc26:	3312      	adds	r3, #18
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cc2e:	d919      	bls.n	800cc64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cc30:	79fa      	ldrb	r2, [r7, #7]
 800cc32:	4613      	mov	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4413      	add	r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	4a2e      	ldr	r2, [pc, #184]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3304      	adds	r3, #4
 800cc40:	4619      	mov	r1, r3
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 fb4c 	bl	800d2e0 <etharp_request>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d138      	bne.n	800ccc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cc4e:	79fa      	ldrb	r2, [r7, #7]
 800cc50:	4928      	ldr	r1, [pc, #160]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	2203      	movs	r2, #3
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	e02d      	b.n	800ccc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cc64:	79fa      	ldrb	r2, [r7, #7]
 800cc66:	4923      	ldr	r1, [pc, #140]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	440b      	add	r3, r1
 800cc72:	3312      	adds	r3, #18
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cc7a:	d321      	bcc.n	800ccc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cc7c:	79fa      	ldrb	r2, [r7, #7]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	4a1b      	ldr	r2, [pc, #108]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc88:	4413      	add	r3, r2
 800cc8a:	1d19      	adds	r1, r3, #4
 800cc8c:	79fa      	ldrb	r2, [r7, #7]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	3308      	adds	r3, #8
 800cc98:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	461a      	mov	r2, r3
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 fafb 	bl	800d29c <etharp_request_dst>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d109      	bne.n	800ccc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ccac:	79fa      	ldrb	r2, [r7, #7]
 800ccae:	4911      	ldr	r1, [pc, #68]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	3314      	adds	r3, #20
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ccc6:	79fa      	ldrb	r2, [r7, #7]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <etharp_output_to_arp_index+0x124>)
 800ccd4:	4413      	add	r3, r2
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccdc:	9200      	str	r2, [sp, #0]
 800ccde:	460a      	mov	r2, r1
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f001 fe66 	bl	800e9b4 <ethernet_output>
 800cce8:	4603      	mov	r3, r0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	200082ec 	.word	0x200082ec
 800ccf8:	08011eac 	.word	0x08011eac
 800ccfc:	0801201c 	.word	0x0801201c
 800cd00:	08011f24 	.word	0x08011f24

0800cd04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b08a      	sub	sp, #40	; 0x28
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <etharp_output+0x24>
 800cd1a:	4b73      	ldr	r3, [pc, #460]	; (800cee8 <etharp_output+0x1e4>)
 800cd1c:	f240 321e 	movw	r2, #798	; 0x31e
 800cd20:	4972      	ldr	r1, [pc, #456]	; (800ceec <etharp_output+0x1e8>)
 800cd22:	4873      	ldr	r0, [pc, #460]	; (800cef0 <etharp_output+0x1ec>)
 800cd24:	f001 fed8 	bl	800ead8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <etharp_output+0x38>
 800cd2e:	4b6e      	ldr	r3, [pc, #440]	; (800cee8 <etharp_output+0x1e4>)
 800cd30:	f240 321f 	movw	r2, #799	; 0x31f
 800cd34:	496f      	ldr	r1, [pc, #444]	; (800cef4 <etharp_output+0x1f0>)
 800cd36:	486e      	ldr	r0, [pc, #440]	; (800cef0 <etharp_output+0x1ec>)
 800cd38:	f001 fece 	bl	800ead8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <etharp_output+0x4c>
 800cd42:	4b69      	ldr	r3, [pc, #420]	; (800cee8 <etharp_output+0x1e4>)
 800cd44:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cd48:	496b      	ldr	r1, [pc, #428]	; (800cef8 <etharp_output+0x1f4>)
 800cd4a:	4869      	ldr	r0, [pc, #420]	; (800cef0 <etharp_output+0x1ec>)
 800cd4c:	f001 fec4 	bl	800ead8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68f9      	ldr	r1, [r7, #12]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 ff1e 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cd62:	4b66      	ldr	r3, [pc, #408]	; (800cefc <etharp_output+0x1f8>)
 800cd64:	61fb      	str	r3, [r7, #28]
 800cd66:	e0af      	b.n	800cec8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd70:	2be0      	cmp	r3, #224	; 0xe0
 800cd72:	d118      	bne.n	800cda6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cd74:	2301      	movs	r3, #1
 800cd76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cd7c:	235e      	movs	r3, #94	; 0x5e
 800cd7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3301      	adds	r3, #1
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3302      	adds	r3, #2
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3303      	adds	r3, #3
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cd9e:	f107 0310 	add.w	r3, r7, #16
 800cda2:	61fb      	str	r3, [r7, #28]
 800cda4:	e090      	b.n	800cec8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3304      	adds	r3, #4
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	405a      	eors	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d012      	beq.n	800cde4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cdc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d00b      	beq.n	800cde4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	330c      	adds	r3, #12
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d003      	beq.n	800cdde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	330c      	adds	r3, #12
 800cdda:	61bb      	str	r3, [r7, #24]
 800cddc:	e002      	b.n	800cde4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cdde:	f06f 0303 	mvn.w	r3, #3
 800cde2:	e07d      	b.n	800cee0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cde4:	4b46      	ldr	r3, [pc, #280]	; (800cf00 <etharp_output+0x1fc>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	4619      	mov	r1, r3
 800cdea:	4a46      	ldr	r2, [pc, #280]	; (800cf04 <etharp_output+0x200>)
 800cdec:	460b      	mov	r3, r1
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	440b      	add	r3, r1
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d925      	bls.n	800ce4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cdfe:	4b40      	ldr	r3, [pc, #256]	; (800cf00 <etharp_output+0x1fc>)
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	4619      	mov	r1, r3
 800ce04:	4a3f      	ldr	r2, [pc, #252]	; (800cf04 <etharp_output+0x200>)
 800ce06:	460b      	mov	r3, r1
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	440b      	add	r3, r1
 800ce0c:	00db      	lsls	r3, r3, #3
 800ce0e:	4413      	add	r3, r2
 800ce10:	3308      	adds	r3, #8
 800ce12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d117      	bne.n	800ce4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b38      	ldr	r3, [pc, #224]	; (800cf00 <etharp_output+0x1fc>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	4618      	mov	r0, r3
 800ce24:	4937      	ldr	r1, [pc, #220]	; (800cf04 <etharp_output+0x200>)
 800ce26:	4603      	mov	r3, r0
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	4403      	add	r3, r0
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	440b      	add	r3, r1
 800ce30:	3304      	adds	r3, #4
 800ce32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d108      	bne.n	800ce4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ce38:	4b31      	ldr	r3, [pc, #196]	; (800cf00 <etharp_output+0x1fc>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff fec5 	bl	800cbd0 <etharp_output_to_arp_index>
 800ce46:	4603      	mov	r3, r0
 800ce48:	e04a      	b.n	800cee0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75fb      	strb	r3, [r7, #23]
 800ce4e:	e031      	b.n	800ceb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ce50:	7dfa      	ldrb	r2, [r7, #23]
 800ce52:	492c      	ldr	r1, [pc, #176]	; (800cf04 <etharp_output+0x200>)
 800ce54:	4613      	mov	r3, r2
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4413      	add	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	440b      	add	r3, r1
 800ce5e:	3314      	adds	r3, #20
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d923      	bls.n	800ceae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ce66:	7dfa      	ldrb	r2, [r7, #23]
 800ce68:	4926      	ldr	r1, [pc, #152]	; (800cf04 <etharp_output+0x200>)
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	3308      	adds	r3, #8
 800ce76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d117      	bne.n	800ceae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	6819      	ldr	r1, [r3, #0]
 800ce82:	7dfa      	ldrb	r2, [r7, #23]
 800ce84:	481f      	ldr	r0, [pc, #124]	; (800cf04 <etharp_output+0x200>)
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	4403      	add	r3, r0
 800ce90:	3304      	adds	r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ce94:	4299      	cmp	r1, r3
 800ce96:	d10a      	bne.n	800ceae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ce98:	4a19      	ldr	r2, [pc, #100]	; (800cf00 <etharp_output+0x1fc>)
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	461a      	mov	r2, r3
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fe93 	bl	800cbd0 <etharp_output_to_arp_index>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	e018      	b.n	800cee0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	75fb      	strb	r3, [r7, #23]
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	2b09      	cmp	r3, #9
 800ceb8:	d9ca      	bls.n	800ce50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	69b9      	ldr	r1, [r7, #24]
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 f822 	bl	800cf08 <etharp_query>
 800cec4:	4603      	mov	r3, r0
 800cec6:	e00b      	b.n	800cee0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f001 fd6b 	bl	800e9b4 <ethernet_output>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3720      	adds	r7, #32
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	08011eac 	.word	0x08011eac
 800ceec:	08011ffc 	.word	0x08011ffc
 800cef0:	08011f24 	.word	0x08011f24
 800cef4:	0801204c 	.word	0x0801204c
 800cef8:	08011fec 	.word	0x08011fec
 800cefc:	08012668 	.word	0x08012668
 800cf00:	200083dc 	.word	0x200083dc
 800cf04:	200082ec 	.word	0x200082ec

0800cf08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08c      	sub	sp, #48	; 0x30
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3326      	adds	r3, #38	; 0x26
 800cf18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cf1a:	23ff      	movs	r3, #255	; 0xff
 800cf1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68f9      	ldr	r1, [r7, #12]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fe34 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10c      	bne.n	800cf50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf3e:	2be0      	cmp	r3, #224	; 0xe0
 800cf40:	d006      	beq.n	800cf50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cf50:	f06f 030f 	mvn.w	r3, #15
 800cf54:	e101      	b.n	800d15a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	2101      	movs	r1, #1
 800cf5a:	68b8      	ldr	r0, [r7, #8]
 800cf5c:	f7ff fb60 	bl	800c620 <etharp_find_entry>
 800cf60:	4603      	mov	r3, r0
 800cf62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cf64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	da02      	bge.n	800cf72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cf6c:	8a7b      	ldrh	r3, [r7, #18]
 800cf6e:	b25b      	sxtb	r3, r3
 800cf70:	e0f3      	b.n	800d15a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cf72:	8a7b      	ldrh	r3, [r7, #18]
 800cf74:	2b7e      	cmp	r3, #126	; 0x7e
 800cf76:	d906      	bls.n	800cf86 <etharp_query+0x7e>
 800cf78:	4b7a      	ldr	r3, [pc, #488]	; (800d164 <etharp_query+0x25c>)
 800cf7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cf7e:	497a      	ldr	r1, [pc, #488]	; (800d168 <etharp_query+0x260>)
 800cf80:	487a      	ldr	r0, [pc, #488]	; (800d16c <etharp_query+0x264>)
 800cf82:	f001 fda9 	bl	800ead8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cf86:	8a7b      	ldrh	r3, [r7, #18]
 800cf88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cf8a:	7c7a      	ldrb	r2, [r7, #17]
 800cf8c:	4978      	ldr	r1, [pc, #480]	; (800d170 <etharp_query+0x268>)
 800cf8e:	4613      	mov	r3, r2
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	4413      	add	r3, r2
 800cf94:	00db      	lsls	r3, r3, #3
 800cf96:	440b      	add	r3, r1
 800cf98:	3314      	adds	r3, #20
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d115      	bne.n	800cfcc <etharp_query+0xc4>
    is_new_entry = 1;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cfa4:	7c7a      	ldrb	r2, [r7, #17]
 800cfa6:	4972      	ldr	r1, [pc, #456]	; (800d170 <etharp_query+0x268>)
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	4413      	add	r3, r2
 800cfae:	00db      	lsls	r3, r3, #3
 800cfb0:	440b      	add	r3, r1
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cfb8:	7c7a      	ldrb	r2, [r7, #17]
 800cfba:	496d      	ldr	r1, [pc, #436]	; (800d170 <etharp_query+0x268>)
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	4413      	add	r3, r2
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	440b      	add	r3, r1
 800cfc6:	3308      	adds	r3, #8
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cfcc:	7c7a      	ldrb	r2, [r7, #17]
 800cfce:	4968      	ldr	r1, [pc, #416]	; (800d170 <etharp_query+0x268>)
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	440b      	add	r3, r1
 800cfda:	3314      	adds	r3, #20
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d011      	beq.n	800d006 <etharp_query+0xfe>
 800cfe2:	7c7a      	ldrb	r2, [r7, #17]
 800cfe4:	4962      	ldr	r1, [pc, #392]	; (800d170 <etharp_query+0x268>)
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	440b      	add	r3, r1
 800cff0:	3314      	adds	r3, #20
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d806      	bhi.n	800d006 <etharp_query+0xfe>
 800cff8:	4b5a      	ldr	r3, [pc, #360]	; (800d164 <etharp_query+0x25c>)
 800cffa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cffe:	495d      	ldr	r1, [pc, #372]	; (800d174 <etharp_query+0x26c>)
 800d000:	485a      	ldr	r0, [pc, #360]	; (800d16c <etharp_query+0x264>)
 800d002:	f001 fd69 	bl	800ead8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <etharp_query+0x10a>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10c      	bne.n	800d02c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f963 	bl	800d2e0 <etharp_request>
 800d01a:	4603      	mov	r3, r0
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d102      	bne.n	800d02c <etharp_query+0x124>
      return result;
 800d026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d02a:	e096      	b.n	800d15a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <etharp_query+0x138>
 800d032:	4b4c      	ldr	r3, [pc, #304]	; (800d164 <etharp_query+0x25c>)
 800d034:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d038:	494f      	ldr	r1, [pc, #316]	; (800d178 <etharp_query+0x270>)
 800d03a:	484c      	ldr	r0, [pc, #304]	; (800d16c <etharp_query+0x264>)
 800d03c:	f001 fd4c 	bl	800ead8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d040:	7c7a      	ldrb	r2, [r7, #17]
 800d042:	494b      	ldr	r1, [pc, #300]	; (800d170 <etharp_query+0x268>)
 800d044:	4613      	mov	r3, r2
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	4413      	add	r3, r2
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	440b      	add	r3, r1
 800d04e:	3314      	adds	r3, #20
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d917      	bls.n	800d086 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d056:	4a49      	ldr	r2, [pc, #292]	; (800d17c <etharp_query+0x274>)
 800d058:	7c7b      	ldrb	r3, [r7, #17]
 800d05a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d05c:	7c7a      	ldrb	r2, [r7, #17]
 800d05e:	4613      	mov	r3, r2
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	4413      	add	r3, r2
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	3308      	adds	r3, #8
 800d068:	4a41      	ldr	r2, [pc, #260]	; (800d170 <etharp_query+0x268>)
 800d06a:	4413      	add	r3, r2
 800d06c:	3304      	adds	r3, #4
 800d06e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d072:	9200      	str	r2, [sp, #0]
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f001 fc9b 	bl	800e9b4 <ethernet_output>
 800d07e:	4603      	mov	r3, r0
 800d080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d084:	e067      	b.n	800d156 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d086:	7c7a      	ldrb	r2, [r7, #17]
 800d088:	4939      	ldr	r1, [pc, #228]	; (800d170 <etharp_query+0x268>)
 800d08a:	4613      	mov	r3, r2
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	440b      	add	r3, r1
 800d094:	3314      	adds	r3, #20
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d15c      	bne.n	800d156 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d0a4:	e01c      	b.n	800d0e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	895a      	ldrh	r2, [r3, #10]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	891b      	ldrh	r3, [r3, #8]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d10a      	bne.n	800d0c8 <etharp_query+0x1c0>
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d006      	beq.n	800d0c8 <etharp_query+0x1c0>
 800d0ba:	4b2a      	ldr	r3, [pc, #168]	; (800d164 <etharp_query+0x25c>)
 800d0bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d0c0:	492f      	ldr	r1, [pc, #188]	; (800d180 <etharp_query+0x278>)
 800d0c2:	482a      	ldr	r0, [pc, #168]	; (800d16c <etharp_query+0x264>)
 800d0c4:	f001 fd08 	bl	800ead8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	7b1b      	ldrb	r3, [r3, #12]
 800d0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <etharp_query+0x1d2>
        copy_needed = 1;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	61bb      	str	r3, [r7, #24]
        break;
 800d0d8:	e005      	b.n	800d0e6 <etharp_query+0x1de>
      }
      p = p->next;
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1df      	bne.n	800d0a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d0f2:	200e      	movs	r0, #14
 800d0f4:	f7f9 f9b0 	bl	8006458 <pbuf_clone>
 800d0f8:	61f8      	str	r0, [r7, #28]
 800d0fa:	e004      	b.n	800d106 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d100:	69f8      	ldr	r0, [r7, #28]
 800d102:	f7f8 ffdd 	bl	80060c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d021      	beq.n	800d150 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d10c:	7c7a      	ldrb	r2, [r7, #17]
 800d10e:	4918      	ldr	r1, [pc, #96]	; (800d170 <etharp_query+0x268>)
 800d110:	4613      	mov	r3, r2
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	4413      	add	r3, r2
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	440b      	add	r3, r1
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00a      	beq.n	800d136 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d120:	7c7a      	ldrb	r2, [r7, #17]
 800d122:	4913      	ldr	r1, [pc, #76]	; (800d170 <etharp_query+0x268>)
 800d124:	4613      	mov	r3, r2
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	4413      	add	r3, r2
 800d12a:	00db      	lsls	r3, r3, #3
 800d12c:	440b      	add	r3, r1
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4618      	mov	r0, r3
 800d132:	f7f8 ff25 	bl	8005f80 <pbuf_free>
      }
      arp_table[i].q = p;
 800d136:	7c7a      	ldrb	r2, [r7, #17]
 800d138:	490d      	ldr	r1, [pc, #52]	; (800d170 <etharp_query+0x268>)
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	440b      	add	r3, r1
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d14e:	e002      	b.n	800d156 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d150:	23ff      	movs	r3, #255	; 0xff
 800d152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d156:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3728      	adds	r7, #40	; 0x28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	08011eac 	.word	0x08011eac
 800d168:	08012058 	.word	0x08012058
 800d16c:	08011f24 	.word	0x08011f24
 800d170:	200082ec 	.word	0x200082ec
 800d174:	08012068 	.word	0x08012068
 800d178:	0801204c 	.word	0x0801204c
 800d17c:	200083dc 	.word	0x200083dc
 800d180:	08012090 	.word	0x08012090

0800d184 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08a      	sub	sp, #40	; 0x28
 800d188:	af02      	add	r7, sp, #8
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
 800d190:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <etharp_raw+0x26>
 800d19c:	4b3a      	ldr	r3, [pc, #232]	; (800d288 <etharp_raw+0x104>)
 800d19e:	f240 4257 	movw	r2, #1111	; 0x457
 800d1a2:	493a      	ldr	r1, [pc, #232]	; (800d28c <etharp_raw+0x108>)
 800d1a4:	483a      	ldr	r0, [pc, #232]	; (800d290 <etharp_raw+0x10c>)
 800d1a6:	f001 fc97 	bl	800ead8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d1aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1ae:	211c      	movs	r1, #28
 800d1b0:	200e      	movs	r0, #14
 800d1b2:	f7f8 fc01 	bl	80059b8 <pbuf_alloc>
 800d1b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d1be:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c2:	e05d      	b.n	800d280 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	895b      	ldrh	r3, [r3, #10]
 800d1c8:	2b1b      	cmp	r3, #27
 800d1ca:	d806      	bhi.n	800d1da <etharp_raw+0x56>
 800d1cc:	4b2e      	ldr	r3, [pc, #184]	; (800d288 <etharp_raw+0x104>)
 800d1ce:	f240 4262 	movw	r2, #1122	; 0x462
 800d1d2:	4930      	ldr	r1, [pc, #192]	; (800d294 <etharp_raw+0x110>)
 800d1d4:	482e      	ldr	r0, [pc, #184]	; (800d290 <etharp_raw+0x10c>)
 800d1d6:	f001 fc7f 	bl	800ead8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d1e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f7 fab2 	bl	800474c <lwip_htons>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1f6:	2b06      	cmp	r3, #6
 800d1f8:	d006      	beq.n	800d208 <etharp_raw+0x84>
 800d1fa:	4b23      	ldr	r3, [pc, #140]	; (800d288 <etharp_raw+0x104>)
 800d1fc:	f240 4269 	movw	r2, #1129	; 0x469
 800d200:	4925      	ldr	r1, [pc, #148]	; (800d298 <etharp_raw+0x114>)
 800d202:	4823      	ldr	r0, [pc, #140]	; (800d290 <etharp_raw+0x10c>)
 800d204:	f001 fc68 	bl	800ead8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	3308      	adds	r3, #8
 800d20c:	2206      	movs	r2, #6
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	4618      	mov	r0, r3
 800d212:	f001 fc4b 	bl	800eaac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	3312      	adds	r3, #18
 800d21a:	2206      	movs	r2, #6
 800d21c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 fc44 	bl	800eaac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	330e      	adds	r3, #14
 800d228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d22a:	6812      	ldr	r2, [r2, #0]
 800d22c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	3318      	adds	r3, #24
 800d232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d234:	6812      	ldr	r2, [r2, #0]
 800d236:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	2200      	movs	r2, #0
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	2200      	movs	r2, #0
 800d240:	f042 0201 	orr.w	r2, r2, #1
 800d244:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2200      	movs	r2, #0
 800d24a:	f042 0208 	orr.w	r2, r2, #8
 800d24e:	709a      	strb	r2, [r3, #2]
 800d250:	2200      	movs	r2, #0
 800d252:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	2206      	movs	r2, #6
 800d258:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2204      	movs	r2, #4
 800d25e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d260:	f640 0306 	movw	r3, #2054	; 0x806
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	69b9      	ldr	r1, [r7, #24]
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f001 fba1 	bl	800e9b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d272:	69b8      	ldr	r0, [r7, #24]
 800d274:	f7f8 fe84 	bl	8005f80 <pbuf_free>
  p = NULL;
 800d278:	2300      	movs	r3, #0
 800d27a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d27c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3720      	adds	r7, #32
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	08011eac 	.word	0x08011eac
 800d28c:	08011ffc 	.word	0x08011ffc
 800d290:	08011f24 	.word	0x08011f24
 800d294:	080120ac 	.word	0x080120ac
 800d298:	080120e0 	.word	0x080120e0

0800d29c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b088      	sub	sp, #32
 800d2a0:	af04      	add	r7, sp, #16
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	9203      	str	r2, [sp, #12]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	9202      	str	r2, [sp, #8]
 800d2c0:	4a06      	ldr	r2, [pc, #24]	; (800d2dc <etharp_request_dst+0x40>)
 800d2c2:	9201      	str	r2, [sp, #4]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff ff5a 	bl	800d184 <etharp_raw>
 800d2d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	08012670 	.word	0x08012670

0800d2e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d2ea:	4a05      	ldr	r2, [pc, #20]	; (800d300 <etharp_request+0x20>)
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff ffd4 	bl	800d29c <etharp_request_dst>
 800d2f4:	4603      	mov	r3, r0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	08012668 	.word	0x08012668

0800d304 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08e      	sub	sp, #56	; 0x38
 800d308:	af04      	add	r7, sp, #16
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d30e:	4b87      	ldr	r3, [pc, #540]	; (800d52c <icmp_input+0x228>)
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	f003 030f 	and.w	r3, r3, #15
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	b2db      	uxtb	r3, r3
 800d322:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d326:	2b13      	cmp	r3, #19
 800d328:	f240 80e8 	bls.w	800d4fc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	895b      	ldrh	r3, [r3, #10]
 800d330:	2b03      	cmp	r3, #3
 800d332:	f240 80e5 	bls.w	800d500 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d340:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 80d2 	beq.w	800d4ee <icmp_input+0x1ea>
 800d34a:	2b08      	cmp	r3, #8
 800d34c:	f040 80d2 	bne.w	800d4f4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d350:	4b77      	ldr	r3, [pc, #476]	; (800d530 <icmp_input+0x22c>)
 800d352:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d354:	4b75      	ldr	r3, [pc, #468]	; (800d52c <icmp_input+0x228>)
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d35c:	2be0      	cmp	r3, #224	; 0xe0
 800d35e:	f000 80d6 	beq.w	800d50e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d362:	4b72      	ldr	r3, [pc, #456]	; (800d52c <icmp_input+0x228>)
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	4a71      	ldr	r2, [pc, #452]	; (800d52c <icmp_input+0x228>)
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	4611      	mov	r1, r2
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 fc13 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	f040 80cc 	bne.w	800d512 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	891b      	ldrh	r3, [r3, #8]
 800d37e:	2b07      	cmp	r3, #7
 800d380:	f240 80c0 	bls.w	800d504 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7f7 fa7e 	bl	8004886 <inet_chksum_pbuf>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7f8 fdf5 	bl	8005f80 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d396:	e0c5      	b.n	800d524 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d39a:	330e      	adds	r3, #14
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f8 fd58 	bl	8005e54 <pbuf_add_header>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d04b      	beq.n	800d442 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	891a      	ldrh	r2, [r3, #8]
 800d3ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3b0:	4413      	add	r3, r2
 800d3b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	891b      	ldrh	r3, [r3, #8]
 800d3b8:	8b7a      	ldrh	r2, [r7, #26]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	f0c0 80ab 	bcc.w	800d516 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d3c0:	8b7b      	ldrh	r3, [r7, #26]
 800d3c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	200e      	movs	r0, #14
 800d3ca:	f7f8 faf5 	bl	80059b8 <pbuf_alloc>
 800d3ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 80a1 	beq.w	800d51a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	895b      	ldrh	r3, [r3, #10]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d203      	bcs.n	800d3ee <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d3e6:	6978      	ldr	r0, [r7, #20]
 800d3e8:	f7f8 fdca 	bl	8005f80 <pbuf_free>
          goto icmperr;
 800d3ec:	e096      	b.n	800d51c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f001 fb58 	bl	800eaac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3fe:	4619      	mov	r1, r3
 800d400:	6978      	ldr	r0, [r7, #20]
 800d402:	f7f8 fd37 	bl	8005e74 <pbuf_remove_header>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d009      	beq.n	800d420 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d40c:	4b49      	ldr	r3, [pc, #292]	; (800d534 <icmp_input+0x230>)
 800d40e:	22b6      	movs	r2, #182	; 0xb6
 800d410:	4949      	ldr	r1, [pc, #292]	; (800d538 <icmp_input+0x234>)
 800d412:	484a      	ldr	r0, [pc, #296]	; (800d53c <icmp_input+0x238>)
 800d414:	f001 fb60 	bl	800ead8 <iprintf>
          pbuf_free(r);
 800d418:	6978      	ldr	r0, [r7, #20]
 800d41a:	f7f8 fdb1 	bl	8005f80 <pbuf_free>
          goto icmperr;
 800d41e:	e07d      	b.n	800d51c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	6978      	ldr	r0, [r7, #20]
 800d424:	f7f8 fed4 	bl	80061d0 <pbuf_copy>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d003      	beq.n	800d436 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d42e:	6978      	ldr	r0, [r7, #20]
 800d430:	f7f8 fda6 	bl	8005f80 <pbuf_free>
          goto icmperr;
 800d434:	e072      	b.n	800d51c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7f8 fda2 	bl	8005f80 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	607b      	str	r3, [r7, #4]
 800d440:	e00f      	b.n	800d462 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d444:	330e      	adds	r3, #14
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7f8 fd13 	bl	8005e74 <pbuf_remove_header>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d006      	beq.n	800d462 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d454:	4b37      	ldr	r3, [pc, #220]	; (800d534 <icmp_input+0x230>)
 800d456:	22c7      	movs	r2, #199	; 0xc7
 800d458:	4939      	ldr	r1, [pc, #228]	; (800d540 <icmp_input+0x23c>)
 800d45a:	4838      	ldr	r0, [pc, #224]	; (800d53c <icmp_input+0x238>)
 800d45c:	f001 fb3c 	bl	800ead8 <iprintf>
          goto icmperr;
 800d460:	e05c      	b.n	800d51c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7f8 fcf1 	bl	8005e54 <pbuf_add_header>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d13c      	bne.n	800d4f2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d486:	4b29      	ldr	r3, [pc, #164]	; (800d52c <icmp_input+0x228>)
 800d488:	691a      	ldr	r2, [r3, #16]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	885b      	ldrh	r3, [r3, #2]
 800d498:	b29b      	uxth	r3, r3
 800d49a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d907      	bls.n	800d4b2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	885b      	ldrh	r3, [r3, #2]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	3309      	adds	r3, #9
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	805a      	strh	r2, [r3, #2]
 800d4b0:	e006      	b.n	800d4c0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	885b      	ldrh	r3, [r3, #2]
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	22ff      	movs	r2, #255	; 0xff
 800d4c4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	729a      	strb	r2, [r3, #10]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	9302      	str	r3, [sp, #8]
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	23ff      	movs	r3, #255	; 0xff
 800d4de:	2200      	movs	r2, #0
 800d4e0:	69f9      	ldr	r1, [r7, #28]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fa80 	bl	800d9e8 <ip4_output_if>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d4ec:	e001      	b.n	800d4f2 <icmp_input+0x1ee>
      break;
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <icmp_input+0x1f0>
      break;
 800d4f2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7f8 fd43 	bl	8005f80 <pbuf_free>
  return;
 800d4fa:	e013      	b.n	800d524 <icmp_input+0x220>
    goto lenerr;
 800d4fc:	bf00      	nop
 800d4fe:	e002      	b.n	800d506 <icmp_input+0x202>
    goto lenerr;
 800d500:	bf00      	nop
 800d502:	e000      	b.n	800d506 <icmp_input+0x202>
        goto lenerr;
 800d504:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7f8 fd3a 	bl	8005f80 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d50c:	e00a      	b.n	800d524 <icmp_input+0x220>
        goto icmperr;
 800d50e:	bf00      	nop
 800d510:	e004      	b.n	800d51c <icmp_input+0x218>
        goto icmperr;
 800d512:	bf00      	nop
 800d514:	e002      	b.n	800d51c <icmp_input+0x218>
          goto icmperr;
 800d516:	bf00      	nop
 800d518:	e000      	b.n	800d51c <icmp_input+0x218>
          goto icmperr;
 800d51a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7f8 fd2f 	bl	8005f80 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d522:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d524:	3728      	adds	r7, #40	; 0x28
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20004d1c 	.word	0x20004d1c
 800d530:	20004d30 	.word	0x20004d30
 800d534:	08012124 	.word	0x08012124
 800d538:	0801215c 	.word	0x0801215c
 800d53c:	08012194 	.word	0x08012194
 800d540:	080121bc 	.word	0x080121bc

0800d544 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	461a      	mov	r2, r3
 800d554:	2103      	movs	r1, #3
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f814 	bl	800d584 <icmp_send_response>
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	461a      	mov	r2, r3
 800d574:	210b      	movs	r1, #11
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f804 	bl	800d584 <icmp_send_response>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08c      	sub	sp, #48	; 0x30
 800d588:	af04      	add	r7, sp, #16
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
 800d590:	4613      	mov	r3, r2
 800d592:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d594:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d598:	2124      	movs	r1, #36	; 0x24
 800d59a:	2022      	movs	r0, #34	; 0x22
 800d59c:	f7f8 fa0c 	bl	80059b8 <pbuf_alloc>
 800d5a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d056      	beq.n	800d656 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	895b      	ldrh	r3, [r3, #10]
 800d5ac:	2b23      	cmp	r3, #35	; 0x23
 800d5ae:	d806      	bhi.n	800d5be <icmp_send_response+0x3a>
 800d5b0:	4b2b      	ldr	r3, [pc, #172]	; (800d660 <icmp_send_response+0xdc>)
 800d5b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d5b6:	492b      	ldr	r1, [pc, #172]	; (800d664 <icmp_send_response+0xe0>)
 800d5b8:	482b      	ldr	r0, [pc, #172]	; (800d668 <icmp_send_response+0xe4>)
 800d5ba:	f001 fa8d 	bl	800ead8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	78fa      	ldrb	r2, [r7, #3]
 800d5ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	78ba      	ldrb	r2, [r7, #2]
 800d5d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	711a      	strb	r2, [r3, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	719a      	strb	r2, [r3, #6]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f103 0008 	add.w	r0, r3, #8
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	221c      	movs	r2, #28
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f001 fa57 	bl	800eaac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d604:	f107 030c 	add.w	r3, r7, #12
 800d608:	4618      	mov	r0, r3
 800d60a:	f000 f82f 	bl	800d66c <ip4_route>
 800d60e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d01b      	beq.n	800d64e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2200      	movs	r2, #0
 800d61a:	709a      	strb	r2, [r3, #2]
 800d61c:	2200      	movs	r2, #0
 800d61e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	895b      	ldrh	r3, [r3, #10]
 800d624:	4619      	mov	r1, r3
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f7f7 f91b 	bl	8004862 <inet_chksum>
 800d62c:	4603      	mov	r3, r0
 800d62e:	461a      	mov	r2, r3
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d634:	f107 020c 	add.w	r2, r7, #12
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	9302      	str	r3, [sp, #8]
 800d63c:	2301      	movs	r3, #1
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	2300      	movs	r3, #0
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	23ff      	movs	r3, #255	; 0xff
 800d646:	2100      	movs	r1, #0
 800d648:	69f8      	ldr	r0, [r7, #28]
 800d64a:	f000 f9cd 	bl	800d9e8 <ip4_output_if>
  }
  pbuf_free(q);
 800d64e:	69f8      	ldr	r0, [r7, #28]
 800d650:	f7f8 fc96 	bl	8005f80 <pbuf_free>
 800d654:	e000      	b.n	800d658 <icmp_send_response+0xd4>
    return;
 800d656:	bf00      	nop
}
 800d658:	3720      	adds	r7, #32
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	08012124 	.word	0x08012124
 800d664:	080121f0 	.word	0x080121f0
 800d668:	08012194 	.word	0x08012194

0800d66c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d674:	4b33      	ldr	r3, [pc, #204]	; (800d744 <ip4_route+0xd8>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e036      	b.n	800d6ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d02b      	beq.n	800d6e4 <ip4_route+0x78>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d692:	089b      	lsrs	r3, r3, #2
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d022      	beq.n	800d6e4 <ip4_route+0x78>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01d      	beq.n	800d6e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	405a      	eors	r2, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	e038      	b.n	800d736 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d108      	bne.n	800d6e4 <ip4_route+0x78>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	330c      	adds	r3, #12
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d101      	bne.n	800d6e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	e028      	b.n	800d736 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1c5      	bne.n	800d67c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d6f0:	4b15      	ldr	r3, [pc, #84]	; (800d748 <ip4_route+0xdc>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01a      	beq.n	800d72e <ip4_route+0xc2>
 800d6f8:	4b13      	ldr	r3, [pc, #76]	; (800d748 <ip4_route+0xdc>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	2b00      	cmp	r3, #0
 800d706:	d012      	beq.n	800d72e <ip4_route+0xc2>
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <ip4_route+0xdc>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00a      	beq.n	800d72e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d718:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <ip4_route+0xdc>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3304      	adds	r3, #4
 800d71e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b7f      	cmp	r3, #127	; 0x7f
 800d72c:	d101      	bne.n	800d732 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	e001      	b.n	800d736 <ip4_route+0xca>
  }

  return netif_default;
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <ip4_route+0xdc>)
 800d734:	681b      	ldr	r3, [r3, #0]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	20008280 	.word	0x20008280
 800d748:	20008284 	.word	0x20008284

0800d74c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d016      	beq.n	800d792 <ip4_input_accept+0x46>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3304      	adds	r3, #4
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d011      	beq.n	800d792 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d76e:	4b0b      	ldr	r3, [pc, #44]	; (800d79c <ip4_input_accept+0x50>)
 800d770:	695a      	ldr	r2, [r3, #20]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3304      	adds	r3, #4
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d008      	beq.n	800d78e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d77c:	4b07      	ldr	r3, [pc, #28]	; (800d79c <ip4_input_accept+0x50>)
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	6879      	ldr	r1, [r7, #4]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 fa08 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800d788:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20004d1c 	.word	0x20004d1c

0800d7a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	091b      	lsrs	r3, r3, #4
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	2b04      	cmp	r3, #4
 800d7ba:	d004      	beq.n	800d7c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7f8 fbdf 	bl	8005f80 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e107      	b.n	800d9d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f003 030f 	and.w	r3, r3, #15
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	885b      	ldrh	r3, [r3, #2]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f6 ffb5 	bl	800474c <lwip_htons>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	89ba      	ldrh	r2, [r7, #12]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d204      	bcs.n	800d7fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d7f0:	89bb      	ldrh	r3, [r7, #12]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7f8 fa3d 	bl	8005c74 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	895b      	ldrh	r3, [r3, #10]
 800d7fe:	89fa      	ldrh	r2, [r7, #14]
 800d800:	429a      	cmp	r2, r3
 800d802:	d807      	bhi.n	800d814 <ip4_input+0x74>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	891b      	ldrh	r3, [r3, #8]
 800d808:	89ba      	ldrh	r2, [r7, #12]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d802      	bhi.n	800d814 <ip4_input+0x74>
 800d80e:	89fb      	ldrh	r3, [r7, #14]
 800d810:	2b13      	cmp	r3, #19
 800d812:	d804      	bhi.n	800d81e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7f8 fbb3 	bl	8005f80 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e0db      	b.n	800d9d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	4a6f      	ldr	r2, [pc, #444]	; (800d9e0 <ip4_input+0x240>)
 800d824:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4a6d      	ldr	r2, [pc, #436]	; (800d9e0 <ip4_input+0x240>)
 800d82c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d82e:	4b6c      	ldr	r3, [pc, #432]	; (800d9e0 <ip4_input+0x240>)
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d836:	2be0      	cmp	r3, #224	; 0xe0
 800d838:	d112      	bne.n	800d860 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d007      	beq.n	800d85a <ip4_input+0xba>
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	3304      	adds	r3, #4
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <ip4_input+0xba>
      netif = inp;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	e02a      	b.n	800d8b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	613b      	str	r3, [r7, #16]
 800d85e:	e027      	b.n	800d8b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d860:	6838      	ldr	r0, [r7, #0]
 800d862:	f7ff ff73 	bl	800d74c <ip4_input_accept>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <ip4_input+0xd2>
      netif = inp;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	613b      	str	r3, [r7, #16]
 800d870:	e01e      	b.n	800d8b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d872:	2300      	movs	r3, #0
 800d874:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d876:	4b5a      	ldr	r3, [pc, #360]	; (800d9e0 <ip4_input+0x240>)
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	2b7f      	cmp	r3, #127	; 0x7f
 800d87e:	d017      	beq.n	800d8b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d880:	4b58      	ldr	r3, [pc, #352]	; (800d9e4 <ip4_input+0x244>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	613b      	str	r3, [r7, #16]
 800d886:	e00e      	b.n	800d8a6 <ip4_input+0x106>
          if (netif == inp) {
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d006      	beq.n	800d89e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d890:	6938      	ldr	r0, [r7, #16]
 800d892:	f7ff ff5b 	bl	800d74c <ip4_input_accept>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d108      	bne.n	800d8ae <ip4_input+0x10e>
 800d89c:	e000      	b.n	800d8a0 <ip4_input+0x100>
            continue;
 800d89e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	613b      	str	r3, [r7, #16]
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1ed      	bne.n	800d888 <ip4_input+0xe8>
 800d8ac:	e000      	b.n	800d8b0 <ip4_input+0x110>
            break;
 800d8ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d8b0:	4b4b      	ldr	r3, [pc, #300]	; (800d9e0 <ip4_input+0x240>)
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 f96e 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d105      	bne.n	800d8ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d8c2:	4b47      	ldr	r3, [pc, #284]	; (800d9e0 <ip4_input+0x240>)
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d8ca:	2be0      	cmp	r3, #224	; 0xe0
 800d8cc:	d104      	bne.n	800d8d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7f8 fb56 	bl	8005f80 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e07e      	b.n	800d9d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d104      	bne.n	800d8e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7f8 fb4e 	bl	8005f80 <pbuf_free>
    return ERR_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e076      	b.n	800d9d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	88db      	ldrh	r3, [r3, #6]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fc92 	bl	800e224 <ip4_reass>
 800d900:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <ip4_input+0x16c>
      return ERR_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	e064      	b.n	800d9d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d912:	4a33      	ldr	r2, [pc, #204]	; (800d9e0 <ip4_input+0x240>)
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d918:	4a31      	ldr	r2, [pc, #196]	; (800d9e0 <ip4_input+0x240>)
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d91e:	4a30      	ldr	r2, [pc, #192]	; (800d9e0 <ip4_input+0x240>)
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 030f 	and.w	r3, r3, #15
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	b2db      	uxtb	r3, r3
 800d932:	b29a      	uxth	r2, r3
 800d934:	4b2a      	ldr	r3, [pc, #168]	; (800d9e0 <ip4_input+0x240>)
 800d936:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d938:	89fb      	ldrh	r3, [r7, #14]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7f8 fa99 	bl	8005e74 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	7a5b      	ldrb	r3, [r3, #9]
 800d946:	2b11      	cmp	r3, #17
 800d948:	d006      	beq.n	800d958 <ip4_input+0x1b8>
 800d94a:	2b11      	cmp	r3, #17
 800d94c:	dc13      	bgt.n	800d976 <ip4_input+0x1d6>
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d00c      	beq.n	800d96c <ip4_input+0x1cc>
 800d952:	2b06      	cmp	r3, #6
 800d954:	d005      	beq.n	800d962 <ip4_input+0x1c2>
 800d956:	e00e      	b.n	800d976 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7fe f902 	bl	800bb64 <udp_input>
        break;
 800d960:	e026      	b.n	800d9b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7fa f943 	bl	8007bf0 <tcp_input>
        break;
 800d96a:	e021      	b.n	800d9b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d96c:	6839      	ldr	r1, [r7, #0]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fcc8 	bl	800d304 <icmp_input>
        break;
 800d974:	e01c      	b.n	800d9b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d976:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <ip4_input+0x240>)
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	6939      	ldr	r1, [r7, #16]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 f90b 	bl	800db98 <ip4_addr_isbroadcast_u32>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10f      	bne.n	800d9a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d988:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <ip4_input+0x240>)
 800d98a:	695b      	ldr	r3, [r3, #20]
 800d98c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d990:	2be0      	cmp	r3, #224	; 0xe0
 800d992:	d009      	beq.n	800d9a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f8 fadd 	bl	8005f5a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d9a0:	2102      	movs	r1, #2
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff fdce 	bl	800d544 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7f8 fae9 	bl	8005f80 <pbuf_free>
        break;
 800d9ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d9b0:	4b0b      	ldr	r3, [pc, #44]	; (800d9e0 <ip4_input+0x240>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d9b6:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <ip4_input+0x240>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d9bc:	4b08      	ldr	r3, [pc, #32]	; (800d9e0 <ip4_input+0x240>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d9c2:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <ip4_input+0x240>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d9c8:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <ip4_input+0x240>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d9ce:	4b04      	ldr	r3, [pc, #16]	; (800d9e0 <ip4_input+0x240>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	20004d1c 	.word	0x20004d1c
 800d9e4:	20008280 	.word	0x20008280

0800d9e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d009      	beq.n	800da14 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <ip4_output_if+0x26>
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	3304      	adds	r3, #4
 800da12:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800da14:	78fa      	ldrb	r2, [r7, #3]
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da1e:	9301      	str	r3, [sp, #4]
 800da20:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	4613      	mov	r3, r2
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	6979      	ldr	r1, [r7, #20]
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 f805 	bl	800da3c <ip4_output_if_src>
 800da32:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	7b9b      	ldrb	r3, [r3, #14]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d006      	beq.n	800da60 <ip4_output_if_src+0x24>
 800da52:	4b4b      	ldr	r3, [pc, #300]	; (800db80 <ip4_output_if_src+0x144>)
 800da54:	f44f 7255 	mov.w	r2, #852	; 0x354
 800da58:	494a      	ldr	r1, [pc, #296]	; (800db84 <ip4_output_if_src+0x148>)
 800da5a:	484b      	ldr	r0, [pc, #300]	; (800db88 <ip4_output_if_src+0x14c>)
 800da5c:	f001 f83c 	bl	800ead8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d060      	beq.n	800db28 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800da66:	2314      	movs	r3, #20
 800da68:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800da6a:	2114      	movs	r1, #20
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7f8 f9f1 	bl	8005e54 <pbuf_add_header>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800da78:	f06f 0301 	mvn.w	r3, #1
 800da7c:	e07c      	b.n	800db78 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	895b      	ldrh	r3, [r3, #10]
 800da88:	2b13      	cmp	r3, #19
 800da8a:	d806      	bhi.n	800da9a <ip4_output_if_src+0x5e>
 800da8c:	4b3c      	ldr	r3, [pc, #240]	; (800db80 <ip4_output_if_src+0x144>)
 800da8e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800da92:	493e      	ldr	r1, [pc, #248]	; (800db8c <ip4_output_if_src+0x150>)
 800da94:	483c      	ldr	r0, [pc, #240]	; (800db88 <ip4_output_if_src+0x14c>)
 800da96:	f001 f81f 	bl	800ead8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	78fa      	ldrb	r2, [r7, #3]
 800da9e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800daa6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dab0:	8b7b      	ldrh	r3, [r7, #26]
 800dab2:	089b      	lsrs	r3, r3, #2
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dac8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	891b      	ldrh	r3, [r3, #8]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f6 fe3c 	bl	800474c <lwip_htons>
 800dad4:	4603      	mov	r3, r0
 800dad6:	461a      	mov	r2, r3
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	2200      	movs	r2, #0
 800dae0:	719a      	strb	r2, [r3, #6]
 800dae2:	2200      	movs	r2, #0
 800dae4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dae6:	4b2a      	ldr	r3, [pc, #168]	; (800db90 <ip4_output_if_src+0x154>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	4618      	mov	r0, r3
 800daec:	f7f6 fe2e 	bl	800474c <lwip_htons>
 800daf0:	4603      	mov	r3, r0
 800daf2:	461a      	mov	r2, r3
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800daf8:	4b25      	ldr	r3, [pc, #148]	; (800db90 <ip4_output_if_src+0x154>)
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	3301      	adds	r3, #1
 800dafe:	b29a      	uxth	r2, r3
 800db00:	4b23      	ldr	r3, [pc, #140]	; (800db90 <ip4_output_if_src+0x154>)
 800db02:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d104      	bne.n	800db14 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800db0a:	4b22      	ldr	r3, [pc, #136]	; (800db94 <ip4_output_if_src+0x158>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	60da      	str	r2, [r3, #12]
 800db12:	e003      	b.n	800db1c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2200      	movs	r2, #0
 800db20:	729a      	strb	r2, [r3, #10]
 800db22:	2200      	movs	r2, #0
 800db24:	72da      	strb	r2, [r3, #11]
 800db26:	e00f      	b.n	800db48 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	895b      	ldrh	r3, [r3, #10]
 800db2c:	2b13      	cmp	r3, #19
 800db2e:	d802      	bhi.n	800db36 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800db30:	f06f 0301 	mvn.w	r3, #1
 800db34:	e020      	b.n	800db78 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800db42:	f107 0314 	add.w	r3, r7, #20
 800db46:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00c      	beq.n	800db6a <ip4_output_if_src+0x12e>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	891a      	ldrh	r2, [r3, #8]
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db58:	429a      	cmp	r2, r3
 800db5a:	d906      	bls.n	800db6a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 fd53 	bl	800e60c <ip4_frag>
 800db66:	4603      	mov	r3, r0
 800db68:	e006      	b.n	800db78 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	68f9      	ldr	r1, [r7, #12]
 800db72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db74:	4798      	blx	r3
 800db76:	4603      	mov	r3, r0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3720      	adds	r7, #32
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	0801221c 	.word	0x0801221c
 800db84:	08012250 	.word	0x08012250
 800db88:	0801225c 	.word	0x0801225c
 800db8c:	08012284 	.word	0x08012284
 800db90:	200083de 	.word	0x200083de
 800db94:	08012664 	.word	0x08012664

0800db98 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbac:	d002      	beq.n	800dbb4 <ip4_addr_isbroadcast_u32+0x1c>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e02a      	b.n	800dc0e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d101      	bne.n	800dbca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e021      	b.n	800dc0e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d101      	bne.n	800dbda <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e019      	b.n	800dc0e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	405a      	eors	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4013      	ands	r3, r2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10d      	bne.n	800dc0c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	43da      	mvns	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3308      	adds	r3, #8
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d101      	bne.n	800dc0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e000      	b.n	800dc0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dc0c:	2300      	movs	r3, #0
  }
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
	...

0800dc1c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dc26:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <ip_reass_tmr+0x54>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dc2c:	e018      	b.n	800dc60 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	7fdb      	ldrb	r3, [r3, #31]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00b      	beq.n	800dc4e <ip_reass_tmr+0x32>
      r->timer--;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	7fdb      	ldrb	r3, [r3, #31]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	e008      	b.n	800dc60 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f80a 	bl	800dc74 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1e3      	bne.n	800dc2e <ip_reass_tmr+0x12>
    }
  }
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	200083e0 	.word	0x200083e0

0800dc74 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d105      	bne.n	800dc96 <ip_reass_free_complete_datagram+0x22>
 800dc8a:	4b45      	ldr	r3, [pc, #276]	; (800dda0 <ip_reass_free_complete_datagram+0x12c>)
 800dc8c:	22ab      	movs	r2, #171	; 0xab
 800dc8e:	4945      	ldr	r1, [pc, #276]	; (800dda4 <ip_reass_free_complete_datagram+0x130>)
 800dc90:	4845      	ldr	r0, [pc, #276]	; (800dda8 <ip_reass_free_complete_datagram+0x134>)
 800dc92:	f000 ff21 	bl	800ead8 <iprintf>
  if (prev != NULL) {
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d005      	beq.n	800dcb2 <ip_reass_free_complete_datagram+0x3e>
 800dca6:	4b3e      	ldr	r3, [pc, #248]	; (800dda0 <ip_reass_free_complete_datagram+0x12c>)
 800dca8:	22ad      	movs	r2, #173	; 0xad
 800dcaa:	4940      	ldr	r1, [pc, #256]	; (800ddac <ip_reass_free_complete_datagram+0x138>)
 800dcac:	483e      	ldr	r0, [pc, #248]	; (800dda8 <ip_reass_free_complete_datagram+0x134>)
 800dcae:	f000 ff13 	bl	800ead8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	889b      	ldrh	r3, [r3, #4]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d12a      	bne.n	800dd1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6858      	ldr	r0, [r3, #4]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3308      	adds	r3, #8
 800dcda:	2214      	movs	r2, #20
 800dcdc:	4619      	mov	r1, r3
 800dcde:	f000 fee5 	bl	800eaac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dce2:	2101      	movs	r1, #1
 800dce4:	69b8      	ldr	r0, [r7, #24]
 800dce6:	f7ff fc3d 	bl	800d564 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dcea:	69b8      	ldr	r0, [r7, #24]
 800dcec:	f7f8 f9d0 	bl	8006090 <pbuf_clen>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dcf4:	8bfa      	ldrh	r2, [r7, #30]
 800dcf6:	8a7b      	ldrh	r3, [r7, #18]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcfe:	db05      	blt.n	800dd0c <ip_reass_free_complete_datagram+0x98>
 800dd00:	4b27      	ldr	r3, [pc, #156]	; (800dda0 <ip_reass_free_complete_datagram+0x12c>)
 800dd02:	22bc      	movs	r2, #188	; 0xbc
 800dd04:	492a      	ldr	r1, [pc, #168]	; (800ddb0 <ip_reass_free_complete_datagram+0x13c>)
 800dd06:	4828      	ldr	r0, [pc, #160]	; (800dda8 <ip_reass_free_complete_datagram+0x134>)
 800dd08:	f000 fee6 	bl	800ead8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd0c:	8bfa      	ldrh	r2, [r7, #30]
 800dd0e:	8a7b      	ldrh	r3, [r7, #18]
 800dd10:	4413      	add	r3, r2
 800dd12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dd14:	69b8      	ldr	r0, [r7, #24]
 800dd16:	f7f8 f933 	bl	8005f80 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dd20:	e01f      	b.n	800dd62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7f8 f9ac 	bl	8006090 <pbuf_clen>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dd3c:	8bfa      	ldrh	r2, [r7, #30]
 800dd3e:	8a7b      	ldrh	r3, [r7, #18]
 800dd40:	4413      	add	r3, r2
 800dd42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd46:	db05      	blt.n	800dd54 <ip_reass_free_complete_datagram+0xe0>
 800dd48:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <ip_reass_free_complete_datagram+0x12c>)
 800dd4a:	22cc      	movs	r2, #204	; 0xcc
 800dd4c:	4918      	ldr	r1, [pc, #96]	; (800ddb0 <ip_reass_free_complete_datagram+0x13c>)
 800dd4e:	4816      	ldr	r0, [pc, #88]	; (800dda8 <ip_reass_free_complete_datagram+0x134>)
 800dd50:	f000 fec2 	bl	800ead8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd54:	8bfa      	ldrh	r2, [r7, #30]
 800dd56:	8a7b      	ldrh	r3, [r7, #18]
 800dd58:	4413      	add	r3, r2
 800dd5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f7f8 f90f 	bl	8005f80 <pbuf_free>
  while (p != NULL) {
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1dc      	bne.n	800dd22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f8c2 	bl	800def4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dd70:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <ip_reass_free_complete_datagram+0x140>)
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	8bfa      	ldrh	r2, [r7, #30]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d905      	bls.n	800dd86 <ip_reass_free_complete_datagram+0x112>
 800dd7a:	4b09      	ldr	r3, [pc, #36]	; (800dda0 <ip_reass_free_complete_datagram+0x12c>)
 800dd7c:	22d2      	movs	r2, #210	; 0xd2
 800dd7e:	490e      	ldr	r1, [pc, #56]	; (800ddb8 <ip_reass_free_complete_datagram+0x144>)
 800dd80:	4809      	ldr	r0, [pc, #36]	; (800dda8 <ip_reass_free_complete_datagram+0x134>)
 800dd82:	f000 fea9 	bl	800ead8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dd86:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <ip_reass_free_complete_datagram+0x140>)
 800dd88:	881a      	ldrh	r2, [r3, #0]
 800dd8a:	8bfb      	ldrh	r3, [r7, #30]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b08      	ldr	r3, [pc, #32]	; (800ddb4 <ip_reass_free_complete_datagram+0x140>)
 800dd92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dd94:	8bfb      	ldrh	r3, [r7, #30]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3720      	adds	r7, #32
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	080122b4 	.word	0x080122b4
 800dda4:	080122f0 	.word	0x080122f0
 800dda8:	080122fc 	.word	0x080122fc
 800ddac:	08012324 	.word	0x08012324
 800ddb0:	08012338 	.word	0x08012338
 800ddb4:	200083e4 	.word	0x200083e4
 800ddb8:	08012358 	.word	0x08012358

0800ddbc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	; 0x28
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ddda:	4b28      	ldr	r3, [pc, #160]	; (800de7c <ip_reass_remove_oldest_datagram+0xc0>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dde0:	e030      	b.n	800de44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde4:	695a      	ldr	r2, [r3, #20]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d10c      	bne.n	800de08 <ip_reass_remove_oldest_datagram+0x4c>
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	699a      	ldr	r2, [r3, #24]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d106      	bne.n	800de08 <ip_reass_remove_oldest_datagram+0x4c>
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	899a      	ldrh	r2, [r3, #12]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	889b      	ldrh	r3, [r3, #4]
 800de02:	b29b      	uxth	r3, r3
 800de04:	429a      	cmp	r2, r3
 800de06:	d014      	beq.n	800de32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3301      	adds	r3, #1
 800de0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d104      	bne.n	800de1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	e009      	b.n	800de32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	7fda      	ldrb	r2, [r3, #31]
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	7fdb      	ldrb	r3, [r3, #31]
 800de26:	429a      	cmp	r2, r3
 800de28:	d803      	bhi.n	800de32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1cb      	bne.n	800dde2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800de4a:	6a3b      	ldr	r3, [r7, #32]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800de50:	69b9      	ldr	r1, [r7, #24]
 800de52:	6a38      	ldr	r0, [r7, #32]
 800de54:	f7ff ff0e 	bl	800dc74 <ip_reass_free_complete_datagram>
 800de58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	da02      	bge.n	800de70 <ip_reass_remove_oldest_datagram+0xb4>
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	dcac      	bgt.n	800ddca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800de70:	697b      	ldr	r3, [r7, #20]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3728      	adds	r7, #40	; 0x28
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	200083e0 	.word	0x200083e0

0800de80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800de8a:	2004      	movs	r0, #4
 800de8c:	f7f7 f992 	bl	80051b4 <memp_malloc>
 800de90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d110      	bne.n	800deba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff ff8e 	bl	800ddbc <ip_reass_remove_oldest_datagram>
 800dea0:	4602      	mov	r2, r0
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	4293      	cmp	r3, r2
 800dea6:	dc03      	bgt.n	800deb0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dea8:	2004      	movs	r0, #4
 800deaa:	f7f7 f983 	bl	80051b4 <memp_malloc>
 800deae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e016      	b.n	800dee8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800deba:	2220      	movs	r2, #32
 800debc:	2100      	movs	r1, #0
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 fe02 	bl	800eac8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	220f      	movs	r2, #15
 800dec8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <ip_reass_enqueue_new_datagram+0x70>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ded2:	4a07      	ldr	r2, [pc, #28]	; (800def0 <ip_reass_enqueue_new_datagram+0x70>)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3308      	adds	r3, #8
 800dedc:	2214      	movs	r2, #20
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fde3 	bl	800eaac <memcpy>
  return ipr;
 800dee6:	68fb      	ldr	r3, [r7, #12]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	200083e0 	.word	0x200083e0

0800def4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800defe:	4b10      	ldr	r3, [pc, #64]	; (800df40 <ip_reass_dequeue_datagram+0x4c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d104      	bne.n	800df12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a0c      	ldr	r2, [pc, #48]	; (800df40 <ip_reass_dequeue_datagram+0x4c>)
 800df0e:	6013      	str	r3, [r2, #0]
 800df10:	e00d      	b.n	800df2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <ip_reass_dequeue_datagram+0x32>
 800df18:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <ip_reass_dequeue_datagram+0x50>)
 800df1a:	f240 1245 	movw	r2, #325	; 0x145
 800df1e:	490a      	ldr	r1, [pc, #40]	; (800df48 <ip_reass_dequeue_datagram+0x54>)
 800df20:	480a      	ldr	r0, [pc, #40]	; (800df4c <ip_reass_dequeue_datagram+0x58>)
 800df22:	f000 fdd9 	bl	800ead8 <iprintf>
    prev->next = ipr->next;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	2004      	movs	r0, #4
 800df32:	f7f7 f9af 	bl	8005294 <memp_free>
}
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	200083e0 	.word	0x200083e0
 800df44:	080122b4 	.word	0x080122b4
 800df48:	0801237c 	.word	0x0801237c
 800df4c:	080122fc 	.word	0x080122fc

0800df50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800df60:	2301      	movs	r3, #1
 800df62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	885b      	ldrh	r3, [r3, #2]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	4618      	mov	r0, r3
 800df72:	f7f6 fbeb 	bl	800474c <lwip_htons>
 800df76:	4603      	mov	r3, r0
 800df78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	f003 030f 	and.w	r3, r3, #15
 800df82:	b2db      	uxtb	r3, r3
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800df88:	7e7b      	ldrb	r3, [r7, #25]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	8b7a      	ldrh	r2, [r7, #26]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d202      	bcs.n	800df98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df92:	f04f 33ff 	mov.w	r3, #4294967295
 800df96:	e135      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800df98:	7e7b      	ldrb	r3, [r7, #25]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	8b7a      	ldrh	r2, [r7, #26]
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	88db      	ldrh	r3, [r3, #6]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7f6 fbcf 	bl	800474c <lwip_htons>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	701a      	strb	r2, [r3, #0]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	705a      	strb	r2, [r3, #1]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	709a      	strb	r2, [r3, #2]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd4:	8afa      	ldrh	r2, [r7, #22]
 800dfd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dfd8:	8afa      	ldrh	r2, [r7, #22]
 800dfda:	8b7b      	ldrh	r3, [r7, #26]
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe6:	88db      	ldrh	r3, [r3, #6]
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	8afa      	ldrh	r2, [r7, #22]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d902      	bls.n	800dff6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	e106      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	627b      	str	r3, [r7, #36]	; 0x24
 800dffc:	e068      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	889b      	ldrh	r3, [r3, #4]
 800e008:	b29a      	uxth	r2, r3
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	889b      	ldrh	r3, [r3, #4]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	429a      	cmp	r2, r3
 800e012:	d235      	bcs.n	800e080 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e018:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d020      	beq.n	800e062 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e022:	889b      	ldrh	r3, [r3, #4]
 800e024:	b29a      	uxth	r2, r3
 800e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e028:	88db      	ldrh	r3, [r3, #6]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d307      	bcc.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	88db      	ldrh	r3, [r3, #6]
 800e034:	b29a      	uxth	r2, r3
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	889b      	ldrh	r3, [r3, #4]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d902      	bls.n	800e046 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e040:	f04f 33ff 	mov.w	r3, #4294967295
 800e044:	e0de      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	88db      	ldrh	r3, [r3, #6]
 800e050:	b29a      	uxth	r2, r3
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	889b      	ldrh	r3, [r3, #4]
 800e056:	b29b      	uxth	r3, r3
 800e058:	429a      	cmp	r2, r3
 800e05a:	d03d      	beq.n	800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e05c:	2300      	movs	r3, #0
 800e05e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e060:	e03a      	b.n	800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	b29a      	uxth	r2, r3
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	889b      	ldrh	r3, [r3, #4]
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	429a      	cmp	r2, r3
 800e070:	d902      	bls.n	800e078 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e072:	f04f 33ff 	mov.w	r3, #4294967295
 800e076:	e0c5      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	605a      	str	r2, [r3, #4]
      break;
 800e07e:	e02b      	b.n	800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	889b      	ldrh	r3, [r3, #4]
 800e084:	b29a      	uxth	r2, r3
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	889b      	ldrh	r3, [r3, #4]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d102      	bne.n	800e096 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e090:	f04f 33ff 	mov.w	r3, #4294967295
 800e094:	e0b6      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e098:	889b      	ldrh	r3, [r3, #4]
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	88db      	ldrh	r3, [r3, #6]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d202      	bcs.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0aa:	e0ab      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d009      	beq.n	800e0c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	88db      	ldrh	r3, [r3, #6]
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	889b      	ldrh	r3, [r3, #4]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d001      	beq.n	800e0c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d193      	bne.n	800dffe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e0d6:	e000      	b.n	800e0da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e0d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d12d      	bne.n	800e13c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d01c      	beq.n	800e120 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	88db      	ldrh	r3, [r3, #6]
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	889b      	ldrh	r3, [r3, #4]
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d906      	bls.n	800e104 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e0f6:	4b45      	ldr	r3, [pc, #276]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e0fc:	4944      	ldr	r1, [pc, #272]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e0fe:	4845      	ldr	r0, [pc, #276]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e100:	f000 fcea 	bl	800ead8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	68ba      	ldr	r2, [r7, #8]
 800e108:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	88db      	ldrh	r3, [r3, #6]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	889b      	ldrh	r3, [r3, #4]
 800e114:	b29b      	uxth	r3, r3
 800e116:	429a      	cmp	r2, r3
 800e118:	d010      	beq.n	800e13c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	623b      	str	r3, [r7, #32]
 800e11e:	e00d      	b.n	800e13c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e128:	4b38      	ldr	r3, [pc, #224]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e12a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e12e:	493a      	ldr	r1, [pc, #232]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e130:	4838      	ldr	r0, [pc, #224]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e132:	f000 fcd1 	bl	800ead8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d105      	bne.n	800e14e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	7f9b      	ldrb	r3, [r3, #30]
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d059      	beq.n	800e202 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d04f      	beq.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d006      	beq.n	800e16a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	889b      	ldrh	r3, [r3, #4]
 800e164:	b29b      	uxth	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	623b      	str	r3, [r7, #32]
 800e16e:	e041      	b.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e17a:	e012      	b.n	800e1a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	88db      	ldrh	r3, [r3, #6]
 800e186:	b29a      	uxth	r2, r3
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	889b      	ldrh	r3, [r3, #4]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	429a      	cmp	r2, r3
 800e190:	d002      	beq.n	800e198 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e192:	2300      	movs	r3, #0
 800e194:	623b      	str	r3, [r7, #32]
            break;
 800e196:	e007      	b.n	800e1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e9      	bne.n	800e17c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d022      	beq.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d106      	bne.n	800e1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e1b6:	4b15      	ldr	r3, [pc, #84]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1b8:	f240 12df 	movw	r2, #479	; 0x1df
 800e1bc:	4917      	ldr	r1, [pc, #92]	; (800e21c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1be:	4815      	ldr	r0, [pc, #84]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1c0:	f000 fc8a 	bl	800ead8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d106      	bne.n	800e1de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e1d0:	4b0e      	ldr	r3, [pc, #56]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e1d6:	4911      	ldr	r1, [pc, #68]	; (800e21c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1d8:	480e      	ldr	r0, [pc, #56]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1da:	f000 fc7d 	bl	800ead8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d006      	beq.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e1e6:	4b09      	ldr	r3, [pc, #36]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e1ec:	490c      	ldr	r1, [pc, #48]	; (800e220 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e1ee:	4809      	ldr	r0, [pc, #36]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1f0:	f000 fc72 	bl	800ead8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	bf14      	ite	ne
 800e1fa:	2301      	movne	r3, #1
 800e1fc:	2300      	moveq	r3, #0
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	e000      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3730      	adds	r7, #48	; 0x30
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	080122b4 	.word	0x080122b4
 800e210:	08012398 	.word	0x08012398
 800e214:	080122fc 	.word	0x080122fc
 800e218:	080123b8 	.word	0x080123b8
 800e21c:	080123f0 	.word	0x080123f0
 800e220:	08012400 	.word	0x08012400

0800e224 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08e      	sub	sp, #56	; 0x38
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f003 030f 	and.w	r3, r3, #15
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b14      	cmp	r3, #20
 800e242:	f040 8171 	bne.w	800e528 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e248:	88db      	ldrh	r3, [r3, #6]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7f6 fa7d 	bl	800474c <lwip_htons>
 800e252:	4603      	mov	r3, r0
 800e254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e258:	b29b      	uxth	r3, r3
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	b29b      	uxth	r3, r3
 800e264:	4618      	mov	r0, r3
 800e266:	f7f6 fa71 	bl	800474c <lwip_htons>
 800e26a:	4603      	mov	r3, r0
 800e26c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	f003 030f 	and.w	r3, r3, #15
 800e276:	b2db      	uxtb	r3, r3
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e27e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e282:	b29b      	uxth	r3, r3
 800e284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e286:	429a      	cmp	r2, r3
 800e288:	f0c0 8150 	bcc.w	800e52c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e28c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e290:	b29b      	uxth	r3, r3
 800e292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7f7 fef9 	bl	8006090 <pbuf_clen>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e2a2:	4b8c      	ldr	r3, [pc, #560]	; (800e4d4 <ip4_reass+0x2b0>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	8c3b      	ldrh	r3, [r7, #32]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	2b0a      	cmp	r3, #10
 800e2ae:	dd10      	ble.n	800e2d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2b0:	8c3b      	ldrh	r3, [r7, #32]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2b6:	f7ff fd81 	bl	800ddbc <ip_reass_remove_oldest_datagram>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 8137 	beq.w	800e530 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e2c2:	4b84      	ldr	r3, [pc, #528]	; (800e4d4 <ip4_reass+0x2b0>)
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	8c3b      	ldrh	r3, [r7, #32]
 800e2ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2cc:	2b0a      	cmp	r3, #10
 800e2ce:	f300 812f 	bgt.w	800e530 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e2d2:	4b81      	ldr	r3, [pc, #516]	; (800e4d8 <ip4_reass+0x2b4>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e2d8:	e015      	b.n	800e306 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	695a      	ldr	r2, [r3, #20]
 800e2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d10c      	bne.n	800e300 <ip4_reass+0xdc>
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	699a      	ldr	r2, [r3, #24]
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d106      	bne.n	800e300 <ip4_reass+0xdc>
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	899a      	ldrh	r2, [r3, #12]
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	889b      	ldrh	r3, [r3, #4]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d006      	beq.n	800e30e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	633b      	str	r3, [r7, #48]	; 0x30
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e6      	bne.n	800e2da <ip4_reass+0xb6>
 800e30c:	e000      	b.n	800e310 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e30e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	2b00      	cmp	r3, #0
 800e314:	d109      	bne.n	800e32a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e316:	8c3b      	ldrh	r3, [r7, #32]
 800e318:	4619      	mov	r1, r3
 800e31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e31c:	f7ff fdb0 	bl	800de80 <ip_reass_enqueue_new_datagram>
 800e320:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	2b00      	cmp	r3, #0
 800e326:	d11c      	bne.n	800e362 <ip4_reass+0x13e>
      goto nullreturn;
 800e328:	e105      	b.n	800e536 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	88db      	ldrh	r3, [r3, #6]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	4618      	mov	r0, r3
 800e332:	f7f6 fa0b 	bl	800474c <lwip_htons>
 800e336:	4603      	mov	r3, r0
 800e338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d110      	bne.n	800e362 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	89db      	ldrh	r3, [r3, #14]
 800e344:	4618      	mov	r0, r3
 800e346:	f7f6 fa01 	bl	800474c <lwip_htons>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e350:	2b00      	cmp	r3, #0
 800e352:	d006      	beq.n	800e362 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	3308      	adds	r3, #8
 800e358:	2214      	movs	r2, #20
 800e35a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 fba5 	bl	800eaac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	88db      	ldrh	r3, [r3, #6]
 800e366:	b29b      	uxth	r3, r3
 800e368:	f003 0320 	and.w	r3, r3, #32
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	bf0c      	ite	eq
 800e370:	2301      	moveq	r3, #1
 800e372:	2300      	movne	r3, #0
 800e374:	b2db      	uxtb	r3, r3
 800e376:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00e      	beq.n	800e39c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e37e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e382:	4413      	add	r3, r2
 800e384:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e386:	8b7a      	ldrh	r2, [r7, #26]
 800e388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e38a:	429a      	cmp	r2, r3
 800e38c:	f0c0 80a0 	bcc.w	800e4d0 <ip4_reass+0x2ac>
 800e390:	8b7b      	ldrh	r3, [r7, #26]
 800e392:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e396:	4293      	cmp	r3, r2
 800e398:	f200 809a 	bhi.w	800e4d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e39c:	69fa      	ldr	r2, [r7, #28]
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3a2:	f7ff fdd5 	bl	800df50 <ip_reass_chain_frag_into_datagram_and_validate>
 800e3a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ae:	f000 809b 	beq.w	800e4e8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e3b2:	4b48      	ldr	r3, [pc, #288]	; (800e4d4 <ip4_reass+0x2b0>)
 800e3b4:	881a      	ldrh	r2, [r3, #0]
 800e3b6:	8c3b      	ldrh	r3, [r7, #32]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	4b45      	ldr	r3, [pc, #276]	; (800e4d4 <ip4_reass+0x2b0>)
 800e3be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00d      	beq.n	800e3e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e3c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3ca:	4413      	add	r3, r2
 800e3cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d0:	8a7a      	ldrh	r2, [r7, #18]
 800e3d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d6:	7f9b      	ldrb	r3, [r3, #30]
 800e3d8:	f043 0301 	orr.w	r3, r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d171      	bne.n	800e4cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	8b9b      	ldrh	r3, [r3, #28]
 800e3ec:	3314      	adds	r3, #20
 800e3ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e404:	3308      	adds	r3, #8
 800e406:	2214      	movs	r2, #20
 800e408:	4619      	mov	r1, r3
 800e40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e40c:	f000 fb4e 	bl	800eaac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e410:	8a3b      	ldrh	r3, [r7, #16]
 800e412:	4618      	mov	r0, r3
 800e414:	f7f6 f99a 	bl	800474c <lwip_htons>
 800e418:	4603      	mov	r3, r0
 800e41a:	461a      	mov	r2, r3
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	2200      	movs	r2, #0
 800e424:	719a      	strb	r2, [r3, #6]
 800e426:	2200      	movs	r2, #0
 800e428:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	2200      	movs	r2, #0
 800e42e:	729a      	strb	r2, [r3, #10]
 800e430:	2200      	movs	r2, #0
 800e432:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e43a:	e00d      	b.n	800e458 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e442:	2114      	movs	r1, #20
 800e444:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e446:	f7f7 fd15 	bl	8005e74 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e44a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7f7 fe59 	bl	8006104 <pbuf_cat>
      r = iprh->next_pbuf;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1ee      	bne.n	800e43c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e45e:	4b1e      	ldr	r3, [pc, #120]	; (800e4d8 <ip4_reass+0x2b4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e464:	429a      	cmp	r2, r3
 800e466:	d102      	bne.n	800e46e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e468:	2300      	movs	r3, #0
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46c:	e010      	b.n	800e490 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e46e:	4b1a      	ldr	r3, [pc, #104]	; (800e4d8 <ip4_reass+0x2b4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e474:	e007      	b.n	800e486 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d006      	beq.n	800e48e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1f4      	bne.n	800e476 <ip4_reass+0x252>
 800e48c:	e000      	b.n	800e490 <ip4_reass+0x26c>
          break;
 800e48e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e494:	f7ff fd2e 	bl	800def4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7f7 fdf9 	bl	8006090 <pbuf_clen>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e4a2:	4b0c      	ldr	r3, [pc, #48]	; (800e4d4 <ip4_reass+0x2b0>)
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	8c3a      	ldrh	r2, [r7, #32]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d906      	bls.n	800e4ba <ip4_reass+0x296>
 800e4ac:	4b0b      	ldr	r3, [pc, #44]	; (800e4dc <ip4_reass+0x2b8>)
 800e4ae:	f240 229b 	movw	r2, #667	; 0x29b
 800e4b2:	490b      	ldr	r1, [pc, #44]	; (800e4e0 <ip4_reass+0x2bc>)
 800e4b4:	480b      	ldr	r0, [pc, #44]	; (800e4e4 <ip4_reass+0x2c0>)
 800e4b6:	f000 fb0f 	bl	800ead8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e4ba:	4b06      	ldr	r3, [pc, #24]	; (800e4d4 <ip4_reass+0x2b0>)
 800e4bc:	881a      	ldrh	r2, [r3, #0]
 800e4be:	8c3b      	ldrh	r3, [r7, #32]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	4b03      	ldr	r3, [pc, #12]	; (800e4d4 <ip4_reass+0x2b0>)
 800e4c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	e038      	b.n	800e53e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e036      	b.n	800e53e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e4d0:	bf00      	nop
 800e4d2:	e00a      	b.n	800e4ea <ip4_reass+0x2c6>
 800e4d4:	200083e4 	.word	0x200083e4
 800e4d8:	200083e0 	.word	0x200083e0
 800e4dc:	080122b4 	.word	0x080122b4
 800e4e0:	08012424 	.word	0x08012424
 800e4e4:	080122fc 	.word	0x080122fc
    goto nullreturn_ipr;
 800e4e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d106      	bne.n	800e4fe <ip4_reass+0x2da>
 800e4f0:	4b15      	ldr	r3, [pc, #84]	; (800e548 <ip4_reass+0x324>)
 800e4f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e4f6:	4915      	ldr	r1, [pc, #84]	; (800e54c <ip4_reass+0x328>)
 800e4f8:	4815      	ldr	r0, [pc, #84]	; (800e550 <ip4_reass+0x32c>)
 800e4fa:	f000 faed 	bl	800ead8 <iprintf>
  if (ipr->p == NULL) {
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d116      	bne.n	800e534 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e506:	4b13      	ldr	r3, [pc, #76]	; (800e554 <ip4_reass+0x330>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d006      	beq.n	800e51e <ip4_reass+0x2fa>
 800e510:	4b0d      	ldr	r3, [pc, #52]	; (800e548 <ip4_reass+0x324>)
 800e512:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e516:	4910      	ldr	r1, [pc, #64]	; (800e558 <ip4_reass+0x334>)
 800e518:	480d      	ldr	r0, [pc, #52]	; (800e550 <ip4_reass+0x32c>)
 800e51a:	f000 fadd 	bl	800ead8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e51e:	2100      	movs	r1, #0
 800e520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e522:	f7ff fce7 	bl	800def4 <ip_reass_dequeue_datagram>
 800e526:	e006      	b.n	800e536 <ip4_reass+0x312>
    goto nullreturn;
 800e528:	bf00      	nop
 800e52a:	e004      	b.n	800e536 <ip4_reass+0x312>
    goto nullreturn;
 800e52c:	bf00      	nop
 800e52e:	e002      	b.n	800e536 <ip4_reass+0x312>
      goto nullreturn;
 800e530:	bf00      	nop
 800e532:	e000      	b.n	800e536 <ip4_reass+0x312>
  }

nullreturn:
 800e534:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7f7 fd22 	bl	8005f80 <pbuf_free>
  return NULL;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3738      	adds	r7, #56	; 0x38
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	080122b4 	.word	0x080122b4
 800e54c:	08012440 	.word	0x08012440
 800e550:	080122fc 	.word	0x080122fc
 800e554:	200083e0 	.word	0x200083e0
 800e558:	0801244c 	.word	0x0801244c

0800e55c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e560:	2005      	movs	r0, #5
 800e562:	f7f6 fe27 	bl	80051b4 <memp_malloc>
 800e566:	4603      	mov	r3, r0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e57c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e580:	4906      	ldr	r1, [pc, #24]	; (800e59c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e582:	4807      	ldr	r0, [pc, #28]	; (800e5a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e584:	f000 faa8 	bl	800ead8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	2005      	movs	r0, #5
 800e58c:	f7f6 fe82 	bl	8005294 <memp_free>
}
 800e590:	bf00      	nop
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	080122b4 	.word	0x080122b4
 800e59c:	0801246c 	.word	0x0801246c
 800e5a0:	080122fc 	.word	0x080122fc

0800e5a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <ipfrag_free_pbuf_custom+0x20>
 800e5b6:	4b11      	ldr	r3, [pc, #68]	; (800e5fc <ipfrag_free_pbuf_custom+0x58>)
 800e5b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e5bc:	4910      	ldr	r1, [pc, #64]	; (800e600 <ipfrag_free_pbuf_custom+0x5c>)
 800e5be:	4811      	ldr	r0, [pc, #68]	; (800e604 <ipfrag_free_pbuf_custom+0x60>)
 800e5c0:	f000 fa8a 	bl	800ead8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d006      	beq.n	800e5da <ipfrag_free_pbuf_custom+0x36>
 800e5cc:	4b0b      	ldr	r3, [pc, #44]	; (800e5fc <ipfrag_free_pbuf_custom+0x58>)
 800e5ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e5d2:	490d      	ldr	r1, [pc, #52]	; (800e608 <ipfrag_free_pbuf_custom+0x64>)
 800e5d4:	480b      	ldr	r0, [pc, #44]	; (800e604 <ipfrag_free_pbuf_custom+0x60>)
 800e5d6:	f000 fa7f 	bl	800ead8 <iprintf>
  if (pcr->original != NULL) {
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	695b      	ldr	r3, [r3, #20]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7f7 fcca 	bl	8005f80 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7ff ffbd 	bl	800e56c <ip_frag_free_pbuf_custom_ref>
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	080122b4 	.word	0x080122b4
 800e600:	08012478 	.word	0x08012478
 800e604:	080122fc 	.word	0x080122fc
 800e608:	08012484 	.word	0x08012484

0800e60c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b094      	sub	sp, #80	; 0x50
 800e610:	af02      	add	r7, sp, #8
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e622:	3b14      	subs	r3, #20
 800e624:	2b00      	cmp	r3, #0
 800e626:	da00      	bge.n	800e62a <ip4_frag+0x1e>
 800e628:	3307      	adds	r3, #7
 800e62a:	10db      	asrs	r3, r3, #3
 800e62c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e62e:	2314      	movs	r3, #20
 800e630:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	b2db      	uxtb	r3, r3
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b14      	cmp	r3, #20
 800e64c:	d002      	beq.n	800e654 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e64e:	f06f 0305 	mvn.w	r3, #5
 800e652:	e110      	b.n	800e876 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	895b      	ldrh	r3, [r3, #10]
 800e658:	2b13      	cmp	r3, #19
 800e65a:	d809      	bhi.n	800e670 <ip4_frag+0x64>
 800e65c:	4b88      	ldr	r3, [pc, #544]	; (800e880 <ip4_frag+0x274>)
 800e65e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e662:	4988      	ldr	r1, [pc, #544]	; (800e884 <ip4_frag+0x278>)
 800e664:	4888      	ldr	r0, [pc, #544]	; (800e888 <ip4_frag+0x27c>)
 800e666:	f000 fa37 	bl	800ead8 <iprintf>
 800e66a:	f06f 0305 	mvn.w	r3, #5
 800e66e:	e102      	b.n	800e876 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e672:	88db      	ldrh	r3, [r3, #6]
 800e674:	b29b      	uxth	r3, r3
 800e676:	4618      	mov	r0, r3
 800e678:	f7f6 f868 	bl	800474c <lwip_htons>
 800e67c:	4603      	mov	r3, r0
 800e67e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e686:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e68a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e68c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e690:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	891b      	ldrh	r3, [r3, #8]
 800e696:	3b14      	subs	r3, #20
 800e698:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e69c:	e0e1      	b.n	800e862 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e69e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	bf28      	it	cs
 800e6ac:	4613      	movcs	r3, r2
 800e6ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e6b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6b4:	2114      	movs	r1, #20
 800e6b6:	200e      	movs	r0, #14
 800e6b8:	f7f7 f97e 	bl	80059b8 <pbuf_alloc>
 800e6bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 80d5 	beq.w	800e870 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	895b      	ldrh	r3, [r3, #10]
 800e6ca:	2b13      	cmp	r3, #19
 800e6cc:	d806      	bhi.n	800e6dc <ip4_frag+0xd0>
 800e6ce:	4b6c      	ldr	r3, [pc, #432]	; (800e880 <ip4_frag+0x274>)
 800e6d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e6d4:	496d      	ldr	r1, [pc, #436]	; (800e88c <ip4_frag+0x280>)
 800e6d6:	486c      	ldr	r0, [pc, #432]	; (800e888 <ip4_frag+0x27c>)
 800e6d8:	f000 f9fe 	bl	800ead8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	2214      	movs	r2, #20
 800e6e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 f9e1 	bl	800eaac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e6f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e6f6:	e064      	b.n	800e7c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	895a      	ldrh	r2, [r3, #10]
 800e6fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	895b      	ldrh	r3, [r3, #10]
 800e706:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e708:	429a      	cmp	r2, r3
 800e70a:	d906      	bls.n	800e71a <ip4_frag+0x10e>
 800e70c:	4b5c      	ldr	r3, [pc, #368]	; (800e880 <ip4_frag+0x274>)
 800e70e:	f240 322d 	movw	r2, #813	; 0x32d
 800e712:	495f      	ldr	r1, [pc, #380]	; (800e890 <ip4_frag+0x284>)
 800e714:	485c      	ldr	r0, [pc, #368]	; (800e888 <ip4_frag+0x27c>)
 800e716:	f000 f9df 	bl	800ead8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e71a:	8bfa      	ldrh	r2, [r7, #30]
 800e71c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e720:	4293      	cmp	r3, r2
 800e722:	bf28      	it	cs
 800e724:	4613      	movcs	r3, r2
 800e726:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e72a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d105      	bne.n	800e73e <ip4_frag+0x132>
        poff = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60fb      	str	r3, [r7, #12]
        continue;
 800e73c:	e041      	b.n	800e7c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e73e:	f7ff ff0d 	bl	800e55c <ip_frag_alloc_pbuf_custom_ref>
 800e742:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d103      	bne.n	800e752 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e74c:	f7f7 fc18 	bl	8005f80 <pbuf_free>
        goto memerr;
 800e750:	e08f      	b.n	800e872 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e752:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e75a:	4413      	add	r3, r2
 800e75c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e760:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e764:	9201      	str	r2, [sp, #4]
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	4603      	mov	r3, r0
 800e76a:	2241      	movs	r2, #65	; 0x41
 800e76c:	2000      	movs	r0, #0
 800e76e:	f7f7 fa4d 	bl	8005c0c <pbuf_alloced_custom>
 800e772:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d106      	bne.n	800e788 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e77a:	69b8      	ldr	r0, [r7, #24]
 800e77c:	f7ff fef6 	bl	800e56c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e782:	f7f7 fbfd 	bl	8005f80 <pbuf_free>
        goto memerr;
 800e786:	e074      	b.n	800e872 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7f7 fc99 	bl	80060c0 <pbuf_ref>
      pcr->original = p;
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	4a3f      	ldr	r2, [pc, #252]	; (800e894 <ip4_frag+0x288>)
 800e798:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e79a:	6979      	ldr	r1, [r7, #20]
 800e79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e79e:	f7f7 fcb1 	bl	8006104 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e7a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e7a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e7b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d004      	beq.n	800e7c2 <ip4_frag+0x1b6>
        poff = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e7c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d196      	bne.n	800e6f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e7ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e7cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7d0:	4413      	add	r3, r2
 800e7d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7d8:	f1a3 0213 	sub.w	r2, r3, #19
 800e7dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	bfcc      	ite	gt
 800e7e4:	2301      	movgt	r3, #1
 800e7e6:	2300      	movle	r3, #0
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e7ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e7f6:	6a3b      	ldr	r3, [r7, #32]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <ip4_frag+0x1f6>
 800e7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e808:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e80a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7f5 ff9d 	bl	800474c <lwip_htons>
 800e812:	4603      	mov	r3, r0
 800e814:	461a      	mov	r2, r3
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e81a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e81c:	3314      	adds	r3, #20
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7f5 ff93 	bl	800474c <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	2200      	movs	r2, #0
 800e832:	729a      	strb	r2, [r3, #10]
 800e834:	2200      	movs	r2, #0
 800e836:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e846:	f7f7 fb9b 	bl	8005f80 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e84a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e84e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e856:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e85a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e85c:	4413      	add	r3, r2
 800e85e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e866:	2b00      	cmp	r3, #0
 800e868:	f47f af19 	bne.w	800e69e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	e002      	b.n	800e876 <ip4_frag+0x26a>
      goto memerr;
 800e870:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e876:	4618      	mov	r0, r3
 800e878:	3748      	adds	r7, #72	; 0x48
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	080122b4 	.word	0x080122b4
 800e884:	08012490 	.word	0x08012490
 800e888:	080122fc 	.word	0x080122fc
 800e88c:	080124ac 	.word	0x080124ac
 800e890:	080124cc 	.word	0x080124cc
 800e894:	0800e5a5 	.word	0x0800e5a5

0800e898 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e8a2:	230e      	movs	r3, #14
 800e8a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	895b      	ldrh	r3, [r3, #10]
 800e8aa:	2b0e      	cmp	r3, #14
 800e8ac:	d96e      	bls.n	800e98c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7bdb      	ldrb	r3, [r3, #15]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d106      	bne.n	800e8c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8bc:	3301      	adds	r3, #1
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	7b1a      	ldrb	r2, [r3, #12]
 800e8ce:	7b5b      	ldrb	r3, [r3, #13]
 800e8d0:	021b      	lsls	r3, r3, #8
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	f003 0301 	and.w	r3, r3, #1
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d023      	beq.n	800e92a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d10f      	bne.n	800e90a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	785b      	ldrb	r3, [r3, #1]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d11b      	bne.n	800e92a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e8f6:	2b5e      	cmp	r3, #94	; 0x5e
 800e8f8:	d117      	bne.n	800e92a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	7b5b      	ldrb	r3, [r3, #13]
 800e8fe:	f043 0310 	orr.w	r3, r3, #16
 800e902:	b2da      	uxtb	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	735a      	strb	r2, [r3, #13]
 800e908:	e00f      	b.n	800e92a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	2206      	movs	r2, #6
 800e90e:	4928      	ldr	r1, [pc, #160]	; (800e9b0 <ethernet_input+0x118>)
 800e910:	4618      	mov	r0, r3
 800e912:	f000 f8bb 	bl	800ea8c <memcmp>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7b5b      	ldrb	r3, [r3, #13]
 800e920:	f043 0308 	orr.w	r3, r3, #8
 800e924:	b2da      	uxtb	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e92a:	89fb      	ldrh	r3, [r7, #14]
 800e92c:	2b08      	cmp	r3, #8
 800e92e:	d003      	beq.n	800e938 <ethernet_input+0xa0>
 800e930:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e934:	d014      	beq.n	800e960 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e936:	e032      	b.n	800e99e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e93e:	f003 0308 	and.w	r3, r3, #8
 800e942:	2b00      	cmp	r3, #0
 800e944:	d024      	beq.n	800e990 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e946:	8afb      	ldrh	r3, [r7, #22]
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7f7 fa92 	bl	8005e74 <pbuf_remove_header>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d11e      	bne.n	800e994 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e956:	6839      	ldr	r1, [r7, #0]
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7fe ff21 	bl	800d7a0 <ip4_input>
      break;
 800e95e:	e013      	b.n	800e988 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e966:	f003 0308 	and.w	r3, r3, #8
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d014      	beq.n	800e998 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e96e:	8afb      	ldrh	r3, [r7, #22]
 800e970:	4619      	mov	r1, r3
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7f7 fa7e 	bl	8005e74 <pbuf_remove_header>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10e      	bne.n	800e99c <ethernet_input+0x104>
        etharp_input(p, netif);
 800e97e:	6839      	ldr	r1, [r7, #0]
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7fe f89b 	bl	800cabc <etharp_input>
      break;
 800e986:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e988:	2300      	movs	r3, #0
 800e98a:	e00c      	b.n	800e9a6 <ethernet_input+0x10e>
    goto free_and_return;
 800e98c:	bf00      	nop
 800e98e:	e006      	b.n	800e99e <ethernet_input+0x106>
        goto free_and_return;
 800e990:	bf00      	nop
 800e992:	e004      	b.n	800e99e <ethernet_input+0x106>
        goto free_and_return;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <ethernet_input+0x106>
        goto free_and_return;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <ethernet_input+0x106>
        goto free_and_return;
 800e99c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7f7 faee 	bl	8005f80 <pbuf_free>
  return ERR_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3718      	adds	r7, #24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	08012668 	.word	0x08012668

0800e9b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e9c2:	8c3b      	ldrh	r3, [r7, #32]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f5 fec1 	bl	800474c <lwip_htons>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e9ce:	210e      	movs	r1, #14
 800e9d0:	68b8      	ldr	r0, [r7, #8]
 800e9d2:	f7f7 fa3f 	bl	8005e54 <pbuf_add_header>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d125      	bne.n	800ea28 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	8afa      	ldrh	r2, [r7, #22]
 800e9e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	2206      	movs	r2, #6
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f85c 	bl	800eaac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	3306      	adds	r3, #6
 800e9f8:	2206      	movs	r2, #6
 800e9fa:	6879      	ldr	r1, [r7, #4]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 f855 	bl	800eaac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea08:	2b06      	cmp	r3, #6
 800ea0a:	d006      	beq.n	800ea1a <ethernet_output+0x66>
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <ethernet_output+0x84>)
 800ea0e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ea12:	490a      	ldr	r1, [pc, #40]	; (800ea3c <ethernet_output+0x88>)
 800ea14:	480a      	ldr	r0, [pc, #40]	; (800ea40 <ethernet_output+0x8c>)
 800ea16:	f000 f85f 	bl	800ead8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	699b      	ldr	r3, [r3, #24]
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	4798      	blx	r3
 800ea24:	4603      	mov	r3, r0
 800ea26:	e002      	b.n	800ea2e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ea28:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ea2a:	f06f 0301 	mvn.w	r3, #1
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	080124dc 	.word	0x080124dc
 800ea3c:	08012514 	.word	0x08012514
 800ea40:	08012548 	.word	0x08012548

0800ea44 <__libc_init_array>:
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	4d0d      	ldr	r5, [pc, #52]	; (800ea7c <__libc_init_array+0x38>)
 800ea48:	4c0d      	ldr	r4, [pc, #52]	; (800ea80 <__libc_init_array+0x3c>)
 800ea4a:	1b64      	subs	r4, r4, r5
 800ea4c:	10a4      	asrs	r4, r4, #2
 800ea4e:	2600      	movs	r6, #0
 800ea50:	42a6      	cmp	r6, r4
 800ea52:	d109      	bne.n	800ea68 <__libc_init_array+0x24>
 800ea54:	4d0b      	ldr	r5, [pc, #44]	; (800ea84 <__libc_init_array+0x40>)
 800ea56:	4c0c      	ldr	r4, [pc, #48]	; (800ea88 <__libc_init_array+0x44>)
 800ea58:	f001 f88e 	bl	800fb78 <_init>
 800ea5c:	1b64      	subs	r4, r4, r5
 800ea5e:	10a4      	asrs	r4, r4, #2
 800ea60:	2600      	movs	r6, #0
 800ea62:	42a6      	cmp	r6, r4
 800ea64:	d105      	bne.n	800ea72 <__libc_init_array+0x2e>
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea6c:	4798      	blx	r3
 800ea6e:	3601      	adds	r6, #1
 800ea70:	e7ee      	b.n	800ea50 <__libc_init_array+0xc>
 800ea72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea76:	4798      	blx	r3
 800ea78:	3601      	adds	r6, #1
 800ea7a:	e7f2      	b.n	800ea62 <__libc_init_array+0x1e>
 800ea7c:	080127c8 	.word	0x080127c8
 800ea80:	080127c8 	.word	0x080127c8
 800ea84:	080127c8 	.word	0x080127c8
 800ea88:	080127cc 	.word	0x080127cc

0800ea8c <memcmp>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	3901      	subs	r1, #1
 800ea90:	4402      	add	r2, r0
 800ea92:	4290      	cmp	r0, r2
 800ea94:	d101      	bne.n	800ea9a <memcmp+0xe>
 800ea96:	2000      	movs	r0, #0
 800ea98:	e005      	b.n	800eaa6 <memcmp+0x1a>
 800ea9a:	7803      	ldrb	r3, [r0, #0]
 800ea9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eaa0:	42a3      	cmp	r3, r4
 800eaa2:	d001      	beq.n	800eaa8 <memcmp+0x1c>
 800eaa4:	1b18      	subs	r0, r3, r4
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	e7f2      	b.n	800ea92 <memcmp+0x6>

0800eaac <memcpy>:
 800eaac:	440a      	add	r2, r1
 800eaae:	4291      	cmp	r1, r2
 800eab0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eab4:	d100      	bne.n	800eab8 <memcpy+0xc>
 800eab6:	4770      	bx	lr
 800eab8:	b510      	push	{r4, lr}
 800eaba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eac2:	4291      	cmp	r1, r2
 800eac4:	d1f9      	bne.n	800eaba <memcpy+0xe>
 800eac6:	bd10      	pop	{r4, pc}

0800eac8 <memset>:
 800eac8:	4402      	add	r2, r0
 800eaca:	4603      	mov	r3, r0
 800eacc:	4293      	cmp	r3, r2
 800eace:	d100      	bne.n	800ead2 <memset+0xa>
 800ead0:	4770      	bx	lr
 800ead2:	f803 1b01 	strb.w	r1, [r3], #1
 800ead6:	e7f9      	b.n	800eacc <memset+0x4>

0800ead8 <iprintf>:
 800ead8:	b40f      	push	{r0, r1, r2, r3}
 800eada:	4b0a      	ldr	r3, [pc, #40]	; (800eb04 <iprintf+0x2c>)
 800eadc:	b513      	push	{r0, r1, r4, lr}
 800eade:	681c      	ldr	r4, [r3, #0]
 800eae0:	b124      	cbz	r4, 800eaec <iprintf+0x14>
 800eae2:	69a3      	ldr	r3, [r4, #24]
 800eae4:	b913      	cbnz	r3, 800eaec <iprintf+0x14>
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 f8c2 	bl	800ec70 <__sinit>
 800eaec:	ab05      	add	r3, sp, #20
 800eaee:	9a04      	ldr	r2, [sp, #16]
 800eaf0:	68a1      	ldr	r1, [r4, #8]
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 fa7f 	bl	800eff8 <_vfiprintf_r>
 800eafa:	b002      	add	sp, #8
 800eafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb00:	b004      	add	sp, #16
 800eb02:	4770      	bx	lr
 800eb04:	2000002c 	.word	0x2000002c

0800eb08 <rand>:
 800eb08:	4b16      	ldr	r3, [pc, #88]	; (800eb64 <rand+0x5c>)
 800eb0a:	b510      	push	{r4, lr}
 800eb0c:	681c      	ldr	r4, [r3, #0]
 800eb0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb10:	b9b3      	cbnz	r3, 800eb40 <rand+0x38>
 800eb12:	2018      	movs	r0, #24
 800eb14:	f000 f95e 	bl	800edd4 <malloc>
 800eb18:	63a0      	str	r0, [r4, #56]	; 0x38
 800eb1a:	b928      	cbnz	r0, 800eb28 <rand+0x20>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <rand+0x60>)
 800eb20:	4812      	ldr	r0, [pc, #72]	; (800eb6c <rand+0x64>)
 800eb22:	214e      	movs	r1, #78	; 0x4e
 800eb24:	f000 f82e 	bl	800eb84 <__assert_func>
 800eb28:	4a11      	ldr	r2, [pc, #68]	; (800eb70 <rand+0x68>)
 800eb2a:	4b12      	ldr	r3, [pc, #72]	; (800eb74 <rand+0x6c>)
 800eb2c:	e9c0 2300 	strd	r2, r3, [r0]
 800eb30:	4b11      	ldr	r3, [pc, #68]	; (800eb78 <rand+0x70>)
 800eb32:	6083      	str	r3, [r0, #8]
 800eb34:	230b      	movs	r3, #11
 800eb36:	8183      	strh	r3, [r0, #12]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eb40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800eb42:	4a0e      	ldr	r2, [pc, #56]	; (800eb7c <rand+0x74>)
 800eb44:	6920      	ldr	r0, [r4, #16]
 800eb46:	6963      	ldr	r3, [r4, #20]
 800eb48:	490d      	ldr	r1, [pc, #52]	; (800eb80 <rand+0x78>)
 800eb4a:	4342      	muls	r2, r0
 800eb4c:	fb01 2203 	mla	r2, r1, r3, r2
 800eb50:	fba0 0101 	umull	r0, r1, r0, r1
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	eb42 0001 	adc.w	r0, r2, r1
 800eb5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800eb5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb62:	bd10      	pop	{r4, pc}
 800eb64:	2000002c 	.word	0x2000002c
 800eb68:	0801267c 	.word	0x0801267c
 800eb6c:	08012693 	.word	0x08012693
 800eb70:	abcd330e 	.word	0xabcd330e
 800eb74:	e66d1234 	.word	0xe66d1234
 800eb78:	0005deec 	.word	0x0005deec
 800eb7c:	5851f42d 	.word	0x5851f42d
 800eb80:	4c957f2d 	.word	0x4c957f2d

0800eb84 <__assert_func>:
 800eb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb86:	4614      	mov	r4, r2
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4b09      	ldr	r3, [pc, #36]	; (800ebb0 <__assert_func+0x2c>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4605      	mov	r5, r0
 800eb90:	68d8      	ldr	r0, [r3, #12]
 800eb92:	b14c      	cbz	r4, 800eba8 <__assert_func+0x24>
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <__assert_func+0x30>)
 800eb96:	9100      	str	r1, [sp, #0]
 800eb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb9c:	4906      	ldr	r1, [pc, #24]	; (800ebb8 <__assert_func+0x34>)
 800eb9e:	462b      	mov	r3, r5
 800eba0:	f000 f8e4 	bl	800ed6c <fiprintf>
 800eba4:	f000 fe12 	bl	800f7cc <abort>
 800eba8:	4b04      	ldr	r3, [pc, #16]	; (800ebbc <__assert_func+0x38>)
 800ebaa:	461c      	mov	r4, r3
 800ebac:	e7f3      	b.n	800eb96 <__assert_func+0x12>
 800ebae:	bf00      	nop
 800ebb0:	2000002c 	.word	0x2000002c
 800ebb4:	080126ee 	.word	0x080126ee
 800ebb8:	080126fb 	.word	0x080126fb
 800ebbc:	08012729 	.word	0x08012729

0800ebc0 <std>:
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	b510      	push	{r4, lr}
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	e9c0 3300 	strd	r3, r3, [r0]
 800ebca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebce:	6083      	str	r3, [r0, #8]
 800ebd0:	8181      	strh	r1, [r0, #12]
 800ebd2:	6643      	str	r3, [r0, #100]	; 0x64
 800ebd4:	81c2      	strh	r2, [r0, #14]
 800ebd6:	6183      	str	r3, [r0, #24]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	2208      	movs	r2, #8
 800ebdc:	305c      	adds	r0, #92	; 0x5c
 800ebde:	f7ff ff73 	bl	800eac8 <memset>
 800ebe2:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <std+0x38>)
 800ebe4:	6263      	str	r3, [r4, #36]	; 0x24
 800ebe6:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <std+0x3c>)
 800ebe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebea:	4b05      	ldr	r3, [pc, #20]	; (800ec00 <std+0x40>)
 800ebec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebee:	4b05      	ldr	r3, [pc, #20]	; (800ec04 <std+0x44>)
 800ebf0:	6224      	str	r4, [r4, #32]
 800ebf2:	6323      	str	r3, [r4, #48]	; 0x30
 800ebf4:	bd10      	pop	{r4, pc}
 800ebf6:	bf00      	nop
 800ebf8:	0800f5a1 	.word	0x0800f5a1
 800ebfc:	0800f5c3 	.word	0x0800f5c3
 800ec00:	0800f5fb 	.word	0x0800f5fb
 800ec04:	0800f61f 	.word	0x0800f61f

0800ec08 <_cleanup_r>:
 800ec08:	4901      	ldr	r1, [pc, #4]	; (800ec10 <_cleanup_r+0x8>)
 800ec0a:	f000 b8c1 	b.w	800ed90 <_fwalk_reent>
 800ec0e:	bf00      	nop
 800ec10:	0800f909 	.word	0x0800f909

0800ec14 <__sfmoreglue>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	2268      	movs	r2, #104	; 0x68
 800ec18:	1e4d      	subs	r5, r1, #1
 800ec1a:	4355      	muls	r5, r2
 800ec1c:	460e      	mov	r6, r1
 800ec1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec22:	f000 f94b 	bl	800eebc <_malloc_r>
 800ec26:	4604      	mov	r4, r0
 800ec28:	b140      	cbz	r0, 800ec3c <__sfmoreglue+0x28>
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	e9c0 1600 	strd	r1, r6, [r0]
 800ec30:	300c      	adds	r0, #12
 800ec32:	60a0      	str	r0, [r4, #8]
 800ec34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec38:	f7ff ff46 	bl	800eac8 <memset>
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}

0800ec40 <__sfp_lock_acquire>:
 800ec40:	4801      	ldr	r0, [pc, #4]	; (800ec48 <__sfp_lock_acquire+0x8>)
 800ec42:	f000 b8c5 	b.w	800edd0 <__retarget_lock_acquire_recursive>
 800ec46:	bf00      	nop
 800ec48:	200083ed 	.word	0x200083ed

0800ec4c <__sfp_lock_release>:
 800ec4c:	4801      	ldr	r0, [pc, #4]	; (800ec54 <__sfp_lock_release+0x8>)
 800ec4e:	f000 b8c0 	b.w	800edd2 <__retarget_lock_release_recursive>
 800ec52:	bf00      	nop
 800ec54:	200083ed 	.word	0x200083ed

0800ec58 <__sinit_lock_acquire>:
 800ec58:	4801      	ldr	r0, [pc, #4]	; (800ec60 <__sinit_lock_acquire+0x8>)
 800ec5a:	f000 b8b9 	b.w	800edd0 <__retarget_lock_acquire_recursive>
 800ec5e:	bf00      	nop
 800ec60:	200083ee 	.word	0x200083ee

0800ec64 <__sinit_lock_release>:
 800ec64:	4801      	ldr	r0, [pc, #4]	; (800ec6c <__sinit_lock_release+0x8>)
 800ec66:	f000 b8b4 	b.w	800edd2 <__retarget_lock_release_recursive>
 800ec6a:	bf00      	nop
 800ec6c:	200083ee 	.word	0x200083ee

0800ec70 <__sinit>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	4604      	mov	r4, r0
 800ec74:	f7ff fff0 	bl	800ec58 <__sinit_lock_acquire>
 800ec78:	69a3      	ldr	r3, [r4, #24]
 800ec7a:	b11b      	cbz	r3, 800ec84 <__sinit+0x14>
 800ec7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec80:	f7ff bff0 	b.w	800ec64 <__sinit_lock_release>
 800ec84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec88:	6523      	str	r3, [r4, #80]	; 0x50
 800ec8a:	4b13      	ldr	r3, [pc, #76]	; (800ecd8 <__sinit+0x68>)
 800ec8c:	4a13      	ldr	r2, [pc, #76]	; (800ecdc <__sinit+0x6c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec92:	42a3      	cmp	r3, r4
 800ec94:	bf04      	itt	eq
 800ec96:	2301      	moveq	r3, #1
 800ec98:	61a3      	streq	r3, [r4, #24]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f000 f820 	bl	800ece0 <__sfp>
 800eca0:	6060      	str	r0, [r4, #4]
 800eca2:	4620      	mov	r0, r4
 800eca4:	f000 f81c 	bl	800ece0 <__sfp>
 800eca8:	60a0      	str	r0, [r4, #8]
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f000 f818 	bl	800ece0 <__sfp>
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	60e0      	str	r0, [r4, #12]
 800ecb4:	2104      	movs	r1, #4
 800ecb6:	6860      	ldr	r0, [r4, #4]
 800ecb8:	f7ff ff82 	bl	800ebc0 <std>
 800ecbc:	68a0      	ldr	r0, [r4, #8]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	2109      	movs	r1, #9
 800ecc2:	f7ff ff7d 	bl	800ebc0 <std>
 800ecc6:	68e0      	ldr	r0, [r4, #12]
 800ecc8:	2202      	movs	r2, #2
 800ecca:	2112      	movs	r1, #18
 800eccc:	f7ff ff78 	bl	800ebc0 <std>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	61a3      	str	r3, [r4, #24]
 800ecd4:	e7d2      	b.n	800ec7c <__sinit+0xc>
 800ecd6:	bf00      	nop
 800ecd8:	08012678 	.word	0x08012678
 800ecdc:	0800ec09 	.word	0x0800ec09

0800ece0 <__sfp>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	4607      	mov	r7, r0
 800ece4:	f7ff ffac 	bl	800ec40 <__sfp_lock_acquire>
 800ece8:	4b1e      	ldr	r3, [pc, #120]	; (800ed64 <__sfp+0x84>)
 800ecea:	681e      	ldr	r6, [r3, #0]
 800ecec:	69b3      	ldr	r3, [r6, #24]
 800ecee:	b913      	cbnz	r3, 800ecf6 <__sfp+0x16>
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f7ff ffbd 	bl	800ec70 <__sinit>
 800ecf6:	3648      	adds	r6, #72	; 0x48
 800ecf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	d503      	bpl.n	800ed08 <__sfp+0x28>
 800ed00:	6833      	ldr	r3, [r6, #0]
 800ed02:	b30b      	cbz	r3, 800ed48 <__sfp+0x68>
 800ed04:	6836      	ldr	r6, [r6, #0]
 800ed06:	e7f7      	b.n	800ecf8 <__sfp+0x18>
 800ed08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed0c:	b9d5      	cbnz	r5, 800ed44 <__sfp+0x64>
 800ed0e:	4b16      	ldr	r3, [pc, #88]	; (800ed68 <__sfp+0x88>)
 800ed10:	60e3      	str	r3, [r4, #12]
 800ed12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed16:	6665      	str	r5, [r4, #100]	; 0x64
 800ed18:	f000 f859 	bl	800edce <__retarget_lock_init_recursive>
 800ed1c:	f7ff ff96 	bl	800ec4c <__sfp_lock_release>
 800ed20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed28:	6025      	str	r5, [r4, #0]
 800ed2a:	61a5      	str	r5, [r4, #24]
 800ed2c:	2208      	movs	r2, #8
 800ed2e:	4629      	mov	r1, r5
 800ed30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed34:	f7ff fec8 	bl	800eac8 <memset>
 800ed38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed40:	4620      	mov	r0, r4
 800ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed44:	3468      	adds	r4, #104	; 0x68
 800ed46:	e7d9      	b.n	800ecfc <__sfp+0x1c>
 800ed48:	2104      	movs	r1, #4
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7ff ff62 	bl	800ec14 <__sfmoreglue>
 800ed50:	4604      	mov	r4, r0
 800ed52:	6030      	str	r0, [r6, #0]
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d1d5      	bne.n	800ed04 <__sfp+0x24>
 800ed58:	f7ff ff78 	bl	800ec4c <__sfp_lock_release>
 800ed5c:	230c      	movs	r3, #12
 800ed5e:	603b      	str	r3, [r7, #0]
 800ed60:	e7ee      	b.n	800ed40 <__sfp+0x60>
 800ed62:	bf00      	nop
 800ed64:	08012678 	.word	0x08012678
 800ed68:	ffff0001 	.word	0xffff0001

0800ed6c <fiprintf>:
 800ed6c:	b40e      	push	{r1, r2, r3}
 800ed6e:	b503      	push	{r0, r1, lr}
 800ed70:	4601      	mov	r1, r0
 800ed72:	ab03      	add	r3, sp, #12
 800ed74:	4805      	ldr	r0, [pc, #20]	; (800ed8c <fiprintf+0x20>)
 800ed76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed7a:	6800      	ldr	r0, [r0, #0]
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	f000 f93b 	bl	800eff8 <_vfiprintf_r>
 800ed82:	b002      	add	sp, #8
 800ed84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed88:	b003      	add	sp, #12
 800ed8a:	4770      	bx	lr
 800ed8c:	2000002c 	.word	0x2000002c

0800ed90 <_fwalk_reent>:
 800ed90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed94:	4606      	mov	r6, r0
 800ed96:	4688      	mov	r8, r1
 800ed98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed9c:	2700      	movs	r7, #0
 800ed9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eda2:	f1b9 0901 	subs.w	r9, r9, #1
 800eda6:	d505      	bpl.n	800edb4 <_fwalk_reent+0x24>
 800eda8:	6824      	ldr	r4, [r4, #0]
 800edaa:	2c00      	cmp	r4, #0
 800edac:	d1f7      	bne.n	800ed9e <_fwalk_reent+0xe>
 800edae:	4638      	mov	r0, r7
 800edb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb4:	89ab      	ldrh	r3, [r5, #12]
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d907      	bls.n	800edca <_fwalk_reent+0x3a>
 800edba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edbe:	3301      	adds	r3, #1
 800edc0:	d003      	beq.n	800edca <_fwalk_reent+0x3a>
 800edc2:	4629      	mov	r1, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	47c0      	blx	r8
 800edc8:	4307      	orrs	r7, r0
 800edca:	3568      	adds	r5, #104	; 0x68
 800edcc:	e7e9      	b.n	800eda2 <_fwalk_reent+0x12>

0800edce <__retarget_lock_init_recursive>:
 800edce:	4770      	bx	lr

0800edd0 <__retarget_lock_acquire_recursive>:
 800edd0:	4770      	bx	lr

0800edd2 <__retarget_lock_release_recursive>:
 800edd2:	4770      	bx	lr

0800edd4 <malloc>:
 800edd4:	4b02      	ldr	r3, [pc, #8]	; (800ede0 <malloc+0xc>)
 800edd6:	4601      	mov	r1, r0
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	f000 b86f 	b.w	800eebc <_malloc_r>
 800edde:	bf00      	nop
 800ede0:	2000002c 	.word	0x2000002c

0800ede4 <_free_r>:
 800ede4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ede6:	2900      	cmp	r1, #0
 800ede8:	d044      	beq.n	800ee74 <_free_r+0x90>
 800edea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edee:	9001      	str	r0, [sp, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f1a1 0404 	sub.w	r4, r1, #4
 800edf6:	bfb8      	it	lt
 800edf8:	18e4      	addlt	r4, r4, r3
 800edfa:	f000 fe39 	bl	800fa70 <__malloc_lock>
 800edfe:	4a1e      	ldr	r2, [pc, #120]	; (800ee78 <_free_r+0x94>)
 800ee00:	9801      	ldr	r0, [sp, #4]
 800ee02:	6813      	ldr	r3, [r2, #0]
 800ee04:	b933      	cbnz	r3, 800ee14 <_free_r+0x30>
 800ee06:	6063      	str	r3, [r4, #4]
 800ee08:	6014      	str	r4, [r2, #0]
 800ee0a:	b003      	add	sp, #12
 800ee0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee10:	f000 be34 	b.w	800fa7c <__malloc_unlock>
 800ee14:	42a3      	cmp	r3, r4
 800ee16:	d908      	bls.n	800ee2a <_free_r+0x46>
 800ee18:	6825      	ldr	r5, [r4, #0]
 800ee1a:	1961      	adds	r1, r4, r5
 800ee1c:	428b      	cmp	r3, r1
 800ee1e:	bf01      	itttt	eq
 800ee20:	6819      	ldreq	r1, [r3, #0]
 800ee22:	685b      	ldreq	r3, [r3, #4]
 800ee24:	1949      	addeq	r1, r1, r5
 800ee26:	6021      	streq	r1, [r4, #0]
 800ee28:	e7ed      	b.n	800ee06 <_free_r+0x22>
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	b10b      	cbz	r3, 800ee34 <_free_r+0x50>
 800ee30:	42a3      	cmp	r3, r4
 800ee32:	d9fa      	bls.n	800ee2a <_free_r+0x46>
 800ee34:	6811      	ldr	r1, [r2, #0]
 800ee36:	1855      	adds	r5, r2, r1
 800ee38:	42a5      	cmp	r5, r4
 800ee3a:	d10b      	bne.n	800ee54 <_free_r+0x70>
 800ee3c:	6824      	ldr	r4, [r4, #0]
 800ee3e:	4421      	add	r1, r4
 800ee40:	1854      	adds	r4, r2, r1
 800ee42:	42a3      	cmp	r3, r4
 800ee44:	6011      	str	r1, [r2, #0]
 800ee46:	d1e0      	bne.n	800ee0a <_free_r+0x26>
 800ee48:	681c      	ldr	r4, [r3, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	6053      	str	r3, [r2, #4]
 800ee4e:	4421      	add	r1, r4
 800ee50:	6011      	str	r1, [r2, #0]
 800ee52:	e7da      	b.n	800ee0a <_free_r+0x26>
 800ee54:	d902      	bls.n	800ee5c <_free_r+0x78>
 800ee56:	230c      	movs	r3, #12
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	e7d6      	b.n	800ee0a <_free_r+0x26>
 800ee5c:	6825      	ldr	r5, [r4, #0]
 800ee5e:	1961      	adds	r1, r4, r5
 800ee60:	428b      	cmp	r3, r1
 800ee62:	bf04      	itt	eq
 800ee64:	6819      	ldreq	r1, [r3, #0]
 800ee66:	685b      	ldreq	r3, [r3, #4]
 800ee68:	6063      	str	r3, [r4, #4]
 800ee6a:	bf04      	itt	eq
 800ee6c:	1949      	addeq	r1, r1, r5
 800ee6e:	6021      	streq	r1, [r4, #0]
 800ee70:	6054      	str	r4, [r2, #4]
 800ee72:	e7ca      	b.n	800ee0a <_free_r+0x26>
 800ee74:	b003      	add	sp, #12
 800ee76:	bd30      	pop	{r4, r5, pc}
 800ee78:	200083f0 	.word	0x200083f0

0800ee7c <sbrk_aligned>:
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	4e0e      	ldr	r6, [pc, #56]	; (800eeb8 <sbrk_aligned+0x3c>)
 800ee80:	460c      	mov	r4, r1
 800ee82:	6831      	ldr	r1, [r6, #0]
 800ee84:	4605      	mov	r5, r0
 800ee86:	b911      	cbnz	r1, 800ee8e <sbrk_aligned+0x12>
 800ee88:	f000 fb7a 	bl	800f580 <_sbrk_r>
 800ee8c:	6030      	str	r0, [r6, #0]
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4628      	mov	r0, r5
 800ee92:	f000 fb75 	bl	800f580 <_sbrk_r>
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	d00a      	beq.n	800eeb0 <sbrk_aligned+0x34>
 800ee9a:	1cc4      	adds	r4, r0, #3
 800ee9c:	f024 0403 	bic.w	r4, r4, #3
 800eea0:	42a0      	cmp	r0, r4
 800eea2:	d007      	beq.n	800eeb4 <sbrk_aligned+0x38>
 800eea4:	1a21      	subs	r1, r4, r0
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 fb6a 	bl	800f580 <_sbrk_r>
 800eeac:	3001      	adds	r0, #1
 800eeae:	d101      	bne.n	800eeb4 <sbrk_aligned+0x38>
 800eeb0:	f04f 34ff 	mov.w	r4, #4294967295
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	200083f4 	.word	0x200083f4

0800eebc <_malloc_r>:
 800eebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	1ccd      	adds	r5, r1, #3
 800eec2:	f025 0503 	bic.w	r5, r5, #3
 800eec6:	3508      	adds	r5, #8
 800eec8:	2d0c      	cmp	r5, #12
 800eeca:	bf38      	it	cc
 800eecc:	250c      	movcc	r5, #12
 800eece:	2d00      	cmp	r5, #0
 800eed0:	4607      	mov	r7, r0
 800eed2:	db01      	blt.n	800eed8 <_malloc_r+0x1c>
 800eed4:	42a9      	cmp	r1, r5
 800eed6:	d905      	bls.n	800eee4 <_malloc_r+0x28>
 800eed8:	230c      	movs	r3, #12
 800eeda:	603b      	str	r3, [r7, #0]
 800eedc:	2600      	movs	r6, #0
 800eede:	4630      	mov	r0, r6
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	4e2e      	ldr	r6, [pc, #184]	; (800efa0 <_malloc_r+0xe4>)
 800eee6:	f000 fdc3 	bl	800fa70 <__malloc_lock>
 800eeea:	6833      	ldr	r3, [r6, #0]
 800eeec:	461c      	mov	r4, r3
 800eeee:	bb34      	cbnz	r4, 800ef3e <_malloc_r+0x82>
 800eef0:	4629      	mov	r1, r5
 800eef2:	4638      	mov	r0, r7
 800eef4:	f7ff ffc2 	bl	800ee7c <sbrk_aligned>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	4604      	mov	r4, r0
 800eefc:	d14d      	bne.n	800ef9a <_malloc_r+0xde>
 800eefe:	6834      	ldr	r4, [r6, #0]
 800ef00:	4626      	mov	r6, r4
 800ef02:	2e00      	cmp	r6, #0
 800ef04:	d140      	bne.n	800ef88 <_malloc_r+0xcc>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	4631      	mov	r1, r6
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	eb04 0803 	add.w	r8, r4, r3
 800ef10:	f000 fb36 	bl	800f580 <_sbrk_r>
 800ef14:	4580      	cmp	r8, r0
 800ef16:	d13a      	bne.n	800ef8e <_malloc_r+0xd2>
 800ef18:	6821      	ldr	r1, [r4, #0]
 800ef1a:	3503      	adds	r5, #3
 800ef1c:	1a6d      	subs	r5, r5, r1
 800ef1e:	f025 0503 	bic.w	r5, r5, #3
 800ef22:	3508      	adds	r5, #8
 800ef24:	2d0c      	cmp	r5, #12
 800ef26:	bf38      	it	cc
 800ef28:	250c      	movcc	r5, #12
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	f7ff ffa5 	bl	800ee7c <sbrk_aligned>
 800ef32:	3001      	adds	r0, #1
 800ef34:	d02b      	beq.n	800ef8e <_malloc_r+0xd2>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	442b      	add	r3, r5
 800ef3a:	6023      	str	r3, [r4, #0]
 800ef3c:	e00e      	b.n	800ef5c <_malloc_r+0xa0>
 800ef3e:	6822      	ldr	r2, [r4, #0]
 800ef40:	1b52      	subs	r2, r2, r5
 800ef42:	d41e      	bmi.n	800ef82 <_malloc_r+0xc6>
 800ef44:	2a0b      	cmp	r2, #11
 800ef46:	d916      	bls.n	800ef76 <_malloc_r+0xba>
 800ef48:	1961      	adds	r1, r4, r5
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	6025      	str	r5, [r4, #0]
 800ef4e:	bf18      	it	ne
 800ef50:	6059      	strne	r1, [r3, #4]
 800ef52:	6863      	ldr	r3, [r4, #4]
 800ef54:	bf08      	it	eq
 800ef56:	6031      	streq	r1, [r6, #0]
 800ef58:	5162      	str	r2, [r4, r5]
 800ef5a:	604b      	str	r3, [r1, #4]
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	f104 060b 	add.w	r6, r4, #11
 800ef62:	f000 fd8b 	bl	800fa7c <__malloc_unlock>
 800ef66:	f026 0607 	bic.w	r6, r6, #7
 800ef6a:	1d23      	adds	r3, r4, #4
 800ef6c:	1af2      	subs	r2, r6, r3
 800ef6e:	d0b6      	beq.n	800eede <_malloc_r+0x22>
 800ef70:	1b9b      	subs	r3, r3, r6
 800ef72:	50a3      	str	r3, [r4, r2]
 800ef74:	e7b3      	b.n	800eede <_malloc_r+0x22>
 800ef76:	6862      	ldr	r2, [r4, #4]
 800ef78:	42a3      	cmp	r3, r4
 800ef7a:	bf0c      	ite	eq
 800ef7c:	6032      	streq	r2, [r6, #0]
 800ef7e:	605a      	strne	r2, [r3, #4]
 800ef80:	e7ec      	b.n	800ef5c <_malloc_r+0xa0>
 800ef82:	4623      	mov	r3, r4
 800ef84:	6864      	ldr	r4, [r4, #4]
 800ef86:	e7b2      	b.n	800eeee <_malloc_r+0x32>
 800ef88:	4634      	mov	r4, r6
 800ef8a:	6876      	ldr	r6, [r6, #4]
 800ef8c:	e7b9      	b.n	800ef02 <_malloc_r+0x46>
 800ef8e:	230c      	movs	r3, #12
 800ef90:	603b      	str	r3, [r7, #0]
 800ef92:	4638      	mov	r0, r7
 800ef94:	f000 fd72 	bl	800fa7c <__malloc_unlock>
 800ef98:	e7a1      	b.n	800eede <_malloc_r+0x22>
 800ef9a:	6025      	str	r5, [r4, #0]
 800ef9c:	e7de      	b.n	800ef5c <_malloc_r+0xa0>
 800ef9e:	bf00      	nop
 800efa0:	200083f0 	.word	0x200083f0

0800efa4 <__sfputc_r>:
 800efa4:	6893      	ldr	r3, [r2, #8]
 800efa6:	3b01      	subs	r3, #1
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	b410      	push	{r4}
 800efac:	6093      	str	r3, [r2, #8]
 800efae:	da08      	bge.n	800efc2 <__sfputc_r+0x1e>
 800efb0:	6994      	ldr	r4, [r2, #24]
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	db01      	blt.n	800efba <__sfputc_r+0x16>
 800efb6:	290a      	cmp	r1, #10
 800efb8:	d103      	bne.n	800efc2 <__sfputc_r+0x1e>
 800efba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efbe:	f000 bb33 	b.w	800f628 <__swbuf_r>
 800efc2:	6813      	ldr	r3, [r2, #0]
 800efc4:	1c58      	adds	r0, r3, #1
 800efc6:	6010      	str	r0, [r2, #0]
 800efc8:	7019      	strb	r1, [r3, #0]
 800efca:	4608      	mov	r0, r1
 800efcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <__sfputs_r>:
 800efd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd4:	4606      	mov	r6, r0
 800efd6:	460f      	mov	r7, r1
 800efd8:	4614      	mov	r4, r2
 800efda:	18d5      	adds	r5, r2, r3
 800efdc:	42ac      	cmp	r4, r5
 800efde:	d101      	bne.n	800efe4 <__sfputs_r+0x12>
 800efe0:	2000      	movs	r0, #0
 800efe2:	e007      	b.n	800eff4 <__sfputs_r+0x22>
 800efe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe8:	463a      	mov	r2, r7
 800efea:	4630      	mov	r0, r6
 800efec:	f7ff ffda 	bl	800efa4 <__sfputc_r>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d1f3      	bne.n	800efdc <__sfputs_r+0xa>
 800eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eff8 <_vfiprintf_r>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	460d      	mov	r5, r1
 800effe:	b09d      	sub	sp, #116	; 0x74
 800f000:	4614      	mov	r4, r2
 800f002:	4698      	mov	r8, r3
 800f004:	4606      	mov	r6, r0
 800f006:	b118      	cbz	r0, 800f010 <_vfiprintf_r+0x18>
 800f008:	6983      	ldr	r3, [r0, #24]
 800f00a:	b90b      	cbnz	r3, 800f010 <_vfiprintf_r+0x18>
 800f00c:	f7ff fe30 	bl	800ec70 <__sinit>
 800f010:	4b89      	ldr	r3, [pc, #548]	; (800f238 <_vfiprintf_r+0x240>)
 800f012:	429d      	cmp	r5, r3
 800f014:	d11b      	bne.n	800f04e <_vfiprintf_r+0x56>
 800f016:	6875      	ldr	r5, [r6, #4]
 800f018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f01a:	07d9      	lsls	r1, r3, #31
 800f01c:	d405      	bmi.n	800f02a <_vfiprintf_r+0x32>
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	059a      	lsls	r2, r3, #22
 800f022:	d402      	bmi.n	800f02a <_vfiprintf_r+0x32>
 800f024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f026:	f7ff fed3 	bl	800edd0 <__retarget_lock_acquire_recursive>
 800f02a:	89ab      	ldrh	r3, [r5, #12]
 800f02c:	071b      	lsls	r3, r3, #28
 800f02e:	d501      	bpl.n	800f034 <_vfiprintf_r+0x3c>
 800f030:	692b      	ldr	r3, [r5, #16]
 800f032:	b9eb      	cbnz	r3, 800f070 <_vfiprintf_r+0x78>
 800f034:	4629      	mov	r1, r5
 800f036:	4630      	mov	r0, r6
 800f038:	f000 fb5a 	bl	800f6f0 <__swsetup_r>
 800f03c:	b1c0      	cbz	r0, 800f070 <_vfiprintf_r+0x78>
 800f03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f040:	07dc      	lsls	r4, r3, #31
 800f042:	d50e      	bpl.n	800f062 <_vfiprintf_r+0x6a>
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	b01d      	add	sp, #116	; 0x74
 800f04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04e:	4b7b      	ldr	r3, [pc, #492]	; (800f23c <_vfiprintf_r+0x244>)
 800f050:	429d      	cmp	r5, r3
 800f052:	d101      	bne.n	800f058 <_vfiprintf_r+0x60>
 800f054:	68b5      	ldr	r5, [r6, #8]
 800f056:	e7df      	b.n	800f018 <_vfiprintf_r+0x20>
 800f058:	4b79      	ldr	r3, [pc, #484]	; (800f240 <_vfiprintf_r+0x248>)
 800f05a:	429d      	cmp	r5, r3
 800f05c:	bf08      	it	eq
 800f05e:	68f5      	ldreq	r5, [r6, #12]
 800f060:	e7da      	b.n	800f018 <_vfiprintf_r+0x20>
 800f062:	89ab      	ldrh	r3, [r5, #12]
 800f064:	0598      	lsls	r0, r3, #22
 800f066:	d4ed      	bmi.n	800f044 <_vfiprintf_r+0x4c>
 800f068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f06a:	f7ff feb2 	bl	800edd2 <__retarget_lock_release_recursive>
 800f06e:	e7e9      	b.n	800f044 <_vfiprintf_r+0x4c>
 800f070:	2300      	movs	r3, #0
 800f072:	9309      	str	r3, [sp, #36]	; 0x24
 800f074:	2320      	movs	r3, #32
 800f076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f07e:	2330      	movs	r3, #48	; 0x30
 800f080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f244 <_vfiprintf_r+0x24c>
 800f084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f088:	f04f 0901 	mov.w	r9, #1
 800f08c:	4623      	mov	r3, r4
 800f08e:	469a      	mov	sl, r3
 800f090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f094:	b10a      	cbz	r2, 800f09a <_vfiprintf_r+0xa2>
 800f096:	2a25      	cmp	r2, #37	; 0x25
 800f098:	d1f9      	bne.n	800f08e <_vfiprintf_r+0x96>
 800f09a:	ebba 0b04 	subs.w	fp, sl, r4
 800f09e:	d00b      	beq.n	800f0b8 <_vfiprintf_r+0xc0>
 800f0a0:	465b      	mov	r3, fp
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f7ff ff93 	bl	800efd2 <__sfputs_r>
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	f000 80aa 	beq.w	800f206 <_vfiprintf_r+0x20e>
 800f0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0b4:	445a      	add	r2, fp
 800f0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800f0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 80a2 	beq.w	800f206 <_vfiprintf_r+0x20e>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0cc:	f10a 0a01 	add.w	sl, sl, #1
 800f0d0:	9304      	str	r3, [sp, #16]
 800f0d2:	9307      	str	r3, [sp, #28]
 800f0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800f0da:	4654      	mov	r4, sl
 800f0dc:	2205      	movs	r2, #5
 800f0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e2:	4858      	ldr	r0, [pc, #352]	; (800f244 <_vfiprintf_r+0x24c>)
 800f0e4:	f7f1 f874 	bl	80001d0 <memchr>
 800f0e8:	9a04      	ldr	r2, [sp, #16]
 800f0ea:	b9d8      	cbnz	r0, 800f124 <_vfiprintf_r+0x12c>
 800f0ec:	06d1      	lsls	r1, r2, #27
 800f0ee:	bf44      	itt	mi
 800f0f0:	2320      	movmi	r3, #32
 800f0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0f6:	0713      	lsls	r3, r2, #28
 800f0f8:	bf44      	itt	mi
 800f0fa:	232b      	movmi	r3, #43	; 0x2b
 800f0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f100:	f89a 3000 	ldrb.w	r3, [sl]
 800f104:	2b2a      	cmp	r3, #42	; 0x2a
 800f106:	d015      	beq.n	800f134 <_vfiprintf_r+0x13c>
 800f108:	9a07      	ldr	r2, [sp, #28]
 800f10a:	4654      	mov	r4, sl
 800f10c:	2000      	movs	r0, #0
 800f10e:	f04f 0c0a 	mov.w	ip, #10
 800f112:	4621      	mov	r1, r4
 800f114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f118:	3b30      	subs	r3, #48	; 0x30
 800f11a:	2b09      	cmp	r3, #9
 800f11c:	d94e      	bls.n	800f1bc <_vfiprintf_r+0x1c4>
 800f11e:	b1b0      	cbz	r0, 800f14e <_vfiprintf_r+0x156>
 800f120:	9207      	str	r2, [sp, #28]
 800f122:	e014      	b.n	800f14e <_vfiprintf_r+0x156>
 800f124:	eba0 0308 	sub.w	r3, r0, r8
 800f128:	fa09 f303 	lsl.w	r3, r9, r3
 800f12c:	4313      	orrs	r3, r2
 800f12e:	9304      	str	r3, [sp, #16]
 800f130:	46a2      	mov	sl, r4
 800f132:	e7d2      	b.n	800f0da <_vfiprintf_r+0xe2>
 800f134:	9b03      	ldr	r3, [sp, #12]
 800f136:	1d19      	adds	r1, r3, #4
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	9103      	str	r1, [sp, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	bfbb      	ittet	lt
 800f140:	425b      	neglt	r3, r3
 800f142:	f042 0202 	orrlt.w	r2, r2, #2
 800f146:	9307      	strge	r3, [sp, #28]
 800f148:	9307      	strlt	r3, [sp, #28]
 800f14a:	bfb8      	it	lt
 800f14c:	9204      	strlt	r2, [sp, #16]
 800f14e:	7823      	ldrb	r3, [r4, #0]
 800f150:	2b2e      	cmp	r3, #46	; 0x2e
 800f152:	d10c      	bne.n	800f16e <_vfiprintf_r+0x176>
 800f154:	7863      	ldrb	r3, [r4, #1]
 800f156:	2b2a      	cmp	r3, #42	; 0x2a
 800f158:	d135      	bne.n	800f1c6 <_vfiprintf_r+0x1ce>
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	1d1a      	adds	r2, r3, #4
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	9203      	str	r2, [sp, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	bfb8      	it	lt
 800f166:	f04f 33ff 	movlt.w	r3, #4294967295
 800f16a:	3402      	adds	r4, #2
 800f16c:	9305      	str	r3, [sp, #20]
 800f16e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f254 <_vfiprintf_r+0x25c>
 800f172:	7821      	ldrb	r1, [r4, #0]
 800f174:	2203      	movs	r2, #3
 800f176:	4650      	mov	r0, sl
 800f178:	f7f1 f82a 	bl	80001d0 <memchr>
 800f17c:	b140      	cbz	r0, 800f190 <_vfiprintf_r+0x198>
 800f17e:	2340      	movs	r3, #64	; 0x40
 800f180:	eba0 000a 	sub.w	r0, r0, sl
 800f184:	fa03 f000 	lsl.w	r0, r3, r0
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	4303      	orrs	r3, r0
 800f18c:	3401      	adds	r4, #1
 800f18e:	9304      	str	r3, [sp, #16]
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	482c      	ldr	r0, [pc, #176]	; (800f248 <_vfiprintf_r+0x250>)
 800f196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f19a:	2206      	movs	r2, #6
 800f19c:	f7f1 f818 	bl	80001d0 <memchr>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d03f      	beq.n	800f224 <_vfiprintf_r+0x22c>
 800f1a4:	4b29      	ldr	r3, [pc, #164]	; (800f24c <_vfiprintf_r+0x254>)
 800f1a6:	bb1b      	cbnz	r3, 800f1f0 <_vfiprintf_r+0x1f8>
 800f1a8:	9b03      	ldr	r3, [sp, #12]
 800f1aa:	3307      	adds	r3, #7
 800f1ac:	f023 0307 	bic.w	r3, r3, #7
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	9303      	str	r3, [sp, #12]
 800f1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b6:	443b      	add	r3, r7
 800f1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ba:	e767      	b.n	800f08c <_vfiprintf_r+0x94>
 800f1bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	2001      	movs	r0, #1
 800f1c4:	e7a5      	b.n	800f112 <_vfiprintf_r+0x11a>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	3401      	adds	r4, #1
 800f1ca:	9305      	str	r3, [sp, #20]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f04f 0c0a 	mov.w	ip, #10
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1d8:	3a30      	subs	r2, #48	; 0x30
 800f1da:	2a09      	cmp	r2, #9
 800f1dc:	d903      	bls.n	800f1e6 <_vfiprintf_r+0x1ee>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0c5      	beq.n	800f16e <_vfiprintf_r+0x176>
 800f1e2:	9105      	str	r1, [sp, #20]
 800f1e4:	e7c3      	b.n	800f16e <_vfiprintf_r+0x176>
 800f1e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e7f0      	b.n	800f1d2 <_vfiprintf_r+0x1da>
 800f1f0:	ab03      	add	r3, sp, #12
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	462a      	mov	r2, r5
 800f1f6:	4b16      	ldr	r3, [pc, #88]	; (800f250 <_vfiprintf_r+0x258>)
 800f1f8:	a904      	add	r1, sp, #16
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f3af 8000 	nop.w
 800f200:	4607      	mov	r7, r0
 800f202:	1c78      	adds	r0, r7, #1
 800f204:	d1d6      	bne.n	800f1b4 <_vfiprintf_r+0x1bc>
 800f206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f208:	07d9      	lsls	r1, r3, #31
 800f20a:	d405      	bmi.n	800f218 <_vfiprintf_r+0x220>
 800f20c:	89ab      	ldrh	r3, [r5, #12]
 800f20e:	059a      	lsls	r2, r3, #22
 800f210:	d402      	bmi.n	800f218 <_vfiprintf_r+0x220>
 800f212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f214:	f7ff fddd 	bl	800edd2 <__retarget_lock_release_recursive>
 800f218:	89ab      	ldrh	r3, [r5, #12]
 800f21a:	065b      	lsls	r3, r3, #25
 800f21c:	f53f af12 	bmi.w	800f044 <_vfiprintf_r+0x4c>
 800f220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f222:	e711      	b.n	800f048 <_vfiprintf_r+0x50>
 800f224:	ab03      	add	r3, sp, #12
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	462a      	mov	r2, r5
 800f22a:	4b09      	ldr	r3, [pc, #36]	; (800f250 <_vfiprintf_r+0x258>)
 800f22c:	a904      	add	r1, sp, #16
 800f22e:	4630      	mov	r0, r6
 800f230:	f000 f880 	bl	800f334 <_printf_i>
 800f234:	e7e4      	b.n	800f200 <_vfiprintf_r+0x208>
 800f236:	bf00      	nop
 800f238:	0801274c 	.word	0x0801274c
 800f23c:	0801276c 	.word	0x0801276c
 800f240:	0801272c 	.word	0x0801272c
 800f244:	0801278c 	.word	0x0801278c
 800f248:	08012796 	.word	0x08012796
 800f24c:	00000000 	.word	0x00000000
 800f250:	0800efd3 	.word	0x0800efd3
 800f254:	08012792 	.word	0x08012792

0800f258 <_printf_common>:
 800f258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f25c:	4616      	mov	r6, r2
 800f25e:	4699      	mov	r9, r3
 800f260:	688a      	ldr	r2, [r1, #8]
 800f262:	690b      	ldr	r3, [r1, #16]
 800f264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f268:	4293      	cmp	r3, r2
 800f26a:	bfb8      	it	lt
 800f26c:	4613      	movlt	r3, r2
 800f26e:	6033      	str	r3, [r6, #0]
 800f270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f274:	4607      	mov	r7, r0
 800f276:	460c      	mov	r4, r1
 800f278:	b10a      	cbz	r2, 800f27e <_printf_common+0x26>
 800f27a:	3301      	adds	r3, #1
 800f27c:	6033      	str	r3, [r6, #0]
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	0699      	lsls	r1, r3, #26
 800f282:	bf42      	ittt	mi
 800f284:	6833      	ldrmi	r3, [r6, #0]
 800f286:	3302      	addmi	r3, #2
 800f288:	6033      	strmi	r3, [r6, #0]
 800f28a:	6825      	ldr	r5, [r4, #0]
 800f28c:	f015 0506 	ands.w	r5, r5, #6
 800f290:	d106      	bne.n	800f2a0 <_printf_common+0x48>
 800f292:	f104 0a19 	add.w	sl, r4, #25
 800f296:	68e3      	ldr	r3, [r4, #12]
 800f298:	6832      	ldr	r2, [r6, #0]
 800f29a:	1a9b      	subs	r3, r3, r2
 800f29c:	42ab      	cmp	r3, r5
 800f29e:	dc26      	bgt.n	800f2ee <_printf_common+0x96>
 800f2a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2a4:	1e13      	subs	r3, r2, #0
 800f2a6:	6822      	ldr	r2, [r4, #0]
 800f2a8:	bf18      	it	ne
 800f2aa:	2301      	movne	r3, #1
 800f2ac:	0692      	lsls	r2, r2, #26
 800f2ae:	d42b      	bmi.n	800f308 <_printf_common+0xb0>
 800f2b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2b4:	4649      	mov	r1, r9
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	47c0      	blx	r8
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	d01e      	beq.n	800f2fc <_printf_common+0xa4>
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	68e5      	ldr	r5, [r4, #12]
 800f2c2:	6832      	ldr	r2, [r6, #0]
 800f2c4:	f003 0306 	and.w	r3, r3, #6
 800f2c8:	2b04      	cmp	r3, #4
 800f2ca:	bf08      	it	eq
 800f2cc:	1aad      	subeq	r5, r5, r2
 800f2ce:	68a3      	ldr	r3, [r4, #8]
 800f2d0:	6922      	ldr	r2, [r4, #16]
 800f2d2:	bf0c      	ite	eq
 800f2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2d8:	2500      	movne	r5, #0
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	bfc4      	itt	gt
 800f2de:	1a9b      	subgt	r3, r3, r2
 800f2e0:	18ed      	addgt	r5, r5, r3
 800f2e2:	2600      	movs	r6, #0
 800f2e4:	341a      	adds	r4, #26
 800f2e6:	42b5      	cmp	r5, r6
 800f2e8:	d11a      	bne.n	800f320 <_printf_common+0xc8>
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e008      	b.n	800f300 <_printf_common+0xa8>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4652      	mov	r2, sl
 800f2f2:	4649      	mov	r1, r9
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	47c0      	blx	r8
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	d103      	bne.n	800f304 <_printf_common+0xac>
 800f2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f304:	3501      	adds	r5, #1
 800f306:	e7c6      	b.n	800f296 <_printf_common+0x3e>
 800f308:	18e1      	adds	r1, r4, r3
 800f30a:	1c5a      	adds	r2, r3, #1
 800f30c:	2030      	movs	r0, #48	; 0x30
 800f30e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f312:	4422      	add	r2, r4
 800f314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f31c:	3302      	adds	r3, #2
 800f31e:	e7c7      	b.n	800f2b0 <_printf_common+0x58>
 800f320:	2301      	movs	r3, #1
 800f322:	4622      	mov	r2, r4
 800f324:	4649      	mov	r1, r9
 800f326:	4638      	mov	r0, r7
 800f328:	47c0      	blx	r8
 800f32a:	3001      	adds	r0, #1
 800f32c:	d0e6      	beq.n	800f2fc <_printf_common+0xa4>
 800f32e:	3601      	adds	r6, #1
 800f330:	e7d9      	b.n	800f2e6 <_printf_common+0x8e>
	...

0800f334 <_printf_i>:
 800f334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f338:	7e0f      	ldrb	r7, [r1, #24]
 800f33a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f33c:	2f78      	cmp	r7, #120	; 0x78
 800f33e:	4691      	mov	r9, r2
 800f340:	4680      	mov	r8, r0
 800f342:	460c      	mov	r4, r1
 800f344:	469a      	mov	sl, r3
 800f346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f34a:	d807      	bhi.n	800f35c <_printf_i+0x28>
 800f34c:	2f62      	cmp	r7, #98	; 0x62
 800f34e:	d80a      	bhi.n	800f366 <_printf_i+0x32>
 800f350:	2f00      	cmp	r7, #0
 800f352:	f000 80d8 	beq.w	800f506 <_printf_i+0x1d2>
 800f356:	2f58      	cmp	r7, #88	; 0x58
 800f358:	f000 80a3 	beq.w	800f4a2 <_printf_i+0x16e>
 800f35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f364:	e03a      	b.n	800f3dc <_printf_i+0xa8>
 800f366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f36a:	2b15      	cmp	r3, #21
 800f36c:	d8f6      	bhi.n	800f35c <_printf_i+0x28>
 800f36e:	a101      	add	r1, pc, #4	; (adr r1, 800f374 <_printf_i+0x40>)
 800f370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f374:	0800f3cd 	.word	0x0800f3cd
 800f378:	0800f3e1 	.word	0x0800f3e1
 800f37c:	0800f35d 	.word	0x0800f35d
 800f380:	0800f35d 	.word	0x0800f35d
 800f384:	0800f35d 	.word	0x0800f35d
 800f388:	0800f35d 	.word	0x0800f35d
 800f38c:	0800f3e1 	.word	0x0800f3e1
 800f390:	0800f35d 	.word	0x0800f35d
 800f394:	0800f35d 	.word	0x0800f35d
 800f398:	0800f35d 	.word	0x0800f35d
 800f39c:	0800f35d 	.word	0x0800f35d
 800f3a0:	0800f4ed 	.word	0x0800f4ed
 800f3a4:	0800f411 	.word	0x0800f411
 800f3a8:	0800f4cf 	.word	0x0800f4cf
 800f3ac:	0800f35d 	.word	0x0800f35d
 800f3b0:	0800f35d 	.word	0x0800f35d
 800f3b4:	0800f50f 	.word	0x0800f50f
 800f3b8:	0800f35d 	.word	0x0800f35d
 800f3bc:	0800f411 	.word	0x0800f411
 800f3c0:	0800f35d 	.word	0x0800f35d
 800f3c4:	0800f35d 	.word	0x0800f35d
 800f3c8:	0800f4d7 	.word	0x0800f4d7
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	1d1a      	adds	r2, r3, #4
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	602a      	str	r2, [r5, #0]
 800f3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e0a3      	b.n	800f528 <_printf_i+0x1f4>
 800f3e0:	6820      	ldr	r0, [r4, #0]
 800f3e2:	6829      	ldr	r1, [r5, #0]
 800f3e4:	0606      	lsls	r6, r0, #24
 800f3e6:	f101 0304 	add.w	r3, r1, #4
 800f3ea:	d50a      	bpl.n	800f402 <_printf_i+0xce>
 800f3ec:	680e      	ldr	r6, [r1, #0]
 800f3ee:	602b      	str	r3, [r5, #0]
 800f3f0:	2e00      	cmp	r6, #0
 800f3f2:	da03      	bge.n	800f3fc <_printf_i+0xc8>
 800f3f4:	232d      	movs	r3, #45	; 0x2d
 800f3f6:	4276      	negs	r6, r6
 800f3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3fc:	485e      	ldr	r0, [pc, #376]	; (800f578 <_printf_i+0x244>)
 800f3fe:	230a      	movs	r3, #10
 800f400:	e019      	b.n	800f436 <_printf_i+0x102>
 800f402:	680e      	ldr	r6, [r1, #0]
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f40a:	bf18      	it	ne
 800f40c:	b236      	sxthne	r6, r6
 800f40e:	e7ef      	b.n	800f3f0 <_printf_i+0xbc>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	6820      	ldr	r0, [r4, #0]
 800f414:	1d19      	adds	r1, r3, #4
 800f416:	6029      	str	r1, [r5, #0]
 800f418:	0601      	lsls	r1, r0, #24
 800f41a:	d501      	bpl.n	800f420 <_printf_i+0xec>
 800f41c:	681e      	ldr	r6, [r3, #0]
 800f41e:	e002      	b.n	800f426 <_printf_i+0xf2>
 800f420:	0646      	lsls	r6, r0, #25
 800f422:	d5fb      	bpl.n	800f41c <_printf_i+0xe8>
 800f424:	881e      	ldrh	r6, [r3, #0]
 800f426:	4854      	ldr	r0, [pc, #336]	; (800f578 <_printf_i+0x244>)
 800f428:	2f6f      	cmp	r7, #111	; 0x6f
 800f42a:	bf0c      	ite	eq
 800f42c:	2308      	moveq	r3, #8
 800f42e:	230a      	movne	r3, #10
 800f430:	2100      	movs	r1, #0
 800f432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f436:	6865      	ldr	r5, [r4, #4]
 800f438:	60a5      	str	r5, [r4, #8]
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	bfa2      	ittt	ge
 800f43e:	6821      	ldrge	r1, [r4, #0]
 800f440:	f021 0104 	bicge.w	r1, r1, #4
 800f444:	6021      	strge	r1, [r4, #0]
 800f446:	b90e      	cbnz	r6, 800f44c <_printf_i+0x118>
 800f448:	2d00      	cmp	r5, #0
 800f44a:	d04d      	beq.n	800f4e8 <_printf_i+0x1b4>
 800f44c:	4615      	mov	r5, r2
 800f44e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f452:	fb03 6711 	mls	r7, r3, r1, r6
 800f456:	5dc7      	ldrb	r7, [r0, r7]
 800f458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f45c:	4637      	mov	r7, r6
 800f45e:	42bb      	cmp	r3, r7
 800f460:	460e      	mov	r6, r1
 800f462:	d9f4      	bls.n	800f44e <_printf_i+0x11a>
 800f464:	2b08      	cmp	r3, #8
 800f466:	d10b      	bne.n	800f480 <_printf_i+0x14c>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	07de      	lsls	r6, r3, #31
 800f46c:	d508      	bpl.n	800f480 <_printf_i+0x14c>
 800f46e:	6923      	ldr	r3, [r4, #16]
 800f470:	6861      	ldr	r1, [r4, #4]
 800f472:	4299      	cmp	r1, r3
 800f474:	bfde      	ittt	le
 800f476:	2330      	movle	r3, #48	; 0x30
 800f478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f47c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f480:	1b52      	subs	r2, r2, r5
 800f482:	6122      	str	r2, [r4, #16]
 800f484:	f8cd a000 	str.w	sl, [sp]
 800f488:	464b      	mov	r3, r9
 800f48a:	aa03      	add	r2, sp, #12
 800f48c:	4621      	mov	r1, r4
 800f48e:	4640      	mov	r0, r8
 800f490:	f7ff fee2 	bl	800f258 <_printf_common>
 800f494:	3001      	adds	r0, #1
 800f496:	d14c      	bne.n	800f532 <_printf_i+0x1fe>
 800f498:	f04f 30ff 	mov.w	r0, #4294967295
 800f49c:	b004      	add	sp, #16
 800f49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a2:	4835      	ldr	r0, [pc, #212]	; (800f578 <_printf_i+0x244>)
 800f4a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f4a8:	6829      	ldr	r1, [r5, #0]
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4b0:	6029      	str	r1, [r5, #0]
 800f4b2:	061d      	lsls	r5, r3, #24
 800f4b4:	d514      	bpl.n	800f4e0 <_printf_i+0x1ac>
 800f4b6:	07df      	lsls	r7, r3, #31
 800f4b8:	bf44      	itt	mi
 800f4ba:	f043 0320 	orrmi.w	r3, r3, #32
 800f4be:	6023      	strmi	r3, [r4, #0]
 800f4c0:	b91e      	cbnz	r6, 800f4ca <_printf_i+0x196>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	f023 0320 	bic.w	r3, r3, #32
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	2310      	movs	r3, #16
 800f4cc:	e7b0      	b.n	800f430 <_printf_i+0xfc>
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	f043 0320 	orr.w	r3, r3, #32
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	2378      	movs	r3, #120	; 0x78
 800f4d8:	4828      	ldr	r0, [pc, #160]	; (800f57c <_printf_i+0x248>)
 800f4da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4de:	e7e3      	b.n	800f4a8 <_printf_i+0x174>
 800f4e0:	0659      	lsls	r1, r3, #25
 800f4e2:	bf48      	it	mi
 800f4e4:	b2b6      	uxthmi	r6, r6
 800f4e6:	e7e6      	b.n	800f4b6 <_printf_i+0x182>
 800f4e8:	4615      	mov	r5, r2
 800f4ea:	e7bb      	b.n	800f464 <_printf_i+0x130>
 800f4ec:	682b      	ldr	r3, [r5, #0]
 800f4ee:	6826      	ldr	r6, [r4, #0]
 800f4f0:	6961      	ldr	r1, [r4, #20]
 800f4f2:	1d18      	adds	r0, r3, #4
 800f4f4:	6028      	str	r0, [r5, #0]
 800f4f6:	0635      	lsls	r5, r6, #24
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	d501      	bpl.n	800f500 <_printf_i+0x1cc>
 800f4fc:	6019      	str	r1, [r3, #0]
 800f4fe:	e002      	b.n	800f506 <_printf_i+0x1d2>
 800f500:	0670      	lsls	r0, r6, #25
 800f502:	d5fb      	bpl.n	800f4fc <_printf_i+0x1c8>
 800f504:	8019      	strh	r1, [r3, #0]
 800f506:	2300      	movs	r3, #0
 800f508:	6123      	str	r3, [r4, #16]
 800f50a:	4615      	mov	r5, r2
 800f50c:	e7ba      	b.n	800f484 <_printf_i+0x150>
 800f50e:	682b      	ldr	r3, [r5, #0]
 800f510:	1d1a      	adds	r2, r3, #4
 800f512:	602a      	str	r2, [r5, #0]
 800f514:	681d      	ldr	r5, [r3, #0]
 800f516:	6862      	ldr	r2, [r4, #4]
 800f518:	2100      	movs	r1, #0
 800f51a:	4628      	mov	r0, r5
 800f51c:	f7f0 fe58 	bl	80001d0 <memchr>
 800f520:	b108      	cbz	r0, 800f526 <_printf_i+0x1f2>
 800f522:	1b40      	subs	r0, r0, r5
 800f524:	6060      	str	r0, [r4, #4]
 800f526:	6863      	ldr	r3, [r4, #4]
 800f528:	6123      	str	r3, [r4, #16]
 800f52a:	2300      	movs	r3, #0
 800f52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f530:	e7a8      	b.n	800f484 <_printf_i+0x150>
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	462a      	mov	r2, r5
 800f536:	4649      	mov	r1, r9
 800f538:	4640      	mov	r0, r8
 800f53a:	47d0      	blx	sl
 800f53c:	3001      	adds	r0, #1
 800f53e:	d0ab      	beq.n	800f498 <_printf_i+0x164>
 800f540:	6823      	ldr	r3, [r4, #0]
 800f542:	079b      	lsls	r3, r3, #30
 800f544:	d413      	bmi.n	800f56e <_printf_i+0x23a>
 800f546:	68e0      	ldr	r0, [r4, #12]
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	4298      	cmp	r0, r3
 800f54c:	bfb8      	it	lt
 800f54e:	4618      	movlt	r0, r3
 800f550:	e7a4      	b.n	800f49c <_printf_i+0x168>
 800f552:	2301      	movs	r3, #1
 800f554:	4632      	mov	r2, r6
 800f556:	4649      	mov	r1, r9
 800f558:	4640      	mov	r0, r8
 800f55a:	47d0      	blx	sl
 800f55c:	3001      	adds	r0, #1
 800f55e:	d09b      	beq.n	800f498 <_printf_i+0x164>
 800f560:	3501      	adds	r5, #1
 800f562:	68e3      	ldr	r3, [r4, #12]
 800f564:	9903      	ldr	r1, [sp, #12]
 800f566:	1a5b      	subs	r3, r3, r1
 800f568:	42ab      	cmp	r3, r5
 800f56a:	dcf2      	bgt.n	800f552 <_printf_i+0x21e>
 800f56c:	e7eb      	b.n	800f546 <_printf_i+0x212>
 800f56e:	2500      	movs	r5, #0
 800f570:	f104 0619 	add.w	r6, r4, #25
 800f574:	e7f5      	b.n	800f562 <_printf_i+0x22e>
 800f576:	bf00      	nop
 800f578:	0801279d 	.word	0x0801279d
 800f57c:	080127ae 	.word	0x080127ae

0800f580 <_sbrk_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4d06      	ldr	r5, [pc, #24]	; (800f59c <_sbrk_r+0x1c>)
 800f584:	2300      	movs	r3, #0
 800f586:	4604      	mov	r4, r0
 800f588:	4608      	mov	r0, r1
 800f58a:	602b      	str	r3, [r5, #0]
 800f58c:	f7f1 f99c 	bl	80008c8 <_sbrk>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_sbrk_r+0x1a>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_sbrk_r+0x1a>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	200083e8 	.word	0x200083e8

0800f5a0 <__sread>:
 800f5a0:	b510      	push	{r4, lr}
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a8:	f000 fa6e 	bl	800fa88 <_read_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	bfab      	itete	ge
 800f5b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5b2:	89a3      	ldrhlt	r3, [r4, #12]
 800f5b4:	181b      	addge	r3, r3, r0
 800f5b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5ba:	bfac      	ite	ge
 800f5bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5be:	81a3      	strhlt	r3, [r4, #12]
 800f5c0:	bd10      	pop	{r4, pc}

0800f5c2 <__swrite>:
 800f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c6:	461f      	mov	r7, r3
 800f5c8:	898b      	ldrh	r3, [r1, #12]
 800f5ca:	05db      	lsls	r3, r3, #23
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	4616      	mov	r6, r2
 800f5d2:	d505      	bpl.n	800f5e0 <__swrite+0x1e>
 800f5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d8:	2302      	movs	r3, #2
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f000 f9d0 	bl	800f980 <_lseek_r>
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	4632      	mov	r2, r6
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f6:	f000 b869 	b.w	800f6cc <_write_r>

0800f5fa <__sseek>:
 800f5fa:	b510      	push	{r4, lr}
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f602:	f000 f9bd 	bl	800f980 <_lseek_r>
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	bf15      	itete	ne
 800f60c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f616:	81a3      	strheq	r3, [r4, #12]
 800f618:	bf18      	it	ne
 800f61a:	81a3      	strhne	r3, [r4, #12]
 800f61c:	bd10      	pop	{r4, pc}

0800f61e <__sclose>:
 800f61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f622:	f000 b8db 	b.w	800f7dc <_close_r>
	...

0800f628 <__swbuf_r>:
 800f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62a:	460e      	mov	r6, r1
 800f62c:	4614      	mov	r4, r2
 800f62e:	4605      	mov	r5, r0
 800f630:	b118      	cbz	r0, 800f63a <__swbuf_r+0x12>
 800f632:	6983      	ldr	r3, [r0, #24]
 800f634:	b90b      	cbnz	r3, 800f63a <__swbuf_r+0x12>
 800f636:	f7ff fb1b 	bl	800ec70 <__sinit>
 800f63a:	4b21      	ldr	r3, [pc, #132]	; (800f6c0 <__swbuf_r+0x98>)
 800f63c:	429c      	cmp	r4, r3
 800f63e:	d12b      	bne.n	800f698 <__swbuf_r+0x70>
 800f640:	686c      	ldr	r4, [r5, #4]
 800f642:	69a3      	ldr	r3, [r4, #24]
 800f644:	60a3      	str	r3, [r4, #8]
 800f646:	89a3      	ldrh	r3, [r4, #12]
 800f648:	071a      	lsls	r2, r3, #28
 800f64a:	d52f      	bpl.n	800f6ac <__swbuf_r+0x84>
 800f64c:	6923      	ldr	r3, [r4, #16]
 800f64e:	b36b      	cbz	r3, 800f6ac <__swbuf_r+0x84>
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	6820      	ldr	r0, [r4, #0]
 800f654:	1ac0      	subs	r0, r0, r3
 800f656:	6963      	ldr	r3, [r4, #20]
 800f658:	b2f6      	uxtb	r6, r6
 800f65a:	4283      	cmp	r3, r0
 800f65c:	4637      	mov	r7, r6
 800f65e:	dc04      	bgt.n	800f66a <__swbuf_r+0x42>
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f950 	bl	800f908 <_fflush_r>
 800f668:	bb30      	cbnz	r0, 800f6b8 <__swbuf_r+0x90>
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	3b01      	subs	r3, #1
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	6022      	str	r2, [r4, #0]
 800f676:	701e      	strb	r6, [r3, #0]
 800f678:	6963      	ldr	r3, [r4, #20]
 800f67a:	3001      	adds	r0, #1
 800f67c:	4283      	cmp	r3, r0
 800f67e:	d004      	beq.n	800f68a <__swbuf_r+0x62>
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	07db      	lsls	r3, r3, #31
 800f684:	d506      	bpl.n	800f694 <__swbuf_r+0x6c>
 800f686:	2e0a      	cmp	r6, #10
 800f688:	d104      	bne.n	800f694 <__swbuf_r+0x6c>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4628      	mov	r0, r5
 800f68e:	f000 f93b 	bl	800f908 <_fflush_r>
 800f692:	b988      	cbnz	r0, 800f6b8 <__swbuf_r+0x90>
 800f694:	4638      	mov	r0, r7
 800f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <__swbuf_r+0x9c>)
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d101      	bne.n	800f6a2 <__swbuf_r+0x7a>
 800f69e:	68ac      	ldr	r4, [r5, #8]
 800f6a0:	e7cf      	b.n	800f642 <__swbuf_r+0x1a>
 800f6a2:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <__swbuf_r+0xa0>)
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	bf08      	it	eq
 800f6a8:	68ec      	ldreq	r4, [r5, #12]
 800f6aa:	e7ca      	b.n	800f642 <__swbuf_r+0x1a>
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f000 f81e 	bl	800f6f0 <__swsetup_r>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d0cb      	beq.n	800f650 <__swbuf_r+0x28>
 800f6b8:	f04f 37ff 	mov.w	r7, #4294967295
 800f6bc:	e7ea      	b.n	800f694 <__swbuf_r+0x6c>
 800f6be:	bf00      	nop
 800f6c0:	0801274c 	.word	0x0801274c
 800f6c4:	0801276c 	.word	0x0801276c
 800f6c8:	0801272c 	.word	0x0801272c

0800f6cc <_write_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d07      	ldr	r5, [pc, #28]	; (800f6ec <_write_r+0x20>)
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	4608      	mov	r0, r1
 800f6d4:	4611      	mov	r1, r2
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	602a      	str	r2, [r5, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	f7f1 f8a3 	bl	8000826 <_write>
 800f6e0:	1c43      	adds	r3, r0, #1
 800f6e2:	d102      	bne.n	800f6ea <_write_r+0x1e>
 800f6e4:	682b      	ldr	r3, [r5, #0]
 800f6e6:	b103      	cbz	r3, 800f6ea <_write_r+0x1e>
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	200083e8 	.word	0x200083e8

0800f6f0 <__swsetup_r>:
 800f6f0:	4b32      	ldr	r3, [pc, #200]	; (800f7bc <__swsetup_r+0xcc>)
 800f6f2:	b570      	push	{r4, r5, r6, lr}
 800f6f4:	681d      	ldr	r5, [r3, #0]
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	b125      	cbz	r5, 800f706 <__swsetup_r+0x16>
 800f6fc:	69ab      	ldr	r3, [r5, #24]
 800f6fe:	b913      	cbnz	r3, 800f706 <__swsetup_r+0x16>
 800f700:	4628      	mov	r0, r5
 800f702:	f7ff fab5 	bl	800ec70 <__sinit>
 800f706:	4b2e      	ldr	r3, [pc, #184]	; (800f7c0 <__swsetup_r+0xd0>)
 800f708:	429c      	cmp	r4, r3
 800f70a:	d10f      	bne.n	800f72c <__swsetup_r+0x3c>
 800f70c:	686c      	ldr	r4, [r5, #4]
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f714:	0719      	lsls	r1, r3, #28
 800f716:	d42c      	bmi.n	800f772 <__swsetup_r+0x82>
 800f718:	06dd      	lsls	r5, r3, #27
 800f71a:	d411      	bmi.n	800f740 <__swsetup_r+0x50>
 800f71c:	2309      	movs	r3, #9
 800f71e:	6033      	str	r3, [r6, #0]
 800f720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f724:	81a3      	strh	r3, [r4, #12]
 800f726:	f04f 30ff 	mov.w	r0, #4294967295
 800f72a:	e03e      	b.n	800f7aa <__swsetup_r+0xba>
 800f72c:	4b25      	ldr	r3, [pc, #148]	; (800f7c4 <__swsetup_r+0xd4>)
 800f72e:	429c      	cmp	r4, r3
 800f730:	d101      	bne.n	800f736 <__swsetup_r+0x46>
 800f732:	68ac      	ldr	r4, [r5, #8]
 800f734:	e7eb      	b.n	800f70e <__swsetup_r+0x1e>
 800f736:	4b24      	ldr	r3, [pc, #144]	; (800f7c8 <__swsetup_r+0xd8>)
 800f738:	429c      	cmp	r4, r3
 800f73a:	bf08      	it	eq
 800f73c:	68ec      	ldreq	r4, [r5, #12]
 800f73e:	e7e6      	b.n	800f70e <__swsetup_r+0x1e>
 800f740:	0758      	lsls	r0, r3, #29
 800f742:	d512      	bpl.n	800f76a <__swsetup_r+0x7a>
 800f744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f746:	b141      	cbz	r1, 800f75a <__swsetup_r+0x6a>
 800f748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f74c:	4299      	cmp	r1, r3
 800f74e:	d002      	beq.n	800f756 <__swsetup_r+0x66>
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff fb47 	bl	800ede4 <_free_r>
 800f756:	2300      	movs	r3, #0
 800f758:	6363      	str	r3, [r4, #52]	; 0x34
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f760:	81a3      	strh	r3, [r4, #12]
 800f762:	2300      	movs	r3, #0
 800f764:	6063      	str	r3, [r4, #4]
 800f766:	6923      	ldr	r3, [r4, #16]
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f043 0308 	orr.w	r3, r3, #8
 800f770:	81a3      	strh	r3, [r4, #12]
 800f772:	6923      	ldr	r3, [r4, #16]
 800f774:	b94b      	cbnz	r3, 800f78a <__swsetup_r+0x9a>
 800f776:	89a3      	ldrh	r3, [r4, #12]
 800f778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f780:	d003      	beq.n	800f78a <__swsetup_r+0x9a>
 800f782:	4621      	mov	r1, r4
 800f784:	4630      	mov	r0, r6
 800f786:	f000 f933 	bl	800f9f0 <__smakebuf_r>
 800f78a:	89a0      	ldrh	r0, [r4, #12]
 800f78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f790:	f010 0301 	ands.w	r3, r0, #1
 800f794:	d00a      	beq.n	800f7ac <__swsetup_r+0xbc>
 800f796:	2300      	movs	r3, #0
 800f798:	60a3      	str	r3, [r4, #8]
 800f79a:	6963      	ldr	r3, [r4, #20]
 800f79c:	425b      	negs	r3, r3
 800f79e:	61a3      	str	r3, [r4, #24]
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	b943      	cbnz	r3, 800f7b6 <__swsetup_r+0xc6>
 800f7a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7a8:	d1ba      	bne.n	800f720 <__swsetup_r+0x30>
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}
 800f7ac:	0781      	lsls	r1, r0, #30
 800f7ae:	bf58      	it	pl
 800f7b0:	6963      	ldrpl	r3, [r4, #20]
 800f7b2:	60a3      	str	r3, [r4, #8]
 800f7b4:	e7f4      	b.n	800f7a0 <__swsetup_r+0xb0>
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	e7f7      	b.n	800f7aa <__swsetup_r+0xba>
 800f7ba:	bf00      	nop
 800f7bc:	2000002c 	.word	0x2000002c
 800f7c0:	0801274c 	.word	0x0801274c
 800f7c4:	0801276c 	.word	0x0801276c
 800f7c8:	0801272c 	.word	0x0801272c

0800f7cc <abort>:
 800f7cc:	b508      	push	{r3, lr}
 800f7ce:	2006      	movs	r0, #6
 800f7d0:	f000 f994 	bl	800fafc <raise>
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	f7f0 ffff 	bl	80007d8 <_exit>
	...

0800f7dc <_close_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4d06      	ldr	r5, [pc, #24]	; (800f7f8 <_close_r+0x1c>)
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	602b      	str	r3, [r5, #0]
 800f7e8:	f7f1 f839 	bl	800085e <_close>
 800f7ec:	1c43      	adds	r3, r0, #1
 800f7ee:	d102      	bne.n	800f7f6 <_close_r+0x1a>
 800f7f0:	682b      	ldr	r3, [r5, #0]
 800f7f2:	b103      	cbz	r3, 800f7f6 <_close_r+0x1a>
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	bd38      	pop	{r3, r4, r5, pc}
 800f7f8:	200083e8 	.word	0x200083e8

0800f7fc <__sflush_r>:
 800f7fc:	898a      	ldrh	r2, [r1, #12]
 800f7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f802:	4605      	mov	r5, r0
 800f804:	0710      	lsls	r0, r2, #28
 800f806:	460c      	mov	r4, r1
 800f808:	d458      	bmi.n	800f8bc <__sflush_r+0xc0>
 800f80a:	684b      	ldr	r3, [r1, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dc05      	bgt.n	800f81c <__sflush_r+0x20>
 800f810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f812:	2b00      	cmp	r3, #0
 800f814:	dc02      	bgt.n	800f81c <__sflush_r+0x20>
 800f816:	2000      	movs	r0, #0
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d0f9      	beq.n	800f816 <__sflush_r+0x1a>
 800f822:	2300      	movs	r3, #0
 800f824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f828:	682f      	ldr	r7, [r5, #0]
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	d032      	beq.n	800f894 <__sflush_r+0x98>
 800f82e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f830:	89a3      	ldrh	r3, [r4, #12]
 800f832:	075a      	lsls	r2, r3, #29
 800f834:	d505      	bpl.n	800f842 <__sflush_r+0x46>
 800f836:	6863      	ldr	r3, [r4, #4]
 800f838:	1ac0      	subs	r0, r0, r3
 800f83a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f83c:	b10b      	cbz	r3, 800f842 <__sflush_r+0x46>
 800f83e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f840:	1ac0      	subs	r0, r0, r3
 800f842:	2300      	movs	r3, #0
 800f844:	4602      	mov	r2, r0
 800f846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f848:	6a21      	ldr	r1, [r4, #32]
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b0      	blx	r6
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	d106      	bne.n	800f862 <__sflush_r+0x66>
 800f854:	6829      	ldr	r1, [r5, #0]
 800f856:	291d      	cmp	r1, #29
 800f858:	d82c      	bhi.n	800f8b4 <__sflush_r+0xb8>
 800f85a:	4a2a      	ldr	r2, [pc, #168]	; (800f904 <__sflush_r+0x108>)
 800f85c:	40ca      	lsrs	r2, r1
 800f85e:	07d6      	lsls	r6, r2, #31
 800f860:	d528      	bpl.n	800f8b4 <__sflush_r+0xb8>
 800f862:	2200      	movs	r2, #0
 800f864:	6062      	str	r2, [r4, #4]
 800f866:	04d9      	lsls	r1, r3, #19
 800f868:	6922      	ldr	r2, [r4, #16]
 800f86a:	6022      	str	r2, [r4, #0]
 800f86c:	d504      	bpl.n	800f878 <__sflush_r+0x7c>
 800f86e:	1c42      	adds	r2, r0, #1
 800f870:	d101      	bne.n	800f876 <__sflush_r+0x7a>
 800f872:	682b      	ldr	r3, [r5, #0]
 800f874:	b903      	cbnz	r3, 800f878 <__sflush_r+0x7c>
 800f876:	6560      	str	r0, [r4, #84]	; 0x54
 800f878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f87a:	602f      	str	r7, [r5, #0]
 800f87c:	2900      	cmp	r1, #0
 800f87e:	d0ca      	beq.n	800f816 <__sflush_r+0x1a>
 800f880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f884:	4299      	cmp	r1, r3
 800f886:	d002      	beq.n	800f88e <__sflush_r+0x92>
 800f888:	4628      	mov	r0, r5
 800f88a:	f7ff faab 	bl	800ede4 <_free_r>
 800f88e:	2000      	movs	r0, #0
 800f890:	6360      	str	r0, [r4, #52]	; 0x34
 800f892:	e7c1      	b.n	800f818 <__sflush_r+0x1c>
 800f894:	6a21      	ldr	r1, [r4, #32]
 800f896:	2301      	movs	r3, #1
 800f898:	4628      	mov	r0, r5
 800f89a:	47b0      	blx	r6
 800f89c:	1c41      	adds	r1, r0, #1
 800f89e:	d1c7      	bne.n	800f830 <__sflush_r+0x34>
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d0c4      	beq.n	800f830 <__sflush_r+0x34>
 800f8a6:	2b1d      	cmp	r3, #29
 800f8a8:	d001      	beq.n	800f8ae <__sflush_r+0xb2>
 800f8aa:	2b16      	cmp	r3, #22
 800f8ac:	d101      	bne.n	800f8b2 <__sflush_r+0xb6>
 800f8ae:	602f      	str	r7, [r5, #0]
 800f8b0:	e7b1      	b.n	800f816 <__sflush_r+0x1a>
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8b8:	81a3      	strh	r3, [r4, #12]
 800f8ba:	e7ad      	b.n	800f818 <__sflush_r+0x1c>
 800f8bc:	690f      	ldr	r7, [r1, #16]
 800f8be:	2f00      	cmp	r7, #0
 800f8c0:	d0a9      	beq.n	800f816 <__sflush_r+0x1a>
 800f8c2:	0793      	lsls	r3, r2, #30
 800f8c4:	680e      	ldr	r6, [r1, #0]
 800f8c6:	bf08      	it	eq
 800f8c8:	694b      	ldreq	r3, [r1, #20]
 800f8ca:	600f      	str	r7, [r1, #0]
 800f8cc:	bf18      	it	ne
 800f8ce:	2300      	movne	r3, #0
 800f8d0:	eba6 0807 	sub.w	r8, r6, r7
 800f8d4:	608b      	str	r3, [r1, #8]
 800f8d6:	f1b8 0f00 	cmp.w	r8, #0
 800f8da:	dd9c      	ble.n	800f816 <__sflush_r+0x1a>
 800f8dc:	6a21      	ldr	r1, [r4, #32]
 800f8de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8e0:	4643      	mov	r3, r8
 800f8e2:	463a      	mov	r2, r7
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b0      	blx	r6
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	dc06      	bgt.n	800f8fa <__sflush_r+0xfe>
 800f8ec:	89a3      	ldrh	r3, [r4, #12]
 800f8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f2:	81a3      	strh	r3, [r4, #12]
 800f8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f8:	e78e      	b.n	800f818 <__sflush_r+0x1c>
 800f8fa:	4407      	add	r7, r0
 800f8fc:	eba8 0800 	sub.w	r8, r8, r0
 800f900:	e7e9      	b.n	800f8d6 <__sflush_r+0xda>
 800f902:	bf00      	nop
 800f904:	20400001 	.word	0x20400001

0800f908 <_fflush_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	690b      	ldr	r3, [r1, #16]
 800f90c:	4605      	mov	r5, r0
 800f90e:	460c      	mov	r4, r1
 800f910:	b913      	cbnz	r3, 800f918 <_fflush_r+0x10>
 800f912:	2500      	movs	r5, #0
 800f914:	4628      	mov	r0, r5
 800f916:	bd38      	pop	{r3, r4, r5, pc}
 800f918:	b118      	cbz	r0, 800f922 <_fflush_r+0x1a>
 800f91a:	6983      	ldr	r3, [r0, #24]
 800f91c:	b90b      	cbnz	r3, 800f922 <_fflush_r+0x1a>
 800f91e:	f7ff f9a7 	bl	800ec70 <__sinit>
 800f922:	4b14      	ldr	r3, [pc, #80]	; (800f974 <_fflush_r+0x6c>)
 800f924:	429c      	cmp	r4, r3
 800f926:	d11b      	bne.n	800f960 <_fflush_r+0x58>
 800f928:	686c      	ldr	r4, [r5, #4]
 800f92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d0ef      	beq.n	800f912 <_fflush_r+0xa>
 800f932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f934:	07d0      	lsls	r0, r2, #31
 800f936:	d404      	bmi.n	800f942 <_fflush_r+0x3a>
 800f938:	0599      	lsls	r1, r3, #22
 800f93a:	d402      	bmi.n	800f942 <_fflush_r+0x3a>
 800f93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f93e:	f7ff fa47 	bl	800edd0 <__retarget_lock_acquire_recursive>
 800f942:	4628      	mov	r0, r5
 800f944:	4621      	mov	r1, r4
 800f946:	f7ff ff59 	bl	800f7fc <__sflush_r>
 800f94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f94c:	07da      	lsls	r2, r3, #31
 800f94e:	4605      	mov	r5, r0
 800f950:	d4e0      	bmi.n	800f914 <_fflush_r+0xc>
 800f952:	89a3      	ldrh	r3, [r4, #12]
 800f954:	059b      	lsls	r3, r3, #22
 800f956:	d4dd      	bmi.n	800f914 <_fflush_r+0xc>
 800f958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f95a:	f7ff fa3a 	bl	800edd2 <__retarget_lock_release_recursive>
 800f95e:	e7d9      	b.n	800f914 <_fflush_r+0xc>
 800f960:	4b05      	ldr	r3, [pc, #20]	; (800f978 <_fflush_r+0x70>)
 800f962:	429c      	cmp	r4, r3
 800f964:	d101      	bne.n	800f96a <_fflush_r+0x62>
 800f966:	68ac      	ldr	r4, [r5, #8]
 800f968:	e7df      	b.n	800f92a <_fflush_r+0x22>
 800f96a:	4b04      	ldr	r3, [pc, #16]	; (800f97c <_fflush_r+0x74>)
 800f96c:	429c      	cmp	r4, r3
 800f96e:	bf08      	it	eq
 800f970:	68ec      	ldreq	r4, [r5, #12]
 800f972:	e7da      	b.n	800f92a <_fflush_r+0x22>
 800f974:	0801274c 	.word	0x0801274c
 800f978:	0801276c 	.word	0x0801276c
 800f97c:	0801272c 	.word	0x0801272c

0800f980 <_lseek_r>:
 800f980:	b538      	push	{r3, r4, r5, lr}
 800f982:	4d07      	ldr	r5, [pc, #28]	; (800f9a0 <_lseek_r+0x20>)
 800f984:	4604      	mov	r4, r0
 800f986:	4608      	mov	r0, r1
 800f988:	4611      	mov	r1, r2
 800f98a:	2200      	movs	r2, #0
 800f98c:	602a      	str	r2, [r5, #0]
 800f98e:	461a      	mov	r2, r3
 800f990:	f7f0 ff8c 	bl	80008ac <_lseek>
 800f994:	1c43      	adds	r3, r0, #1
 800f996:	d102      	bne.n	800f99e <_lseek_r+0x1e>
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	b103      	cbz	r3, 800f99e <_lseek_r+0x1e>
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	bd38      	pop	{r3, r4, r5, pc}
 800f9a0:	200083e8 	.word	0x200083e8

0800f9a4 <__swhatbuf_r>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	460e      	mov	r6, r1
 800f9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ac:	2900      	cmp	r1, #0
 800f9ae:	b096      	sub	sp, #88	; 0x58
 800f9b0:	4614      	mov	r4, r2
 800f9b2:	461d      	mov	r5, r3
 800f9b4:	da08      	bge.n	800f9c8 <__swhatbuf_r+0x24>
 800f9b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	602a      	str	r2, [r5, #0]
 800f9be:	061a      	lsls	r2, r3, #24
 800f9c0:	d410      	bmi.n	800f9e4 <__swhatbuf_r+0x40>
 800f9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c6:	e00e      	b.n	800f9e6 <__swhatbuf_r+0x42>
 800f9c8:	466a      	mov	r2, sp
 800f9ca:	f000 f8b3 	bl	800fb34 <_fstat_r>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	dbf1      	blt.n	800f9b6 <__swhatbuf_r+0x12>
 800f9d2:	9a01      	ldr	r2, [sp, #4]
 800f9d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9dc:	425a      	negs	r2, r3
 800f9de:	415a      	adcs	r2, r3
 800f9e0:	602a      	str	r2, [r5, #0]
 800f9e2:	e7ee      	b.n	800f9c2 <__swhatbuf_r+0x1e>
 800f9e4:	2340      	movs	r3, #64	; 0x40
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	b016      	add	sp, #88	; 0x58
 800f9ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9f0 <__smakebuf_r>:
 800f9f0:	898b      	ldrh	r3, [r1, #12]
 800f9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9f4:	079d      	lsls	r5, r3, #30
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	460c      	mov	r4, r1
 800f9fa:	d507      	bpl.n	800fa0c <__smakebuf_r+0x1c>
 800f9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	6123      	str	r3, [r4, #16]
 800fa04:	2301      	movs	r3, #1
 800fa06:	6163      	str	r3, [r4, #20]
 800fa08:	b002      	add	sp, #8
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}
 800fa0c:	ab01      	add	r3, sp, #4
 800fa0e:	466a      	mov	r2, sp
 800fa10:	f7ff ffc8 	bl	800f9a4 <__swhatbuf_r>
 800fa14:	9900      	ldr	r1, [sp, #0]
 800fa16:	4605      	mov	r5, r0
 800fa18:	4630      	mov	r0, r6
 800fa1a:	f7ff fa4f 	bl	800eebc <_malloc_r>
 800fa1e:	b948      	cbnz	r0, 800fa34 <__smakebuf_r+0x44>
 800fa20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa24:	059a      	lsls	r2, r3, #22
 800fa26:	d4ef      	bmi.n	800fa08 <__smakebuf_r+0x18>
 800fa28:	f023 0303 	bic.w	r3, r3, #3
 800fa2c:	f043 0302 	orr.w	r3, r3, #2
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	e7e3      	b.n	800f9fc <__smakebuf_r+0xc>
 800fa34:	4b0d      	ldr	r3, [pc, #52]	; (800fa6c <__smakebuf_r+0x7c>)
 800fa36:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	6020      	str	r0, [r4, #0]
 800fa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	9b00      	ldr	r3, [sp, #0]
 800fa44:	6163      	str	r3, [r4, #20]
 800fa46:	9b01      	ldr	r3, [sp, #4]
 800fa48:	6120      	str	r0, [r4, #16]
 800fa4a:	b15b      	cbz	r3, 800fa64 <__smakebuf_r+0x74>
 800fa4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa50:	4630      	mov	r0, r6
 800fa52:	f000 f881 	bl	800fb58 <_isatty_r>
 800fa56:	b128      	cbz	r0, 800fa64 <__smakebuf_r+0x74>
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	f023 0303 	bic.w	r3, r3, #3
 800fa5e:	f043 0301 	orr.w	r3, r3, #1
 800fa62:	81a3      	strh	r3, [r4, #12]
 800fa64:	89a0      	ldrh	r0, [r4, #12]
 800fa66:	4305      	orrs	r5, r0
 800fa68:	81a5      	strh	r5, [r4, #12]
 800fa6a:	e7cd      	b.n	800fa08 <__smakebuf_r+0x18>
 800fa6c:	0800ec09 	.word	0x0800ec09

0800fa70 <__malloc_lock>:
 800fa70:	4801      	ldr	r0, [pc, #4]	; (800fa78 <__malloc_lock+0x8>)
 800fa72:	f7ff b9ad 	b.w	800edd0 <__retarget_lock_acquire_recursive>
 800fa76:	bf00      	nop
 800fa78:	200083ec 	.word	0x200083ec

0800fa7c <__malloc_unlock>:
 800fa7c:	4801      	ldr	r0, [pc, #4]	; (800fa84 <__malloc_unlock+0x8>)
 800fa7e:	f7ff b9a8 	b.w	800edd2 <__retarget_lock_release_recursive>
 800fa82:	bf00      	nop
 800fa84:	200083ec 	.word	0x200083ec

0800fa88 <_read_r>:
 800fa88:	b538      	push	{r3, r4, r5, lr}
 800fa8a:	4d07      	ldr	r5, [pc, #28]	; (800faa8 <_read_r+0x20>)
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	4608      	mov	r0, r1
 800fa90:	4611      	mov	r1, r2
 800fa92:	2200      	movs	r2, #0
 800fa94:	602a      	str	r2, [r5, #0]
 800fa96:	461a      	mov	r2, r3
 800fa98:	f7f0 fea8 	bl	80007ec <_read>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_read_r+0x1e>
 800faa0:	682b      	ldr	r3, [r5, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_read_r+0x1e>
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	200083e8 	.word	0x200083e8

0800faac <_raise_r>:
 800faac:	291f      	cmp	r1, #31
 800faae:	b538      	push	{r3, r4, r5, lr}
 800fab0:	4604      	mov	r4, r0
 800fab2:	460d      	mov	r5, r1
 800fab4:	d904      	bls.n	800fac0 <_raise_r+0x14>
 800fab6:	2316      	movs	r3, #22
 800fab8:	6003      	str	r3, [r0, #0]
 800faba:	f04f 30ff 	mov.w	r0, #4294967295
 800fabe:	bd38      	pop	{r3, r4, r5, pc}
 800fac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fac2:	b112      	cbz	r2, 800faca <_raise_r+0x1e>
 800fac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fac8:	b94b      	cbnz	r3, 800fade <_raise_r+0x32>
 800faca:	4620      	mov	r0, r4
 800facc:	f000 f830 	bl	800fb30 <_getpid_r>
 800fad0:	462a      	mov	r2, r5
 800fad2:	4601      	mov	r1, r0
 800fad4:	4620      	mov	r0, r4
 800fad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fada:	f000 b817 	b.w	800fb0c <_kill_r>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d00a      	beq.n	800faf8 <_raise_r+0x4c>
 800fae2:	1c59      	adds	r1, r3, #1
 800fae4:	d103      	bne.n	800faee <_raise_r+0x42>
 800fae6:	2316      	movs	r3, #22
 800fae8:	6003      	str	r3, [r0, #0]
 800faea:	2001      	movs	r0, #1
 800faec:	e7e7      	b.n	800fabe <_raise_r+0x12>
 800faee:	2400      	movs	r4, #0
 800faf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faf4:	4628      	mov	r0, r5
 800faf6:	4798      	blx	r3
 800faf8:	2000      	movs	r0, #0
 800fafa:	e7e0      	b.n	800fabe <_raise_r+0x12>

0800fafc <raise>:
 800fafc:	4b02      	ldr	r3, [pc, #8]	; (800fb08 <raise+0xc>)
 800fafe:	4601      	mov	r1, r0
 800fb00:	6818      	ldr	r0, [r3, #0]
 800fb02:	f7ff bfd3 	b.w	800faac <_raise_r>
 800fb06:	bf00      	nop
 800fb08:	2000002c 	.word	0x2000002c

0800fb0c <_kill_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d07      	ldr	r5, [pc, #28]	; (800fb2c <_kill_r+0x20>)
 800fb10:	2300      	movs	r3, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	4608      	mov	r0, r1
 800fb16:	4611      	mov	r1, r2
 800fb18:	602b      	str	r3, [r5, #0]
 800fb1a:	f7f0 fe4b 	bl	80007b4 <_kill>
 800fb1e:	1c43      	adds	r3, r0, #1
 800fb20:	d102      	bne.n	800fb28 <_kill_r+0x1c>
 800fb22:	682b      	ldr	r3, [r5, #0]
 800fb24:	b103      	cbz	r3, 800fb28 <_kill_r+0x1c>
 800fb26:	6023      	str	r3, [r4, #0]
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
 800fb2a:	bf00      	nop
 800fb2c:	200083e8 	.word	0x200083e8

0800fb30 <_getpid_r>:
 800fb30:	f7f0 be38 	b.w	80007a4 <_getpid>

0800fb34 <_fstat_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d07      	ldr	r5, [pc, #28]	; (800fb54 <_fstat_r+0x20>)
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4608      	mov	r0, r1
 800fb3e:	4611      	mov	r1, r2
 800fb40:	602b      	str	r3, [r5, #0]
 800fb42:	f7f0 fe98 	bl	8000876 <_fstat>
 800fb46:	1c43      	adds	r3, r0, #1
 800fb48:	d102      	bne.n	800fb50 <_fstat_r+0x1c>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	b103      	cbz	r3, 800fb50 <_fstat_r+0x1c>
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	bd38      	pop	{r3, r4, r5, pc}
 800fb52:	bf00      	nop
 800fb54:	200083e8 	.word	0x200083e8

0800fb58 <_isatty_r>:
 800fb58:	b538      	push	{r3, r4, r5, lr}
 800fb5a:	4d06      	ldr	r5, [pc, #24]	; (800fb74 <_isatty_r+0x1c>)
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	4604      	mov	r4, r0
 800fb60:	4608      	mov	r0, r1
 800fb62:	602b      	str	r3, [r5, #0]
 800fb64:	f7f0 fe97 	bl	8000896 <_isatty>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d102      	bne.n	800fb72 <_isatty_r+0x1a>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	b103      	cbz	r3, 800fb72 <_isatty_r+0x1a>
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	bd38      	pop	{r3, r4, r5, pc}
 800fb74:	200083e8 	.word	0x200083e8

0800fb78 <_init>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	bf00      	nop
 800fb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7e:	bc08      	pop	{r3}
 800fb80:	469e      	mov	lr, r3
 800fb82:	4770      	bx	lr

0800fb84 <_fini>:
 800fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb86:	bf00      	nop
 800fb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb8a:	bc08      	pop	{r3}
 800fb8c:	469e      	mov	lr, r3
 800fb8e:	4770      	bx	lr
