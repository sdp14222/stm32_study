
12. ETH_LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f83c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0800f9cc  0800f9cc  0001f9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125fc  080125fc  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080125fc  080125fc  000225fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012604  08012604  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012604  08012604  00022604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012608  08012608  00022608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801260c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008368  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200083f8  200083f8  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7de  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051e3  00000000  00000000  0004c89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00051a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  00052ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d326  00000000  00000000  00054268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002405e  00000000  00000000  0008158e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf77  00000000  00000000  000a55ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00181563  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059d4  00000000  00000000  001815b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9b4 	.word	0x0800f9b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800f9b4 	.word	0x0800f9b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_GPIO_Init+0x68>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <MX_GPIO_Init+0x68>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_GPIO_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_GPIO_Init+0x68>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_GPIO_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_GPIO_Init+0x68>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x68>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fbfa 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f810 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ffc2 	bl	8000574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f9f0 	bl	80009d4 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 80005f4:	f003 fbde 	bl	8003db4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* tcp echo server Init */
  udp_echoserver_init();
 80005f8:	f000 f9b0 	bl	800095c <udp_echoserver_init>
  while (1)
  {
//	  HAL_UART_Transmit(&huart1, str, 20, 10);
//	  HAL_Delay(1000);
	  /* Read a received packet from the Ethernet buffers and send it to the lwIP for handling */
	  ethernetif_input(&gnetif);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <main+0x28>)
 80005fe:	f003 fe41 	bl	8004284 <ethernetif_input>

	  /* Handle timeouts */
	  sys_check_timeouts();
 8000602:	f00b f903 	bl	800b80c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000606:	e7f9      	b.n	80005fc <main+0x1c>
 8000608:	200000f8 	.word	0x200000f8

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f00e f972 	bl	800e904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f823 	bl	80026dc <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f820 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa84 	bl	8002bcc <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f809 	bl	80006e0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 fb7a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USART1_IRQHandler+0x10>)
 8000796:	f002 fc47 	bl	8003028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000b0 	.word	0x200000b0

080007a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return 1;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_kill>:

int _kill(int pid, int sig)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <_kill+0x20>)
 80007c0:	2216      	movs	r2, #22
 80007c2:	601a      	str	r2, [r3, #0]
	return -1;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	200083e8 	.word	0x200083e8

080007d8 <_exit>:

void _exit (int status)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ffe5 	bl	80007b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007ea:	e7fe      	b.n	80007ea <_exit+0x12>

080007ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
	}

return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>
	}
	return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	605a      	str	r2, [r3, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d205      	bcs.n	8000904 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <_sbrk+0x6c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20020000 	.word	0x20020000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000ac 	.word	0x200000ac
 8000930:	200083f8 	.word	0x200083f8
 8000934:	200083e8 	.word	0x200083e8

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000962:	f00b fc7f 	bl	800c264 <udp_new>
 8000966:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00f      	beq.n	800098e <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 800096e:	2207      	movs	r2, #7
 8000970:	4909      	ldr	r1, [pc, #36]	; (8000998 <udp_echoserver_init+0x3c>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f00b fb38 	bl	800bfe8 <udp_bind>
 8000978:	4603      	mov	r3, r0
 800097a:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 800097c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d104      	bne.n	800098e <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000984:	2200      	movs	r2, #0
 8000986:	4905      	ldr	r1, [pc, #20]	; (800099c <udp_echoserver_init+0x40>)
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f00b fc4b 	bl	800c224 <udp_recv>
      }
   }
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	080124a0 	.word	0x080124a0
 800099c:	080009a1 	.word	0x080009a1

080009a0 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 80009ae:	2207      	movs	r2, #7
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	68b8      	ldr	r0, [r7, #8]
 80009b4:	f00b fba0 	bl	800c0f8 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	f00b f92a 	bl	800bc14 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 80009c0:	68b8      	ldr	r0, [r7, #8]
 80009c2:	f00b fc07 	bl	800c1d4 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f005 fa1e 	bl	8005e08 <pbuf_free>
   
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f002 fabe 	bl	8002f8c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f7ff fe63 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	40011000 	.word	0x40011000

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d134      	bne.n	8000ab4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a94:	2307      	movs	r3, #7
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x9c>)
 8000aa0:	f001 fc80 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2025      	movs	r0, #37	; 0x25
 8000aaa:	f000 fb08 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aae:	2025      	movs	r0, #37	; 0x25
 8000ab0:	f000 fb21 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ff21 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f00d fec3 	bl	800e880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd71 	bl	80005e0 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b0c:	0801260c 	.word	0x0801260c
  ldr r2, =_sbss
 8000b10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000b14:	200083f8 	.word	0x200083f8

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>

08000b1a <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <DP83848_RegisterBusIO+0x28>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e014      	b.n	8000b72 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d17c      	bne.n	8000c98 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2220      	movs	r2, #32
 8000bb0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e01c      	b.n	8000bf2 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f107 0208 	add.w	r2, r7, #8
 8000bc0:	2119      	movs	r1, #25
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	4798      	blx	r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000bcc:	f06f 0304 	mvn.w	r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000bd2:	e00b      	b.n	8000bec <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d105      	bne.n	8000bec <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
         break;
 8000bea:	e005      	b.n	8000bf8 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d9df      	bls.n	8000bb8 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d902      	bls.n	8000c06 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000c00:	f06f 0302 	mvn.w	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d145      	bne.n	8000c98 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6810      	ldr	r0, [r2, #0]
 8000c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4798      	blx	r3
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db37      	blt.n	8000c92 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6810      	ldr	r0, [r2, #0]
 8000c2a:	f107 0208 	add.w	r2, r7, #8
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4798      	blx	r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db28      	blt.n	8000c8a <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4798      	blx	r3
 8000c3e:	4603      	mov	r3, r0
 8000c40:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000c42:	e01c      	b.n	8000c7e <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4798      	blx	r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c56:	d80e      	bhi.n	8000c76 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6810      	ldr	r0, [r2, #0]
 8000c60:	f107 0208 	add.w	r2, r7, #8
 8000c64:	2100      	movs	r1, #0
 8000c66:	4798      	blx	r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da07      	bge.n	8000c7e <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000c6e:	f06f 0304 	mvn.w	r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
                 break;
 8000c74:	e010      	b.n	8000c98 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000c76:	f06f 0301 	mvn.w	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
               break;
 8000c7c:	e00c      	b.n	8000c98 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1dd      	bne.n	8000c44 <DP83848_Init+0xc6>
 8000c88:	e006      	b.n	8000c98 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000c8a:	f06f 0304 	mvn.w	r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	e002      	b.n	8000c98 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000c92:	f06f 0303 	mvn.w	r3, #3
 8000c96:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d112      	bne.n	8000cc4 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000ca8:	bf00      	nop
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4798      	blx	r3
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cbc:	d9f5      	bls.n	8000caa <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6810      	ldr	r0, [r2, #0]
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4798      	blx	r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da02      	bge.n	8000cf6 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000cf0:	f06f 0304 	mvn.w	r3, #4
 8000cf4:	e06e      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6810      	ldr	r0, [r2, #0]
 8000cfe:	f107 020c 	add.w	r2, r7, #12
 8000d02:	2101      	movs	r1, #1
 8000d04:	4798      	blx	r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da02      	bge.n	8000d12 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000d0c:	f06f 0304 	mvn.w	r3, #4
 8000d10:	e060      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e059      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6810      	ldr	r0, [r2, #0]
 8000d28:	f107 020c 	add.w	r2, r7, #12
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4798      	blx	r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da02      	bge.n	8000d3c <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000d36:	f06f 0304 	mvn.w	r3, #4
 8000d3a:	e04b      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d11b      	bne.n	8000d7e <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <DP83848_GetLinkState+0x90>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e03a      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e033      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000d76:	2304      	movs	r3, #4
 8000d78:	e02c      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e02a      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da02      	bge.n	8000d9a <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000d94:	f06f 0304 	mvn.w	r3, #4
 8000d98:	e01c      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000da4:	2306      	movs	r3, #6
 8000da6:	e015      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0306 	and.w	r3, r3, #6
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d101      	bne.n	8000db6 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000db2:	2302      	movs	r3, #2
 8000db4:	e00e      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f003 0306 	and.w	r3, r3, #6
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e007      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0306 	and.w	r3, r3, #6
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d101      	bne.n	8000dd2 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e000      	b.n	8000dd4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000dd2:	2305      	movs	r3, #5
    }
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f94f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fc6c 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200000f4 	.word	0x200000f4

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000f4 	.word	0x200000f4

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff feb6 	bl	8000ea8 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d008      	beq.n	800115c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e052      	b.n	8001202 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0216 	bic.w	r2, r2, #22
 800116a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <HAL_DMA_Abort+0x62>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0208 	bic.w	r2, r2, #8
 800119a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e013      	b.n	80011d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe7b 	bl	8000ea8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d90c      	bls.n	80011d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e015      	b.n	8001202 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e4      	bne.n	80011ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	223f      	movs	r2, #63	; 0x3f
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d004      	beq.n	8001228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e00c      	b.n	8001242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2205      	movs	r2, #5
 800122c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06c      	b.n	800133c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2223      	movs	r2, #35	; 0x23
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f003 f879 	bl	800436c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_ETH_Init+0xf4>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_ETH_Init+0xf8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <HAL_ETH_Init+0xf8>)
 800129c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_ETH_Init+0xf8>)
 80012b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012cc:	f7ff fdec 	bl	8000ea8 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d2:	e011      	b.n	80012f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d4:	f7ff fde8 	bl	8000ea8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e2:	d909      	bls.n	80012f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2204      	movs	r2, #4
 80012e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	22e0      	movs	r2, #224	; 0xe0
 80012f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e021      	b.n	800133c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e4      	bne.n	80012d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fda4 	bl	8001e58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fe4b 	bl	8001fac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fea1 	bl	800205e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	461a      	mov	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fe09 	bl	8001f3c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2210      	movs	r2, #16
 8001336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800

0800134c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800135a:	2b10      	cmp	r3, #16
 800135c:	d13a      	bne.n	80013d4 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2223      	movs	r2, #35	; 0x23
 8001362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f9cd 	bl	800170c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0208 	orr.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fc14 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ae:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013c6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2223      	movs	r2, #35	; 0x23
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e000      	b.n	80013d6 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ec:	2b23      	cmp	r3, #35	; 0x23
 80013ee:	d130      	bne.n	8001452 <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2223      	movs	r2, #35	; 0x23
 80013f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0208 	bic.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fbc5 	bl	8001bc0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2210      	movs	r2, #16
 800144a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07c      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001488:	2b23      	cmp	r3, #35	; 0x23
 800148a:	d176      	bne.n	800157a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800148c:	2200      	movs	r2, #0
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fe51 	bl	8002138 <ETH_Prepare_Tx_Descriptors>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e065      	b.n	800157c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3206      	adds	r2, #6
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d904      	bls.n	80014e0 <HAL_ETH_Transmit+0x84>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	1f1a      	subs	r2, r3, #4
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3106      	adds	r1, #6
 80014ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014f6:	f7ff fcd7 	bl	8000ea8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014fc:	e037      	b.n	800156e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d011      	beq.n	8001534 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	f043 0208 	orr.w	r2, r3, #8
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e023      	b.n	800157c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d018      	beq.n	800156e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153c:	f7ff fcb4 	bl	8000ea8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d302      	bcc.n	8001552 <HAL_ETH_Transmit+0xf6>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001558:	f043 0204 	orr.w	r2, r3, #4
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001568:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e006      	b.n	800157c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	dbc3      	blt.n	80014fe <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a8      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b6:	2b23      	cmp	r3, #35	; 0x23
 80015b8:	d001      	beq.n	80015be <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0a1      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	3212      	adds	r2, #18
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d4:	f1c3 0304 	rsb	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015da:	e06a      	b.n	80016b2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_ETH_ReadData+0x88>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d040      	beq.n	800168e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001640:	3b04      	subs	r3, #4
 8001642:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001668:	461a      	mov	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f003 f82d 	bl	80046cc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	441a      	add	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d902      	bls.n	80016a0 <HAL_ETH_ReadData+0x11c>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b04      	subs	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	3212      	adds	r2, #18
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db06      	blt.n	80016c8 <HAL_ETH_ReadData+0x144>
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d202      	bcs.n	80016c8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d089      	beq.n	80015dc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f815 	bl	800170c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001720:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	3212      	adds	r2, #18
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001732:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001734:	e03e      	b.n	80017b4 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4618      	mov	r0, r3
 8001744:	f002 ff92 	bl	800466c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	74fb      	strb	r3, [r7, #19]
 8001752:	e007      	b.n	8001764 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	461a      	mov	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	461a      	mov	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800176a:	f3bf 8f5f 	dmb	sy
}
 800176e:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001776:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <ETH_UpdateDescriptor+0xe0>)
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e003      	b.n	8001790 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f244 32e8 	movw	r2, #17384	; 0x43e8
 800178e:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d902      	bls.n	80017a2 <ETH_UpdateDescriptor+0x96>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3b04      	subs	r3, #4
 80017a0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	3212      	adds	r2, #18
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	617b      	str	r3, [r7, #20]
      desccount--;
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <ETH_UpdateDescriptor+0xb4>
 80017ba:	7cfb      	ldrb	r3, [r7, #19]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ba      	bne.n	8001736 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d00c      	beq.n	80017e4 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	461a      	mov	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	800043e8 	.word	0x800043e8

080017f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	02db      	lsls	r3, r3, #11
 8001812:	b29b      	uxth	r3, r3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001840:	f7ff fb32 	bl	8000ea8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001846:	e00d      	b.n	8001864 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001848:	f7ff fb2e 	bl	8000ea8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d301      	bcc.n	800185c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e010      	b.n	800187e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ec      	bne.n	8001848 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 031c 	and.w	r3, r3, #28
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	02db      	lsls	r3, r3, #11
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e0:	f7ff fae2 	bl	8000ea8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018e6:	e00d      	b.n	8001904 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018e8:	f7ff fade 	bl	8000ea8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d301      	bcc.n	80018fc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e009      	b.n	8001910 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ec      	bne.n	80018e8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d2      	b.n	8001ad2 <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00b      	b.n	8001b0a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d105      	bne.n	8001b08 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f884 	bl	8001c0c <ETH_SetMACConfig>

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 031c 	bic.w	r3, r3, #28
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b2c:	f001 f9fa 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8001b30:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d908      	bls.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d804      	bhi.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e027      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d908      	bls.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d204      	bcs.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f043 030c 	orr.w	r3, r3, #12
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e01a      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d303      	bcc.n	8001b76 <HAL_ETH_SetMDIOClockRange+0x62>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d911      	bls.n	8001b9a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d908      	bls.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d804      	bhi.n	8001b90 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e005      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e000      	b.n	8001b9c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b9a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	01312cff 	.word	0x01312cff
 8001bb0:	02160ebf 	.word	0x02160ebf
 8001bb4:	03938700 	.word	0x03938700
 8001bb8:	05f5e0ff 	.word	0x05f5e0ff
 8001bbc:	08f0d17f 	.word	0x08f0d17f

08001bc0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001be2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f965 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c00:	6193      	str	r3, [r2, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <ETH_SetMACConfig+0x134>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7c1b      	ldrb	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <ETH_SetMACConfig+0x28>
 8001c2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c32:	e000      	b.n	8001c36 <ETH_SetMACConfig+0x2a>
 8001c34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7c5b      	ldrb	r3, [r3, #17]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <ETH_SetMACConfig+0x38>
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c42:	e000      	b.n	8001c46 <ETH_SetMACConfig+0x3a>
 8001c44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7fdb      	ldrb	r3, [r3, #31]
 8001c52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	7f92      	ldrb	r2, [r2, #30]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d102      	bne.n	8001c6a <ETH_SetMACConfig+0x5e>
 8001c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c68:	e000      	b.n	8001c6c <ETH_SetMACConfig+0x60>
 8001c6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
 8001c72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetMACConfig+0x88>
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	e000      	b.n	8001c96 <ETH_SetMACConfig+0x8a>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7bdb      	ldrb	r3, [r3, #15]
 8001c9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ca4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f8fa 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cf2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001cf8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001d00:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001d08:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff f8c9 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	ff20810f 	.word	0xff20810f

08001d44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <ETH_SetDMAConfig+0x110>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7b1b      	ldrb	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <ETH_SetDMAConfig+0x2c>
 8001d6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d6e:	e000      	b.n	8001d72 <ETH_SetDMAConfig+0x2e>
 8001d70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7b5b      	ldrb	r3, [r3, #13]
 8001d76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	7f52      	ldrb	r2, [r2, #29]
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d102      	bne.n	8001d88 <ETH_SetDMAConfig+0x44>
 8001d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d86:	e000      	b.n	8001d8a <ETH_SetDMAConfig+0x46>
 8001d88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	7b9b      	ldrb	r3, [r3, #14]
 8001d90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7f1b      	ldrb	r3, [r3, #28]
 8001d9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001da0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7f9b      	ldrb	r3, [r3, #30]
 8001da6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001da8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f870 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	461a      	mov	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001df8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001dfe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff f841 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f8de3f23 	.word	0xf8de3f23

08001e58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0a6      	sub	sp, #152	; 0x98
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e94:	2300      	movs	r3, #0
 8001e96:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fe9a 	bl	8001c0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff08 	bl	8001d44 <ETH_SetDMAConfig>
}
 8001f34:	bf00      	nop
 8001f36:	3798      	adds	r7, #152	; 0x98
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3305      	adds	r3, #5
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	3204      	adds	r2, #4
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <ETH_MACAddressConfig+0x68>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	061a      	lsls	r2, r3, #24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3302      	adds	r3, #2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <ETH_MACAddressConfig+0x6c>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40028040 	.word	0x40028040
 8001fa8:	40028044 	.word	0x40028044

08001fac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e03e      	b.n	8002038 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	3206      	adds	r2, #6
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d80c      	bhi.n	800201c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e004      	b.n	8002026 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d9bd      	bls.n	8001fba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e046      	b.n	80020fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	3212      	adds	r2, #18
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d80c      	bhi.n	80020ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	e004      	b.n	80020f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d9b5      	bls.n	800206c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002138:	b480      	push	{r7}
 800213a:	b08d      	sub	sp, #52	; 0x34
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3318      	adds	r3, #24
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800217a:	d007      	beq.n	800218c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	3304      	adds	r3, #4
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800218c:	2302      	movs	r3, #2
 800218e:	e103      	b.n	8002398 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3301      	adds	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80021a8:	f023 031f 	bic.w	r3, r3, #31
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	6852      	ldr	r2, [r2, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002216:	f3bf 8f5f 	dmb	sy
}
 800221a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002228:	e084      	b.n	8002334 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e005      	b.n	8002256 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	3301      	adds	r3, #1
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b03      	cmp	r3, #3
 8002260:	d902      	bls.n	8002268 <ETH_Prepare_Tx_Descriptors+0x130>
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	3b04      	subs	r3, #4
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228a:	d007      	beq.n	800229c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	3304      	adds	r3, #4
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d029      	beq.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	e019      	b.n	80022e4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80022b0:	f3bf 8f5f 	dmb	sy
}
 80022b4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	3301      	adds	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d902      	bls.n	80022d4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	3b04      	subs	r3, #4
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	3301      	adds	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3e1      	bcc.n	80022b0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e053      	b.n	8002398 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3301      	adds	r3, #1
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800230e:	f023 031f 	bic.w	r3, r3, #31
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	431a      	orrs	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	3301      	adds	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002322:	f3bf 8f5f 	dmb	sy
}
 8002326:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f af76 	bne.w	800222a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e005      	b.n	800235e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	3304      	adds	r3, #4
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4413      	add	r3, r2
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002392:	b662      	cpsie	i
}
 8002394:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3734      	adds	r7, #52	; 0x34
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e16b      	b.n	8002698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 815a 	bne.w	8002692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b4 	beq.w	8002692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5f      	ldr	r2, [pc, #380]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_GPIO_Init+0x310>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_GPIO_Init+0x314>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x226>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_GPIO_Init+0x318>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x222>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x21e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x328>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x20a>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e00e      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ae:	2308      	movs	r3, #8
 80025b0:	e00c      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b2:	2306      	movs	r3, #6
 80025b4:	e00a      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ca:	2300      	movs	r3, #0
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f002 0203 	and.w	r2, r2, #3
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x310>)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x334>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f ae90 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40021400 	.word	0x40021400
 80026d0:	40021800 	.word	0x40021800
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	40013c00 	.word	0x40013c00

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e267      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e242      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fb88 	bl	8000ea8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fb84 	bl	8000ea8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e207      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fb74 	bl	8000ea8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fb70 	bl	8000ea8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1f3      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c7      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fb29 	bl	8000ea8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fb25 	bl	8000ea8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a8      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4925      	ldr	r1, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fb08 	bl	8000ea8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fb04 	bl	8000ea8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e187      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fae8 	bl	8000ea8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fae4 	bl	8000ea8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e167      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fad1 	bl	8000ea8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe facd 	bl	8000ea8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e150      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a7c      	ldr	r2, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fa8d 	bl	8000ea8 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fa89 	bl	8000ea8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e10c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ea>
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a63      	ldr	r2, [pc, #396]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5b      	ldr	r2, [pc, #364]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029e8:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fa4e 	bl	8000ea8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fa4a 	bl	8000ea8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0cb      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x334>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fa38 	bl	8000ea8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fa34 	bl	8000ea8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0b5      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a1 	beq.w	8002bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d05c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d141      	bne.n	8002b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa08 	bl	8000ea8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fa04 	bl	8000ea8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e087      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	491b      	ldr	r1, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe f9dd 	bl	8000ea8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe f9d9 	bl	8000ea8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e05c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x416>
 8002b10:	e054      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe f9c6 	bl	8000ea8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe f9c2 	bl	8000ea8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e045      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
 8002b3e:	e03d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e038      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d121      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11a      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f8f4 	bl	8000ea8 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe f8f0 	bl	8000ea8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f854 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	080123ac 	.word	0x080123ac
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b090      	sub	sp, #64	; 0x40
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
 8002da4:	2300      	movs	r3, #0
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da8:	2300      	movs	r3, #0
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80a1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e09b      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dd0:	e09b      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd6:	e098      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d028      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	2200      	movs	r2, #0
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e00:	2100      	movs	r1, #0
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e04:	fb03 f201 	mul.w	r2, r3, r1
 8002e08:	2300      	movs	r3, #0
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e12:	fba0 1202 	umull	r1, r2, r0, r2
 8002e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e18:	460a      	mov	r2, r1
 8002e1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	4413      	add	r3, r2
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2200      	movs	r2, #0
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	61fa      	str	r2, [r7, #28]
 8002e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e32:	f7fd fa1d 	bl	8000270 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3e:	e053      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e40:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	2200      	movs	r2, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	617a      	str	r2, [r7, #20]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e52:	f04f 0b00 	mov.w	fp, #0
 8002e56:	4652      	mov	r2, sl
 8002e58:	465b      	mov	r3, fp
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	0159      	lsls	r1, r3, #5
 8002e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e68:	0150      	lsls	r0, r2, #5
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e72:	eb63 090b 	sbc.w	r9, r3, fp
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	00eb      	lsls	r3, r5, #3
 8002e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea0:	00e2      	lsls	r2, r4, #3
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	eb14 030a 	adds.w	r3, r4, sl
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	eb45 030b 	adc.w	r3, r5, fp
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002edc:	f7fd f9c8 	bl	8000270 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3740      	adds	r7, #64	; 0x40
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	017d7840 	.word	0x017d7840

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	080123bc 	.word	0x080123bc

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	080123bc 	.word	0x080123bc

08002f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e03f      	b.n	800301e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fd38 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fc7b 	bl	80038cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b0ba      	sub	sp, #232	; 0xe8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_UART_IRQHandler+0x66>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb65 	bl	8003756 <UART_Receive_IT>
      return;
 800308c:	e256      	b.n	800353c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800308e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80de 	beq.w	8003254 <HAL_UART_IRQHandler+0x22c>
 8003098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80d1 	beq.w	8003254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_UART_IRQHandler+0xae>
 80030be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_UART_IRQHandler+0xd2>
 80030e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_UART_IRQHandler+0xf6>
 8003106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_UART_IRQHandler+0x126>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0208 	orr.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 81ed 	beq.w	8003532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_UART_IRQHandler+0x14e>
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 faf0 	bl	8003756 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_UART_IRQHandler+0x17a>
 800319a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04f      	beq.n	8003242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9f8 	bl	8003598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d141      	bne.n	800323a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1d9      	bne.n	80031b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4a7d      	ldr	r2, [pc, #500]	; (8003404 <HAL_UART_IRQHandler+0x3dc>)
 8003210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fff7 	bl	800120a <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00e      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f99a 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00a      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f996 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e006      	b.n	8003250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f992 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800324e:	e170      	b.n	8003532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	bf00      	nop
    return;
 8003252:	e16e      	b.n	8003532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 814a 	bne.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8143 	beq.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 813c 	beq.w	80034f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	f040 80b4 	bne.w	8003408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8140 	beq.w	8003536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032be:	429a      	cmp	r2, r3
 80032c0:	f080 8139 	bcs.w	8003536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d6:	f000 8088 	beq.w	80033ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800330a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800331e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1d9      	bne.n	80032da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3314      	adds	r3, #20
 8003346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800334a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800334e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800335c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e1      	bne.n	8003326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800338c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e3      	bne.n	8003362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e3      	bne.n	80033a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fea0 	bl	800112a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8c0 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003400:	e099      	b.n	8003536 <HAL_UART_IRQHandler+0x50e>
 8003402:	bf00      	nop
 8003404:	0800365f 	.word	0x0800365f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 808b 	beq.w	800353a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8086 	beq.w	800353a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003452:	647a      	str	r2, [r7, #68]	; 0x44
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e3      	bne.n	800342e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	623b      	str	r3, [r7, #32]
   return(result);
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800348a:	633a      	str	r2, [r7, #48]	; 0x30
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e3      	bne.n	8003466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0310 	bic.w	r3, r3, #16
 80034c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	617b      	str	r3, [r7, #20]
   return(result);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e3      	bne.n	80034ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f848 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f0:	e023      	b.n	800353a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_UART_IRQHandler+0x4ea>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8bb 	bl	8003686 <UART_Transmit_IT>
    return;
 8003510:	e014      	b.n	800353c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <HAL_UART_IRQHandler+0x514>
 800351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8fb 	bl	8003726 <UART_EndTransmit_IT>
    return;
 8003530:	e004      	b.n	800353c <HAL_UART_IRQHandler+0x514>
    return;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <HAL_UART_IRQHandler+0x514>
      return;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_UART_IRQHandler+0x514>
      return;
 800353a:	bf00      	nop
  }
}
 800353c:	37e8      	adds	r7, #232	; 0xe8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b095      	sub	sp, #84	; 0x54
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c0:	643a      	str	r2, [r7, #64]	; 0x40
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e5      	bne.n	80035a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	d119      	bne.n	8003644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003630:	61ba      	str	r2, [r7, #24]
 8003632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003652:	bf00      	nop
 8003654:	3754      	adds	r7, #84	; 0x54
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ff77 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d13e      	bne.n	8003718 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	d114      	bne.n	80036ce <UART_Transmit_IT+0x48>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d110      	bne.n	80036ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	1c9a      	adds	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]
 80036cc:	e008      	b.n	80036e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6211      	str	r1, [r2, #32]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003702:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003712:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fefc 	bl	8003544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08c      	sub	sp, #48	; 0x30
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	; 0x22
 8003768:	f040 80ab 	bne.w	80038c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d117      	bne.n	80037a6 <UART_Receive_IT+0x50>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	b29a      	uxth	r2, r3
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
 80037a4:	e026      	b.n	80037f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d007      	beq.n	80037ca <UART_Receive_IT+0x74>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <UART_Receive_IT+0x82>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e008      	b.n	80037ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4619      	mov	r1, r3
 8003802:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003804:	2b00      	cmp	r3, #0
 8003806:	d15a      	bne.n	80038be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0220 	bic.w	r2, r2, #32
 8003816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	d135      	bne.n	80038b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	613b      	str	r3, [r7, #16]
   return(result);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 0310 	bic.w	r3, r3, #16
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	623a      	str	r2, [r7, #32]
 8003870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	69f9      	ldr	r1, [r7, #28]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	61bb      	str	r3, [r7, #24]
   return(result);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d10a      	bne.n	80038a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fe67 	bl	8003580 <HAL_UARTEx_RxEventCallback>
 80038b2:	e002      	b.n	80038ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fe4f 	bl	8003558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e002      	b.n	80038c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b0c0      	sub	sp, #256	; 0x100
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	68d9      	ldr	r1, [r3, #12]
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	ea40 0301 	orr.w	r3, r0, r1
 80038f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003924:	f021 010c 	bic.w	r1, r1, #12
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003932:	430b      	orrs	r3, r1
 8003934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	ea40 0301 	orr.w	r3, r0, r1
 8003952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <UART_SetConfig+0x2cc>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d005      	beq.n	800396c <UART_SetConfig+0xa0>
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b8d      	ldr	r3, [pc, #564]	; (8003b9c <UART_SetConfig+0x2d0>)
 8003968:	429a      	cmp	r2, r3
 800396a:	d104      	bne.n	8003976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fafa 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8003970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003974:	e003      	b.n	800397e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003976:	f7ff fae1 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800397a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	f040 810c 	bne.w	8003ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800399a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039a6:	415b      	adcs	r3, r3
 80039a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ae:	4621      	mov	r1, r4
 80039b0:	eb12 0801 	adds.w	r8, r2, r1
 80039b4:	4629      	mov	r1, r5
 80039b6:	eb43 0901 	adc.w	r9, r3, r1
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ce:	4690      	mov	r8, r2
 80039d0:	4699      	mov	r9, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	eb18 0303 	adds.w	r3, r8, r3
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039dc:	462b      	mov	r3, r5
 80039de:	eb49 0303 	adc.w	r3, r9, r3
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039fa:	460b      	mov	r3, r1
 80039fc:	18db      	adds	r3, r3, r3
 80039fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003a00:	4613      	mov	r3, r2
 8003a02:	eb42 0303 	adc.w	r3, r2, r3
 8003a06:	657b      	str	r3, [r7, #84]	; 0x54
 8003a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a10:	f7fc fc2e 	bl	8000270 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a44:	4641      	mov	r1, r8
 8003a46:	eb12 0a01 	adds.w	sl, r2, r1
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a64:	4692      	mov	sl, r2
 8003a66:	469b      	mov	fp, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a72:	464b      	mov	r3, r9
 8003a74:	eb4b 0303 	adc.w	r3, fp, r3
 8003a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a90:	460b      	mov	r3, r1
 8003a92:	18db      	adds	r3, r3, r3
 8003a94:	643b      	str	r3, [r7, #64]	; 0x40
 8003a96:	4613      	mov	r3, r2
 8003a98:	eb42 0303 	adc.w	r3, r2, r3
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aa6:	f7fc fbe3 	bl	8000270 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2264      	movs	r2, #100	; 0x64
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	1acb      	subs	r3, r1, r3
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af0:	415b      	adcs	r3, r3
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6339      	str	r1, [r7, #48]	; 0x30
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	18db      	adds	r3, r3, r3
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b52:	4613      	mov	r3, r2
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b62:	f7fc fb85 	bl	8000270 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <UART_SetConfig+0x2d4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4422      	add	r2, r4
 8003b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b94:	e105      	b.n	8003da2 <UART_SetConfig+0x4d6>
 8003b96:	bf00      	nop
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	464b      	mov	r3, r9
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	6239      	str	r1, [r7, #32]
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1854      	adds	r4, r2, r1
 8003bca:	4649      	mov	r1, r9
 8003bcc:	eb43 0501 	adc.w	r5, r3, r1
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	00eb      	lsls	r3, r5, #3
 8003bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bde:	00e2      	lsls	r2, r4, #3
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	4643      	mov	r3, r8
 8003be6:	18e3      	adds	r3, r4, r3
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bec:	464b      	mov	r3, r9
 8003bee:	eb45 0303 	adc.w	r3, r5, r3
 8003bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c12:	4629      	mov	r1, r5
 8003c14:	008b      	lsls	r3, r1, #2
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	008a      	lsls	r2, r1, #2
 8003c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c24:	f7fc fb24 	bl	8000270 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b60      	ldr	r3, [pc, #384]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	011c      	lsls	r4, r3, #4
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	61b9      	str	r1, [r7, #24]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	4641      	mov	r1, r8
 8003c5a:	1851      	adds	r1, r2, r1
 8003c5c:	6139      	str	r1, [r7, #16]
 8003c5e:	4649      	mov	r1, r9
 8003c60:	414b      	adcs	r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	00cb      	lsls	r3, r1, #3
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	00ca      	lsls	r2, r1, #3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	4642      	mov	r2, r8
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	460a      	mov	r2, r1
 8003c90:	eb42 0303 	adc.w	r3, r2, r3
 8003c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	008b      	lsls	r3, r1, #2
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cba:	4641      	mov	r1, r8
 8003cbc:	008a      	lsls	r2, r1, #2
 8003cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cc2:	f7fc fad5 	bl	8000270 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cea:	441c      	add	r4, r3
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cf4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	1891      	adds	r1, r2, r2
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	415b      	adcs	r3, r3
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	1851      	adds	r1, r2, r1
 8003d0e:	6039      	str	r1, [r7, #0]
 8003d10:	4649      	mov	r1, r9
 8003d12:	414b      	adcs	r3, r1
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d22:	4659      	mov	r1, fp
 8003d24:	00cb      	lsls	r3, r1, #3
 8003d26:	4651      	mov	r1, sl
 8003d28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	00ca      	lsls	r2, r1, #3
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	4603      	mov	r3, r0
 8003d36:	4642      	mov	r2, r8
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d50:	667a      	str	r2, [r7, #100]	; 0x64
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d5e:	4649      	mov	r1, r9
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	4641      	mov	r1, r8
 8003d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d68:	4641      	mov	r1, r8
 8003d6a:	008a      	lsls	r2, r1, #2
 8003d6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d70:	f7fc fa7e 	bl	8000270 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	; 0x32
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <UART_SetConfig+0x4e4>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4422      	add	r2, r4
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dbc:	22c0      	movs	r2, #192	; 0xc0
 8003dbe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003dc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dc2:	22a8      	movs	r2, #168	; 0xa8
 8003dc4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003dc6:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 27;
 8003dcc:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003dce:	221b      	movs	r2, #27
 8003dd0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003dd8:	4b86      	ldr	r3, [pc, #536]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003dde:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003de0:	22ff      	movs	r2, #255	; 0xff
 8003de2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003de4:	4b83      	ldr	r3, [pc, #524]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003dea:	4b83      	ldr	r3, [pc, #524]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003dec:	22c0      	movs	r2, #192	; 0xc0
 8003dee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003df0:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003df2:	22a8      	movs	r2, #168	; 0xa8
 8003df4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003df6:	4b80      	ldr	r3, [pc, #512]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003e02:	f000 fcd1 	bl	80047a8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	061a      	lsls	r2, r3, #24
 8003e0c:	4b78      	ldr	r3, [pc, #480]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e16:	789b      	ldrb	r3, [r3, #2]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e1e:	78d2      	ldrb	r2, [r2, #3]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	061a      	lsls	r2, r3, #24
 8003e24:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	0619      	lsls	r1, r3, #24
 8003e2a:	4b71      	ldr	r3, [pc, #452]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	4319      	orrs	r1, r3
 8003e32:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	496d      	ldr	r1, [pc, #436]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e3c:	78c9      	ldrb	r1, [r1, #3]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e46:	431a      	orrs	r2, r3
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	0619      	lsls	r1, r3, #24
 8003e4e:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	4319      	orrs	r1, r3
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e58:	789b      	ldrb	r3, [r3, #2]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	4964      	ldr	r1, [pc, #400]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e60:	78c9      	ldrb	r1, [r1, #3]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	0619      	lsls	r1, r3, #24
 8003e72:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	4319      	orrs	r1, r3
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	430b      	orrs	r3, r1
 8003e82:	495b      	ldr	r1, [pc, #364]	; (8003ff0 <MX_LWIP_Init+0x23c>)
 8003e84:	78c9      	ldrb	r1, [r1, #3]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <MX_LWIP_Init+0x248>)
 8003e8e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	061a      	lsls	r2, r3, #24
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ea0:	789b      	ldrb	r3, [r3, #2]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	4a53      	ldr	r2, [pc, #332]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ea8:	78d2      	ldrb	r2, [r2, #3]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	061a      	lsls	r2, r3, #24
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0619      	lsls	r1, r3, #24
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	4b4d      	ldr	r3, [pc, #308]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	494b      	ldr	r1, [pc, #300]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ec6:	78c9      	ldrb	r1, [r1, #3]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	0619      	lsls	r1, r3, #24
 8003ed8:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	4319      	orrs	r1, r3
 8003ee0:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ee2:	789b      	ldrb	r3, [r3, #2]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	4942      	ldr	r1, [pc, #264]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003eea:	78c9      	ldrb	r1, [r1, #3]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	0619      	lsls	r1, r3, #24
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	4319      	orrs	r1, r3
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003f06:	789b      	ldrb	r3, [r3, #2]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <MX_LWIP_Init+0x240>)
 8003f0e:	78c9      	ldrb	r1, [r1, #3]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	0e1b      	lsrs	r3, r3, #24
 8003f14:	4313      	orrs	r3, r2
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <MX_LWIP_Init+0x24c>)
 8003f18:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	061a      	lsls	r2, r3, #24
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f2a:	789b      	ldrb	r3, [r3, #2]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a31      	ldr	r2, [pc, #196]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f32:	78d2      	ldrb	r2, [r2, #3]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	061a      	lsls	r2, r3, #24
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	0619      	lsls	r1, r3, #24
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	4319      	orrs	r1, r3
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f48:	789b      	ldrb	r3, [r3, #2]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	492a      	ldr	r1, [pc, #168]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f50:	78c9      	ldrb	r1, [r1, #3]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	0619      	lsls	r1, r3, #24
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	4319      	orrs	r1, r3
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f6c:	789b      	ldrb	r3, [r3, #2]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	430b      	orrs	r3, r1
 8003f72:	4921      	ldr	r1, [pc, #132]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f74:	78c9      	ldrb	r1, [r1, #3]
 8003f76:	430b      	orrs	r3, r1
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	0619      	lsls	r1, r3, #24
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	4319      	orrs	r1, r3
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f90:	789b      	ldrb	r3, [r3, #2]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	430b      	orrs	r3, r1
 8003f96:	4918      	ldr	r1, [pc, #96]	; (8003ff8 <MX_LWIP_Init+0x244>)
 8003f98:	78c9      	ldrb	r1, [r1, #3]
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <MX_LWIP_Init+0x250>)
 8003fa2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <MX_LWIP_Init+0x254>)
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <MX_LWIP_Init+0x258>)
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <MX_LWIP_Init+0x250>)
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <MX_LWIP_Init+0x24c>)
 8003fb4:	4911      	ldr	r1, [pc, #68]	; (8003ffc <MX_LWIP_Init+0x248>)
 8003fb6:	4816      	ldr	r0, [pc, #88]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fb8:	f001 f8e2 	bl	8005180 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003fbc:	4814      	ldr	r0, [pc, #80]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fbe:	f001 fa91 	bl	80054e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003fd4:	480e      	ldr	r0, [pc, #56]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fd6:	f001 fa95 	bl	8005504 <netif_set_up>
 8003fda:	e002      	b.n	8003fe2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fde:	f001 fafd 	bl	80055dc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003fe2:	490c      	ldr	r1, [pc, #48]	; (8004014 <MX_LWIP_Init+0x260>)
 8003fe4:	480a      	ldr	r0, [pc, #40]	; (8004010 <MX_LWIP_Init+0x25c>)
 8003fe6:	f001 fb8f 	bl	8005708 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000138 	.word	0x20000138
 8003ff4:	2000013c 	.word	0x2000013c
 8003ff8:	20000140 	.word	0x20000140
 8003ffc:	2000012c 	.word	0x2000012c
 8004000:	20000130 	.word	0x20000130
 8004004:	20000134 	.word	0x20000134
 8004008:	0800e6d5 	.word	0x0800e6d5
 800400c:	080042c5 	.word	0x080042c5
 8004010:	200000f8 	.word	0x200000f8
 8004014:	08004019 	.word	0x08004019

08004018 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <low_level_init+0x110>)
 800403a:	4a41      	ldr	r2, [pc, #260]	; (8004140 <low_level_init+0x114>)
 800403c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800403e:	2300      	movs	r3, #0
 8004040:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004046:	23e1      	movs	r3, #225	; 0xe1
 8004048:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004052:	2300      	movs	r3, #0
 8004054:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004056:	4a39      	ldr	r2, [pc, #228]	; (800413c <low_level_init+0x110>)
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <low_level_init+0x110>)
 8004060:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004064:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004066:	4b35      	ldr	r3, [pc, #212]	; (800413c <low_level_init+0x110>)
 8004068:	4a36      	ldr	r2, [pc, #216]	; (8004144 <low_level_init+0x118>)
 800406a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <low_level_init+0x110>)
 800406e:	4a36      	ldr	r2, [pc, #216]	; (8004148 <low_level_init+0x11c>)
 8004070:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004072:	4b32      	ldr	r3, [pc, #200]	; (800413c <low_level_init+0x110>)
 8004074:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004078:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800407a:	4830      	ldr	r0, [pc, #192]	; (800413c <low_level_init+0x110>)
 800407c:	f7fd f8e8 	bl	8001250 <HAL_ETH_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004084:	2238      	movs	r2, #56	; 0x38
 8004086:	2100      	movs	r1, #0
 8004088:	4830      	ldr	r0, [pc, #192]	; (800414c <low_level_init+0x120>)
 800408a:	f00a fc3b 	bl	800e904 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800408e:	4b2f      	ldr	r3, [pc, #188]	; (800414c <low_level_init+0x120>)
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <low_level_init+0x120>)
 8004096:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800409a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <low_level_init+0x120>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80040a2:	482b      	ldr	r0, [pc, #172]	; (8004150 <low_level_init+0x124>)
 80040a4:	f000 ff34 	bl	8004f10 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2206      	movs	r2, #6
 80040ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <low_level_init+0x110>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <low_level_init+0x110>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	785a      	ldrb	r2, [r3, #1]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <low_level_init+0x110>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	789a      	ldrb	r2, [r3, #2]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <low_level_init+0x110>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	78da      	ldrb	r2, [r3, #3]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <low_level_init+0x110>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	791a      	ldrb	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <low_level_init+0x110>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	795a      	ldrb	r2, [r3, #5]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040fe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004106:	f043 030a 	orr.w	r3, r3, #10
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004112:	4910      	ldr	r1, [pc, #64]	; (8004154 <low_level_init+0x128>)
 8004114:	4810      	ldr	r0, [pc, #64]	; (8004158 <low_level_init+0x12c>)
 8004116:	f7fc fd00 	bl	8000b1a <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800411a:	480f      	ldr	r0, [pc, #60]	; (8004158 <low_level_init+0x12c>)
 800411c:	f7fc fd2f 	bl	8000b7e <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa14 	bl	8004554 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800412c:	e001      	b.n	8004132 <low_level_init+0x106>
    Error_Handler();
 800412e:	f7fc fad7 	bl	80006e0 <Error_Handler>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20004c14 	.word	0x20004c14
 8004140:	40028000 	.word	0x40028000
 8004144:	20004b74 	.word	0x20004b74
 8004148:	20004ad4 	.word	0x20004ad4
 800414c:	20004cc4 	.word	0x20004cc4
 8004150:	080123c4 	.word	0x080123c4
 8004154:	2000000c 	.word	0x2000000c
 8004158:	20004cfc 	.word	0x20004cfc

0800415c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b092      	sub	sp, #72	; 0x48
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	2230      	movs	r2, #48	; 0x30
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f00a fbc1 	bl	800e904 <memset>

  for(q = p; q != NULL; q = q->next)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
 8004186:	e045      	b.n	8004214 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418a:	2b03      	cmp	r3, #3
 800418c:	d902      	bls.n	8004194 <low_level_output+0x38>
      return ERR_IF;
 800418e:	f06f 030b 	mvn.w	r3, #11
 8004192:	e055      	b.n	8004240 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8004194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3348      	adds	r3, #72	; 0x48
 80041a4:	443b      	add	r3, r7
 80041a6:	3b3c      	subs	r3, #60	; 0x3c
 80041a8:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80041aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	4619      	mov	r1, r3
 80041b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	443b      	add	r3, r7
 80041be:	3b38      	subs	r3, #56	; 0x38
 80041c0:	6019      	str	r1, [r3, #0]

    if(i>0)
 80041c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d011      	beq.n	80041ec <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	f107 000c 	add.w	r0, r7, #12
 80041d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d2:	460b      	mov	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	440b      	add	r3, r1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	18c1      	adds	r1, r0, r3
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3348      	adds	r3, #72	; 0x48
 80041e6:	443b      	add	r3, r7
 80041e8:	3b34      	subs	r3, #52	; 0x34
 80041ea:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80041f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3348      	adds	r3, #72	; 0x48
 8004200:	443b      	add	r3, r7
 8004202:	3b34      	subs	r3, #52	; 0x34
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	3301      	adds	r3, #1
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
 8004214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1b6      	bne.n	8004188 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	891b      	ldrh	r3, [r3, #8]
 800421e:	461a      	mov	r2, r3
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <low_level_output+0xec>)
 8004222:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <low_level_output+0xec>)
 8004226:	f107 030c 	add.w	r3, r7, #12
 800422a:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <low_level_output+0xec>)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004232:	2214      	movs	r2, #20
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <low_level_output+0xec>)
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <low_level_output+0xf0>)
 8004238:	f7fd f910 	bl	800145c <HAL_ETH_Transmit>

  return errval;
 800423c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004240:	4618      	mov	r0, r3
 8004242:	3748      	adds	r7, #72	; 0x48
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20004cc4 	.word	0x20004cc4
 800424c:	20004c14 	.word	0x20004c14

08004250 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <low_level_input+0x2c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	4619      	mov	r1, r3
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <low_level_input+0x30>)
 800426c:	f7fd f98a 	bl	8001584 <HAL_ETH_ReadData>
  }

  return p;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20004acc 	.word	0x20004acc
 8004280:	20004c14 	.word	0x20004c14

08004284 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ffdd 	bl	8004250 <low_level_input>
 8004296:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	4798      	blx	r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 fdaa 	bl	8005e08 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ea      	bne.n	8004290 <ethernetif_input+0xc>
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <ethernetif_init+0x1c>
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <ethernetif_init+0x48>)
 80042d4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80042d8:	490d      	ldr	r1, [pc, #52]	; (8004310 <ethernetif_init+0x4c>)
 80042da:	480e      	ldr	r0, [pc, #56]	; (8004314 <ethernetif_init+0x50>)
 80042dc:	f00a fb1a 	bl	800e914 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2273      	movs	r2, #115	; 0x73
 80042e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2274      	movs	r2, #116	; 0x74
 80042ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <ethernetif_init+0x54>)
 80042f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <ethernetif_init+0x58>)
 80042fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fe95 	bl	800402c <low_level_init>

  return ERR_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0800f9cc 	.word	0x0800f9cc
 8004310:	0800f9e8 	.word	0x0800f9e8
 8004314:	0800f9f8 	.word	0x0800f9f8
 8004318:	0800cb8d 	.word	0x0800cb8d
 800431c:	0800415d 	.word	0x0800415d

08004320 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	4808      	ldr	r0, [pc, #32]	; (8004350 <pbuf_free_custom+0x30>)
 8004330:	f000 fed0 	bl	80050d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <pbuf_free_custom+0x34>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <pbuf_free_custom+0x34>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <pbuf_free_custom+0x38>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  }
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	080123c4 	.word	0x080123c4
 8004354:	20004acc 	.word	0x20004acc
 8004358:	20004ad0 	.word	0x20004ad0

0800435c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004360:	f7fc fda2 	bl	8000ea8 <HAL_GetTick>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <HAL_ETH_MspInit+0x138>)
 800438a:	4293      	cmp	r3, r2
 800438c:	f040 8085 	bne.w	800449a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004390:	2300      	movs	r3, #0
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800439a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ba:	6313      	str	r3, [r2, #48]	; 0x30
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d6:	6313      	str	r3, [r2, #48]	; 0x30
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	4a2e      	ldr	r2, [pc, #184]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6313      	str	r3, [r2, #48]	; 0x30
 80043f4:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6313      	str	r3, [r2, #48]	; 0x30
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_ETH_MspInit+0x13c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004438:	2332      	movs	r3, #50	; 0x32
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004448:	230b      	movs	r3, #11
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	4619      	mov	r1, r3
 8004452:	4816      	ldr	r0, [pc, #88]	; (80044ac <HAL_ETH_MspInit+0x140>)
 8004454:	f7fd ffa6 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004458:	2386      	movs	r3, #134	; 0x86
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	2303      	movs	r3, #3
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004468:	230b      	movs	r3, #11
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004470:	4619      	mov	r1, r3
 8004472:	480f      	ldr	r0, [pc, #60]	; (80044b0 <HAL_ETH_MspInit+0x144>)
 8004474:	f7fd ff96 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004478:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800448a:	230b      	movs	r3, #11
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004492:	4619      	mov	r1, r3
 8004494:	4807      	ldr	r0, [pc, #28]	; (80044b4 <HAL_ETH_MspInit+0x148>)
 8004496:	f7fd ff85 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800449a:	bf00      	nop
 800449c:	3738      	adds	r7, #56	; 0x38
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40028000 	.word	0x40028000
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020400 	.word	0x40020400

080044b8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <ETH_PHY_IO_Init+0x10>)
 80044be:	f7fd fb29 	bl	8001b14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20004c14 	.word	0x20004c14

080044cc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return 0;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <ETH_PHY_IO_ReadReg+0x30>)
 80044f0:	f7fd f97e 	bl	80017f0 <HAL_ETH_ReadPHYRegister>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e000      	b.n	8004502 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20004c14 	.word	0x20004c14

08004510 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	4807      	ldr	r0, [pc, #28]	; (8004540 <ETH_PHY_IO_WriteReg+0x30>)
 8004524:	f7fd f9af 	bl	8001886 <HAL_ETH_WritePHYRegister>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e000      	b.n	8004536 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20004c14 	.word	0x20004c14

08004544 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004548:	f7fc fcae 	bl	8000ea8 <HAL_GetTick>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b0a0      	sub	sp, #128	; 0x80
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	2264      	movs	r2, #100	; 0x64
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f00a f9cd 	bl	800e904 <memset>
  int32_t PHYLinkState = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004572:	2300      	movs	r3, #0
 8004574:	67bb      	str	r3, [r7, #120]	; 0x78
 8004576:	2300      	movs	r3, #0
 8004578:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800457a:	483a      	ldr	r0, [pc, #232]	; (8004664 <ethernet_link_check_state+0x110>)
 800457c:	f7fc fba7 	bl	8000cce <DP83848_GetLinkState>
 8004580:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <ethernet_link_check_state+0x5a>
 8004594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004596:	2b01      	cmp	r3, #1
 8004598:	dc09      	bgt.n	80045ae <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800459a:	4833      	ldr	r0, [pc, #204]	; (8004668 <ethernet_link_check_state+0x114>)
 800459c:	f7fc ff1f 	bl	80013de <HAL_ETH_Stop>
    netif_set_down(netif);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 f81b 	bl	80055dc <netif_set_down>
    netif_set_link_down(netif);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f87e 	bl	80056a8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80045ac:	e055      	b.n	800465a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d14e      	bne.n	800465a <ethernet_link_check_state+0x106>
 80045bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045be:	2b01      	cmp	r3, #1
 80045c0:	dd4b      	ble.n	800465a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	3b02      	subs	r3, #2
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d82a      	bhi.n	8004620 <ethernet_link_check_state+0xcc>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <ethernet_link_check_state+0x7c>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045f3 	.word	0x080045f3
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
      duplex = ETH_FULLDUPLEX_MODE;
 80045e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80045e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80045f0:	e017      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80045f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004600:	e00f      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004606:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004608:	2300      	movs	r3, #0
 800460a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800460c:	2301      	movs	r3, #1
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004610:	e007      	b.n	8004622 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004612:	2300      	movs	r3, #0
 8004614:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004616:	2300      	movs	r3, #0
 8004618:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800461e:	e000      	b.n	8004622 <ethernet_link_check_state+0xce>
      break;
 8004620:	bf00      	nop
    if(linkchanged)
 8004622:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4619      	mov	r1, r3
 800462e:	480e      	ldr	r0, [pc, #56]	; (8004668 <ethernet_link_check_state+0x114>)
 8004630:	f7fd f972 	bl	8001918 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800463a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	4619      	mov	r1, r3
 8004642:	4809      	ldr	r0, [pc, #36]	; (8004668 <ethernet_link_check_state+0x114>)
 8004644:	f7fd fa4b 	bl	8001ade <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004648:	4807      	ldr	r0, [pc, #28]	; (8004668 <ethernet_link_check_state+0x114>)
 800464a:	f7fc fe7f 	bl	800134c <HAL_ETH_Start>
      netif_set_up(netif);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 ff58 	bl	8005504 <netif_set_up>
      netif_set_link_up(netif);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fff3 	bl	8005640 <netif_set_link_up>
}
 800465a:	bf00      	nop
 800465c:	3780      	adds	r7, #128	; 0x80
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20004cfc 	.word	0x20004cfc
 8004668:	20004c14 	.word	0x20004c14

0800466c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004674:	4812      	ldr	r0, [pc, #72]	; (80046c0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004676:	f000 fcbf 	bl	8004ff8 <memp_malloc_pool>
 800467a:	60f8      	str	r0, [r7, #12]
  if (p)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d014      	beq.n	80046ac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f103 0220 	add.w	r2, r3, #32
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004690:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800469a:	9201      	str	r2, [sp, #4]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2241      	movs	r2, #65	; 0x41
 80046a2:	2100      	movs	r1, #0
 80046a4:	2000      	movs	r0, #0
 80046a6:	f001 f9f5 	bl	8005a94 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80046aa:	e005      	b.n	80046b8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080123c4 	.word	0x080123c4
 80046c4:	08004321 	.word	0x08004321
 80046c8:	20004acc 	.word	0x20004acc

080046cc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3b20      	subs	r3, #32
 80046ea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2200      	movs	r2, #0
 80046f6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	887a      	ldrh	r2, [r7, #2]
 80046fc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e003      	b.n	8004716 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e009      	b.n	8004738 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	891a      	ldrh	r2, [r3, #8]
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	4413      	add	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f2      	bne.n	8004724 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	3724      	adds	r7, #36	; 0x24
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	b21a      	sxth	r2, r3
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	b21b      	sxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b21b      	sxth	r3, r3
 8004768:	b29b      	uxth	r3, r3
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	061a      	lsls	r2, r3, #24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	4313      	orrs	r3, r2
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80047b2:	f000 f8d5 	bl	8004960 <mem_init>
  memp_init();
 80047b6:	f000 fbdb 	bl	8004f70 <memp_init>
  pbuf_init();
  netif_init();
 80047ba:	f000 fcd9 	bl	8005170 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80047be:	f007 f867 	bl	800b890 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80047c2:	f001 fdbf 	bl	8006344 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80047c6:	f006 ffd9 	bl	800b77c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <ptr_to_mem+0x20>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	4413      	add	r3, r2
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20005388 	.word	0x20005388

080047f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <mem_to_ptr+0x20>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	b29b      	uxth	r3, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20005388 	.word	0x20005388

0800481c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <plug_holes+0x120>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d206      	bcs.n	800483c <plug_holes+0x20>
 800482e:	4b44      	ldr	r3, [pc, #272]	; (8004940 <plug_holes+0x124>)
 8004830:	f240 12df 	movw	r2, #479	; 0x1df
 8004834:	4943      	ldr	r1, [pc, #268]	; (8004944 <plug_holes+0x128>)
 8004836:	4844      	ldr	r0, [pc, #272]	; (8004948 <plug_holes+0x12c>)
 8004838:	f00a f86c 	bl	800e914 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800483c:	4b43      	ldr	r3, [pc, #268]	; (800494c <plug_holes+0x130>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d306      	bcc.n	8004854 <plug_holes+0x38>
 8004846:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <plug_holes+0x124>)
 8004848:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800484c:	4940      	ldr	r1, [pc, #256]	; (8004950 <plug_holes+0x134>)
 800484e:	483e      	ldr	r0, [pc, #248]	; (8004948 <plug_holes+0x12c>)
 8004850:	f00a f860 	bl	800e914 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <plug_holes+0x4e>
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <plug_holes+0x124>)
 800485e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004862:	493c      	ldr	r1, [pc, #240]	; (8004954 <plug_holes+0x138>)
 8004864:	4838      	ldr	r0, [pc, #224]	; (8004948 <plug_holes+0x12c>)
 8004866:	f00a f855 	bl	800e914 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004872:	d906      	bls.n	8004882 <plug_holes+0x66>
 8004874:	4b32      	ldr	r3, [pc, #200]	; (8004940 <plug_holes+0x124>)
 8004876:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800487a:	4937      	ldr	r1, [pc, #220]	; (8004958 <plug_holes+0x13c>)
 800487c:	4832      	ldr	r0, [pc, #200]	; (8004948 <plug_holes+0x12c>)
 800487e:	f00a f849 	bl	800e914 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ffa4 	bl	80047d4 <ptr_to_mem>
 800488c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	429a      	cmp	r2, r3
 8004894:	d024      	beq.n	80048e0 <plug_holes+0xc4>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d120      	bne.n	80048e0 <plug_holes+0xc4>
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <plug_holes+0x130>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d01b      	beq.n	80048e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <plug_holes+0x140>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d102      	bne.n	80048b8 <plug_holes+0x9c>
      lfree = mem;
 80048b2:	4a2a      	ldr	r2, [pc, #168]	; (800495c <plug_holes+0x140>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048c8:	d00a      	beq.n	80048e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff80 	bl	80047d4 <ptr_to_mem>
 80048d4:	4604      	mov	r4, r0
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff8e 	bl	80047f8 <mem_to_ptr>
 80048dc:	4603      	mov	r3, r0
 80048de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	885b      	ldrh	r3, [r3, #2]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff75 	bl	80047d4 <ptr_to_mem>
 80048ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d01f      	beq.n	8004934 <plug_holes+0x118>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11b      	bne.n	8004934 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <plug_holes+0x140>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	d102      	bne.n	800490c <plug_holes+0xf0>
      lfree = pmem;
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <plug_holes+0x140>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	881a      	ldrh	r2, [r3, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800491c:	d00a      	beq.n	8004934 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ff56 	bl	80047d4 <ptr_to_mem>
 8004928:	4604      	mov	r4, r0
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f7ff ff64 	bl	80047f8 <mem_to_ptr>
 8004930:	4603      	mov	r3, r0
 8004932:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	20005388 	.word	0x20005388
 8004940:	0800fa20 	.word	0x0800fa20
 8004944:	0800fa50 	.word	0x0800fa50
 8004948:	0800fa68 	.word	0x0800fa68
 800494c:	2000538c 	.word	0x2000538c
 8004950:	0800fa90 	.word	0x0800fa90
 8004954:	0800faac 	.word	0x0800faac
 8004958:	0800fac8 	.word	0x0800fac8
 800495c:	20005390 	.word	0x20005390

08004960 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <mem_init+0x68>)
 8004968:	3303      	adds	r3, #3
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	461a      	mov	r2, r3
 8004970:	4b16      	ldr	r3, [pc, #88]	; (80049cc <mem_init+0x6c>)
 8004972:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <mem_init+0x6c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004980:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800498e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004992:	f7ff ff1f 	bl	80047d4 <ptr_to_mem>
 8004996:	4603      	mov	r3, r0
 8004998:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <mem_init+0x70>)
 800499a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <mem_init+0x70>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <mem_init+0x70>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049ac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <mem_init+0x70>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049b6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <mem_init+0x6c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <mem_init+0x74>)
 80049be:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20004d34 	.word	0x20004d34
 80049cc:	20005388 	.word	0x20005388
 80049d0:	2000538c 	.word	0x2000538c
 80049d4:	20005390 	.word	0x20005390

080049d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff09 	bl	80047f8 <mem_to_ptr>
 80049e6:	4603      	mov	r3, r0
 80049e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fef0 	bl	80047d4 <ptr_to_mem>
 80049f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	885b      	ldrh	r3, [r3, #2]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff feea 	bl	80047d4 <ptr_to_mem>
 8004a00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a0a:	d818      	bhi.n	8004a3e <mem_link_valid+0x66>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	885b      	ldrh	r3, [r3, #2]
 8004a10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a14:	d813      	bhi.n	8004a3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a1a:	8afa      	ldrh	r2, [r7, #22]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d004      	beq.n	8004a2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	8afa      	ldrh	r2, [r7, #22]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d109      	bne.n	8004a3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <mem_link_valid+0x74>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d006      	beq.n	8004a42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	885b      	ldrh	r3, [r3, #2]
 8004a38:	8afa      	ldrh	r2, [r7, #22]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d001      	beq.n	8004a42 <mem_link_valid+0x6a>
    return 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <mem_link_valid+0x6c>
  }
  return 1;
 8004a42:	2301      	movs	r3, #1
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000538c 	.word	0x2000538c

08004a50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d04c      	beq.n	8004af8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <mem_free+0xb0>)
 8004a6a:	f240 2273 	movw	r2, #627	; 0x273
 8004a6e:	4925      	ldr	r1, [pc, #148]	; (8004b04 <mem_free+0xb4>)
 8004a70:	4825      	ldr	r0, [pc, #148]	; (8004b08 <mem_free+0xb8>)
 8004a72:	f009 ff4f 	bl	800e914 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a76:	e040      	b.n	8004afa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b08      	subs	r3, #8
 8004a7c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004a7e:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <mem_free+0xbc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d306      	bcc.n	8004a96 <mem_free+0x46>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f103 020c 	add.w	r2, r3, #12
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <mem_free+0xc0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d907      	bls.n	8004aa6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <mem_free+0xb0>)
 8004a98:	f240 227f 	movw	r2, #639	; 0x27f
 8004a9c:	491d      	ldr	r1, [pc, #116]	; (8004b14 <mem_free+0xc4>)
 8004a9e:	481a      	ldr	r0, [pc, #104]	; (8004b08 <mem_free+0xb8>)
 8004aa0:	f009 ff38 	bl	800e914 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004aa4:	e029      	b.n	8004afa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <mem_free+0xb0>)
 8004ab0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004ab4:	4918      	ldr	r1, [pc, #96]	; (8004b18 <mem_free+0xc8>)
 8004ab6:	4814      	ldr	r0, [pc, #80]	; (8004b08 <mem_free+0xb8>)
 8004ab8:	f009 ff2c 	bl	800e914 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004abc:	e01d      	b.n	8004afa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff8a 	bl	80049d8 <mem_link_valid>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <mem_free+0xb0>)
 8004acc:	f240 2295 	movw	r2, #661	; 0x295
 8004ad0:	4912      	ldr	r1, [pc, #72]	; (8004b1c <mem_free+0xcc>)
 8004ad2:	480d      	ldr	r0, [pc, #52]	; (8004b08 <mem_free+0xb8>)
 8004ad4:	f009 ff1e 	bl	800e914 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ad8:	e00f      	b.n	8004afa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <mem_free+0xd0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d202      	bcs.n	8004af0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004aea:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <mem_free+0xd0>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fe93 	bl	800481c <plug_holes>
 8004af6:	e000      	b.n	8004afa <mem_free+0xaa>
    return;
 8004af8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0800fa20 	.word	0x0800fa20
 8004b04:	0800faf4 	.word	0x0800faf4
 8004b08:	0800fa68 	.word	0x0800fa68
 8004b0c:	20005388 	.word	0x20005388
 8004b10:	2000538c 	.word	0x2000538c
 8004b14:	0800fb18 	.word	0x0800fb18
 8004b18:	0800fb34 	.word	0x0800fb34
 8004b1c:	0800fb5c 	.word	0x0800fb5c
 8004b20:	20005390 	.word	0x20005390

08004b24 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004b30:	887b      	ldrh	r3, [r7, #2]
 8004b32:	3303      	adds	r3, #3
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004b3c:	8bfb      	ldrh	r3, [r7, #30]
 8004b3e:	2b0b      	cmp	r3, #11
 8004b40:	d801      	bhi.n	8004b46 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004b42:	230c      	movs	r3, #12
 8004b44:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004b46:	8bfb      	ldrh	r3, [r7, #30]
 8004b48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b4c:	d803      	bhi.n	8004b56 <mem_trim+0x32>
 8004b4e:	8bfa      	ldrh	r2, [r7, #30]
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d201      	bcs.n	8004b5a <mem_trim+0x36>
    return NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e0cc      	b.n	8004cf4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004b5a:	4b68      	ldr	r3, [pc, #416]	; (8004cfc <mem_trim+0x1d8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d304      	bcc.n	8004b6e <mem_trim+0x4a>
 8004b64:	4b66      	ldr	r3, [pc, #408]	; (8004d00 <mem_trim+0x1dc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d306      	bcc.n	8004b7c <mem_trim+0x58>
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <mem_trim+0x1e0>)
 8004b70:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004b74:	4964      	ldr	r1, [pc, #400]	; (8004d08 <mem_trim+0x1e4>)
 8004b76:	4865      	ldr	r0, [pc, #404]	; (8004d0c <mem_trim+0x1e8>)
 8004b78:	f009 fecc 	bl	800e914 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004b7c:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <mem_trim+0x1d8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d304      	bcc.n	8004b90 <mem_trim+0x6c>
 8004b86:	4b5e      	ldr	r3, [pc, #376]	; (8004d00 <mem_trim+0x1dc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d301      	bcc.n	8004b94 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	e0af      	b.n	8004cf4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3b08      	subs	r3, #8
 8004b98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	f7ff fe2c 	bl	80047f8 <mem_to_ptr>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	8afb      	ldrh	r3, [r7, #22]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b08      	subs	r3, #8
 8004bb0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004bb2:	8bfa      	ldrh	r2, [r7, #30]
 8004bb4:	8abb      	ldrh	r3, [r7, #20]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d906      	bls.n	8004bc8 <mem_trim+0xa4>
 8004bba:	4b52      	ldr	r3, [pc, #328]	; (8004d04 <mem_trim+0x1e0>)
 8004bbc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004bc0:	4953      	ldr	r1, [pc, #332]	; (8004d10 <mem_trim+0x1ec>)
 8004bc2:	4852      	ldr	r0, [pc, #328]	; (8004d0c <mem_trim+0x1e8>)
 8004bc4:	f009 fea6 	bl	800e914 <iprintf>
  if (newsize > size) {
 8004bc8:	8bfa      	ldrh	r2, [r7, #30]
 8004bca:	8abb      	ldrh	r3, [r7, #20]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d901      	bls.n	8004bd4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e08f      	b.n	8004cf4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004bd4:	8bfa      	ldrh	r2, [r7, #30]
 8004bd6:	8abb      	ldrh	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d101      	bne.n	8004be0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	e089      	b.n	8004cf4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fdf5 	bl	80047d4 <ptr_to_mem>
 8004bea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	791b      	ldrb	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d13f      	bne.n	8004c74 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bfc:	d106      	bne.n	8004c0c <mem_trim+0xe8>
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <mem_trim+0x1e0>)
 8004c00:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004c04:	4943      	ldr	r1, [pc, #268]	; (8004d14 <mem_trim+0x1f0>)
 8004c06:	4841      	ldr	r0, [pc, #260]	; (8004d0c <mem_trim+0x1e8>)
 8004c08:	f009 fe84 	bl	800e914 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c12:	8afa      	ldrh	r2, [r7, #22]
 8004c14:	8bfb      	ldrh	r3, [r7, #30]
 8004c16:	4413      	add	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <mem_trim+0x1f4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d106      	bne.n	8004c36 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004c28:	89fb      	ldrh	r3, [r7, #14]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fdd2 	bl	80047d4 <ptr_to_mem>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4a39      	ldr	r2, [pc, #228]	; (8004d18 <mem_trim+0x1f4>)
 8004c34:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fdcb 	bl	80047d4 <ptr_to_mem>
 8004c3e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2200      	movs	r2, #0
 8004c44:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	89ba      	ldrh	r2, [r7, #12]
 8004c4a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	8afa      	ldrh	r2, [r7, #22]
 8004c50:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	89fa      	ldrh	r2, [r7, #14]
 8004c56:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c60:	d047      	beq.n	8004cf2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fdb4 	bl	80047d4 <ptr_to_mem>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	8053      	strh	r3, [r2, #2]
 8004c72:	e03e      	b.n	8004cf2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004c74:	8bfb      	ldrh	r3, [r7, #30]
 8004c76:	f103 0214 	add.w	r2, r3, #20
 8004c7a:	8abb      	ldrh	r3, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d838      	bhi.n	8004cf2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c80:	8afa      	ldrh	r2, [r7, #22]
 8004c82:	8bfb      	ldrh	r3, [r7, #30]
 8004c84:	4413      	add	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3308      	adds	r3, #8
 8004c8a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c94:	d106      	bne.n	8004ca4 <mem_trim+0x180>
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <mem_trim+0x1e0>)
 8004c98:	f240 3216 	movw	r2, #790	; 0x316
 8004c9c:	491d      	ldr	r1, [pc, #116]	; (8004d14 <mem_trim+0x1f0>)
 8004c9e:	481b      	ldr	r0, [pc, #108]	; (8004d0c <mem_trim+0x1e8>)
 8004ca0:	f009 fe38 	bl	800e914 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fd94 	bl	80047d4 <ptr_to_mem>
 8004cac:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <mem_trim+0x1f4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d202      	bcs.n	8004cbe <mem_trim+0x19a>
      lfree = mem2;
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <mem_trim+0x1f4>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	8afa      	ldrh	r2, [r7, #22]
 8004cd0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	89fa      	ldrh	r2, [r7, #14]
 8004cd6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ce0:	d007      	beq.n	8004cf2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fd74 	bl	80047d4 <ptr_to_mem>
 8004cec:	4602      	mov	r2, r0
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004cf2:	687b      	ldr	r3, [r7, #4]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20005388 	.word	0x20005388
 8004d00:	2000538c 	.word	0x2000538c
 8004d04:	0800fa20 	.word	0x0800fa20
 8004d08:	0800fb90 	.word	0x0800fb90
 8004d0c:	0800fa68 	.word	0x0800fa68
 8004d10:	0800fba8 	.word	0x0800fba8
 8004d14:	0800fbc8 	.word	0x0800fbc8
 8004d18:	20005390 	.word	0x20005390

08004d1c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <mem_malloc+0x14>
    return NULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e0d9      	b.n	8004ee4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	3303      	adds	r3, #3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004d3c:	8bbb      	ldrh	r3, [r7, #28]
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d801      	bhi.n	8004d46 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004d42:	230c      	movs	r3, #12
 8004d44:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004d46:	8bbb      	ldrh	r3, [r7, #28]
 8004d48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d4c:	d803      	bhi.n	8004d56 <mem_malloc+0x3a>
 8004d4e:	8bba      	ldrh	r2, [r7, #28]
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d201      	bcs.n	8004d5a <mem_malloc+0x3e>
    return NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e0c4      	b.n	8004ee4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d5a:	4b64      	ldr	r3, [pc, #400]	; (8004eec <mem_malloc+0x1d0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fd4a 	bl	80047f8 <mem_to_ptr>
 8004d64:	4603      	mov	r3, r0
 8004d66:	83fb      	strh	r3, [r7, #30]
 8004d68:	e0b4      	b.n	8004ed4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004d6a:	8bfb      	ldrh	r3, [r7, #30]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fd31 	bl	80047d4 <ptr_to_mem>
 8004d72:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	791b      	ldrb	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 80a4 	bne.w	8004ec6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	8bfb      	ldrh	r3, [r7, #30]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f1a3 0208 	sub.w	r2, r3, #8
 8004d8c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	f0c0 8099 	bcc.w	8004ec6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	8bfb      	ldrh	r3, [r7, #30]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f1a3 0208 	sub.w	r2, r3, #8
 8004da2:	8bbb      	ldrh	r3, [r7, #28]
 8004da4:	3314      	adds	r3, #20
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d333      	bcc.n	8004e12 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004daa:	8bfa      	ldrh	r2, [r7, #30]
 8004dac:	8bbb      	ldrh	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3308      	adds	r3, #8
 8004db4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004db6:	8a7b      	ldrh	r3, [r7, #18]
 8004db8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dbc:	d106      	bne.n	8004dcc <mem_malloc+0xb0>
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <mem_malloc+0x1d4>)
 8004dc0:	f240 3287 	movw	r2, #903	; 0x387
 8004dc4:	494b      	ldr	r1, [pc, #300]	; (8004ef4 <mem_malloc+0x1d8>)
 8004dc6:	484c      	ldr	r0, [pc, #304]	; (8004ef8 <mem_malloc+0x1dc>)
 8004dc8:	f009 fda4 	bl	800e914 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004dcc:	8a7b      	ldrh	r3, [r7, #18]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fd00 	bl	80047d4 <ptr_to_mem>
 8004dd4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8bfa      	ldrh	r2, [r7, #30]
 8004de8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	8a7a      	ldrh	r2, [r7, #18]
 8004dee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2201      	movs	r2, #1
 8004df4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dfe:	d00b      	beq.n	8004e18 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fce5 	bl	80047d4 <ptr_to_mem>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	8a7b      	ldrh	r3, [r7, #18]
 8004e0e:	8053      	strh	r3, [r2, #2]
 8004e10:	e002      	b.n	8004e18 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2201      	movs	r2, #1
 8004e16:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004e18:	4b34      	ldr	r3, [pc, #208]	; (8004eec <mem_malloc+0x1d0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d127      	bne.n	8004e72 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004e22:	4b32      	ldr	r3, [pc, #200]	; (8004eec <mem_malloc+0x1d0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004e28:	e005      	b.n	8004e36 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fcd0 	bl	80047d4 <ptr_to_mem>
 8004e34:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	791b      	ldrb	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <mem_malloc+0x12c>
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <mem_malloc+0x1e0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1f0      	bne.n	8004e2a <mem_malloc+0x10e>
          }
          lfree = cur;
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <mem_malloc+0x1d0>)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004e4e:	4b27      	ldr	r3, [pc, #156]	; (8004eec <mem_malloc+0x1d0>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <mem_malloc+0x1e0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d00b      	beq.n	8004e72 <mem_malloc+0x156>
 8004e5a:	4b24      	ldr	r3, [pc, #144]	; (8004eec <mem_malloc+0x1d0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <mem_malloc+0x156>
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <mem_malloc+0x1d4>)
 8004e66:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004e6a:	4925      	ldr	r1, [pc, #148]	; (8004f00 <mem_malloc+0x1e4>)
 8004e6c:	4822      	ldr	r0, [pc, #136]	; (8004ef8 <mem_malloc+0x1dc>)
 8004e6e:	f009 fd51 	bl	800e914 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004e72:	8bba      	ldrh	r2, [r7, #28]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	3308      	adds	r3, #8
 8004e7a:	4a20      	ldr	r2, [pc, #128]	; (8004efc <mem_malloc+0x1e0>)
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d906      	bls.n	8004e90 <mem_malloc+0x174>
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <mem_malloc+0x1d4>)
 8004e84:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004e88:	491e      	ldr	r1, [pc, #120]	; (8004f04 <mem_malloc+0x1e8>)
 8004e8a:	481b      	ldr	r0, [pc, #108]	; (8004ef8 <mem_malloc+0x1dc>)
 8004e8c:	f009 fd42 	bl	800e914 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <mem_malloc+0x18c>
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <mem_malloc+0x1d4>)
 8004e9c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004ea0:	4919      	ldr	r1, [pc, #100]	; (8004f08 <mem_malloc+0x1ec>)
 8004ea2:	4815      	ldr	r0, [pc, #84]	; (8004ef8 <mem_malloc+0x1dc>)
 8004ea4:	f009 fd36 	bl	800e914 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <mem_malloc+0x1a4>
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <mem_malloc+0x1d4>)
 8004eb4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004eb8:	4914      	ldr	r1, [pc, #80]	; (8004f0c <mem_malloc+0x1f0>)
 8004eba:	480f      	ldr	r0, [pc, #60]	; (8004ef8 <mem_malloc+0x1dc>)
 8004ebc:	f009 fd2a 	bl	800e914 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	e00e      	b.n	8004ee4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004ec6:	8bfb      	ldrh	r3, [r7, #30]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fc83 	bl	80047d4 <ptr_to_mem>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004ed4:	8bfa      	ldrh	r2, [r7, #30]
 8004ed6:	8bbb      	ldrh	r3, [r7, #28]
 8004ed8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004edc:	429a      	cmp	r2, r3
 8004ede:	f4ff af44 	bcc.w	8004d6a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20005390 	.word	0x20005390
 8004ef0:	0800fa20 	.word	0x0800fa20
 8004ef4:	0800fbc8 	.word	0x0800fbc8
 8004ef8:	0800fa68 	.word	0x0800fa68
 8004efc:	2000538c 	.word	0x2000538c
 8004f00:	0800fbdc 	.word	0x0800fbdc
 8004f04:	0800fbf8 	.word	0x0800fbf8
 8004f08:	0800fc28 	.word	0x0800fc28
 8004f0c:	0800fc58 	.word	0x0800fc58

08004f10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	3303      	adds	r3, #3
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e011      	b.n	8004f56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	885b      	ldrh	r3, [r3, #2]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	dbe7      	blt.n	8004f32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f76:	2300      	movs	r3, #0
 8004f78:	80fb      	strh	r3, [r7, #6]
 8004f7a:	e009      	b.n	8004f90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <memp_init+0x30>)
 8004f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ffc3 	bl	8004f10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	80fb      	strh	r3, [r7, #6]
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d9f2      	bls.n	8004f7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	0801243c 	.word	0x0801243c

08004fa4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <do_memp_malloc_pool+0x38>
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <do_memp_malloc_pool+0x48>)
 8004fd0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004fd4:	4906      	ldr	r1, [pc, #24]	; (8004ff0 <do_memp_malloc_pool+0x4c>)
 8004fd6:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <do_memp_malloc_pool+0x50>)
 8004fd8:	f009 fc9c 	bl	800e914 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	e000      	b.n	8004fe2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	0800fc7c 	.word	0x0800fc7c
 8004ff0:	0800fcac 	.word	0x0800fcac
 8004ff4:	0800fcd0 	.word	0x0800fcd0

08004ff8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <memp_malloc_pool+0x1c>
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <memp_malloc_pool+0x38>)
 8005008:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800500c:	4909      	ldr	r1, [pc, #36]	; (8005034 <memp_malloc_pool+0x3c>)
 800500e:	480a      	ldr	r0, [pc, #40]	; (8005038 <memp_malloc_pool+0x40>)
 8005010:	f009 fc80 	bl	800e914 <iprintf>
  if (desc == NULL) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <memp_malloc_pool+0x26>
    return NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	e003      	b.n	8005026 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff ffc0 	bl	8004fa4 <do_memp_malloc_pool>
 8005024:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	0800fc7c 	.word	0x0800fc7c
 8005034:	0800fcf8 	.word	0x0800fcf8
 8005038:	0800fcd0 	.word	0x0800fcd0

0800503c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d908      	bls.n	800505e <memp_malloc+0x22>
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <memp_malloc+0x3c>)
 800504e:	f240 1257 	movw	r2, #343	; 0x157
 8005052:	490a      	ldr	r1, [pc, #40]	; (800507c <memp_malloc+0x40>)
 8005054:	480a      	ldr	r0, [pc, #40]	; (8005080 <memp_malloc+0x44>)
 8005056:	f009 fc5d 	bl	800e914 <iprintf>
 800505a:	2300      	movs	r3, #0
 800505c:	e008      	b.n	8005070 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <memp_malloc+0x48>)
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ff9c 	bl	8004fa4 <do_memp_malloc_pool>
 800506c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	0800fc7c 	.word	0x0800fc7c
 800507c:	0800fd0c 	.word	0x0800fd0c
 8005080:	0800fcd0 	.word	0x0800fcd0
 8005084:	0801243c 	.word	0x0801243c

08005088 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d006      	beq.n	80050aa <do_memp_free_pool+0x22>
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <do_memp_free_pool+0x40>)
 800509e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80050a2:	490a      	ldr	r1, [pc, #40]	; (80050cc <do_memp_free_pool+0x44>)
 80050a4:	480a      	ldr	r0, [pc, #40]	; (80050d0 <do_memp_free_pool+0x48>)
 80050a6:	f009 fc35 	bl	800e914 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	0800fc7c 	.word	0x0800fc7c
 80050cc:	0800fd2c 	.word	0x0800fd2c
 80050d0:	0800fcd0 	.word	0x0800fcd0

080050d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <memp_free_pool+0x1e>
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <memp_free_pool+0x3c>)
 80050e6:	f240 1295 	movw	r2, #405	; 0x195
 80050ea:	490a      	ldr	r1, [pc, #40]	; (8005114 <memp_free_pool+0x40>)
 80050ec:	480a      	ldr	r0, [pc, #40]	; (8005118 <memp_free_pool+0x44>)
 80050ee:	f009 fc11 	bl	800e914 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <memp_free_pool+0x34>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffc1 	bl	8005088 <do_memp_free_pool>
 8005106:	e000      	b.n	800510a <memp_free_pool+0x36>
    return;
 8005108:	bf00      	nop
}
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	0800fc7c 	.word	0x0800fc7c
 8005114:	0800fcf8 	.word	0x0800fcf8
 8005118:	0800fcd0 	.word	0x0800fcd0

0800511c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d907      	bls.n	800513e <memp_free+0x22>
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <memp_free+0x44>)
 8005130:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005134:	490b      	ldr	r1, [pc, #44]	; (8005164 <memp_free+0x48>)
 8005136:	480c      	ldr	r0, [pc, #48]	; (8005168 <memp_free+0x4c>)
 8005138:	f009 fbec 	bl	800e914 <iprintf>
 800513c:	e00c      	b.n	8005158 <memp_free+0x3c>

  if (mem == NULL) {
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <memp_free+0x50>)
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ff9a 	bl	8005088 <do_memp_free_pool>
 8005154:	e000      	b.n	8005158 <memp_free+0x3c>
    return;
 8005156:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	0800fc7c 	.word	0x0800fc7c
 8005164:	0800fd4c 	.word	0x0800fd4c
 8005168:	0800fcd0 	.word	0x0800fcd0
 800516c:	0801243c 	.word	0x0801243c

08005170 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <netif_add+0x26>
 8005194:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <netif_add+0x174>)
 8005196:	f240 1227 	movw	r2, #295	; 0x127
 800519a:	4957      	ldr	r1, [pc, #348]	; (80052f8 <netif_add+0x178>)
 800519c:	4857      	ldr	r0, [pc, #348]	; (80052fc <netif_add+0x17c>)
 800519e:	f009 fbb9 	bl	800e914 <iprintf>
 80051a2:	2300      	movs	r3, #0
 80051a4:	e0a2      	b.n	80052ec <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <netif_add+0x3e>
 80051ac:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <netif_add+0x174>)
 80051ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80051b2:	4953      	ldr	r1, [pc, #332]	; (8005300 <netif_add+0x180>)
 80051b4:	4851      	ldr	r0, [pc, #324]	; (80052fc <netif_add+0x17c>)
 80051b6:	f009 fbad 	bl	800e914 <iprintf>
 80051ba:	2300      	movs	r3, #0
 80051bc:	e096      	b.n	80052ec <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80051c4:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <netif_add+0x184>)
 80051c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80051ce:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <netif_add+0x184>)
 80051d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80051d8:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <netif_add+0x184>)
 80051da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a45      	ldr	r2, [pc, #276]	; (8005308 <netif_add+0x188>)
 80051f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <netif_add+0x18c>)
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f913 	bl	8005450 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	4798      	blx	r3
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <netif_add+0xba>
    return NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	e058      	b.n	80052ec <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005240:	2bff      	cmp	r3, #255	; 0xff
 8005242:	d103      	bne.n	800524c <netif_add+0xcc>
        netif->num = 0;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005250:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <netif_add+0x190>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e02b      	b.n	80052b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d106      	bne.n	800526e <netif_add+0xee>
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <netif_add+0x174>)
 8005262:	f240 128b 	movw	r2, #395	; 0x18b
 8005266:	492b      	ldr	r1, [pc, #172]	; (8005314 <netif_add+0x194>)
 8005268:	4824      	ldr	r0, [pc, #144]	; (80052fc <netif_add+0x17c>)
 800526a:	f009 fb53 	bl	800e914 <iprintf>
        num_netifs++;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3301      	adds	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2bff      	cmp	r3, #255	; 0xff
 8005278:	dd06      	ble.n	8005288 <netif_add+0x108>
 800527a:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <netif_add+0x174>)
 800527c:	f240 128d 	movw	r2, #397	; 0x18d
 8005280:	4925      	ldr	r1, [pc, #148]	; (8005318 <netif_add+0x198>)
 8005282:	481e      	ldr	r0, [pc, #120]	; (80052fc <netif_add+0x17c>)
 8005284:	f009 fb46 	bl	800e914 <iprintf>
        if (netif2->num == netif->num) {
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005294:	429a      	cmp	r2, r3
 8005296:	d108      	bne.n	80052aa <netif_add+0x12a>
          netif->num++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529e:	3301      	adds	r3, #1
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80052a8:	e005      	b.n	80052b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1d0      	bne.n	8005258 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1be      	bne.n	800523a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052c2:	2bfe      	cmp	r3, #254	; 0xfe
 80052c4:	d103      	bne.n	80052ce <netif_add+0x14e>
    netif_num = 0;
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <netif_add+0x18c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e006      	b.n	80052dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d4:	3301      	adds	r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <netif_add+0x18c>)
 80052da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <netif_add+0x190>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <netif_add+0x190>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	0800fd68 	.word	0x0800fd68
 80052f8:	0800fdfc 	.word	0x0800fdfc
 80052fc:	0800fdb8 	.word	0x0800fdb8
 8005300:	0800fe18 	.word	0x0800fe18
 8005304:	080124a0 	.word	0x080124a0
 8005308:	0800572b 	.word	0x0800572b
 800530c:	20008288 	.word	0x20008288
 8005310:	20008280 	.word	0x20008280
 8005314:	0800fe3c 	.word	0x0800fe3c
 8005318:	0800fe50 	.word	0x0800fe50

0800531c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f002 fb53 	bl	80079d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f006 ffaf 	bl	800c294 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <netif_do_set_ipaddr+0x20>
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <netif_do_set_ipaddr+0x88>)
 8005354:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005358:	491c      	ldr	r1, [pc, #112]	; (80053cc <netif_do_set_ipaddr+0x8c>)
 800535a:	481d      	ldr	r0, [pc, #116]	; (80053d0 <netif_do_set_ipaddr+0x90>)
 800535c:	f009 fada 	bl	800e914 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <netif_do_set_ipaddr+0x34>
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <netif_do_set_ipaddr+0x88>)
 8005368:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800536c:	4917      	ldr	r1, [pc, #92]	; (80053cc <netif_do_set_ipaddr+0x8c>)
 800536e:	4818      	ldr	r0, [pc, #96]	; (80053d0 <netif_do_set_ipaddr+0x90>)
 8005370:	f009 fad0 	bl	800e914 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3304      	adds	r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d01c      	beq.n	80053bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3304      	adds	r3, #4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005392:	f107 0314 	add.w	r3, r7, #20
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ffbf 	bl	800531c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <netif_do_set_ipaddr+0x6a>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	e000      	b.n	80053ac <netif_do_set_ipaddr+0x6c>
 80053aa:	2300      	movs	r3, #0
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80053b0:	2101      	movs	r1, #1
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f8d2 	bl	800555c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800fd68 	.word	0x0800fd68
 80053cc:	0800fe80 	.word	0x0800fe80
 80053d0:	0800fdb8 	.word	0x0800fdb8

080053d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3308      	adds	r3, #8
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d00a      	beq.n	8005404 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <netif_do_set_netmask+0x26>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	e000      	b.n	80053fc <netif_do_set_netmask+0x28>
 80053fa:	2300      	movs	r3, #0
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	330c      	adds	r3, #12
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d00a      	beq.n	8005442 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <netif_do_set_gw+0x26>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	e000      	b.n	800543a <netif_do_set_gw+0x28>
 8005438:	2300      	movs	r3, #0
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800546c:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <netif_set_addr+0x90>)
 800546e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005476:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <netif_set_addr+0x90>)
 8005478:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <netif_set_addr+0x90>)
 8005482:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <netif_set_addr+0x42>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <netif_set_addr+0x46>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <netif_set_addr+0x48>
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
  if (remove) {
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d006      	beq.n	80054ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff49 	bl	8005340 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff ff8e 	bl	80053d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff ffa8 	bl	8005412 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	461a      	mov	r2, r3
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff ff35 	bl	8005340 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80054d6:	bf00      	nop
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	080124a0 	.word	0x080124a0

080054e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80054ec:	4a04      	ldr	r2, [pc, #16]	; (8005500 <netif_set_default+0x1c>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20008284 	.word	0x20008284

08005504 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <netif_set_up+0x1e>
 8005512:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <netif_set_up+0x4c>)
 8005514:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <netif_set_up+0x50>)
 800551a:	480f      	ldr	r0, [pc, #60]	; (8005558 <netif_set_up+0x54>)
 800551c:	f009 f9fa 	bl	800e914 <iprintf>
 8005520:	e013      	b.n	800554a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10c      	bne.n	800554a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005542:	2103      	movs	r1, #3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f809 	bl	800555c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	0800fd68 	.word	0x0800fd68
 8005554:	0800fef0 	.word	0x0800fef0
 8005558:	0800fdb8 	.word	0x0800fdb8

0800555c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <netif_issue_reports+0x20>
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <netif_issue_reports+0x74>)
 8005570:	f240 326d 	movw	r2, #877	; 0x36d
 8005574:	4917      	ldr	r1, [pc, #92]	; (80055d4 <netif_issue_reports+0x78>)
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <netif_issue_reports+0x7c>)
 8005578:	f009 f9cc 	bl	800e914 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01e      	beq.n	80055c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005590:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	d017      	beq.n	80055c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d013      	beq.n	80055ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00e      	beq.n	80055ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f007 fdd1 	bl	800d168 <etharp_request>
 80055c6:	e000      	b.n	80055ca <netif_issue_reports+0x6e>
    return;
 80055c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	0800fd68 	.word	0x0800fd68
 80055d4:	0800ff0c 	.word	0x0800ff0c
 80055d8:	0800fdb8 	.word	0x0800fdb8

080055dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d107      	bne.n	80055fa <netif_set_down+0x1e>
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <netif_set_down+0x58>)
 80055ec:	f240 329b 	movw	r2, #923	; 0x39b
 80055f0:	4911      	ldr	r1, [pc, #68]	; (8005638 <netif_set_down+0x5c>)
 80055f2:	4812      	ldr	r0, [pc, #72]	; (800563c <netif_set_down+0x60>)
 80055f4:	f009 f98e 	bl	800e914 <iprintf>
 80055f8:	e019      	b.n	800562e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d012      	beq.n	800562e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	b2da      	uxtb	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f007 f95b 	bl	800c8e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	0800fd68 	.word	0x0800fd68
 8005638:	0800ff30 	.word	0x0800ff30
 800563c:	0800fdb8 	.word	0x0800fdb8

08005640 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <netif_set_link_up+0x1e>
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <netif_set_link_up+0x5c>)
 8005650:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005654:	4912      	ldr	r1, [pc, #72]	; (80056a0 <netif_set_link_up+0x60>)
 8005656:	4813      	ldr	r0, [pc, #76]	; (80056a4 <netif_set_link_up+0x64>)
 8005658:	f009 f95c 	bl	800e914 <iprintf>
 800565c:	e01b      	b.n	8005696 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d114      	bne.n	8005696 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800567e:	2103      	movs	r1, #3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff6b 	bl	800555c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <netif_set_link_up+0x56>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	0800fd68 	.word	0x0800fd68
 80056a0:	0800ff50 	.word	0x0800ff50
 80056a4:	0800fdb8 	.word	0x0800fdb8

080056a8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <netif_set_link_down+0x1e>
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <netif_set_link_down+0x54>)
 80056b8:	f240 4206 	movw	r2, #1030	; 0x406
 80056bc:	4910      	ldr	r1, [pc, #64]	; (8005700 <netif_set_link_down+0x58>)
 80056be:	4811      	ldr	r0, [pc, #68]	; (8005704 <netif_set_link_down+0x5c>)
 80056c0:	f009 f928 	bl	800e914 <iprintf>
 80056c4:	e017      	b.n	80056f6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <netif_set_link_down+0x4e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	0800fd68 	.word	0x0800fd68
 8005700:	0800ff74 	.word	0x0800ff74
 8005704:	0800fdb8 	.word	0x0800fdb8

08005708 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	61da      	str	r2, [r3, #28]
  }
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005736:	f06f 030b 	mvn.w	r3, #11
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <netif_get_by_index+0x48>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e00c      	b.n	800577a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005766:	3301      	adds	r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	79fa      	ldrb	r2, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d101      	bne.n	8005774 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	e006      	b.n	8005782 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ef      	bne.n	8005760 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20008280 	.word	0x20008280

08005794 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <pbuf_free_ooseq+0x38>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <pbuf_free_ooseq+0x3c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	e00a      	b.n	80057be <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f002 f94d 	bl	8007a50 <tcp_free_ooseq>
      return;
 80057b6:	e005      	b.n	80057c4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f1      	bne.n	80057a8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20008289 	.word	0x20008289
 80057d0:	20008298 	.word	0x20008298

080057d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <pbuf_pool_is_empty+0x14>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80057de:	bf00      	nop
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20008289 	.word	0x20008289

080057ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	460b      	mov	r3, r1
 80057fc:	80fb      	strh	r3, [r7, #6]
 80057fe:	4613      	mov	r3, r2
 8005800:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88ba      	ldrh	r2, [r7, #4]
 8005818:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800581a:	8b3b      	ldrh	r3, [r7, #24]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	7f3a      	ldrb	r2, [r7, #28]
 8005826:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	73da      	strb	r2, [r3, #15]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af02      	add	r7, sp, #8
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
 800584a:	460b      	mov	r3, r1
 800584c:	80bb      	strh	r3, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800585c:	d07f      	beq.n	800595e <pbuf_alloc+0x11e>
 800585e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005862:	f300 80c8 	bgt.w	80059f6 <pbuf_alloc+0x1b6>
 8005866:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800586a:	d010      	beq.n	800588e <pbuf_alloc+0x4e>
 800586c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005870:	f300 80c1 	bgt.w	80059f6 <pbuf_alloc+0x1b6>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d002      	beq.n	800587e <pbuf_alloc+0x3e>
 8005878:	2b41      	cmp	r3, #65	; 0x41
 800587a:	f040 80bc 	bne.w	80059f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	88bb      	ldrh	r3, [r7, #4]
 8005882:	4619      	mov	r1, r3
 8005884:	2000      	movs	r0, #0
 8005886:	f000 f8d1 	bl	8005a2c <pbuf_alloc_reference>
 800588a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800588c:	e0bd      	b.n	8005a0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005896:	88bb      	ldrh	r3, [r7, #4]
 8005898:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800589a:	2008      	movs	r0, #8
 800589c:	f7ff fbce 	bl	800503c <memp_malloc>
 80058a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80058a8:	f7ff ff94 	bl	80057d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80058b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058b4:	f000 faa8 	bl	8005e08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e0a7      	b.n	8005a0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80058bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058be:	3303      	adds	r3, #3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	8b7a      	ldrh	r2, [r7, #26]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf28      	it	cs
 80058d4:	4613      	movcs	r3, r2
 80058d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80058d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058da:	3310      	adds	r3, #16
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	3303      	adds	r3, #3
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	4618      	mov	r0, r3
 80058e8:	89f9      	ldrh	r1, [r7, #14]
 80058ea:	8b7a      	ldrh	r2, [r7, #26]
 80058ec:	2300      	movs	r3, #0
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	4601      	mov	r1, r0
 80058f8:	6938      	ldr	r0, [r7, #16]
 80058fa:	f7ff ff77 	bl	80057ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <pbuf_alloc+0xd8>
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <pbuf_alloc+0x1d4>)
 800590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005910:	4941      	ldr	r1, [pc, #260]	; (8005a18 <pbuf_alloc+0x1d8>)
 8005912:	4842      	ldr	r0, [pc, #264]	; (8005a1c <pbuf_alloc+0x1dc>)
 8005914:	f008 fffe 	bl	800e914 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800591a:	3303      	adds	r3, #3
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005924:	d106      	bne.n	8005934 <pbuf_alloc+0xf4>
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <pbuf_alloc+0x1d4>)
 8005928:	f44f 7281 	mov.w	r2, #258	; 0x102
 800592c:	493c      	ldr	r1, [pc, #240]	; (8005a20 <pbuf_alloc+0x1e0>)
 800592e:	483b      	ldr	r0, [pc, #236]	; (8005a1c <pbuf_alloc+0x1dc>)
 8005930:	f008 fff0 	bl	800e914 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
 800593e:	e002      	b.n	8005946 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800594a:	8b7a      	ldrh	r2, [r7, #26]
 800594c:	89fb      	ldrh	r3, [r7, #14]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005956:	8b7b      	ldrh	r3, [r7, #26]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d19e      	bne.n	800589a <pbuf_alloc+0x5a>
      break;
 800595c:	e055      	b.n	8005a0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800595e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005960:	3303      	adds	r3, #3
 8005962:	b29b      	uxth	r3, r3
 8005964:	f023 0303 	bic.w	r3, r3, #3
 8005968:	b29a      	uxth	r2, r3
 800596a:	88bb      	ldrh	r3, [r7, #4]
 800596c:	3303      	adds	r3, #3
 800596e:	b29b      	uxth	r3, r3
 8005970:	f023 0303 	bic.w	r3, r3, #3
 8005974:	b29b      	uxth	r3, r3
 8005976:	4413      	add	r3, r2
 8005978:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800597a:	8b3b      	ldrh	r3, [r7, #24]
 800597c:	3310      	adds	r3, #16
 800597e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005980:	8b3a      	ldrh	r2, [r7, #24]
 8005982:	88bb      	ldrh	r3, [r7, #4]
 8005984:	3303      	adds	r3, #3
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	429a      	cmp	r2, r3
 800598c:	d306      	bcc.n	800599c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800598e:	8afa      	ldrh	r2, [r7, #22]
 8005990:	88bb      	ldrh	r3, [r7, #4]
 8005992:	3303      	adds	r3, #3
 8005994:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d201      	bcs.n	80059a0 <pbuf_alloc+0x160>
        return NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	e035      	b.n	8005a0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80059a0:	8afb      	ldrh	r3, [r7, #22]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f9ba 	bl	8004d1c <mem_malloc>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <pbuf_alloc+0x174>
        return NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e02b      	b.n	8005a0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80059b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059b6:	3310      	adds	r3, #16
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	4413      	add	r3, r2
 80059bc:	3303      	adds	r3, #3
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	4618      	mov	r0, r3
 80059c4:	88b9      	ldrh	r1, [r7, #4]
 80059c6:	88ba      	ldrh	r2, [r7, #4]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	4601      	mov	r1, r0
 80059d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059d6:	f7ff ff09 	bl	80057ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <pbuf_alloc+0x1c8>
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <pbuf_alloc+0x1d4>)
 80059e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80059ec:	490d      	ldr	r1, [pc, #52]	; (8005a24 <pbuf_alloc+0x1e4>)
 80059ee:	480b      	ldr	r0, [pc, #44]	; (8005a1c <pbuf_alloc+0x1dc>)
 80059f0:	f008 ff90 	bl	800e914 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80059f4:	e008      	b.n	8005a08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <pbuf_alloc+0x1d4>)
 80059f8:	f240 1227 	movw	r2, #295	; 0x127
 80059fc:	490a      	ldr	r1, [pc, #40]	; (8005a28 <pbuf_alloc+0x1e8>)
 80059fe:	4807      	ldr	r0, [pc, #28]	; (8005a1c <pbuf_alloc+0x1dc>)
 8005a00:	f008 ff88 	bl	800e914 <iprintf>
      return NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e001      	b.n	8005a0c <pbuf_alloc+0x1cc>
      break;
 8005a08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	; 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0800ff98 	.word	0x0800ff98
 8005a18:	0800ffc8 	.word	0x0800ffc8
 8005a1c:	0800fff8 	.word	0x0800fff8
 8005a20:	08010020 	.word	0x08010020
 8005a24:	08010054 	.word	0x08010054
 8005a28:	08010080 	.word	0x08010080

08005a2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005a3c:	883b      	ldrh	r3, [r7, #0]
 8005a3e:	2b41      	cmp	r3, #65	; 0x41
 8005a40:	d009      	beq.n	8005a56 <pbuf_alloc_reference+0x2a>
 8005a42:	883b      	ldrh	r3, [r7, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d006      	beq.n	8005a56 <pbuf_alloc_reference+0x2a>
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <pbuf_alloc_reference+0x5c>)
 8005a4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005a4e:	490f      	ldr	r1, [pc, #60]	; (8005a8c <pbuf_alloc_reference+0x60>)
 8005a50:	480f      	ldr	r0, [pc, #60]	; (8005a90 <pbuf_alloc_reference+0x64>)
 8005a52:	f008 ff5f 	bl	800e914 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005a56:	2007      	movs	r0, #7
 8005a58:	f7ff faf0 	bl	800503c <memp_malloc>
 8005a5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e00b      	b.n	8005a80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005a68:	8879      	ldrh	r1, [r7, #2]
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	883b      	ldrh	r3, [r7, #0]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	460b      	mov	r3, r1
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff feb7 	bl	80057ec <pbuf_init_alloced_pbuf>
  return p;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	0800ff98 	.word	0x0800ff98
 8005a8c:	0801009c 	.word	0x0801009c
 8005a90:	0800fff8 	.word	0x0800fff8

08005a94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	81bb      	strh	r3, [r7, #12]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005aac:	8a7b      	ldrh	r3, [r7, #18]
 8005aae:	3303      	adds	r3, #3
 8005ab0:	f023 0203 	bic.w	r2, r3, #3
 8005ab4:	89bb      	ldrh	r3, [r7, #12]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d901      	bls.n	8005ac2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e018      	b.n	8005af4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ac8:	8a7b      	ldrh	r3, [r7, #18]
 8005aca:	3303      	adds	r3, #3
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e001      	b.n	8005adc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	89b9      	ldrh	r1, [r7, #12]
 8005ae0:	89ba      	ldrh	r2, [r7, #12]
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	897b      	ldrh	r3, [r7, #10]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	460b      	mov	r3, r1
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	f7ff fe7d 	bl	80057ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005af2:	687b      	ldr	r3, [r7, #4]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <pbuf_realloc+0x20>
 8005b0e:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <pbuf_realloc+0xfc>)
 8005b10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005b14:	4939      	ldr	r1, [pc, #228]	; (8005bfc <pbuf_realloc+0x100>)
 8005b16:	483a      	ldr	r0, [pc, #232]	; (8005c00 <pbuf_realloc+0x104>)
 8005b18:	f008 fefc 	bl	800e914 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	891b      	ldrh	r3, [r3, #8]
 8005b20:	887a      	ldrh	r2, [r7, #2]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d263      	bcs.n	8005bee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	891a      	ldrh	r2, [r3, #8]
 8005b2a:	887b      	ldrh	r3, [r7, #2]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	817b      	strh	r3, [r7, #10]
  q = p;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005b38:	e018      	b.n	8005b6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	895b      	ldrh	r3, [r3, #10]
 8005b3e:	897a      	ldrh	r2, [r7, #10]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	891a      	ldrh	r2, [r3, #8]
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <pbuf_realloc+0x70>
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <pbuf_realloc+0xfc>)
 8005b60:	f240 12af 	movw	r2, #431	; 0x1af
 8005b64:	4927      	ldr	r1, [pc, #156]	; (8005c04 <pbuf_realloc+0x108>)
 8005b66:	4826      	ldr	r0, [pc, #152]	; (8005c00 <pbuf_realloc+0x104>)
 8005b68:	f008 fed4 	bl	800e914 <iprintf>
  while (rem_len > q->len) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	895b      	ldrh	r3, [r3, #10]
 8005b70:	897a      	ldrh	r2, [r7, #10]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8e1      	bhi.n	8005b3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	7b1b      	ldrb	r3, [r3, #12]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d121      	bne.n	8005bc6 <pbuf_realloc+0xca>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	895b      	ldrh	r3, [r3, #10]
 8005b86:	897a      	ldrh	r2, [r7, #10]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d01c      	beq.n	8005bc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7b5b      	ldrb	r3, [r3, #13]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d116      	bne.n	8005bc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7fe ffba 	bl	8004b24 <mem_trim>
 8005bb0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <pbuf_realloc+0xca>
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <pbuf_realloc+0xfc>)
 8005bba:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005bbe:	4912      	ldr	r1, [pc, #72]	; (8005c08 <pbuf_realloc+0x10c>)
 8005bc0:	480f      	ldr	r0, [pc, #60]	; (8005c00 <pbuf_realloc+0x104>)
 8005bc2:	f008 fea7 	bl	800e914 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	897a      	ldrh	r2, [r7, #10]
 8005bca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	895a      	ldrh	r2, [r3, #10]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f911 	bl	8005e08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e000      	b.n	8005bf0 <pbuf_realloc+0xf4>
    return;
 8005bee:	bf00      	nop

}
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	0800ff98 	.word	0x0800ff98
 8005bfc:	080100b0 	.word	0x080100b0
 8005c00:	0800fff8 	.word	0x0800fff8
 8005c04:	080100c8 	.word	0x080100c8
 8005c08:	080100e0 	.word	0x080100e0

08005c0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <pbuf_add_header_impl+0x22>
 8005c20:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <pbuf_add_header_impl+0xc4>)
 8005c22:	f240 12df 	movw	r2, #479	; 0x1df
 8005c26:	492b      	ldr	r1, [pc, #172]	; (8005cd4 <pbuf_add_header_impl+0xc8>)
 8005c28:	482b      	ldr	r0, [pc, #172]	; (8005cd8 <pbuf_add_header_impl+0xcc>)
 8005c2a:	f008 fe73 	bl	800e914 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <pbuf_add_header_impl+0x30>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d301      	bcc.n	8005c40 <pbuf_add_header_impl+0x34>
    return 1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e043      	b.n	8005cc8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <pbuf_add_header_impl+0x3e>
    return 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e03e      	b.n	8005cc8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	891a      	ldrh	r2, [r3, #8]
 8005c52:	8a7b      	ldrh	r3, [r7, #18]
 8005c54:	4413      	add	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8a7a      	ldrh	r2, [r7, #18]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d901      	bls.n	8005c62 <pbuf_add_header_impl+0x56>
    return 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e032      	b.n	8005cc8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	7b1b      	ldrb	r3, [r3, #12]
 8005c66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005c68:	8a3b      	ldrh	r3, [r7, #16]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	425b      	negs	r3, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3310      	adds	r3, #16
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d20d      	bcs.n	8005ca4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e01d      	b.n	8005cc8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	425b      	negs	r3, r3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e001      	b.n	8005ca4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e011      	b.n	8005cc8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	895a      	ldrh	r2, [r3, #10]
 8005cae:	8a7b      	ldrh	r3, [r7, #18]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	891a      	ldrh	r2, [r3, #8]
 8005cbc:	8a7b      	ldrh	r3, [r7, #18]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	811a      	strh	r2, [r3, #8]


  return 0;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	0800ff98 	.word	0x0800ff98
 8005cd4:	080100fc 	.word	0x080100fc
 8005cd8:	0800fff8 	.word	0x0800fff8

08005cdc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff8e 	bl	8005c0c <pbuf_add_header_impl>
 8005cf0:	4603      	mov	r3, r0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <pbuf_remove_header+0x1e>
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <pbuf_remove_header+0x94>)
 8005d0e:	f240 224b 	movw	r2, #587	; 0x24b
 8005d12:	4920      	ldr	r1, [pc, #128]	; (8005d94 <pbuf_remove_header+0x98>)
 8005d14:	4820      	ldr	r0, [pc, #128]	; (8005d98 <pbuf_remove_header+0x9c>)
 8005d16:	f008 fdfd 	bl	800e914 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <pbuf_remove_header+0x2c>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d26:	d301      	bcc.n	8005d2c <pbuf_remove_header+0x30>
    return 1;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e02c      	b.n	8005d86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <pbuf_remove_header+0x3a>
    return 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e027      	b.n	8005d86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	895b      	ldrh	r3, [r3, #10]
 8005d3e:	89fa      	ldrh	r2, [r7, #14]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d908      	bls.n	8005d56 <pbuf_remove_header+0x5a>
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <pbuf_remove_header+0x94>)
 8005d46:	f240 2255 	movw	r2, #597	; 0x255
 8005d4a:	4914      	ldr	r1, [pc, #80]	; (8005d9c <pbuf_remove_header+0xa0>)
 8005d4c:	4812      	ldr	r0, [pc, #72]	; (8005d98 <pbuf_remove_header+0x9c>)
 8005d4e:	f008 fde1 	bl	800e914 <iprintf>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e017      	b.n	8005d86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	441a      	add	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	895a      	ldrh	r2, [r3, #10]
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	891a      	ldrh	r2, [r3, #8]
 8005d7a:	89fb      	ldrh	r3, [r7, #14]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	0800ff98 	.word	0x0800ff98
 8005d94:	080100fc 	.word	0x080100fc
 8005d98:	0800fff8 	.word	0x0800fff8
 8005d9c:	08010108 	.word	0x08010108

08005da0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da08      	bge.n	8005dca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff9b 	bl	8005cfc <pbuf_remove_header>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e007      	b.n	8005dda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005dca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dce:	787a      	ldrb	r2, [r7, #1]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff1a 	bl	8005c0c <pbuf_add_header_impl>
 8005dd8:	4603      	mov	r3, r0
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ffd2 	bl	8005da0 <pbuf_header_impl>
 8005dfc:	4603      	mov	r3, r0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <pbuf_free+0x22>
 8005e1c:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <pbuf_free+0xf8>)
 8005e1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005e22:	4938      	ldr	r1, [pc, #224]	; (8005f04 <pbuf_free+0xfc>)
 8005e24:	4838      	ldr	r0, [pc, #224]	; (8005f08 <pbuf_free+0x100>)
 8005e26:	f008 fd75 	bl	800e914 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e063      	b.n	8005ef6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005e32:	e05c      	b.n	8005eee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7b9b      	ldrb	r3, [r3, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <pbuf_free+0x42>
 8005e3c:	4b30      	ldr	r3, [pc, #192]	; (8005f00 <pbuf_free+0xf8>)
 8005e3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005e42:	4932      	ldr	r1, [pc, #200]	; (8005f0c <pbuf_free+0x104>)
 8005e44:	4830      	ldr	r0, [pc, #192]	; (8005f08 <pbuf_free+0x100>)
 8005e46:	f008 fd65 	bl	800e914 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7b9b      	ldrb	r3, [r3, #14]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	739a      	strb	r2, [r3, #14]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7b9b      	ldrb	r3, [r3, #14]
 8005e5a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005e5c:	7dbb      	ldrb	r3, [r7, #22]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d143      	bne.n	8005eea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7b1b      	ldrb	r3, [r3, #12]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7b5b      	ldrb	r3, [r3, #13]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <pbuf_free+0x90>
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <pbuf_free+0xf8>)
 8005e8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005e90:	491f      	ldr	r1, [pc, #124]	; (8005f10 <pbuf_free+0x108>)
 8005e92:	481d      	ldr	r0, [pc, #116]	; (8005f08 <pbuf_free+0x100>)
 8005e94:	f008 fd3e 	bl	800e914 <iprintf>
        pc->custom_free_function(p);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
 8005ea0:	e01d      	b.n	8005ede <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d104      	bne.n	8005eb2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	2008      	movs	r0, #8
 8005eac:	f7ff f936 	bl	800511c <memp_free>
 8005eb0:	e015      	b.n	8005ede <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d104      	bne.n	8005ec2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	2007      	movs	r0, #7
 8005ebc:	f7ff f92e 	bl	800511c <memp_free>
 8005ec0:	e00d      	b.n	8005ede <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <pbuf_free+0xc8>
          mem_free(p);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fe fdc1 	bl	8004a50 <mem_free>
 8005ece:	e006      	b.n	8005ede <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <pbuf_free+0xf8>)
 8005ed2:	f240 320f 	movw	r2, #783	; 0x30f
 8005ed6:	490f      	ldr	r1, [pc, #60]	; (8005f14 <pbuf_free+0x10c>)
 8005ed8:	480b      	ldr	r0, [pc, #44]	; (8005f08 <pbuf_free+0x100>)
 8005eda:	f008 fd1b 	bl	800e914 <iprintf>
        }
      }
      count++;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	e001      	b.n	8005eee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d19f      	bne.n	8005e34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800ff98 	.word	0x0800ff98
 8005f04:	080100fc 	.word	0x080100fc
 8005f08:	0800fff8 	.word	0x0800fff8
 8005f0c:	08010128 	.word	0x08010128
 8005f10:	08010140 	.word	0x08010140
 8005f14:	08010164 	.word	0x08010164

08005f18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005f24:	e005      	b.n	8005f32 <pbuf_clen+0x1a>
    ++len;
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f6      	bne.n	8005f26 <pbuf_clen+0xe>
  }
  return len;
 8005f38:	89fb      	ldrh	r3, [r7, #14]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7b9b      	ldrb	r3, [r3, #14]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7b9b      	ldrb	r3, [r3, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <pbuf_ref+0x30>
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <pbuf_ref+0x38>)
 8005f6c:	f240 3242 	movw	r2, #834	; 0x342
 8005f70:	4904      	ldr	r1, [pc, #16]	; (8005f84 <pbuf_ref+0x3c>)
 8005f72:	4805      	ldr	r0, [pc, #20]	; (8005f88 <pbuf_ref+0x40>)
 8005f74:	f008 fcce 	bl	800e914 <iprintf>
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	0800ff98 	.word	0x0800ff98
 8005f84:	08010178 	.word	0x08010178
 8005f88:	0800fff8 	.word	0x0800fff8

08005f8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <pbuf_cat+0x16>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <pbuf_cat+0x26>
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <pbuf_cat+0x98>)
 8005fa4:	f240 3259 	movw	r2, #857	; 0x359
 8005fa8:	491f      	ldr	r1, [pc, #124]	; (8006028 <pbuf_cat+0x9c>)
 8005faa:	4820      	ldr	r0, [pc, #128]	; (800602c <pbuf_cat+0xa0>)
 8005fac:	f008 fcb2 	bl	800e914 <iprintf>
 8005fb0:	e034      	b.n	800601c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e00a      	b.n	8005fce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	891a      	ldrh	r2, [r3, #8]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	891b      	ldrh	r3, [r3, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	891a      	ldrh	r2, [r3, #8]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	895b      	ldrh	r3, [r3, #10]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d006      	beq.n	8005ff0 <pbuf_cat+0x64>
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <pbuf_cat+0x98>)
 8005fe4:	f240 3262 	movw	r2, #866	; 0x362
 8005fe8:	4911      	ldr	r1, [pc, #68]	; (8006030 <pbuf_cat+0xa4>)
 8005fea:	4810      	ldr	r0, [pc, #64]	; (800602c <pbuf_cat+0xa0>)
 8005fec:	f008 fc92 	bl	800e914 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <pbuf_cat+0x7a>
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <pbuf_cat+0x98>)
 8005ffa:	f240 3263 	movw	r2, #867	; 0x363
 8005ffe:	490d      	ldr	r1, [pc, #52]	; (8006034 <pbuf_cat+0xa8>)
 8006000:	480a      	ldr	r0, [pc, #40]	; (800602c <pbuf_cat+0xa0>)
 8006002:	f008 fc87 	bl	800e914 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	891a      	ldrh	r2, [r3, #8]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	891b      	ldrh	r3, [r3, #8]
 800600e:	4413      	add	r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	0800ff98 	.word	0x0800ff98
 8006028:	0801018c 	.word	0x0801018c
 800602c:	0800fff8 	.word	0x0800fff8
 8006030:	080101c4 	.word	0x080101c4
 8006034:	080101f4 	.word	0x080101f4

08006038 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff ffa1 	bl	8005f8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800604a:	6838      	ldr	r0, [r7, #0]
 800604c:	f7ff ff7c 	bl	8005f48 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <pbuf_copy+0x2a>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <pbuf_copy+0x2a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	891a      	ldrh	r2, [r3, #8]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	891b      	ldrh	r3, [r3, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d209      	bcs.n	8006096 <pbuf_copy+0x3e>
 8006082:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <pbuf_copy+0x188>)
 8006084:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006088:	4956      	ldr	r1, [pc, #344]	; (80061e4 <pbuf_copy+0x18c>)
 800608a:	4857      	ldr	r0, [pc, #348]	; (80061e8 <pbuf_copy+0x190>)
 800608c:	f008 fc42 	bl	800e914 <iprintf>
 8006090:	f06f 030f 	mvn.w	r3, #15
 8006094:	e09f      	b.n	80061d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	895b      	ldrh	r3, [r3, #10]
 800609a:	461a      	mov	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	895b      	ldrh	r3, [r3, #10]
 80060a4:	4619      	mov	r1, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1acb      	subs	r3, r1, r3
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d306      	bcc.n	80060bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	895b      	ldrh	r3, [r3, #10]
 80060b2:	461a      	mov	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e005      	b.n	80060c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	895b      	ldrh	r3, [r3, #10]
 80060c0:	461a      	mov	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	18d0      	adds	r0, r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4619      	mov	r1, r3
 80060dc:	f008 fc04 	bl	800e8e8 <memcpy>
    offset_to += len;
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	895b      	ldrh	r3, [r3, #10]
 80060f4:	461a      	mov	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d906      	bls.n	800610a <pbuf_copy+0xb2>
 80060fc:	4b38      	ldr	r3, [pc, #224]	; (80061e0 <pbuf_copy+0x188>)
 80060fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006102:	493a      	ldr	r1, [pc, #232]	; (80061ec <pbuf_copy+0x194>)
 8006104:	4838      	ldr	r0, [pc, #224]	; (80061e8 <pbuf_copy+0x190>)
 8006106:	f008 fc05 	bl	800e914 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	895b      	ldrh	r3, [r3, #10]
 800610e:	461a      	mov	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4293      	cmp	r3, r2
 8006114:	d906      	bls.n	8006124 <pbuf_copy+0xcc>
 8006116:	4b32      	ldr	r3, [pc, #200]	; (80061e0 <pbuf_copy+0x188>)
 8006118:	f240 32da 	movw	r2, #986	; 0x3da
 800611c:	4934      	ldr	r1, [pc, #208]	; (80061f0 <pbuf_copy+0x198>)
 800611e:	4832      	ldr	r0, [pc, #200]	; (80061e8 <pbuf_copy+0x190>)
 8006120:	f008 fbf8 	bl	800e914 <iprintf>
    if (offset_from >= p_from->len) {
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	895b      	ldrh	r3, [r3, #10]
 8006128:	461a      	mov	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4293      	cmp	r3, r2
 800612e:	d304      	bcc.n	800613a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	895b      	ldrh	r3, [r3, #10]
 800613e:	461a      	mov	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4293      	cmp	r3, r2
 8006144:	d114      	bne.n	8006170 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <pbuf_copy+0x118>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <pbuf_copy+0x118>
 800615c:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <pbuf_copy+0x188>)
 800615e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006162:	4924      	ldr	r1, [pc, #144]	; (80061f4 <pbuf_copy+0x19c>)
 8006164:	4820      	ldr	r0, [pc, #128]	; (80061e8 <pbuf_copy+0x190>)
 8006166:	f008 fbd5 	bl	800e914 <iprintf>
 800616a:	f06f 030f 	mvn.w	r3, #15
 800616e:	e032      	b.n	80061d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <pbuf_copy+0x146>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	895a      	ldrh	r2, [r3, #10]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	891b      	ldrh	r3, [r3, #8]
 800617e:	429a      	cmp	r2, r3
 8006180:	d10d      	bne.n	800619e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <pbuf_copy+0x146>
 800618a:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <pbuf_copy+0x188>)
 800618c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006190:	4919      	ldr	r1, [pc, #100]	; (80061f8 <pbuf_copy+0x1a0>)
 8006192:	4815      	ldr	r0, [pc, #84]	; (80061e8 <pbuf_copy+0x190>)
 8006194:	f008 fbbe 	bl	800e914 <iprintf>
 8006198:	f06f 0305 	mvn.w	r3, #5
 800619c:	e01b      	b.n	80061d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d013      	beq.n	80061cc <pbuf_copy+0x174>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	895a      	ldrh	r2, [r3, #10]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	891b      	ldrh	r3, [r3, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d10d      	bne.n	80061cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <pbuf_copy+0x174>
 80061b8:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <pbuf_copy+0x188>)
 80061ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80061be:	490e      	ldr	r1, [pc, #56]	; (80061f8 <pbuf_copy+0x1a0>)
 80061c0:	4809      	ldr	r0, [pc, #36]	; (80061e8 <pbuf_copy+0x190>)
 80061c2:	f008 fba7 	bl	800e914 <iprintf>
 80061c6:	f06f 0305 	mvn.w	r3, #5
 80061ca:	e004      	b.n	80061d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f47f af61 	bne.w	8006096 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	0800ff98 	.word	0x0800ff98
 80061e4:	08010240 	.word	0x08010240
 80061e8:	0800fff8 	.word	0x0800fff8
 80061ec:	08010270 	.word	0x08010270
 80061f0:	08010288 	.word	0x08010288
 80061f4:	080102a4 	.word	0x080102a4
 80061f8:	080102b4 	.word	0x080102b4

080061fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	460b      	mov	r3, r1
 800620c:	80fb      	strh	r3, [r7, #6]
 800620e:	4613      	mov	r3, r2
 8006210:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d108      	bne.n	8006232 <pbuf_copy_partial+0x36>
 8006220:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <pbuf_copy_partial+0xd4>)
 8006222:	f240 420a 	movw	r2, #1034	; 0x40a
 8006226:	492b      	ldr	r1, [pc, #172]	; (80062d4 <pbuf_copy_partial+0xd8>)
 8006228:	482b      	ldr	r0, [pc, #172]	; (80062d8 <pbuf_copy_partial+0xdc>)
 800622a:	f008 fb73 	bl	800e914 <iprintf>
 800622e:	2300      	movs	r3, #0
 8006230:	e04a      	b.n	80062c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <pbuf_copy_partial+0x4e>
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <pbuf_copy_partial+0xd4>)
 800623a:	f240 420b 	movw	r2, #1035	; 0x40b
 800623e:	4927      	ldr	r1, [pc, #156]	; (80062dc <pbuf_copy_partial+0xe0>)
 8006240:	4825      	ldr	r0, [pc, #148]	; (80062d8 <pbuf_copy_partial+0xdc>)
 8006242:	f008 fb67 	bl	800e914 <iprintf>
 8006246:	2300      	movs	r3, #0
 8006248:	e03e      	b.n	80062c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e034      	b.n	80062ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006250:	88bb      	ldrh	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <pbuf_copy_partial+0x70>
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	895b      	ldrh	r3, [r3, #10]
 800625a:	88ba      	ldrh	r2, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d305      	bcc.n	800626c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	895b      	ldrh	r3, [r3, #10]
 8006264:	88ba      	ldrh	r2, [r7, #4]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	80bb      	strh	r3, [r7, #4]
 800626a:	e023      	b.n	80062b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	895a      	ldrh	r2, [r3, #10]
 8006270:	88bb      	ldrh	r3, [r7, #4]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006276:	8b3a      	ldrh	r2, [r7, #24]
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	429a      	cmp	r2, r3
 800627c:	d901      	bls.n	8006282 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	18d0      	adds	r0, r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	88bb      	ldrh	r3, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	8b3a      	ldrh	r2, [r7, #24]
 8006292:	4619      	mov	r1, r3
 8006294:	f008 fb28 	bl	800e8e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006298:	8afa      	ldrh	r2, [r7, #22]
 800629a:	8b3b      	ldrh	r3, [r7, #24]
 800629c:	4413      	add	r3, r2
 800629e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80062a0:	8b7a      	ldrh	r2, [r7, #26]
 80062a2:	8b3b      	ldrh	r3, [r7, #24]
 80062a4:	4413      	add	r3, r2
 80062a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80062a8:	88fa      	ldrh	r2, [r7, #6]
 80062aa:	8b3b      	ldrh	r3, [r7, #24]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <pbuf_copy_partial+0xca>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1c4      	bne.n	8006250 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80062c6:	8afb      	ldrh	r3, [r7, #22]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	0800ff98 	.word	0x0800ff98
 80062d4:	080102e0 	.word	0x080102e0
 80062d8:	0800fff8 	.word	0x0800fff8
 80062dc:	08010300 	.word	0x08010300

080062e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	603a      	str	r2, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
 80062ec:	460b      	mov	r3, r1
 80062ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	8919      	ldrh	r1, [r3, #8]
 80062f4:	88ba      	ldrh	r2, [r7, #4]
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff faa1 	bl	8005840 <pbuf_alloc>
 80062fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <pbuf_clone+0x2a>
    return NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	e011      	b.n	800632e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fea3 	bl	8006058 <pbuf_copy>
 8006312:	4603      	mov	r3, r0
 8006314:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006316:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <pbuf_clone+0x4c>
 800631e:	4b06      	ldr	r3, [pc, #24]	; (8006338 <pbuf_clone+0x58>)
 8006320:	f240 5224 	movw	r2, #1316	; 0x524
 8006324:	4905      	ldr	r1, [pc, #20]	; (800633c <pbuf_clone+0x5c>)
 8006326:	4806      	ldr	r0, [pc, #24]	; (8006340 <pbuf_clone+0x60>)
 8006328:	f008 faf4 	bl	800e914 <iprintf>
  return q;
 800632c:	68fb      	ldr	r3, [r7, #12]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	0800ff98 	.word	0x0800ff98
 800633c:	0801040c 	.word	0x0801040c
 8006340:	0800fff8 	.word	0x0800fff8

08006344 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006348:	f008 fafc 	bl	800e944 <rand>
 800634c:	4603      	mov	r3, r0
 800634e:	b29b      	uxth	r3, r3
 8006350:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006354:	b29b      	uxth	r3, r3
 8006356:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800635a:	b29a      	uxth	r2, r3
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <tcp_init+0x20>)
 800635e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000020 	.word	0x20000020

08006368 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7d1b      	ldrb	r3, [r3, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d105      	bne.n	8006384 <tcp_free+0x1c>
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <tcp_free+0x2c>)
 800637a:	22d4      	movs	r2, #212	; 0xd4
 800637c:	4906      	ldr	r1, [pc, #24]	; (8006398 <tcp_free+0x30>)
 800637e:	4807      	ldr	r0, [pc, #28]	; (800639c <tcp_free+0x34>)
 8006380:	f008 fac8 	bl	800e914 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	2001      	movs	r0, #1
 8006388:	f7fe fec8 	bl	800511c <memp_free>
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	08010498 	.word	0x08010498
 8006398:	080104c8 	.word	0x080104c8
 800639c:	080104dc 	.word	0x080104dc

080063a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7d1b      	ldrb	r3, [r3, #20]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d105      	bne.n	80063bc <tcp_free_listen+0x1c>
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <tcp_free_listen+0x2c>)
 80063b2:	22df      	movs	r2, #223	; 0xdf
 80063b4:	4906      	ldr	r1, [pc, #24]	; (80063d0 <tcp_free_listen+0x30>)
 80063b6:	4807      	ldr	r0, [pc, #28]	; (80063d4 <tcp_free_listen+0x34>)
 80063b8:	f008 faac 	bl	800e914 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	2002      	movs	r0, #2
 80063c0:	f7fe feac 	bl	800511c <memp_free>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	08010498 	.word	0x08010498
 80063d0:	08010504 	.word	0x08010504
 80063d4:	080104dc 	.word	0x080104dc

080063d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80063dc:	f000 fea2 	bl	8007124 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <tcp_tmr+0x28>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <tcp_tmr+0x28>)
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	4b04      	ldr	r3, [pc, #16]	; (8006400 <tcp_tmr+0x28>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80063f8:	f000 fb54 	bl	8006aa4 <tcp_slowtmr>
  }
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200082a1 	.word	0x200082a1

08006404 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <tcp_remove_listener+0x1c>
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <tcp_remove_listener+0x48>)
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	490d      	ldr	r1, [pc, #52]	; (8006450 <tcp_remove_listener+0x4c>)
 800641a:	480e      	ldr	r0, [pc, #56]	; (8006454 <tcp_remove_listener+0x50>)
 800641c:	f008 fa7a 	bl	800e914 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e00a      	b.n	800643c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d102      	bne.n	8006436 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f1      	bne.n	8006426 <tcp_remove_listener+0x22>
    }
  }
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	08010498 	.word	0x08010498
 8006450:	08010520 	.word	0x08010520
 8006454:	080104dc 	.word	0x080104dc

08006458 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <tcp_listen_closed+0x1c>
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <tcp_listen_closed+0x60>)
 8006468:	f240 1211 	movw	r2, #273	; 0x111
 800646c:	4913      	ldr	r1, [pc, #76]	; (80064bc <tcp_listen_closed+0x64>)
 800646e:	4814      	ldr	r0, [pc, #80]	; (80064c0 <tcp_listen_closed+0x68>)
 8006470:	f008 fa50 	bl	800e914 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7d1b      	ldrb	r3, [r3, #20]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d006      	beq.n	800648a <tcp_listen_closed+0x32>
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <tcp_listen_closed+0x60>)
 800647e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006482:	4910      	ldr	r1, [pc, #64]	; (80064c4 <tcp_listen_closed+0x6c>)
 8006484:	480e      	ldr	r0, [pc, #56]	; (80064c0 <tcp_listen_closed+0x68>)
 8006486:	f008 fa45 	bl	800e914 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800648a:	2301      	movs	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e00b      	b.n	80064a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006490:	4a0d      	ldr	r2, [pc, #52]	; (80064c8 <tcp_listen_closed+0x70>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff ffb1 	bl	8006404 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d9f0      	bls.n	8006490 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	08010498 	.word	0x08010498
 80064bc:	08010548 	.word	0x08010548
 80064c0:	080104dc 	.word	0x080104dc
 80064c4:	08010554 	.word	0x08010554
 80064c8:	08012478 	.word	0x08012478

080064cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80064cc:	b5b0      	push	{r4, r5, r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af04      	add	r7, sp, #16
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <tcp_close_shutdown+0x20>
 80064de:	4b63      	ldr	r3, [pc, #396]	; (800666c <tcp_close_shutdown+0x1a0>)
 80064e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80064e4:	4962      	ldr	r1, [pc, #392]	; (8006670 <tcp_close_shutdown+0x1a4>)
 80064e6:	4863      	ldr	r0, [pc, #396]	; (8006674 <tcp_close_shutdown+0x1a8>)
 80064e8:	f008 fa14 	bl	800e914 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d066      	beq.n	80065c0 <tcp_close_shutdown+0xf4>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7d1b      	ldrb	r3, [r3, #20]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d003      	beq.n	8006502 <tcp_close_shutdown+0x36>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7d1b      	ldrb	r3, [r3, #20]
 80064fe:	2b07      	cmp	r3, #7
 8006500:	d15e      	bne.n	80065c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <tcp_close_shutdown+0x48>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006512:	d055      	beq.n	80065c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8b5b      	ldrh	r3, [r3, #26]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <tcp_close_shutdown+0x62>
 8006520:	4b52      	ldr	r3, [pc, #328]	; (800666c <tcp_close_shutdown+0x1a0>)
 8006522:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006526:	4954      	ldr	r1, [pc, #336]	; (8006678 <tcp_close_shutdown+0x1ac>)
 8006528:	4852      	ldr	r0, [pc, #328]	; (8006674 <tcp_close_shutdown+0x1a8>)
 800652a:	f008 f9f3 	bl	800e914 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006536:	687d      	ldr	r5, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	8ad2      	ldrh	r2, [r2, #22]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	8b09      	ldrh	r1, [r1, #24]
 8006544:	9102      	str	r1, [sp, #8]
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	462b      	mov	r3, r5
 800654c:	4622      	mov	r2, r4
 800654e:	4601      	mov	r1, r0
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f004 fe91 	bl	800b278 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f8c6 	bl	80076e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800655c:	4b47      	ldr	r3, [pc, #284]	; (800667c <tcp_close_shutdown+0x1b0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d105      	bne.n	8006572 <tcp_close_shutdown+0xa6>
 8006566:	4b45      	ldr	r3, [pc, #276]	; (800667c <tcp_close_shutdown+0x1b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a43      	ldr	r2, [pc, #268]	; (800667c <tcp_close_shutdown+0x1b0>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e013      	b.n	800659a <tcp_close_shutdown+0xce>
 8006572:	4b42      	ldr	r3, [pc, #264]	; (800667c <tcp_close_shutdown+0x1b0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e00c      	b.n	8006594 <tcp_close_shutdown+0xc8>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d104      	bne.n	800658e <tcp_close_shutdown+0xc2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	60da      	str	r2, [r3, #12]
 800658c:	e005      	b.n	800659a <tcp_close_shutdown+0xce>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ef      	bne.n	800657a <tcp_close_shutdown+0xae>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	4b37      	ldr	r3, [pc, #220]	; (8006680 <tcp_close_shutdown+0x1b4>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <tcp_close_shutdown+0x1b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d102      	bne.n	80065b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80065b0:	f003 fd5e 	bl	800a070 <tcp_trigger_input_pcb_close>
 80065b4:	e002      	b.n	80065bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fed6 	bl	8006368 <tcp_free>
      }
      return ERR_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	e050      	b.n	8006662 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7d1b      	ldrb	r3, [r3, #20]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d03b      	beq.n	8006640 <tcp_close_shutdown+0x174>
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	dc44      	bgt.n	8006656 <tcp_close_shutdown+0x18a>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <tcp_close_shutdown+0x10a>
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d02a      	beq.n	800662a <tcp_close_shutdown+0x15e>
 80065d4:	e03f      	b.n	8006656 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8adb      	ldrh	r3, [r3, #22]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d021      	beq.n	8006622 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80065de:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <tcp_close_shutdown+0x1bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d105      	bne.n	80065f4 <tcp_close_shutdown+0x128>
 80065e8:	4b27      	ldr	r3, [pc, #156]	; (8006688 <tcp_close_shutdown+0x1bc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4a26      	ldr	r2, [pc, #152]	; (8006688 <tcp_close_shutdown+0x1bc>)
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e013      	b.n	800661c <tcp_close_shutdown+0x150>
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <tcp_close_shutdown+0x1bc>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	e00c      	b.n	8006616 <tcp_close_shutdown+0x14a>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d104      	bne.n	8006610 <tcp_close_shutdown+0x144>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	e005      	b.n	800661c <tcp_close_shutdown+0x150>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ef      	bne.n	80065fc <tcp_close_shutdown+0x130>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fea0 	bl	8006368 <tcp_free>
      break;
 8006628:	e01a      	b.n	8006660 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ff14 	bl	8006458 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	4816      	ldr	r0, [pc, #88]	; (800668c <tcp_close_shutdown+0x1c0>)
 8006634:	f001 f8a8 	bl	8007788 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff feb1 	bl	80063a0 <tcp_free_listen>
      break;
 800663e:	e00f      	b.n	8006660 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	480e      	ldr	r0, [pc, #56]	; (800667c <tcp_close_shutdown+0x1b0>)
 8006644:	f001 f8a0 	bl	8007788 <tcp_pcb_remove>
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <tcp_close_shutdown+0x1b4>)
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fe8a 	bl	8006368 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006654:	e004      	b.n	8006660 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f81a 	bl	8006690 <tcp_close_shutdown_fin>
 800665c:	4603      	mov	r3, r0
 800665e:	e000      	b.n	8006662 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bdb0      	pop	{r4, r5, r7, pc}
 800666a:	bf00      	nop
 800666c:	08010498 	.word	0x08010498
 8006670:	0801056c 	.word	0x0801056c
 8006674:	080104dc 	.word	0x080104dc
 8006678:	0801058c 	.word	0x0801058c
 800667c:	20008298 	.word	0x20008298
 8006680:	200082a0 	.word	0x200082a0
 8006684:	200082d8 	.word	0x200082d8
 8006688:	20008290 	.word	0x20008290
 800668c:	20008294 	.word	0x20008294

08006690 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <tcp_close_shutdown_fin+0x1c>
 800669e:	4b2e      	ldr	r3, [pc, #184]	; (8006758 <tcp_close_shutdown_fin+0xc8>)
 80066a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80066a4:	492d      	ldr	r1, [pc, #180]	; (800675c <tcp_close_shutdown_fin+0xcc>)
 80066a6:	482e      	ldr	r0, [pc, #184]	; (8006760 <tcp_close_shutdown_fin+0xd0>)
 80066a8:	f008 f934 	bl	800e914 <iprintf>

  switch (pcb->state) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7d1b      	ldrb	r3, [r3, #20]
 80066b0:	2b07      	cmp	r3, #7
 80066b2:	d020      	beq.n	80066f6 <tcp_close_shutdown_fin+0x66>
 80066b4:	2b07      	cmp	r3, #7
 80066b6:	dc2b      	bgt.n	8006710 <tcp_close_shutdown_fin+0x80>
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d002      	beq.n	80066c2 <tcp_close_shutdown_fin+0x32>
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d00d      	beq.n	80066dc <tcp_close_shutdown_fin+0x4c>
 80066c0:	e026      	b.n	8006710 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f003 fee6 	bl	800a494 <tcp_send_fin>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11f      	bne.n	8006714 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2205      	movs	r2, #5
 80066d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066da:	e01b      	b.n	8006714 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f003 fed9 	bl	800a494 <tcp_send_fin>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d114      	bne.n	8006718 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2205      	movs	r2, #5
 80066f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066f4:	e010      	b.n	8006718 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f003 fecc 	bl	800a494 <tcp_send_fin>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2209      	movs	r2, #9
 800670c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800670e:	e005      	b.n	800671c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e01c      	b.n	800674e <tcp_close_shutdown_fin+0xbe>
      break;
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <tcp_close_shutdown_fin+0x8e>
      break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <tcp_close_shutdown_fin+0x8e>
      break;
 800671c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800671e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f003 fff2 	bl	800a710 <tcp_output>
 800672c:	e00d      	b.n	800674a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d108      	bne.n	800674a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8b5b      	ldrh	r3, [r3, #26]
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e001      	b.n	800674e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800674a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	08010498 	.word	0x08010498
 800675c:	08010548 	.word	0x08010548
 8006760:	080104dc 	.word	0x080104dc

08006764 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <tcp_close+0x22>
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <tcp_close+0x4c>)
 8006774:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006778:	490e      	ldr	r1, [pc, #56]	; (80067b4 <tcp_close+0x50>)
 800677a:	480f      	ldr	r0, [pc, #60]	; (80067b8 <tcp_close+0x54>)
 800677c:	f008 f8ca 	bl	800e914 <iprintf>
 8006780:	f06f 030f 	mvn.w	r3, #15
 8006784:	e00f      	b.n	80067a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7d1b      	ldrb	r3, [r3, #20]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d006      	beq.n	800679c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8b5b      	ldrh	r3, [r3, #26]
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800679c:	2101      	movs	r1, #1
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fe94 	bl	80064cc <tcp_close_shutdown>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	08010498 	.word	0x08010498
 80067b4:	080105a8 	.word	0x080105a8
 80067b8:	080104dc 	.word	0x080104dc

080067bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	; 0x38
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <tcp_abandon+0x20>
 80067cc:	4b52      	ldr	r3, [pc, #328]	; (8006918 <tcp_abandon+0x15c>)
 80067ce:	f240 223d 	movw	r2, #573	; 0x23d
 80067d2:	4952      	ldr	r1, [pc, #328]	; (800691c <tcp_abandon+0x160>)
 80067d4:	4852      	ldr	r0, [pc, #328]	; (8006920 <tcp_abandon+0x164>)
 80067d6:	f008 f89d 	bl	800e914 <iprintf>
 80067da:	e099      	b.n	8006910 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7d1b      	ldrb	r3, [r3, #20]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d106      	bne.n	80067f2 <tcp_abandon+0x36>
 80067e4:	4b4c      	ldr	r3, [pc, #304]	; (8006918 <tcp_abandon+0x15c>)
 80067e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80067ea:	494e      	ldr	r1, [pc, #312]	; (8006924 <tcp_abandon+0x168>)
 80067ec:	484c      	ldr	r0, [pc, #304]	; (8006920 <tcp_abandon+0x164>)
 80067ee:	f008 f891 	bl	800e914 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7d1b      	ldrb	r3, [r3, #20]
 80067f6:	2b0a      	cmp	r3, #10
 80067f8:	d107      	bne.n	800680a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	484a      	ldr	r0, [pc, #296]	; (8006928 <tcp_abandon+0x16c>)
 80067fe:	f000 ffc3 	bl	8007788 <tcp_pcb_remove>
    tcp_free(pcb);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fdb0 	bl	8006368 <tcp_free>
 8006808:	e082      	b.n	8006910 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006816:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7d1b      	ldrb	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d126      	bne.n	8006882 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8adb      	ldrh	r3, [r3, #22]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02e      	beq.n	800689a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800683c:	4b3b      	ldr	r3, [pc, #236]	; (800692c <tcp_abandon+0x170>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d105      	bne.n	8006852 <tcp_abandon+0x96>
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <tcp_abandon+0x170>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a37      	ldr	r2, [pc, #220]	; (800692c <tcp_abandon+0x170>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e013      	b.n	800687a <tcp_abandon+0xbe>
 8006852:	4b36      	ldr	r3, [pc, #216]	; (800692c <tcp_abandon+0x170>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e00c      	b.n	8006874 <tcp_abandon+0xb8>
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d104      	bne.n	800686e <tcp_abandon+0xb2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	60da      	str	r2, [r3, #12]
 800686c:	e005      	b.n	800687a <tcp_abandon+0xbe>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1ef      	bne.n	800685a <tcp_abandon+0x9e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	60da      	str	r2, [r3, #12]
 8006880:	e00b      	b.n	800689a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8adb      	ldrh	r3, [r3, #22]
 800688a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4828      	ldr	r0, [pc, #160]	; (8006930 <tcp_abandon+0x174>)
 8006890:	f000 ff7a 	bl	8007788 <tcp_pcb_remove>
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <tcp_abandon+0x178>)
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fd1c 	bl	80072e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fd13 	bl	80072e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fd0a 	bl	80072e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00e      	beq.n	80068f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	8b12      	ldrh	r2, [r2, #24]
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	460b      	mov	r3, r1
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f004 fcc2 	bl	800b278 <tcp_rst>
    }
    last_state = pcb->state;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7d1b      	ldrb	r3, [r3, #20]
 80068f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fd34 	bl	8006368 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <tcp_abandon+0x154>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f06f 010c 	mvn.w	r1, #12
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
  }
}
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08010498 	.word	0x08010498
 800691c:	080105dc 	.word	0x080105dc
 8006920:	080104dc 	.word	0x080104dc
 8006924:	080105f8 	.word	0x080105f8
 8006928:	2000829c 	.word	0x2000829c
 800692c:	20008290 	.word	0x20008290
 8006930:	20008298 	.word	0x20008298
 8006934:	200082a0 	.word	0x200082a0

08006938 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ff3a 	bl	80067bc <tcp_abandon>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <tcp_update_rcv_ann_wnd+0x1c>
 800695e:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006960:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006964:	4924      	ldr	r1, [pc, #144]	; (80069f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006966:	4825      	ldr	r0, [pc, #148]	; (80069fc <tcp_update_rcv_ann_wnd+0xac>)
 8006968:	f007 ffd4 	bl	800e914 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006974:	4413      	add	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006980:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006984:	bf28      	it	cs
 8006986:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800698a:	b292      	uxth	r2, r2
 800698c:	4413      	add	r3, r2
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	db08      	blt.n	80069a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	e020      	b.n	80069ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd03      	ble.n	80069be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069bc:	e014      	b.n	80069e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d306      	bcc.n	80069e0 <tcp_update_rcv_ann_wnd+0x90>
 80069d2:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80069d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80069d8:	4909      	ldr	r1, [pc, #36]	; (8006a00 <tcp_update_rcv_ann_wnd+0xb0>)
 80069da:	4808      	ldr	r0, [pc, #32]	; (80069fc <tcp_update_rcv_ann_wnd+0xac>)
 80069dc:	f007 ff9a 	bl	800e914 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80069e8:	2300      	movs	r3, #0
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	08010498 	.word	0x08010498
 80069f8:	080106f4 	.word	0x080106f4
 80069fc:	080104dc 	.word	0x080104dc
 8006a00:	08010718 	.word	0x08010718

08006a04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <tcp_recved+0x22>
 8006a16:	4b1f      	ldr	r3, [pc, #124]	; (8006a94 <tcp_recved+0x90>)
 8006a18:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006a1c:	491e      	ldr	r1, [pc, #120]	; (8006a98 <tcp_recved+0x94>)
 8006a1e:	481f      	ldr	r0, [pc, #124]	; (8006a9c <tcp_recved+0x98>)
 8006a20:	f007 ff78 	bl	800e914 <iprintf>
 8006a24:	e032      	b.n	8006a8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7d1b      	ldrb	r3, [r3, #20]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d106      	bne.n	8006a3c <tcp_recved+0x38>
 8006a2e:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <tcp_recved+0x90>)
 8006a30:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006a34:	491a      	ldr	r1, [pc, #104]	; (8006aa0 <tcp_recved+0x9c>)
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <tcp_recved+0x98>)
 8006a38:	f007 ff6c 	bl	800e914 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006a40:	887b      	ldrh	r3, [r7, #2]
 8006a42:	4413      	add	r3, r2
 8006a44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a4c:	d804      	bhi.n	8006a58 <tcp_recved+0x54>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a52:	89fa      	ldrh	r2, [r7, #14]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d204      	bcs.n	8006a62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a60:	e002      	b.n	8006a68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	89fa      	ldrh	r2, [r7, #14]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff71 	bl	8006950 <tcp_update_rcv_ann_wnd>
 8006a6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006a76:	d309      	bcc.n	8006a8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8b5b      	ldrh	r3, [r3, #26]
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f003 fe42 	bl	800a710 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	08010498 	.word	0x08010498
 8006a98:	08010734 	.word	0x08010734
 8006a9c:	080104dc 	.word	0x080104dc
 8006aa0:	0801074c 	.word	0x0801074c

08006aa4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006aa4:	b5b0      	push	{r4, r5, r7, lr}
 8006aa6:	b090      	sub	sp, #64	; 0x40
 8006aa8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006ab0:	4b94      	ldr	r3, [pc, #592]	; (8006d04 <tcp_slowtmr+0x260>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	4a93      	ldr	r2, [pc, #588]	; (8006d04 <tcp_slowtmr+0x260>)
 8006ab8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006aba:	4b93      	ldr	r3, [pc, #588]	; (8006d08 <tcp_slowtmr+0x264>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	4b91      	ldr	r3, [pc, #580]	; (8006d08 <tcp_slowtmr+0x264>)
 8006ac4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006aca:	4b90      	ldr	r3, [pc, #576]	; (8006d0c <tcp_slowtmr+0x268>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006ad0:	e29f      	b.n	8007012 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	7d1b      	ldrb	r3, [r3, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <tcp_slowtmr+0x44>
 8006ada:	4b8d      	ldr	r3, [pc, #564]	; (8006d10 <tcp_slowtmr+0x26c>)
 8006adc:	f240 42be 	movw	r2, #1214	; 0x4be
 8006ae0:	498c      	ldr	r1, [pc, #560]	; (8006d14 <tcp_slowtmr+0x270>)
 8006ae2:	488d      	ldr	r0, [pc, #564]	; (8006d18 <tcp_slowtmr+0x274>)
 8006ae4:	f007 ff16 	bl	800e914 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d106      	bne.n	8006afe <tcp_slowtmr+0x5a>
 8006af0:	4b87      	ldr	r3, [pc, #540]	; (8006d10 <tcp_slowtmr+0x26c>)
 8006af2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006af6:	4989      	ldr	r1, [pc, #548]	; (8006d1c <tcp_slowtmr+0x278>)
 8006af8:	4887      	ldr	r0, [pc, #540]	; (8006d18 <tcp_slowtmr+0x274>)
 8006afa:	f007 ff0b 	bl	800e914 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	7d1b      	ldrb	r3, [r3, #20]
 8006b02:	2b0a      	cmp	r3, #10
 8006b04:	d106      	bne.n	8006b14 <tcp_slowtmr+0x70>
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <tcp_slowtmr+0x26c>)
 8006b08:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006b0c:	4984      	ldr	r1, [pc, #528]	; (8006d20 <tcp_slowtmr+0x27c>)
 8006b0e:	4882      	ldr	r0, [pc, #520]	; (8006d18 <tcp_slowtmr+0x274>)
 8006b10:	f007 ff00 	bl	800e914 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	7f9a      	ldrb	r2, [r3, #30]
 8006b18:	4b7b      	ldr	r3, [pc, #492]	; (8006d08 <tcp_slowtmr+0x264>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d105      	bne.n	8006b2c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006b2a:	e272      	b.n	8007012 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006b2c:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <tcp_slowtmr+0x264>)
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	7d1b      	ldrb	r3, [r3, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d10a      	bne.n	8006b5e <tcp_slowtmr+0xba>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d905      	bls.n	8006b5e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b56:	3301      	adds	r3, #1
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b5c:	e11e      	b.n	8006d9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b64:	2b0b      	cmp	r3, #11
 8006b66:	d905      	bls.n	8006b74 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b72:	e113      	b.n	8006d9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d075      	beq.n	8006c6a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <tcp_slowtmr+0xf0>
 8006b86:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <tcp_slowtmr+0x26c>)
 8006b88:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006b8c:	4965      	ldr	r1, [pc, #404]	; (8006d24 <tcp_slowtmr+0x280>)
 8006b8e:	4862      	ldr	r0, [pc, #392]	; (8006d18 <tcp_slowtmr+0x274>)
 8006b90:	f007 fec0 	bl	800e914 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <tcp_slowtmr+0x106>
 8006b9c:	4b5c      	ldr	r3, [pc, #368]	; (8006d10 <tcp_slowtmr+0x26c>)
 8006b9e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006ba2:	4961      	ldr	r1, [pc, #388]	; (8006d28 <tcp_slowtmr+0x284>)
 8006ba4:	485c      	ldr	r0, [pc, #368]	; (8006d18 <tcp_slowtmr+0x274>)
 8006ba6:	f007 feb5 	bl	800e914 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006bb0:	2b0b      	cmp	r3, #11
 8006bb2:	d905      	bls.n	8006bc0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bbe:	e0ed      	b.n	8006d9c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <tcp_slowtmr+0x288>)
 8006bca:	5cd3      	ldrb	r3, [r2, r3]
 8006bcc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bd4:	7c7a      	ldrb	r2, [r7, #17]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d907      	bls.n	8006bea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006be0:	3301      	adds	r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bf0:	7c7a      	ldrb	r2, [r7, #17]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	f200 80d2 	bhi.w	8006d9c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d108      	bne.n	8006c18 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c08:	f004 fc2a 	bl	800b460 <tcp_zero_window_probe>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d014      	beq.n	8006c3c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006c12:	2300      	movs	r3, #0
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	e011      	b.n	8006c3c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c22:	f003 faef 	bl	800a204 <tcp_split_unsent_seg>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c2e:	f003 fd6f 	bl	800a710 <tcp_output>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80ac 	beq.w	8006d9c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	f200 80a2 	bhi.w	8006d9c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006c68:	e098      	b.n	8006d9c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db0f      	blt.n	8006c94 <tcp_slowtmr+0x1f0>
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d008      	beq.n	8006c94 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b21a      	sxth	r2, r3
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	db7b      	blt.n	8006d9c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca6:	f004 f825 	bl	800acf4 <tcp_rexmit_rto_prepare>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <tcp_slowtmr+0x21c>
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d171      	bne.n	8006d9c <tcp_slowtmr+0x2f8>
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d06d      	beq.n	8006d9c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	7d1b      	ldrb	r3, [r3, #20]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d03a      	beq.n	8006d3e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cce:	2b0c      	cmp	r3, #12
 8006cd0:	bf28      	it	cs
 8006cd2:	230c      	movcs	r3, #12
 8006cd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006cdc:	10db      	asrs	r3, r3, #3
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ce8:	4413      	add	r3, r2
 8006cea:	7efa      	ldrb	r2, [r7, #27]
 8006cec:	4910      	ldr	r1, [pc, #64]	; (8006d30 <tcp_slowtmr+0x28c>)
 8006cee:	5c8a      	ldrb	r2, [r1, r2]
 8006cf0:	4093      	lsls	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	dc1a      	bgt.n	8006d34 <tcp_slowtmr+0x290>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	b21a      	sxth	r2, r3
 8006d02:	e019      	b.n	8006d38 <tcp_slowtmr+0x294>
 8006d04:	2000828c 	.word	0x2000828c
 8006d08:	200082a2 	.word	0x200082a2
 8006d0c:	20008298 	.word	0x20008298
 8006d10:	08010498 	.word	0x08010498
 8006d14:	080107dc 	.word	0x080107dc
 8006d18:	080104dc 	.word	0x080104dc
 8006d1c:	08010808 	.word	0x08010808
 8006d20:	08010834 	.word	0x08010834
 8006d24:	08010864 	.word	0x08010864
 8006d28:	08010898 	.word	0x08010898
 8006d2c:	08012470 	.word	0x08012470
 8006d30:	08012460 	.word	0x08012460
 8006d34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	2200      	movs	r2, #0
 8006d42:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006d50:	4293      	cmp	r3, r2
 8006d52:	bf28      	it	cs
 8006d54:	4613      	movcs	r3, r2
 8006d56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006d58:	8a7b      	ldrh	r3, [r7, #18]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d206      	bcs.n	8006d84 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d98:	f004 f81c 	bl	800add4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	7d1b      	ldrb	r3, [r3, #20]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d111      	bne.n	8006dc8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	8b5b      	ldrh	r3, [r3, #26]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006db0:	4b9d      	ldr	r3, [pc, #628]	; (8007028 <tcp_slowtmr+0x584>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b28      	cmp	r3, #40	; 0x28
 8006dbc:	d904      	bls.n	8006dc8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	7a5b      	ldrb	r3, [r3, #9]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d04c      	beq.n	8006e6e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d003      	beq.n	8006de4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	d144      	bne.n	8006e6e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006de4:	4b90      	ldr	r3, [pc, #576]	; (8007028 <tcp_slowtmr+0x584>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006df8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006dfc:	498b      	ldr	r1, [pc, #556]	; (800702c <tcp_slowtmr+0x588>)
 8006dfe:	fba1 1303 	umull	r1, r3, r1, r3
 8006e02:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d90a      	bls.n	8006e1e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e16:	3301      	adds	r3, #1
 8006e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e1c:	e027      	b.n	8006e6e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e1e:	4b82      	ldr	r3, [pc, #520]	; (8007028 <tcp_slowtmr+0x584>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006e34:	4618      	mov	r0, r3
 8006e36:	4b7e      	ldr	r3, [pc, #504]	; (8007030 <tcp_slowtmr+0x58c>)
 8006e38:	fb00 f303 	mul.w	r3, r0, r3
 8006e3c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006e3e:	497b      	ldr	r1, [pc, #492]	; (800702c <tcp_slowtmr+0x588>)
 8006e40:	fba1 1303 	umull	r1, r3, r1, r3
 8006e44:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d911      	bls.n	8006e6e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e4c:	f004 fac8 	bl	800b3e0 <tcp_keepalive>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006e56:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d011      	beq.n	8006e9a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006e76:	4b6c      	ldr	r3, [pc, #432]	; (8007028 <tcp_slowtmr+0x584>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e86:	4619      	mov	r1, r3
 8006e88:	460b      	mov	r3, r1
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	440b      	add	r3, r1
 8006e8e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e96:	f000 fddb 	bl	8007a50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	7d1b      	ldrb	r3, [r3, #20]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d10b      	bne.n	8006eba <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ea2:	4b61      	ldr	r3, [pc, #388]	; (8007028 <tcp_slowtmr+0x584>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b28      	cmp	r3, #40	; 0x28
 8006eae:	d904      	bls.n	8006eba <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	7d1b      	ldrb	r3, [r3, #20]
 8006ebe:	2b09      	cmp	r3, #9
 8006ec0:	d10b      	bne.n	8006eda <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ec2:	4b59      	ldr	r3, [pc, #356]	; (8007028 <tcp_slowtmr+0x584>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2bf0      	cmp	r3, #240	; 0xf0
 8006ece:	d904      	bls.n	8006eda <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d060      	beq.n	8006fa4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eec:	f000 fbfc 	bl	80076e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d010      	beq.n	8006f18 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006ef6:	4b4f      	ldr	r3, [pc, #316]	; (8007034 <tcp_slowtmr+0x590>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d106      	bne.n	8006f0e <tcp_slowtmr+0x46a>
 8006f00:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <tcp_slowtmr+0x594>)
 8006f02:	f240 526d 	movw	r2, #1389	; 0x56d
 8006f06:	494d      	ldr	r1, [pc, #308]	; (800703c <tcp_slowtmr+0x598>)
 8006f08:	484d      	ldr	r0, [pc, #308]	; (8007040 <tcp_slowtmr+0x59c>)
 8006f0a:	f007 fd03 	bl	800e914 <iprintf>
        prev->next = pcb->next;
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	e00f      	b.n	8006f38 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006f18:	4b46      	ldr	r3, [pc, #280]	; (8007034 <tcp_slowtmr+0x590>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d006      	beq.n	8006f30 <tcp_slowtmr+0x48c>
 8006f22:	4b45      	ldr	r3, [pc, #276]	; (8007038 <tcp_slowtmr+0x594>)
 8006f24:	f240 5271 	movw	r2, #1393	; 0x571
 8006f28:	4946      	ldr	r1, [pc, #280]	; (8007044 <tcp_slowtmr+0x5a0>)
 8006f2a:	4845      	ldr	r0, [pc, #276]	; (8007040 <tcp_slowtmr+0x59c>)
 8006f2c:	f007 fcf2 	bl	800e914 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a3f      	ldr	r2, [pc, #252]	; (8007034 <tcp_slowtmr+0x590>)
 8006f36:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f48:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f50:	8ad2      	ldrh	r2, [r2, #22]
 8006f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f54:	8b09      	ldrh	r1, [r1, #24]
 8006f56:	9102      	str	r1, [sp, #8]
 8006f58:	9201      	str	r2, [sp, #4]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	4622      	mov	r2, r4
 8006f60:	4601      	mov	r1, r0
 8006f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f64:	f004 f988 	bl	800b278 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	7d1b      	ldrb	r3, [r3, #20]
 8006f72:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006f7e:	6838      	ldr	r0, [r7, #0]
 8006f80:	f7ff f9f2 	bl	8006368 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006f84:	4b30      	ldr	r3, [pc, #192]	; (8007048 <tcp_slowtmr+0x5a4>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <tcp_slowtmr+0x4f6>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f06f 010c 	mvn.w	r1, #12
 8006f96:	68b8      	ldr	r0, [r7, #8]
 8006f98:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006f9a:	4b2b      	ldr	r3, [pc, #172]	; (8007048 <tcp_slowtmr+0x5a4>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d037      	beq.n	8007012 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006fa2:	e590      	b.n	8006ac6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	7f1b      	ldrb	r3, [r3, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	7f1a      	ldrb	r2, [r3, #28]
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	7f5b      	ldrb	r3, [r3, #29]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d325      	bcc.n	8007012 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <tcp_slowtmr+0x5a4>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <tcp_slowtmr+0x550>
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe4:	6912      	ldr	r2, [r2, #16]
 8006fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006ff2:	e002      	b.n	8006ffa <tcp_slowtmr+0x556>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006ffa:	4b13      	ldr	r3, [pc, #76]	; (8007048 <tcp_slowtmr+0x5a4>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d000      	beq.n	8007004 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007002:	e560      	b.n	8006ac6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007004:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800700c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700e:	f003 fb7f 	bl	800a710 <tcp_output>
  while (pcb != NULL) {
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f ad5c 	bne.w	8006ad2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <tcp_slowtmr+0x5a8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007024:	e067      	b.n	80070f6 <tcp_slowtmr+0x652>
 8007026:	bf00      	nop
 8007028:	2000828c 	.word	0x2000828c
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	000124f8 	.word	0x000124f8
 8007034:	20008298 	.word	0x20008298
 8007038:	08010498 	.word	0x08010498
 800703c:	080108d0 	.word	0x080108d0
 8007040:	080104dc 	.word	0x080104dc
 8007044:	080108fc 	.word	0x080108fc
 8007048:	200082a0 	.word	0x200082a0
 800704c:	2000829c 	.word	0x2000829c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	7d1b      	ldrb	r3, [r3, #20]
 8007054:	2b0a      	cmp	r3, #10
 8007056:	d006      	beq.n	8007066 <tcp_slowtmr+0x5c2>
 8007058:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <tcp_slowtmr+0x664>)
 800705a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800705e:	492b      	ldr	r1, [pc, #172]	; (800710c <tcp_slowtmr+0x668>)
 8007060:	482b      	ldr	r0, [pc, #172]	; (8007110 <tcp_slowtmr+0x66c>)
 8007062:	f007 fc57 	bl	800e914 <iprintf>
    pcb_remove = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <tcp_slowtmr+0x670>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2bf0      	cmp	r3, #240	; 0xf0
 8007078:	d904      	bls.n	8007084 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800707a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707e:	3301      	adds	r3, #1
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02f      	beq.n	80070ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800708c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800708e:	f000 fb2b 	bl	80076e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007098:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <tcp_slowtmr+0x674>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709e:	429a      	cmp	r2, r3
 80070a0:	d106      	bne.n	80070b0 <tcp_slowtmr+0x60c>
 80070a2:	4b19      	ldr	r3, [pc, #100]	; (8007108 <tcp_slowtmr+0x664>)
 80070a4:	f240 52af 	movw	r2, #1455	; 0x5af
 80070a8:	491c      	ldr	r1, [pc, #112]	; (800711c <tcp_slowtmr+0x678>)
 80070aa:	4819      	ldr	r0, [pc, #100]	; (8007110 <tcp_slowtmr+0x66c>)
 80070ac:	f007 fc32 	bl	800e914 <iprintf>
        prev->next = pcb->next;
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	60da      	str	r2, [r3, #12]
 80070b8:	e00f      	b.n	80070da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80070ba:	4b17      	ldr	r3, [pc, #92]	; (8007118 <tcp_slowtmr+0x674>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d006      	beq.n	80070d2 <tcp_slowtmr+0x62e>
 80070c4:	4b10      	ldr	r3, [pc, #64]	; (8007108 <tcp_slowtmr+0x664>)
 80070c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80070ca:	4915      	ldr	r1, [pc, #84]	; (8007120 <tcp_slowtmr+0x67c>)
 80070cc:	4810      	ldr	r0, [pc, #64]	; (8007110 <tcp_slowtmr+0x66c>)
 80070ce:	f007 fc21 	bl	800e914 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <tcp_slowtmr+0x674>)
 80070d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80070e4:	69f8      	ldr	r0, [r7, #28]
 80070e6:	f7ff f93f 	bl	8006368 <tcp_free>
 80070ea:	e004      	b.n	80070f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1a9      	bne.n	8007050 <tcp_slowtmr+0x5ac>
    }
  }
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3730      	adds	r7, #48	; 0x30
 8007102:	46bd      	mov	sp, r7
 8007104:	bdb0      	pop	{r4, r5, r7, pc}
 8007106:	bf00      	nop
 8007108:	08010498 	.word	0x08010498
 800710c:	08010928 	.word	0x08010928
 8007110:	080104dc 	.word	0x080104dc
 8007114:	2000828c 	.word	0x2000828c
 8007118:	2000829c 	.word	0x2000829c
 800711c:	08010958 	.word	0x08010958
 8007120:	08010980 	.word	0x08010980

08007124 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800712a:	4b2d      	ldr	r3, [pc, #180]	; (80071e0 <tcp_fasttmr+0xbc>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <tcp_fasttmr+0xbc>)
 8007134:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007136:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <tcp_fasttmr+0xc0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800713c:	e048      	b.n	80071d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7f9a      	ldrb	r2, [r3, #30]
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <tcp_fasttmr+0xbc>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d03f      	beq.n	80071ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800714a:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <tcp_fasttmr+0xbc>)
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8b5b      	ldrh	r3, [r3, #26]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d010      	beq.n	8007180 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8b5b      	ldrh	r3, [r3, #26]
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f003 facf 	bl	800a710 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8b5b      	ldrh	r3, [r3, #26]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8b5b      	ldrh	r3, [r3, #26]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8b5b      	ldrh	r3, [r3, #26]
 8007190:	f023 0308 	bic.w	r3, r3, #8
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fa78 	bl	8006690 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <tcp_fasttmr+0xc4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f819 	bl	80071ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <tcp_fasttmr+0xc4>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d000      	beq.n	80071c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80071c2:	e7b8      	b.n	8007136 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	e002      	b.n	80071d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1b3      	bne.n	800713e <tcp_fasttmr+0x1a>
    }
  }
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	200082a2 	.word	0x200082a2
 80071e4:	20008298 	.word	0x20008298
 80071e8:	200082a0 	.word	0x200082a0

080071ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <tcp_process_refused_data+0x22>
 80071fa:	4b37      	ldr	r3, [pc, #220]	; (80072d8 <tcp_process_refused_data+0xec>)
 80071fc:	f240 6209 	movw	r2, #1545	; 0x609
 8007200:	4936      	ldr	r1, [pc, #216]	; (80072dc <tcp_process_refused_data+0xf0>)
 8007202:	4837      	ldr	r0, [pc, #220]	; (80072e0 <tcp_process_refused_data+0xf4>)
 8007204:	f007 fb86 	bl	800e914 <iprintf>
 8007208:	f06f 030f 	mvn.w	r3, #15
 800720c:	e060      	b.n	80072d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007212:	7b5b      	ldrb	r3, [r3, #13]
 8007214:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <tcp_process_refused_data+0x58>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	2300      	movs	r3, #0
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	47a0      	blx	r4
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	e007      	b.n	8007254 <tcp_process_refused_data+0x68>
 8007244:	2300      	movs	r3, #0
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	2000      	movs	r0, #0
 800724c:	f000 f8a4 	bl	8007398 <tcp_recv_null>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d12a      	bne.n	80072b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d033      	beq.n	80072ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800726e:	d005      	beq.n	800727c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007274:	3301      	adds	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <tcp_process_refused_data+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6918      	ldr	r0, [r3, #16]
 8007290:	2300      	movs	r3, #0
 8007292:	2200      	movs	r2, #0
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	47a0      	blx	r4
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
 800729c:	e001      	b.n	80072a2 <tcp_process_refused_data+0xb6>
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80072a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a6:	f113 0f0d 	cmn.w	r3, #13
 80072aa:	d110      	bne.n	80072ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80072ac:	f06f 030c 	mvn.w	r3, #12
 80072b0:	e00e      	b.n	80072d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80072b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072b6:	f113 0f0d 	cmn.w	r3, #13
 80072ba:	d102      	bne.n	80072c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80072bc:	f06f 030c 	mvn.w	r3, #12
 80072c0:	e006      	b.n	80072d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80072c8:	f06f 0304 	mvn.w	r3, #4
 80072cc:	e000      	b.n	80072d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	08010498 	.word	0x08010498
 80072dc:	080109a8 	.word	0x080109a8
 80072e0:	080104dc 	.word	0x080104dc

080072e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80072ec:	e007      	b.n	80072fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f80a 	bl	800730e <tcp_seg_free>
    seg = next;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f4      	bne.n	80072ee <tcp_segs_free+0xa>
  }
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fd6d 	bl	8005e08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	2003      	movs	r0, #3
 8007332:	f7fd fef3 	bl	800511c <memp_free>
  }
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <tcp_seg_copy+0x1c>
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <tcp_seg_copy+0x4c>)
 8007350:	f240 6282 	movw	r2, #1666	; 0x682
 8007354:	490e      	ldr	r1, [pc, #56]	; (8007390 <tcp_seg_copy+0x50>)
 8007356:	480f      	ldr	r0, [pc, #60]	; (8007394 <tcp_seg_copy+0x54>)
 8007358:	f007 fadc 	bl	800e914 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800735c:	2003      	movs	r0, #3
 800735e:	f7fd fe6d 	bl	800503c <memp_malloc>
 8007362:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <tcp_seg_copy+0x2e>
    return NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	e00a      	b.n	8007384 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800736e:	2210      	movs	r2, #16
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f007 fab8 	bl	800e8e8 <memcpy>
  pbuf_ref(cseg->p);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fde3 	bl	8005f48 <pbuf_ref>
  return cseg;
 8007382:	68fb      	ldr	r3, [r7, #12]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	08010498 	.word	0x08010498
 8007390:	080109ec 	.word	0x080109ec
 8007394:	080104dc 	.word	0x080104dc

08007398 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <tcp_recv_null+0x28>
 80073ac:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <tcp_recv_null+0x60>)
 80073ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80073b2:	4912      	ldr	r1, [pc, #72]	; (80073fc <tcp_recv_null+0x64>)
 80073b4:	4812      	ldr	r0, [pc, #72]	; (8007400 <tcp_recv_null+0x68>)
 80073b6:	f007 faad 	bl	800e914 <iprintf>
 80073ba:	f06f 030f 	mvn.w	r3, #15
 80073be:	e016      	b.n	80073ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	891b      	ldrh	r3, [r3, #8]
 80073ca:	4619      	mov	r1, r3
 80073cc:	68b8      	ldr	r0, [r7, #8]
 80073ce:	f7ff fb19 	bl	8006a04 <tcp_recved>
    pbuf_free(p);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fe fd18 	bl	8005e08 <pbuf_free>
 80073d8:	e008      	b.n	80073ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80073da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7ff f9be 	bl	8006764 <tcp_close>
 80073e8:	4603      	mov	r3, r0
 80073ea:	e000      	b.n	80073ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	08010498 	.word	0x08010498
 80073fc:	08010a08 	.word	0x08010a08
 8007400:	080104dc 	.word	0x080104dc

08007404 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800740e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007412:	2b00      	cmp	r3, #0
 8007414:	db01      	blt.n	800741a <tcp_kill_prio+0x16>
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	e000      	b.n	800741c <tcp_kill_prio+0x18>
 800741a:	237f      	movs	r3, #127	; 0x7f
 800741c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d034      	beq.n	800748e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3b01      	subs	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007432:	4b19      	ldr	r3, [pc, #100]	; (8007498 <tcp_kill_prio+0x94>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e01f      	b.n	800747a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	7d5b      	ldrb	r3, [r3, #21]
 800743e:	7afa      	ldrb	r2, [r7, #11]
 8007440:	429a      	cmp	r2, r3
 8007442:	d80c      	bhi.n	800745e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007448:	7afa      	ldrb	r2, [r7, #11]
 800744a:	429a      	cmp	r2, r3
 800744c:	d112      	bne.n	8007474 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <tcp_kill_prio+0x98>)
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	429a      	cmp	r2, r3
 800745c:	d80a      	bhi.n	8007474 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <tcp_kill_prio+0x98>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	7d5b      	ldrb	r3, [r3, #21]
 8007472:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1dc      	bne.n	800743a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007486:	6938      	ldr	r0, [r7, #16]
 8007488:	f7ff fa56 	bl	8006938 <tcp_abort>
 800748c:	e000      	b.n	8007490 <tcp_kill_prio+0x8c>
    return;
 800748e:	bf00      	nop
  }
}
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20008298 	.word	0x20008298
 800749c:	2000828c 	.word	0x2000828c

080074a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d009      	beq.n	80074c4 <tcp_kill_state+0x24>
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d006      	beq.n	80074c4 <tcp_kill_state+0x24>
 80074b6:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <tcp_kill_state+0x80>)
 80074b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80074bc:	4919      	ldr	r1, [pc, #100]	; (8007524 <tcp_kill_state+0x84>)
 80074be:	481a      	ldr	r0, [pc, #104]	; (8007528 <tcp_kill_state+0x88>)
 80074c0:	f007 fa28 	bl	800e914 <iprintf>

  inactivity = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <tcp_kill_state+0x8c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e017      	b.n	8007504 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	7d1b      	ldrb	r3, [r3, #20]
 80074d8:	79fa      	ldrb	r2, [r7, #7]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d10f      	bne.n	80074fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <tcp_kill_state+0x90>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d807      	bhi.n	80074fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <tcp_kill_state+0x90>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e4      	bne.n	80074d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007510:	2100      	movs	r1, #0
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f7ff f952 	bl	80067bc <tcp_abandon>
  }
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	08010498 	.word	0x08010498
 8007524:	08010a24 	.word	0x08010a24
 8007528:	080104dc 	.word	0x080104dc
 800752c:	20008298 	.word	0x20008298
 8007530:	2000828c 	.word	0x2000828c

08007534 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <tcp_kill_timewait+0x58>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e012      	b.n	8007570 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <tcp_kill_timewait+0x5c>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d807      	bhi.n	800756a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <tcp_kill_timewait+0x5c>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e9      	bne.n	800754a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f7ff f9db 	bl	8006938 <tcp_abort>
  }
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	2000829c 	.word	0x2000829c
 8007590:	2000828c 	.word	0x2000828c

08007594 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <tcp_handle_closepend+0x48>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80075a0:	e014      	b.n	80075cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8b5b      	ldrh	r3, [r3, #26]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8b5b      	ldrh	r3, [r3, #26]
 80075b8:	f023 0308 	bic.w	r3, r3, #8
 80075bc:	b29a      	uxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f864 	bl	8006690 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e7      	bne.n	80075a2 <tcp_handle_closepend+0xe>
  }
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20008298 	.word	0x20008298

080075e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075ea:	2001      	movs	r0, #1
 80075ec:	f7fd fd26 	bl	800503c <memp_malloc>
 80075f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d126      	bne.n	8007646 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80075f8:	f7ff ffcc 	bl	8007594 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80075fc:	f7ff ff9a 	bl	8007534 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007600:	2001      	movs	r0, #1
 8007602:	f7fd fd1b 	bl	800503c <memp_malloc>
 8007606:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11b      	bne.n	8007646 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800760e:	2009      	movs	r0, #9
 8007610:	f7ff ff46 	bl	80074a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007614:	2001      	movs	r0, #1
 8007616:	f7fd fd11 	bl	800503c <memp_malloc>
 800761a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d111      	bne.n	8007646 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007622:	2008      	movs	r0, #8
 8007624:	f7ff ff3c 	bl	80074a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007628:	2001      	movs	r0, #1
 800762a:	f7fd fd07 	bl	800503c <memp_malloc>
 800762e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d107      	bne.n	8007646 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fee3 	bl	8007404 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800763e:	2001      	movs	r0, #1
 8007640:	f7fd fcfc 	bl	800503c <memp_malloc>
 8007644:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d03f      	beq.n	80076cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800764c:	229c      	movs	r2, #156	; 0x9c
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f007 f957 	bl	800e904 <memset>
    pcb->prio = prio;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007662:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800766c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007682:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2206      	movs	r2, #6
 8007688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2206      	movs	r2, #6
 8007690:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007698:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <tcp_alloc+0xf8>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <tcp_alloc+0xfc>)
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80076b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <tcp_alloc+0x100>)
 80076c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a07      	ldr	r2, [pc, #28]	; (80076e4 <tcp_alloc+0x104>)
 80076c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2000828c 	.word	0x2000828c
 80076dc:	200082a2 	.word	0x200082a2
 80076e0:	08007399 	.word	0x08007399
 80076e4:	006ddd00 	.word	0x006ddd00

080076e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <tcp_pcb_purge+0x1e>
 80076f6:	4b21      	ldr	r3, [pc, #132]	; (800777c <tcp_pcb_purge+0x94>)
 80076f8:	f640 0251 	movw	r2, #2129	; 0x851
 80076fc:	4920      	ldr	r1, [pc, #128]	; (8007780 <tcp_pcb_purge+0x98>)
 80076fe:	4821      	ldr	r0, [pc, #132]	; (8007784 <tcp_pcb_purge+0x9c>)
 8007700:	f007 f908 	bl	800e914 <iprintf>
 8007704:	e037      	b.n	8007776 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7d1b      	ldrb	r3, [r3, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d033      	beq.n	8007776 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007712:	2b0a      	cmp	r3, #10
 8007714:	d02f      	beq.n	8007776 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800771a:	2b01      	cmp	r3, #1
 800771c:	d02b      	beq.n	8007776 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fb6c 	bl	8005e08 <pbuf_free>
      pcb->refused_data = NULL;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f986 	bl	8007a50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800774a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fdc7 	bl	80072e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fdc2 	bl	80072e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	66da      	str	r2, [r3, #108]	; 0x6c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	08010498 	.word	0x08010498
 8007780:	08010ae4 	.word	0x08010ae4
 8007784:	080104dc 	.word	0x080104dc

08007788 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <tcp_pcb_remove+0x1e>
 8007798:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <tcp_pcb_remove+0x10c>)
 800779a:	f640 0283 	movw	r2, #2179	; 0x883
 800779e:	493e      	ldr	r1, [pc, #248]	; (8007898 <tcp_pcb_remove+0x110>)
 80077a0:	483e      	ldr	r0, [pc, #248]	; (800789c <tcp_pcb_remove+0x114>)
 80077a2:	f007 f8b7 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <tcp_pcb_remove+0x32>
 80077ac:	4b39      	ldr	r3, [pc, #228]	; (8007894 <tcp_pcb_remove+0x10c>)
 80077ae:	f640 0284 	movw	r2, #2180	; 0x884
 80077b2:	493b      	ldr	r1, [pc, #236]	; (80078a0 <tcp_pcb_remove+0x118>)
 80077b4:	4839      	ldr	r0, [pc, #228]	; (800789c <tcp_pcb_remove+0x114>)
 80077b6:	f007 f8ad 	bl	800e914 <iprintf>

  TCP_RMV(pcblist, pcb);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d105      	bne.n	80077d0 <tcp_pcb_remove+0x48>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e013      	b.n	80077f8 <tcp_pcb_remove+0x70>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e00c      	b.n	80077f2 <tcp_pcb_remove+0x6a>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d104      	bne.n	80077ec <tcp_pcb_remove+0x64>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	e005      	b.n	80077f8 <tcp_pcb_remove+0x70>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ef      	bne.n	80077d8 <tcp_pcb_remove+0x50>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80077fe:	6838      	ldr	r0, [r7, #0]
 8007800:	f7ff ff72 	bl	80076e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	7d1b      	ldrb	r3, [r3, #20]
 8007808:	2b0a      	cmp	r3, #10
 800780a:	d013      	beq.n	8007834 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007810:	2b01      	cmp	r3, #1
 8007812:	d00f      	beq.n	8007834 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	8b5b      	ldrh	r3, [r3, #26]
 8007818:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	8b5b      	ldrh	r3, [r3, #26]
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	b29a      	uxth	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800782e:	6838      	ldr	r0, [r7, #0]
 8007830:	f002 ff6e 	bl	800a710 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d020      	beq.n	800787e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <tcp_pcb_remove+0xca>
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <tcp_pcb_remove+0x10c>)
 8007846:	f640 0293 	movw	r2, #2195	; 0x893
 800784a:	4916      	ldr	r1, [pc, #88]	; (80078a4 <tcp_pcb_remove+0x11c>)
 800784c:	4813      	ldr	r0, [pc, #76]	; (800789c <tcp_pcb_remove+0x114>)
 800784e:	f007 f861 	bl	800e914 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	2b00      	cmp	r3, #0
 8007858:	d006      	beq.n	8007868 <tcp_pcb_remove+0xe0>
 800785a:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <tcp_pcb_remove+0x10c>)
 800785c:	f640 0294 	movw	r2, #2196	; 0x894
 8007860:	4911      	ldr	r1, [pc, #68]	; (80078a8 <tcp_pcb_remove+0x120>)
 8007862:	480e      	ldr	r0, [pc, #56]	; (800789c <tcp_pcb_remove+0x114>)
 8007864:	f007 f856 	bl	800e914 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <tcp_pcb_remove+0xf6>
 8007870:	4b08      	ldr	r3, [pc, #32]	; (8007894 <tcp_pcb_remove+0x10c>)
 8007872:	f640 0296 	movw	r2, #2198	; 0x896
 8007876:	490d      	ldr	r1, [pc, #52]	; (80078ac <tcp_pcb_remove+0x124>)
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <tcp_pcb_remove+0x114>)
 800787a:	f007 f84b 	bl	800e914 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2200      	movs	r2, #0
 8007888:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	08010498 	.word	0x08010498
 8007898:	08010b00 	.word	0x08010b00
 800789c:	080104dc 	.word	0x080104dc
 80078a0:	08010b1c 	.word	0x08010b1c
 80078a4:	08010b3c 	.word	0x08010b3c
 80078a8:	08010b54 	.word	0x08010b54
 80078ac:	08010b70 	.word	0x08010b70

080078b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <tcp_next_iss+0x1c>
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <tcp_next_iss+0x38>)
 80078c0:	f640 02af 	movw	r2, #2223	; 0x8af
 80078c4:	4909      	ldr	r1, [pc, #36]	; (80078ec <tcp_next_iss+0x3c>)
 80078c6:	480a      	ldr	r0, [pc, #40]	; (80078f0 <tcp_next_iss+0x40>)
 80078c8:	f007 f824 	bl	800e914 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <tcp_next_iss+0x44>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <tcp_next_iss+0x48>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	4a07      	ldr	r2, [pc, #28]	; (80078f4 <tcp_next_iss+0x44>)
 80078d8:	6013      	str	r3, [r2, #0]
  return iss;
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <tcp_next_iss+0x44>)
 80078dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	08010498 	.word	0x08010498
 80078ec:	08010b88 	.word	0x08010b88
 80078f0:	080104dc 	.word	0x080104dc
 80078f4:	20000024 	.word	0x20000024
 80078f8:	2000828c 	.word	0x2000828c

080078fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <tcp_eff_send_mss_netif+0x22>
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <tcp_eff_send_mss_netif+0x68>)
 8007912:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007916:	4914      	ldr	r1, [pc, #80]	; (8007968 <tcp_eff_send_mss_netif+0x6c>)
 8007918:	4814      	ldr	r0, [pc, #80]	; (800796c <tcp_eff_send_mss_netif+0x70>)
 800791a:	f006 fffb 	bl	800e914 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007924:	89fb      	ldrh	r3, [r7, #14]
 8007926:	e019      	b.n	800795c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800792c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d012      	beq.n	800795a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007934:	2328      	movs	r3, #40	; 0x28
 8007936:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007938:	8afa      	ldrh	r2, [r7, #22]
 800793a:	8abb      	ldrh	r3, [r7, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d904      	bls.n	800794a <tcp_eff_send_mss_netif+0x4e>
 8007940:	8afa      	ldrh	r2, [r7, #22]
 8007942:	8abb      	ldrh	r3, [r7, #20]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	e000      	b.n	800794c <tcp_eff_send_mss_netif+0x50>
 800794a:	2300      	movs	r3, #0
 800794c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800794e:	8a7a      	ldrh	r2, [r7, #18]
 8007950:	89fb      	ldrh	r3, [r7, #14]
 8007952:	4293      	cmp	r3, r2
 8007954:	bf28      	it	cs
 8007956:	4613      	movcs	r3, r2
 8007958:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800795a:	89fb      	ldrh	r3, [r7, #14]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	08010498 	.word	0x08010498
 8007968:	08010ba4 	.word	0x08010ba4
 800796c:	080104dc 	.word	0x080104dc

08007970 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d119      	bne.n	80079b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007984:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007986:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800798a:	4910      	ldr	r1, [pc, #64]	; (80079cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800798c:	4810      	ldr	r0, [pc, #64]	; (80079d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800798e:	f006 ffc1 	bl	800e914 <iprintf>

  while (pcb != NULL) {
 8007992:	e011      	b.n	80079b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d108      	bne.n	80079b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7fe ffc6 	bl	8006938 <tcp_abort>
      pcb = next;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e002      	b.n	80079b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1ea      	bne.n	8007994 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	08010498 	.word	0x08010498
 80079cc:	08010bcc 	.word	0x08010bcc
 80079d0:	080104dc 	.word	0x080104dc

080079d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d02a      	beq.n	8007a3a <tcp_netif_ip_addr_changed+0x66>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d026      	beq.n	8007a3a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80079ec:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <tcp_netif_ip_addr_changed+0x70>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffbc 	bl	8007970 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <tcp_netif_ip_addr_changed+0x74>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff ffb6 	bl	8007970 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d017      	beq.n	8007a3a <tcp_netif_ip_addr_changed+0x66>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d013      	beq.n	8007a3a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <tcp_netif_ip_addr_changed+0x78>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e00c      	b.n	8007a34 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d103      	bne.n	8007a2e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ef      	bne.n	8007a1a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20008298 	.word	0x20008298
 8007a48:	20008290 	.word	0x20008290
 8007a4c:	20008294 	.word	0x20008294

08007a50 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff fc3d 	bl	80072e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b08d      	sub	sp, #52	; 0x34
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <tcp_input+0x1c>
 8007a88:	4b9b      	ldr	r3, [pc, #620]	; (8007cf8 <tcp_input+0x280>)
 8007a8a:	2283      	movs	r2, #131	; 0x83
 8007a8c:	499b      	ldr	r1, [pc, #620]	; (8007cfc <tcp_input+0x284>)
 8007a8e:	489c      	ldr	r0, [pc, #624]	; (8007d00 <tcp_input+0x288>)
 8007a90:	f006 ff40 	bl	800e914 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4a9a      	ldr	r2, [pc, #616]	; (8007d04 <tcp_input+0x28c>)
 8007a9a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	895b      	ldrh	r3, [r3, #10]
 8007aa0:	2b13      	cmp	r3, #19
 8007aa2:	f240 83d1 	bls.w	8008248 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007aa6:	4b98      	ldr	r3, [pc, #608]	; (8007d08 <tcp_input+0x290>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	4a97      	ldr	r2, [pc, #604]	; (8007d08 <tcp_input+0x290>)
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f005 ff8f 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 83c7 	bne.w	800824c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007abe:	4b92      	ldr	r3, [pc, #584]	; (8007d08 <tcp_input+0x290>)
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007ac6:	2be0      	cmp	r3, #224	; 0xe0
 8007ac8:	f000 83c0 	beq.w	800824c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007acc:	4b8d      	ldr	r3, [pc, #564]	; (8007d04 <tcp_input+0x28c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	899b      	ldrh	r3, [r3, #12]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fc fe39 	bl	800474c <lwip_htons>
 8007ada:	4603      	mov	r3, r0
 8007adc:	0b1b      	lsrs	r3, r3, #12
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ae6:	7cbb      	ldrb	r3, [r7, #18]
 8007ae8:	2b13      	cmp	r3, #19
 8007aea:	f240 83b1 	bls.w	8008250 <tcp_input+0x7d8>
 8007aee:	7cbb      	ldrb	r3, [r7, #18]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	891b      	ldrh	r3, [r3, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	f200 83aa 	bhi.w	8008250 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007afc:	7cbb      	ldrb	r3, [r7, #18]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b14      	subs	r3, #20
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	4b81      	ldr	r3, [pc, #516]	; (8007d0c <tcp_input+0x294>)
 8007b06:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007b08:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <tcp_input+0x298>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	895a      	ldrh	r2, [r3, #10]
 8007b12:	7cbb      	ldrb	r3, [r7, #18]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d309      	bcc.n	8007b2e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007b1a:	4b7c      	ldr	r3, [pc, #496]	; (8007d0c <tcp_input+0x294>)
 8007b1c:	881a      	ldrh	r2, [r3, #0]
 8007b1e:	4b7d      	ldr	r3, [pc, #500]	; (8007d14 <tcp_input+0x29c>)
 8007b20:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007b22:	7cbb      	ldrb	r3, [r7, #18]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fe f8e8 	bl	8005cfc <pbuf_remove_header>
 8007b2c:	e04e      	b.n	8007bcc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <tcp_input+0xca>
 8007b36:	4b70      	ldr	r3, [pc, #448]	; (8007cf8 <tcp_input+0x280>)
 8007b38:	22c2      	movs	r2, #194	; 0xc2
 8007b3a:	4977      	ldr	r1, [pc, #476]	; (8007d18 <tcp_input+0x2a0>)
 8007b3c:	4870      	ldr	r0, [pc, #448]	; (8007d00 <tcp_input+0x288>)
 8007b3e:	f006 fee9 	bl	800e914 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007b42:	2114      	movs	r1, #20
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe f8d9 	bl	8005cfc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	895a      	ldrh	r2, [r3, #10]
 8007b4e:	4b71      	ldr	r3, [pc, #452]	; (8007d14 <tcp_input+0x29c>)
 8007b50:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007b52:	4b6e      	ldr	r3, [pc, #440]	; (8007d0c <tcp_input+0x294>)
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	4b6f      	ldr	r3, [pc, #444]	; (8007d14 <tcp_input+0x29c>)
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007b5e:	4b6d      	ldr	r3, [pc, #436]	; (8007d14 <tcp_input+0x29c>)
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7fe f8c9 	bl	8005cfc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	895b      	ldrh	r3, [r3, #10]
 8007b70:	8a3a      	ldrh	r2, [r7, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	f200 836e 	bhi.w	8008254 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4a64      	ldr	r2, [pc, #400]	; (8007d10 <tcp_input+0x298>)
 8007b80:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	8a3a      	ldrh	r2, [r7, #16]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe f8b6 	bl	8005cfc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	891a      	ldrh	r2, [r3, #8]
 8007b94:	8a3b      	ldrh	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	895b      	ldrh	r3, [r3, #10]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <tcp_input+0x13a>
 8007ba6:	4b54      	ldr	r3, [pc, #336]	; (8007cf8 <tcp_input+0x280>)
 8007ba8:	22df      	movs	r2, #223	; 0xdf
 8007baa:	495c      	ldr	r1, [pc, #368]	; (8007d1c <tcp_input+0x2a4>)
 8007bac:	4854      	ldr	r0, [pc, #336]	; (8007d00 <tcp_input+0x288>)
 8007bae:	f006 feb1 	bl	800e914 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	891a      	ldrh	r2, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	891b      	ldrh	r3, [r3, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d005      	beq.n	8007bcc <tcp_input+0x154>
 8007bc0:	4b4d      	ldr	r3, [pc, #308]	; (8007cf8 <tcp_input+0x280>)
 8007bc2:	22e0      	movs	r2, #224	; 0xe0
 8007bc4:	4956      	ldr	r1, [pc, #344]	; (8007d20 <tcp_input+0x2a8>)
 8007bc6:	484e      	ldr	r0, [pc, #312]	; (8007d00 <tcp_input+0x288>)
 8007bc8:	f006 fea4 	bl	800e914 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007bcc:	4b4d      	ldr	r3, [pc, #308]	; (8007d04 <tcp_input+0x28c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4a4b      	ldr	r2, [pc, #300]	; (8007d04 <tcp_input+0x28c>)
 8007bd6:	6814      	ldr	r4, [r2, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fc fdb7 	bl	800474c <lwip_htons>
 8007bde:	4603      	mov	r3, r0
 8007be0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007be2:	4b48      	ldr	r3, [pc, #288]	; (8007d04 <tcp_input+0x28c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	885b      	ldrh	r3, [r3, #2]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4a46      	ldr	r2, [pc, #280]	; (8007d04 <tcp_input+0x28c>)
 8007bec:	6814      	ldr	r4, [r2, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fc fdac 	bl	800474c <lwip_htons>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007bf8:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <tcp_input+0x28c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	4a41      	ldr	r2, [pc, #260]	; (8007d04 <tcp_input+0x28c>)
 8007c00:	6814      	ldr	r4, [r2, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fc fdb7 	bl	8004776 <lwip_htonl>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	6063      	str	r3, [r4, #4]
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	4a45      	ldr	r2, [pc, #276]	; (8007d24 <tcp_input+0x2ac>)
 8007c10:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007c12:	4b3c      	ldr	r3, [pc, #240]	; (8007d04 <tcp_input+0x28c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a3a      	ldr	r2, [pc, #232]	; (8007d04 <tcp_input+0x28c>)
 8007c1a:	6814      	ldr	r4, [r2, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fc fdaa 	bl	8004776 <lwip_htonl>
 8007c22:	4603      	mov	r3, r0
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	4a3f      	ldr	r2, [pc, #252]	; (8007d28 <tcp_input+0x2b0>)
 8007c2a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007c2c:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <tcp_input+0x28c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	89db      	ldrh	r3, [r3, #14]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	4a33      	ldr	r2, [pc, #204]	; (8007d04 <tcp_input+0x28c>)
 8007c36:	6814      	ldr	r4, [r2, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fc fd87 	bl	800474c <lwip_htons>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007c42:	4b30      	ldr	r3, [pc, #192]	; (8007d04 <tcp_input+0x28c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	899b      	ldrh	r3, [r3, #12]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fc fd7e 	bl	800474c <lwip_htons>
 8007c50:	4603      	mov	r3, r0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b34      	ldr	r3, [pc, #208]	; (8007d2c <tcp_input+0x2b4>)
 8007c5c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	891a      	ldrh	r2, [r3, #8]
 8007c62:	4b33      	ldr	r3, [pc, #204]	; (8007d30 <tcp_input+0x2b8>)
 8007c64:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007c66:	4b31      	ldr	r3, [pc, #196]	; (8007d2c <tcp_input+0x2b4>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00c      	beq.n	8007c8c <tcp_input+0x214>
    tcplen++;
 8007c72:	4b2f      	ldr	r3, [pc, #188]	; (8007d30 <tcp_input+0x2b8>)
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	3301      	adds	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	4b2d      	ldr	r3, [pc, #180]	; (8007d30 <tcp_input+0x2b8>)
 8007c7c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	891a      	ldrh	r2, [r3, #8]
 8007c82:	4b2b      	ldr	r3, [pc, #172]	; (8007d30 <tcp_input+0x2b8>)
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	f200 82e6 	bhi.w	8008258 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c90:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <tcp_input+0x2bc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	61fb      	str	r3, [r7, #28]
 8007c96:	e09d      	b.n	8007dd4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	7d1b      	ldrb	r3, [r3, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <tcp_input+0x234>
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <tcp_input+0x280>)
 8007ca2:	22fb      	movs	r2, #251	; 0xfb
 8007ca4:	4924      	ldr	r1, [pc, #144]	; (8007d38 <tcp_input+0x2c0>)
 8007ca6:	4816      	ldr	r0, [pc, #88]	; (8007d00 <tcp_input+0x288>)
 8007ca8:	f006 fe34 	bl	800e914 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	7d1b      	ldrb	r3, [r3, #20]
 8007cb0:	2b0a      	cmp	r3, #10
 8007cb2:	d105      	bne.n	8007cc0 <tcp_input+0x248>
 8007cb4:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <tcp_input+0x280>)
 8007cb6:	22fc      	movs	r2, #252	; 0xfc
 8007cb8:	4920      	ldr	r1, [pc, #128]	; (8007d3c <tcp_input+0x2c4>)
 8007cba:	4811      	ldr	r0, [pc, #68]	; (8007d00 <tcp_input+0x288>)
 8007cbc:	f006 fe2a 	bl	800e914 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	7d1b      	ldrb	r3, [r3, #20]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d105      	bne.n	8007cd4 <tcp_input+0x25c>
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <tcp_input+0x280>)
 8007cca:	22fd      	movs	r2, #253	; 0xfd
 8007ccc:	491c      	ldr	r1, [pc, #112]	; (8007d40 <tcp_input+0x2c8>)
 8007cce:	480c      	ldr	r0, [pc, #48]	; (8007d00 <tcp_input+0x288>)
 8007cd0:	f006 fe20 	bl	800e914 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	7a1b      	ldrb	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d033      	beq.n	8007d44 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	7a1a      	ldrb	r2, [r3, #8]
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <tcp_input+0x290>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ce8:	3301      	adds	r3, #1
 8007cea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d029      	beq.n	8007d44 <tcp_input+0x2cc>
      prev = pcb;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	61bb      	str	r3, [r7, #24]
      continue;
 8007cf4:	e06b      	b.n	8007dce <tcp_input+0x356>
 8007cf6:	bf00      	nop
 8007cf8:	08010c00 	.word	0x08010c00
 8007cfc:	08010c34 	.word	0x08010c34
 8007d00:	08010c4c 	.word	0x08010c4c
 8007d04:	200082b4 	.word	0x200082b4
 8007d08:	20004d1c 	.word	0x20004d1c
 8007d0c:	200082b8 	.word	0x200082b8
 8007d10:	200082bc 	.word	0x200082bc
 8007d14:	200082ba 	.word	0x200082ba
 8007d18:	08010c74 	.word	0x08010c74
 8007d1c:	08010c84 	.word	0x08010c84
 8007d20:	08010c90 	.word	0x08010c90
 8007d24:	200082c4 	.word	0x200082c4
 8007d28:	200082c8 	.word	0x200082c8
 8007d2c:	200082d0 	.word	0x200082d0
 8007d30:	200082ce 	.word	0x200082ce
 8007d34:	20008298 	.word	0x20008298
 8007d38:	08010cb0 	.word	0x08010cb0
 8007d3c:	08010cd8 	.word	0x08010cd8
 8007d40:	08010d04 	.word	0x08010d04
    }

    if (pcb->remote_port == tcphdr->src &&
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	8b1a      	ldrh	r2, [r3, #24]
 8007d48:	4b72      	ldr	r3, [pc, #456]	; (8007f14 <tcp_input+0x49c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d13a      	bne.n	8007dca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	8ada      	ldrh	r2, [r3, #22]
 8007d58:	4b6e      	ldr	r3, [pc, #440]	; (8007f14 <tcp_input+0x49c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d132      	bne.n	8007dca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	4b6b      	ldr	r3, [pc, #428]	; (8007f18 <tcp_input+0x4a0>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d12c      	bne.n	8007dca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b68      	ldr	r3, [pc, #416]	; (8007f18 <tcp_input+0x4a0>)
 8007d76:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d126      	bne.n	8007dca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d106      	bne.n	8007d94 <tcp_input+0x31c>
 8007d86:	4b65      	ldr	r3, [pc, #404]	; (8007f1c <tcp_input+0x4a4>)
 8007d88:	f240 120d 	movw	r2, #269	; 0x10d
 8007d8c:	4964      	ldr	r1, [pc, #400]	; (8007f20 <tcp_input+0x4a8>)
 8007d8e:	4865      	ldr	r0, [pc, #404]	; (8007f24 <tcp_input+0x4ac>)
 8007d90:	f006 fdc0 	bl	800e914 <iprintf>
      if (prev != NULL) {
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <tcp_input+0x338>
        prev->next = pcb->next;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007da2:	4b61      	ldr	r3, [pc, #388]	; (8007f28 <tcp_input+0x4b0>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007daa:	4a5f      	ldr	r2, [pc, #380]	; (8007f28 <tcp_input+0x4b0>)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d111      	bne.n	8007dde <tcp_input+0x366>
 8007dba:	4b58      	ldr	r3, [pc, #352]	; (8007f1c <tcp_input+0x4a4>)
 8007dbc:	f240 1215 	movw	r2, #277	; 0x115
 8007dc0:	495a      	ldr	r1, [pc, #360]	; (8007f2c <tcp_input+0x4b4>)
 8007dc2:	4858      	ldr	r0, [pc, #352]	; (8007f24 <tcp_input+0x4ac>)
 8007dc4:	f006 fda6 	bl	800e914 <iprintf>
      break;
 8007dc8:	e009      	b.n	8007dde <tcp_input+0x366>
    }
    prev = pcb;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f47f af5e 	bne.w	8007c98 <tcp_input+0x220>
 8007ddc:	e000      	b.n	8007de0 <tcp_input+0x368>
      break;
 8007dde:	bf00      	nop
  }

  if (pcb == NULL) {
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f040 80aa 	bne.w	8007f3c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007de8:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <tcp_input+0x4b8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	61fb      	str	r3, [r7, #28]
 8007dee:	e03f      	b.n	8007e70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	7d1b      	ldrb	r3, [r3, #20]
 8007df4:	2b0a      	cmp	r3, #10
 8007df6:	d006      	beq.n	8007e06 <tcp_input+0x38e>
 8007df8:	4b48      	ldr	r3, [pc, #288]	; (8007f1c <tcp_input+0x4a4>)
 8007dfa:	f240 121f 	movw	r2, #287	; 0x11f
 8007dfe:	494d      	ldr	r1, [pc, #308]	; (8007f34 <tcp_input+0x4bc>)
 8007e00:	4848      	ldr	r0, [pc, #288]	; (8007f24 <tcp_input+0x4ac>)
 8007e02:	f006 fd87 	bl	800e914 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	7a1b      	ldrb	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	7a1a      	ldrb	r2, [r3, #8]
 8007e12:	4b41      	ldr	r3, [pc, #260]	; (8007f18 <tcp_input+0x4a0>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d122      	bne.n	8007e68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	8b1a      	ldrh	r2, [r3, #24]
 8007e26:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <tcp_input+0x49c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d11b      	bne.n	8007e6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	8ada      	ldrh	r2, [r3, #22]
 8007e36:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <tcp_input+0x49c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	885b      	ldrh	r3, [r3, #2]
 8007e3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d113      	bne.n	8007e6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	4b34      	ldr	r3, [pc, #208]	; (8007f18 <tcp_input+0x4a0>)
 8007e48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10d      	bne.n	8007e6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <tcp_input+0x4a0>)
 8007e54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d107      	bne.n	8007e6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007e5a:	69f8      	ldr	r0, [r7, #28]
 8007e5c:	f000 fb56 	bl	800850c <tcp_timewait_input>
        }
        pbuf_free(p);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fd ffd1 	bl	8005e08 <pbuf_free>
        return;
 8007e66:	e1fd      	b.n	8008264 <tcp_input+0x7ec>
        continue;
 8007e68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1bc      	bne.n	8007df0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e7a:	4b2f      	ldr	r3, [pc, #188]	; (8007f38 <tcp_input+0x4c0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e02a      	b.n	8007ed8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	7a1b      	ldrb	r3, [r3, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00c      	beq.n	8007ea4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	7a1a      	ldrb	r2, [r3, #8]
 8007e8e:	4b22      	ldr	r3, [pc, #136]	; (8007f18 <tcp_input+0x4a0>)
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e96:	3301      	adds	r3, #1
 8007e98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d002      	beq.n	8007ea4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	61bb      	str	r3, [r7, #24]
        continue;
 8007ea2:	e016      	b.n	8007ed2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	8ada      	ldrh	r2, [r3, #22]
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <tcp_input+0x49c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d10c      	bne.n	8007ece <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <tcp_input+0x4a0>)
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d00f      	beq.n	8007ee0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <tcp_input+0x46a>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1d1      	bne.n	8007e82 <tcp_input+0x40a>
 8007ede:	e000      	b.n	8007ee2 <tcp_input+0x46a>
            break;
 8007ee0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d029      	beq.n	8007f3c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <tcp_input+0x4c0>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007efe:	4a0e      	ldr	r2, [pc, #56]	; (8007f38 <tcp_input+0x4c0>)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007f04:	6978      	ldr	r0, [r7, #20]
 8007f06:	f000 fa03 	bl	8008310 <tcp_listen_input>
      }
      pbuf_free(p);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fd ff7c 	bl	8005e08 <pbuf_free>
      return;
 8007f10:	e1a8      	b.n	8008264 <tcp_input+0x7ec>
 8007f12:	bf00      	nop
 8007f14:	200082b4 	.word	0x200082b4
 8007f18:	20004d1c 	.word	0x20004d1c
 8007f1c:	08010c00 	.word	0x08010c00
 8007f20:	08010d2c 	.word	0x08010d2c
 8007f24:	08010c4c 	.word	0x08010c4c
 8007f28:	20008298 	.word	0x20008298
 8007f2c:	08010d58 	.word	0x08010d58
 8007f30:	2000829c 	.word	0x2000829c
 8007f34:	08010d84 	.word	0x08010d84
 8007f38:	20008294 	.word	0x20008294
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8158 	beq.w	80081f4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007f44:	4b95      	ldr	r3, [pc, #596]	; (800819c <tcp_input+0x724>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	891a      	ldrh	r2, [r3, #8]
 8007f4e:	4b93      	ldr	r3, [pc, #588]	; (800819c <tcp_input+0x724>)
 8007f50:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007f52:	4a92      	ldr	r2, [pc, #584]	; (800819c <tcp_input+0x724>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007f58:	4b91      	ldr	r3, [pc, #580]	; (80081a0 <tcp_input+0x728>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a8f      	ldr	r2, [pc, #572]	; (800819c <tcp_input+0x724>)
 8007f5e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007f60:	4b90      	ldr	r3, [pc, #576]	; (80081a4 <tcp_input+0x72c>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007f66:	4b90      	ldr	r3, [pc, #576]	; (80081a8 <tcp_input+0x730>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007f6c:	4b8f      	ldr	r3, [pc, #572]	; (80081ac <tcp_input+0x734>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007f72:	4b8f      	ldr	r3, [pc, #572]	; (80081b0 <tcp_input+0x738>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7b5b      	ldrb	r3, [r3, #13]
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d017      	beq.n	8007fc4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f94:	69f8      	ldr	r0, [r7, #28]
 8007f96:	f7ff f929 	bl	80071ec <tcp_process_refused_data>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f113 0f0d 	cmn.w	r3, #13
 8007fa0:	d007      	beq.n	8007fb2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007faa:	4b82      	ldr	r3, [pc, #520]	; (80081b4 <tcp_input+0x73c>)
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d008      	beq.n	8007fc4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80e3 	bne.w	8008182 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007fbc:	69f8      	ldr	r0, [r7, #28]
 8007fbe:	f003 f9ad 	bl	800b31c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007fc2:	e0de      	b.n	8008182 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007fc4:	4a7c      	ldr	r2, [pc, #496]	; (80081b8 <tcp_input+0x740>)
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007fca:	69f8      	ldr	r0, [r7, #28]
 8007fcc:	f000 fb18 	bl	8008600 <tcp_process>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007fd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fd8:	f113 0f0d 	cmn.w	r3, #13
 8007fdc:	f000 80d3 	beq.w	8008186 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007fe0:	4b71      	ldr	r3, [pc, #452]	; (80081a8 <tcp_input+0x730>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d015      	beq.n	8008018 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d008      	beq.n	8008008 <tcp_input+0x590>
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	6912      	ldr	r2, [r2, #16]
 8008000:	f06f 010d 	mvn.w	r1, #13
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	486c      	ldr	r0, [pc, #432]	; (80081bc <tcp_input+0x744>)
 800800c:	f7ff fbbc 	bl	8007788 <tcp_pcb_remove>
        tcp_free(pcb);
 8008010:	69f8      	ldr	r0, [r7, #28]
 8008012:	f7fe f9a9 	bl	8006368 <tcp_free>
 8008016:	e0da      	b.n	80081ce <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800801c:	4b63      	ldr	r3, [pc, #396]	; (80081ac <tcp_input+0x734>)
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01d      	beq.n	8008060 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008024:	4b61      	ldr	r3, [pc, #388]	; (80081ac <tcp_input+0x734>)
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <tcp_input+0x5d2>
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	6910      	ldr	r0, [r2, #16]
 800803e:	89fa      	ldrh	r2, [r7, #14]
 8008040:	69f9      	ldr	r1, [r7, #28]
 8008042:	4798      	blx	r3
 8008044:	4603      	mov	r3, r0
 8008046:	74fb      	strb	r3, [r7, #19]
 8008048:	e001      	b.n	800804e <tcp_input+0x5d6>
 800804a:	2300      	movs	r3, #0
 800804c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800804e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008052:	f113 0f0d 	cmn.w	r3, #13
 8008056:	f000 8098 	beq.w	800818a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800805a:	4b54      	ldr	r3, [pc, #336]	; (80081ac <tcp_input+0x734>)
 800805c:	2200      	movs	r2, #0
 800805e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008060:	69f8      	ldr	r0, [r7, #28]
 8008062:	f000 f915 	bl	8008290 <tcp_input_delayed_close>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	f040 8090 	bne.w	800818e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800806e:	4b4d      	ldr	r3, [pc, #308]	; (80081a4 <tcp_input+0x72c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d041      	beq.n	80080fa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <tcp_input+0x614>
 800807e:	4b50      	ldr	r3, [pc, #320]	; (80081c0 <tcp_input+0x748>)
 8008080:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008084:	494f      	ldr	r1, [pc, #316]	; (80081c4 <tcp_input+0x74c>)
 8008086:	4850      	ldr	r0, [pc, #320]	; (80081c8 <tcp_input+0x750>)
 8008088:	f006 fc44 	bl	800e914 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	8b5b      	ldrh	r3, [r3, #26]
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008098:	4b42      	ldr	r3, [pc, #264]	; (80081a4 <tcp_input+0x72c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd feb3 	bl	8005e08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80080a2:	69f8      	ldr	r0, [r7, #28]
 80080a4:	f7fe fc48 	bl	8006938 <tcp_abort>
            goto aborted;
 80080a8:	e091      	b.n	80081ce <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <tcp_input+0x656>
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	6918      	ldr	r0, [r3, #16]
 80080be:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <tcp_input+0x72c>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	69f9      	ldr	r1, [r7, #28]
 80080c6:	47a0      	blx	r4
 80080c8:	4603      	mov	r3, r0
 80080ca:	74fb      	strb	r3, [r7, #19]
 80080cc:	e008      	b.n	80080e0 <tcp_input+0x668>
 80080ce:	4b35      	ldr	r3, [pc, #212]	; (80081a4 <tcp_input+0x72c>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	69f9      	ldr	r1, [r7, #28]
 80080d6:	2000      	movs	r0, #0
 80080d8:	f7ff f95e 	bl	8007398 <tcp_recv_null>
 80080dc:	4603      	mov	r3, r0
 80080de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80080e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080e4:	f113 0f0d 	cmn.w	r3, #13
 80080e8:	d053      	beq.n	8008192 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80080ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80080f2:	4b2c      	ldr	r3, [pc, #176]	; (80081a4 <tcp_input+0x72c>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80080fa:	4b2b      	ldr	r3, [pc, #172]	; (80081a8 <tcp_input+0x730>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d030      	beq.n	8008168 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008112:	7b5a      	ldrb	r2, [r3, #13]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008118:	f042 0220 	orr.w	r2, r2, #32
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	735a      	strb	r2, [r3, #13]
 8008120:	e022      	b.n	8008168 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008126:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800812a:	d005      	beq.n	8008138 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008130:	3301      	adds	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00b      	beq.n	800815a <tcp_input+0x6e2>
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	6918      	ldr	r0, [r3, #16]
 800814c:	2300      	movs	r3, #0
 800814e:	2200      	movs	r2, #0
 8008150:	69f9      	ldr	r1, [r7, #28]
 8008152:	47a0      	blx	r4
 8008154:	4603      	mov	r3, r0
 8008156:	74fb      	strb	r3, [r7, #19]
 8008158:	e001      	b.n	800815e <tcp_input+0x6e6>
 800815a:	2300      	movs	r3, #0
 800815c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800815e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008162:	f113 0f0d 	cmn.w	r3, #13
 8008166:	d016      	beq.n	8008196 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <tcp_input+0x740>)
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800816e:	69f8      	ldr	r0, [r7, #28]
 8008170:	f000 f88e 	bl	8008290 <tcp_input_delayed_close>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d128      	bne.n	80081cc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800817a:	69f8      	ldr	r0, [r7, #28]
 800817c:	f002 fac8 	bl	800a710 <tcp_output>
 8008180:	e025      	b.n	80081ce <tcp_input+0x756>
        goto aborted;
 8008182:	bf00      	nop
 8008184:	e023      	b.n	80081ce <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008186:	bf00      	nop
 8008188:	e021      	b.n	80081ce <tcp_input+0x756>
              goto aborted;
 800818a:	bf00      	nop
 800818c:	e01f      	b.n	80081ce <tcp_input+0x756>
          goto aborted;
 800818e:	bf00      	nop
 8008190:	e01d      	b.n	80081ce <tcp_input+0x756>
            goto aborted;
 8008192:	bf00      	nop
 8008194:	e01b      	b.n	80081ce <tcp_input+0x756>
              goto aborted;
 8008196:	bf00      	nop
 8008198:	e019      	b.n	80081ce <tcp_input+0x756>
 800819a:	bf00      	nop
 800819c:	200082a4 	.word	0x200082a4
 80081a0:	200082b4 	.word	0x200082b4
 80081a4:	200082d4 	.word	0x200082d4
 80081a8:	200082d1 	.word	0x200082d1
 80081ac:	200082cc 	.word	0x200082cc
 80081b0:	200082d0 	.word	0x200082d0
 80081b4:	200082ce 	.word	0x200082ce
 80081b8:	200082d8 	.word	0x200082d8
 80081bc:	20008298 	.word	0x20008298
 80081c0:	08010c00 	.word	0x08010c00
 80081c4:	08010db4 	.word	0x08010db4
 80081c8:	08010c4c 	.word	0x08010c4c
          goto aborted;
 80081cc:	bf00      	nop
    tcp_input_pcb = NULL;
 80081ce:	4b27      	ldr	r3, [pc, #156]	; (800826c <tcp_input+0x7f4>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80081d4:	4b26      	ldr	r3, [pc, #152]	; (8008270 <tcp_input+0x7f8>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80081da:	4b26      	ldr	r3, [pc, #152]	; (8008274 <tcp_input+0x7fc>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d03f      	beq.n	8008262 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80081e2:	4b24      	ldr	r3, [pc, #144]	; (8008274 <tcp_input+0x7fc>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fd fe0e 	bl	8005e08 <pbuf_free>
      inseg.p = NULL;
 80081ec:	4b21      	ldr	r3, [pc, #132]	; (8008274 <tcp_input+0x7fc>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80081f2:	e036      	b.n	8008262 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <tcp_input+0x800>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	899b      	ldrh	r3, [r3, #12]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fc faa5 	bl	800474c <lwip_htons>
 8008202:	4603      	mov	r3, r0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d118      	bne.n	8008240 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800820e:	4b1b      	ldr	r3, [pc, #108]	; (800827c <tcp_input+0x804>)
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <tcp_input+0x808>)
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <tcp_input+0x80c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <tcp_input+0x800>)
 8008220:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008222:	885b      	ldrh	r3, [r3, #2]
 8008224:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008226:	4a14      	ldr	r2, [pc, #80]	; (8008278 <tcp_input+0x800>)
 8008228:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800822a:	8812      	ldrh	r2, [r2, #0]
 800822c:	b292      	uxth	r2, r2
 800822e:	9202      	str	r2, [sp, #8]
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <tcp_input+0x810>)
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4b15      	ldr	r3, [pc, #84]	; (800828c <tcp_input+0x814>)
 8008238:	4602      	mov	r2, r0
 800823a:	2000      	movs	r0, #0
 800823c:	f003 f81c 	bl	800b278 <tcp_rst>
    pbuf_free(p);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fd fde1 	bl	8005e08 <pbuf_free>
  return;
 8008246:	e00c      	b.n	8008262 <tcp_input+0x7ea>
    goto dropped;
 8008248:	bf00      	nop
 800824a:	e006      	b.n	800825a <tcp_input+0x7e2>
    goto dropped;
 800824c:	bf00      	nop
 800824e:	e004      	b.n	800825a <tcp_input+0x7e2>
    goto dropped;
 8008250:	bf00      	nop
 8008252:	e002      	b.n	800825a <tcp_input+0x7e2>
      goto dropped;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <tcp_input+0x7e2>
      goto dropped;
 8008258:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fd fdd4 	bl	8005e08 <pbuf_free>
 8008260:	e000      	b.n	8008264 <tcp_input+0x7ec>
  return;
 8008262:	bf00      	nop
}
 8008264:	3724      	adds	r7, #36	; 0x24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd90      	pop	{r4, r7, pc}
 800826a:	bf00      	nop
 800826c:	200082d8 	.word	0x200082d8
 8008270:	200082d4 	.word	0x200082d4
 8008274:	200082a4 	.word	0x200082a4
 8008278:	200082b4 	.word	0x200082b4
 800827c:	200082c8 	.word	0x200082c8
 8008280:	200082ce 	.word	0x200082ce
 8008284:	200082c4 	.word	0x200082c4
 8008288:	20004d2c 	.word	0x20004d2c
 800828c:	20004d30 	.word	0x20004d30

08008290 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <tcp_input_delayed_close+0x1c>
 800829e:	4b17      	ldr	r3, [pc, #92]	; (80082fc <tcp_input_delayed_close+0x6c>)
 80082a0:	f240 225a 	movw	r2, #602	; 0x25a
 80082a4:	4916      	ldr	r1, [pc, #88]	; (8008300 <tcp_input_delayed_close+0x70>)
 80082a6:	4817      	ldr	r0, [pc, #92]	; (8008304 <tcp_input_delayed_close+0x74>)
 80082a8:	f006 fb34 	bl	800e914 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80082ac:	4b16      	ldr	r3, [pc, #88]	; (8008308 <tcp_input_delayed_close+0x78>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01c      	beq.n	80082f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8b5b      	ldrh	r3, [r3, #26]
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10d      	bne.n	80082e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <tcp_input_delayed_close+0x50>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6912      	ldr	r2, [r2, #16]
 80082d8:	f06f 010e 	mvn.w	r1, #14
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	480a      	ldr	r0, [pc, #40]	; (800830c <tcp_input_delayed_close+0x7c>)
 80082e4:	f7ff fa50 	bl	8007788 <tcp_pcb_remove>
    tcp_free(pcb);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fe f83d 	bl	8006368 <tcp_free>
    return 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	08010c00 	.word	0x08010c00
 8008300:	08010dd0 	.word	0x08010dd0
 8008304:	08010c4c 	.word	0x08010c4c
 8008308:	200082d1 	.word	0x200082d1
 800830c:	20008298 	.word	0x20008298

08008310 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b08b      	sub	sp, #44	; 0x2c
 8008314:	af04      	add	r7, sp, #16
 8008316:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008318:	4b6f      	ldr	r3, [pc, #444]	; (80084d8 <tcp_listen_input+0x1c8>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 80d2 	bne.w	80084ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d106      	bne.n	800833a <tcp_listen_input+0x2a>
 800832c:	4b6b      	ldr	r3, [pc, #428]	; (80084dc <tcp_listen_input+0x1cc>)
 800832e:	f240 2281 	movw	r2, #641	; 0x281
 8008332:	496b      	ldr	r1, [pc, #428]	; (80084e0 <tcp_listen_input+0x1d0>)
 8008334:	486b      	ldr	r0, [pc, #428]	; (80084e4 <tcp_listen_input+0x1d4>)
 8008336:	f006 faed 	bl	800e914 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800833a:	4b67      	ldr	r3, [pc, #412]	; (80084d8 <tcp_listen_input+0x1c8>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	2b00      	cmp	r3, #0
 8008344:	d019      	beq.n	800837a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008346:	4b68      	ldr	r3, [pc, #416]	; (80084e8 <tcp_listen_input+0x1d8>)
 8008348:	6819      	ldr	r1, [r3, #0]
 800834a:	4b68      	ldr	r3, [pc, #416]	; (80084ec <tcp_listen_input+0x1dc>)
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	4b67      	ldr	r3, [pc, #412]	; (80084f0 <tcp_listen_input+0x1e0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008356:	4b67      	ldr	r3, [pc, #412]	; (80084f4 <tcp_listen_input+0x1e4>)
 8008358:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800835a:	885b      	ldrh	r3, [r3, #2]
 800835c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800835e:	4a65      	ldr	r2, [pc, #404]	; (80084f4 <tcp_listen_input+0x1e4>)
 8008360:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008362:	8812      	ldrh	r2, [r2, #0]
 8008364:	b292      	uxth	r2, r2
 8008366:	9202      	str	r2, [sp, #8]
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	4b63      	ldr	r3, [pc, #396]	; (80084f8 <tcp_listen_input+0x1e8>)
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4b63      	ldr	r3, [pc, #396]	; (80084fc <tcp_listen_input+0x1ec>)
 8008370:	4602      	mov	r2, r0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 ff80 	bl	800b278 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008378:	e0a9      	b.n	80084ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800837a:	4b57      	ldr	r3, [pc, #348]	; (80084d8 <tcp_listen_input+0x1c8>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80a3 	beq.w	80084ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7d5b      	ldrb	r3, [r3, #21]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff f927 	bl	80075e0 <tcp_alloc>
 8008392:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d111      	bne.n	80083be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <tcp_listen_input+0xa8>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6910      	ldr	r0, [r2, #16]
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	2100      	movs	r1, #0
 80083b0:	4798      	blx	r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
      return;
 80083b6:	e08b      	b.n	80084d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80083b8:	23f0      	movs	r3, #240	; 0xf0
 80083ba:	73bb      	strb	r3, [r7, #14]
      return;
 80083bc:	e088      	b.n	80084d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80083be:	4b50      	ldr	r3, [pc, #320]	; (8008500 <tcp_listen_input+0x1f0>)
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80083c6:	4b4e      	ldr	r3, [pc, #312]	; (8008500 <tcp_listen_input+0x1f0>)
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8ada      	ldrh	r2, [r3, #22]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80083d6:	4b47      	ldr	r3, [pc, #284]	; (80084f4 <tcp_listen_input+0x1e4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2203      	movs	r2, #3
 80083e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80083e8:	4b41      	ldr	r3, [pc, #260]	; (80084f0 <tcp_listen_input+0x1e0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80083fa:	6978      	ldr	r0, [r7, #20]
 80083fc:	f7ff fa58 	bl	80078b0 <tcp_next_iss>
 8008400:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800841a:	4b35      	ldr	r3, [pc, #212]	; (80084f0 <tcp_listen_input+0x1e0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	1e5a      	subs	r2, r3, #1
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	7a5b      	ldrb	r3, [r3, #9]
 8008436:	f003 030c 	and.w	r3, r3, #12
 800843a:	b2da      	uxtb	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7a1a      	ldrb	r2, [r3, #8]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008448:	4b2e      	ldr	r3, [pc, #184]	; (8008504 <tcp_listen_input+0x1f4>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	4a2c      	ldr	r2, [pc, #176]	; (8008504 <tcp_listen_input+0x1f4>)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	f003 f8d1 	bl	800b5fc <tcp_timer_needed>
 800845a:	4b2b      	ldr	r3, [pc, #172]	; (8008508 <tcp_listen_input+0x1f8>)
 800845c:	2201      	movs	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008460:	6978      	ldr	r0, [r7, #20]
 8008462:	f001 fd8f 	bl	8009f84 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008466:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <tcp_listen_input+0x1e4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	89db      	ldrh	r3, [r3, #14]
 800846c:	b29a      	uxth	r2, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f005 f80d 	bl	800d4a8 <ip4_route>
 800848e:	4601      	mov	r1, r0
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	3304      	adds	r3, #4
 8008494:	461a      	mov	r2, r3
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff fa30 	bl	80078fc <tcp_eff_send_mss_netif>
 800849c:	4603      	mov	r3, r0
 800849e:	461a      	mov	r2, r3
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80084a4:	2112      	movs	r1, #18
 80084a6:	6978      	ldr	r0, [r7, #20]
 80084a8:	f002 f844 	bl	800a534 <tcp_enqueue_flags>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80084b8:	2100      	movs	r1, #0
 80084ba:	6978      	ldr	r0, [r7, #20]
 80084bc:	f7fe f97e 	bl	80067bc <tcp_abandon>
      return;
 80084c0:	e006      	b.n	80084d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80084c2:	6978      	ldr	r0, [r7, #20]
 80084c4:	f002 f924 	bl	800a710 <tcp_output>
  return;
 80084c8:	e001      	b.n	80084ce <tcp_listen_input+0x1be>
    return;
 80084ca:	bf00      	nop
 80084cc:	e000      	b.n	80084d0 <tcp_listen_input+0x1c0>
  return;
 80084ce:	bf00      	nop
}
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd90      	pop	{r4, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200082d0 	.word	0x200082d0
 80084dc:	08010c00 	.word	0x08010c00
 80084e0:	08010df8 	.word	0x08010df8
 80084e4:	08010c4c 	.word	0x08010c4c
 80084e8:	200082c8 	.word	0x200082c8
 80084ec:	200082ce 	.word	0x200082ce
 80084f0:	200082c4 	.word	0x200082c4
 80084f4:	200082b4 	.word	0x200082b4
 80084f8:	20004d2c 	.word	0x20004d2c
 80084fc:	20004d30 	.word	0x20004d30
 8008500:	20004d1c 	.word	0x20004d1c
 8008504:	20008298 	.word	0x20008298
 8008508:	200082a0 	.word	0x200082a0

0800850c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af04      	add	r7, sp, #16
 8008512:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008514:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <tcp_timewait_input+0xc8>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d153      	bne.n	80085c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <tcp_timewait_input+0x28>
 8008526:	4b2c      	ldr	r3, [pc, #176]	; (80085d8 <tcp_timewait_input+0xcc>)
 8008528:	f240 22ee 	movw	r2, #750	; 0x2ee
 800852c:	492b      	ldr	r1, [pc, #172]	; (80085dc <tcp_timewait_input+0xd0>)
 800852e:	482c      	ldr	r0, [pc, #176]	; (80085e0 <tcp_timewait_input+0xd4>)
 8008530:	f006 f9f0 	bl	800e914 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008534:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <tcp_timewait_input+0xc8>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d02a      	beq.n	8008596 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008540:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <tcp_timewait_input+0xd8>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	db2d      	blt.n	80085aa <tcp_timewait_input+0x9e>
 800854e:	4b25      	ldr	r3, [pc, #148]	; (80085e4 <tcp_timewait_input+0xd8>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800855a:	440b      	add	r3, r1
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc23      	bgt.n	80085aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <tcp_timewait_input+0xdc>)
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <tcp_timewait_input+0xe0>)
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <tcp_timewait_input+0xd8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008572:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <tcp_timewait_input+0xe4>)
 8008574:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008576:	885b      	ldrh	r3, [r3, #2]
 8008578:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800857a:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <tcp_timewait_input+0xe4>)
 800857c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800857e:	8812      	ldrh	r2, [r2, #0]
 8008580:	b292      	uxth	r2, r2
 8008582:	9202      	str	r2, [sp, #8]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <tcp_timewait_input+0xe8>)
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <tcp_timewait_input+0xec>)
 800858c:	4602      	mov	r2, r0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f002 fe72 	bl	800b278 <tcp_rst>
      return;
 8008594:	e01b      	b.n	80085ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <tcp_timewait_input+0xc8>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80085a2:	4b16      	ldr	r3, [pc, #88]	; (80085fc <tcp_timewait_input+0xf0>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80085aa:	4b10      	ldr	r3, [pc, #64]	; (80085ec <tcp_timewait_input+0xe0>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00c      	beq.n	80085cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8b5b      	ldrh	r3, [r3, #26]
 80085b6:	f043 0302 	orr.w	r3, r3, #2
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f002 f8a5 	bl	800a710 <tcp_output>
  }
  return;
 80085c6:	e001      	b.n	80085cc <tcp_timewait_input+0xc0>
    return;
 80085c8:	bf00      	nop
 80085ca:	e000      	b.n	80085ce <tcp_timewait_input+0xc2>
  return;
 80085cc:	bf00      	nop
}
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200082d0 	.word	0x200082d0
 80085d8:	08010c00 	.word	0x08010c00
 80085dc:	08010e18 	.word	0x08010e18
 80085e0:	08010c4c 	.word	0x08010c4c
 80085e4:	200082c4 	.word	0x200082c4
 80085e8:	200082c8 	.word	0x200082c8
 80085ec:	200082ce 	.word	0x200082ce
 80085f0:	200082b4 	.word	0x200082b4
 80085f4:	20004d2c 	.word	0x20004d2c
 80085f8:	20004d30 	.word	0x20004d30
 80085fc:	2000828c 	.word	0x2000828c

08008600 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b08d      	sub	sp, #52	; 0x34
 8008604:	af04      	add	r7, sp, #16
 8008606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <tcp_process+0x24>
 8008616:	4b9d      	ldr	r3, [pc, #628]	; (800888c <tcp_process+0x28c>)
 8008618:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800861c:	499c      	ldr	r1, [pc, #624]	; (8008890 <tcp_process+0x290>)
 800861e:	489d      	ldr	r0, [pc, #628]	; (8008894 <tcp_process+0x294>)
 8008620:	f006 f978 	bl	800e914 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008624:	4b9c      	ldr	r3, [pc, #624]	; (8008898 <tcp_process+0x298>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	d04e      	beq.n	80086ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7d1b      	ldrb	r3, [r3, #20]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d108      	bne.n	800864a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800863c:	4b97      	ldr	r3, [pc, #604]	; (800889c <tcp_process+0x29c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d123      	bne.n	800868c <tcp_process+0x8c>
        acceptable = 1;
 8008644:	2301      	movs	r3, #1
 8008646:	76fb      	strb	r3, [r7, #27]
 8008648:	e020      	b.n	800868c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800864e:	4b94      	ldr	r3, [pc, #592]	; (80088a0 <tcp_process+0x2a0>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d102      	bne.n	800865c <tcp_process+0x5c>
        acceptable = 1;
 8008656:	2301      	movs	r3, #1
 8008658:	76fb      	strb	r3, [r7, #27]
 800865a:	e017      	b.n	800868c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800865c:	4b90      	ldr	r3, [pc, #576]	; (80088a0 <tcp_process+0x2a0>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	db10      	blt.n	800868c <tcp_process+0x8c>
 800866a:	4b8d      	ldr	r3, [pc, #564]	; (80088a0 <tcp_process+0x2a0>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008676:	440b      	add	r3, r1
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	dc06      	bgt.n	800868c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	8b5b      	ldrh	r3, [r3, #26]
 8008682:	f043 0302 	orr.w	r3, r3, #2
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800868c:	7efb      	ldrb	r3, [r7, #27]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01b      	beq.n	80086ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7d1b      	ldrb	r3, [r3, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <tcp_process+0xa8>
 800869a:	4b7c      	ldr	r3, [pc, #496]	; (800888c <tcp_process+0x28c>)
 800869c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80086a0:	4980      	ldr	r1, [pc, #512]	; (80088a4 <tcp_process+0x2a4>)
 80086a2:	487c      	ldr	r0, [pc, #496]	; (8008894 <tcp_process+0x294>)
 80086a4:	f006 f936 	bl	800e914 <iprintf>
      recv_flags |= TF_RESET;
 80086a8:	4b7f      	ldr	r3, [pc, #508]	; (80088a8 <tcp_process+0x2a8>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f043 0308 	orr.w	r3, r3, #8
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	4b7d      	ldr	r3, [pc, #500]	; (80088a8 <tcp_process+0x2a8>)
 80086b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8b5b      	ldrh	r3, [r3, #26]
 80086ba:	f023 0301 	bic.w	r3, r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80086c4:	f06f 030d 	mvn.w	r3, #13
 80086c8:	e37a      	b.n	8008dc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e378      	b.n	8008dc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80086ce:	4b72      	ldr	r3, [pc, #456]	; (8008898 <tcp_process+0x298>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <tcp_process+0xfc>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7d1b      	ldrb	r3, [r3, #20]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d00c      	beq.n	80086fc <tcp_process+0xfc>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7d1b      	ldrb	r3, [r3, #20]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d008      	beq.n	80086fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	8b5b      	ldrh	r3, [r3, #26]
 80086ee:	f043 0302 	orr.w	r3, r3, #2
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e361      	b.n	8008dc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8b5b      	ldrh	r3, [r3, #26]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	d103      	bne.n	8008710 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008708:	4b68      	ldr	r3, [pc, #416]	; (80088ac <tcp_process+0x2ac>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fc2f 	bl	8009f84 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7d1b      	ldrb	r3, [r3, #20]
 800872a:	3b02      	subs	r3, #2
 800872c:	2b07      	cmp	r3, #7
 800872e:	f200 8337 	bhi.w	8008da0 <tcp_process+0x7a0>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <tcp_process+0x138>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	08008759 	.word	0x08008759
 800873c:	08008989 	.word	0x08008989
 8008740:	08008b01 	.word	0x08008b01
 8008744:	08008b2b 	.word	0x08008b2b
 8008748:	08008c4f 	.word	0x08008c4f
 800874c:	08008b01 	.word	0x08008b01
 8008750:	08008cdb 	.word	0x08008cdb
 8008754:	08008d6b 	.word	0x08008d6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008758:	4b4f      	ldr	r3, [pc, #316]	; (8008898 <tcp_process+0x298>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80e4 	beq.w	800892e <tcp_process+0x32e>
 8008766:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <tcp_process+0x298>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 80dd 	beq.w	800892e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	4b48      	ldr	r3, [pc, #288]	; (800889c <tcp_process+0x29c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	f040 80d5 	bne.w	800892e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008784:	4b46      	ldr	r3, [pc, #280]	; (80088a0 <tcp_process+0x2a0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008796:	4b41      	ldr	r3, [pc, #260]	; (800889c <tcp_process+0x29c>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800879e:	4b44      	ldr	r3, [pc, #272]	; (80088b0 <tcp_process+0x2b0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	89db      	ldrh	r3, [r3, #14]
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80087b8:	4b39      	ldr	r3, [pc, #228]	; (80088a0 <tcp_process+0x2a0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2204      	movs	r2, #4
 80087c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f004 fe69 	bl	800d4a8 <ip4_route>
 80087d6:	4601      	mov	r1, r0
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	461a      	mov	r2, r3
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff f88c 	bl	80078fc <tcp_eff_send_mss_netif>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087f0:	009a      	lsls	r2, r3, #2
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf38      	it	cc
 8008800:	460b      	movcc	r3, r1
 8008802:	429a      	cmp	r2, r3
 8008804:	d204      	bcs.n	8008810 <tcp_process+0x210>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	b29b      	uxth	r3, r3
 800880e:	e00d      	b.n	800882c <tcp_process+0x22c>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	f241 121c 	movw	r2, #4380	; 0x111c
 800881a:	4293      	cmp	r3, r2
 800881c:	d904      	bls.n	8008828 <tcp_process+0x228>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	e001      	b.n	800882c <tcp_process+0x22c>
 8008828:	f241 131c 	movw	r3, #4380	; 0x111c
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <tcp_process+0x24a>
 800883c:	4b13      	ldr	r3, [pc, #76]	; (800888c <tcp_process+0x28c>)
 800883e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008842:	491c      	ldr	r1, [pc, #112]	; (80088b4 <tcp_process+0x2b4>)
 8008844:	4813      	ldr	r0, [pc, #76]	; (8008894 <tcp_process+0x294>)
 8008846:	f006 f865 	bl	800e914 <iprintf>
        --pcb->snd_queuelen;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d12a      	bne.n	80088bc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <tcp_process+0x280>
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <tcp_process+0x28c>)
 8008874:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008878:	490f      	ldr	r1, [pc, #60]	; (80088b8 <tcp_process+0x2b8>)
 800887a:	4806      	ldr	r0, [pc, #24]	; (8008894 <tcp_process+0x294>)
 800887c:	f006 f84a 	bl	800e914 <iprintf>
          pcb->unsent = rseg->next;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	66da      	str	r2, [r3, #108]	; 0x6c
 8008888:	e01c      	b.n	80088c4 <tcp_process+0x2c4>
 800888a:	bf00      	nop
 800888c:	08010c00 	.word	0x08010c00
 8008890:	08010e38 	.word	0x08010e38
 8008894:	08010c4c 	.word	0x08010c4c
 8008898:	200082d0 	.word	0x200082d0
 800889c:	200082c8 	.word	0x200082c8
 80088a0:	200082c4 	.word	0x200082c4
 80088a4:	08010e54 	.word	0x08010e54
 80088a8:	200082d1 	.word	0x200082d1
 80088ac:	2000828c 	.word	0x2000828c
 80088b0:	200082b4 	.word	0x200082b4
 80088b4:	08010e74 	.word	0x08010e74
 80088b8:	08010e8c 	.word	0x08010e8c
        } else {
          pcb->unacked = rseg->next;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80088c4:	69f8      	ldr	r0, [r7, #28]
 80088c6:	f7fe fd22 	bl	800730e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80088da:	e006      	b.n	80088ea <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <tcp_process+0x30a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6910      	ldr	r0, [r2, #16]
 80088fe:	2200      	movs	r2, #0
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	4603      	mov	r3, r0
 8008906:	76bb      	strb	r3, [r7, #26]
 8008908:	e001      	b.n	800890e <tcp_process+0x30e>
 800890a:	2300      	movs	r3, #0
 800890c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800890e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008912:	f113 0f0d 	cmn.w	r3, #13
 8008916:	d102      	bne.n	800891e <tcp_process+0x31e>
          return ERR_ABRT;
 8008918:	f06f 030c 	mvn.w	r3, #12
 800891c:	e250      	b.n	8008dc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8b5b      	ldrh	r3, [r3, #26]
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800892c:	e23a      	b.n	8008da4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800892e:	4b98      	ldr	r3, [pc, #608]	; (8008b90 <tcp_process+0x590>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8234 	beq.w	8008da4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800893c:	4b95      	ldr	r3, [pc, #596]	; (8008b94 <tcp_process+0x594>)
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	4b95      	ldr	r3, [pc, #596]	; (8008b98 <tcp_process+0x598>)
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	4b95      	ldr	r3, [pc, #596]	; (8008b9c <tcp_process+0x59c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800894c:	4b94      	ldr	r3, [pc, #592]	; (8008ba0 <tcp_process+0x5a0>)
 800894e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008954:	4a92      	ldr	r2, [pc, #584]	; (8008ba0 <tcp_process+0x5a0>)
 8008956:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008958:	8812      	ldrh	r2, [r2, #0]
 800895a:	b292      	uxth	r2, r2
 800895c:	9202      	str	r2, [sp, #8]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	4b90      	ldr	r3, [pc, #576]	; (8008ba4 <tcp_process+0x5a4>)
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4b90      	ldr	r3, [pc, #576]	; (8008ba8 <tcp_process+0x5a8>)
 8008966:	4602      	mov	r2, r0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f002 fc85 	bl	800b278 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008974:	2b05      	cmp	r3, #5
 8008976:	f200 8215 	bhi.w	8008da4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f002 fa4f 	bl	800ae24 <tcp_rexmit_rto>
      break;
 8008986:	e20d      	b.n	8008da4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008988:	4b81      	ldr	r3, [pc, #516]	; (8008b90 <tcp_process+0x590>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80a1 	beq.w	8008ad8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008996:	4b7f      	ldr	r3, [pc, #508]	; (8008b94 <tcp_process+0x594>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	db7e      	blt.n	8008aa4 <tcp_process+0x4a4>
 80089a6:	4b7b      	ldr	r3, [pc, #492]	; (8008b94 <tcp_process+0x594>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dc77      	bgt.n	8008aa4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2204      	movs	r2, #4
 80089b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80089c2:	23fa      	movs	r3, #250	; 0xfa
 80089c4:	76bb      	strb	r3, [r7, #26]
 80089c6:	e01d      	b.n	8008a04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <tcp_process+0x3e0>
 80089d2:	4b76      	ldr	r3, [pc, #472]	; (8008bac <tcp_process+0x5ac>)
 80089d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80089d8:	4975      	ldr	r1, [pc, #468]	; (8008bb0 <tcp_process+0x5b0>)
 80089da:	4876      	ldr	r0, [pc, #472]	; (8008bb4 <tcp_process+0x5b4>)
 80089dc:	f005 ff9a 	bl	800e914 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <tcp_process+0x400>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6910      	ldr	r0, [r2, #16]
 80089f4:	2200      	movs	r2, #0
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	76bb      	strb	r3, [r7, #26]
 80089fe:	e001      	b.n	8008a04 <tcp_process+0x404>
 8008a00:	23f0      	movs	r3, #240	; 0xf0
 8008a02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008a04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008a0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008a10:	f113 0f0d 	cmn.w	r3, #13
 8008a14:	d002      	beq.n	8008a1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fd ff8e 	bl	8006938 <tcp_abort>
            }
            return ERR_ABRT;
 8008a1c:	f06f 030c 	mvn.w	r3, #12
 8008a20:	e1ce      	b.n	8008dc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fae0 	bl	8008fe8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008a28:	4b63      	ldr	r3, [pc, #396]	; (8008bb8 <tcp_process+0x5b8>)
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <tcp_process+0x43c>
            recv_acked--;
 8008a30:	4b61      	ldr	r3, [pc, #388]	; (8008bb8 <tcp_process+0x5b8>)
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b5f      	ldr	r3, [pc, #380]	; (8008bb8 <tcp_process+0x5b8>)
 8008a3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a40:	009a      	lsls	r2, r3, #2
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf38      	it	cc
 8008a50:	460b      	movcc	r3, r1
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d204      	bcs.n	8008a60 <tcp_process+0x460>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	e00d      	b.n	8008a7c <tcp_process+0x47c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d904      	bls.n	8008a78 <tcp_process+0x478>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	e001      	b.n	8008a7c <tcp_process+0x47c>
 8008a78:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008a82:	4b4e      	ldr	r3, [pc, #312]	; (8008bbc <tcp_process+0x5bc>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d037      	beq.n	8008afe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	8b5b      	ldrh	r3, [r3, #26]
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2207      	movs	r2, #7
 8008aa0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008aa2:	e02c      	b.n	8008afe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <tcp_process+0x594>)
 8008aa6:	6819      	ldr	r1, [r3, #0]
 8008aa8:	4b3b      	ldr	r3, [pc, #236]	; (8008b98 <tcp_process+0x598>)
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b3b      	ldr	r3, [pc, #236]	; (8008b9c <tcp_process+0x59c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ab4:	4b3a      	ldr	r3, [pc, #232]	; (8008ba0 <tcp_process+0x5a0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008abc:	4a38      	ldr	r2, [pc, #224]	; (8008ba0 <tcp_process+0x5a0>)
 8008abe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ac0:	8812      	ldrh	r2, [r2, #0]
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	9202      	str	r2, [sp, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <tcp_process+0x5a4>)
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <tcp_process+0x5a8>)
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f002 fbd1 	bl	800b278 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ad6:	e167      	b.n	8008da8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ad8:	4b2d      	ldr	r3, [pc, #180]	; (8008b90 <tcp_process+0x590>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8161 	beq.w	8008da8 <tcp_process+0x7a8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	1e5a      	subs	r2, r3, #1
 8008aec:	4b2b      	ldr	r3, [pc, #172]	; (8008b9c <tcp_process+0x59c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	f040 8159 	bne.w	8008da8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f002 f9b6 	bl	800ae68 <tcp_rexmit>
      break;
 8008afc:	e154      	b.n	8008da8 <tcp_process+0x7a8>
 8008afe:	e153      	b.n	8008da8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa71 	bl	8008fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008b06:	4b2d      	ldr	r3, [pc, #180]	; (8008bbc <tcp_process+0x5bc>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 814c 	beq.w	8008dac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	8b5b      	ldrh	r3, [r3, #26]
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2207      	movs	r2, #7
 8008b26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008b28:	e140      	b.n	8008dac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa5c 	bl	8008fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008b30:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <tcp_process+0x5bc>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d071      	beq.n	8008c20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <tcp_process+0x590>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d060      	beq.n	8008c0a <tcp_process+0x60a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <tcp_process+0x594>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d15a      	bne.n	8008c0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d156      	bne.n	8008c0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	8b5b      	ldrh	r3, [r3, #26]
 8008b60:	f043 0302 	orr.w	r3, r3, #2
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fe fdbc 	bl	80076e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008b70:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <tcp_process+0x5c0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d105      	bne.n	8008b86 <tcp_process+0x586>
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <tcp_process+0x5c0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <tcp_process+0x5c0>)
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e02e      	b.n	8008be4 <tcp_process+0x5e4>
 8008b86:	4b0e      	ldr	r3, [pc, #56]	; (8008bc0 <tcp_process+0x5c0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e027      	b.n	8008bde <tcp_process+0x5de>
 8008b8e:	bf00      	nop
 8008b90:	200082d0 	.word	0x200082d0
 8008b94:	200082c8 	.word	0x200082c8
 8008b98:	200082ce 	.word	0x200082ce
 8008b9c:	200082c4 	.word	0x200082c4
 8008ba0:	200082b4 	.word	0x200082b4
 8008ba4:	20004d2c 	.word	0x20004d2c
 8008ba8:	20004d30 	.word	0x20004d30
 8008bac:	08010c00 	.word	0x08010c00
 8008bb0:	08010ea0 	.word	0x08010ea0
 8008bb4:	08010c4c 	.word	0x08010c4c
 8008bb8:	200082cc 	.word	0x200082cc
 8008bbc:	200082d1 	.word	0x200082d1
 8008bc0:	20008298 	.word	0x20008298
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d104      	bne.n	8008bd8 <tcp_process+0x5d8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	60da      	str	r2, [r3, #12]
 8008bd6:	e005      	b.n	8008be4 <tcp_process+0x5e4>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1ef      	bne.n	8008bc4 <tcp_process+0x5c4>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	60da      	str	r2, [r3, #12]
 8008bea:	4b77      	ldr	r3, [pc, #476]	; (8008dc8 <tcp_process+0x7c8>)
 8008bec:	2201      	movs	r2, #1
 8008bee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008bf6:	4b75      	ldr	r3, [pc, #468]	; (8008dcc <tcp_process+0x7cc>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	4a73      	ldr	r2, [pc, #460]	; (8008dcc <tcp_process+0x7cc>)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	f002 fcfa 	bl	800b5fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008c08:	e0d2      	b.n	8008db0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8b5b      	ldrh	r3, [r3, #26]
 8008c0e:	f043 0302 	orr.w	r3, r3, #2
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	751a      	strb	r2, [r3, #20]
      break;
 8008c1e:	e0c7      	b.n	8008db0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008c20:	4b6b      	ldr	r3, [pc, #428]	; (8008dd0 <tcp_process+0x7d0>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80c1 	beq.w	8008db0 <tcp_process+0x7b0>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c32:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <tcp_process+0x7d4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	f040 80ba 	bne.w	8008db0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 80b5 	bne.w	8008db0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2206      	movs	r2, #6
 8008c4a:	751a      	strb	r2, [r3, #20]
      break;
 8008c4c:	e0b0      	b.n	8008db0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f9ca 	bl	8008fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008c54:	4b60      	ldr	r3, [pc, #384]	; (8008dd8 <tcp_process+0x7d8>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80a9 	beq.w	8008db4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	8b5b      	ldrh	r3, [r3, #26]
 8008c66:	f043 0302 	orr.w	r3, r3, #2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7fe fd39 	bl	80076e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008c76:	4b59      	ldr	r3, [pc, #356]	; (8008ddc <tcp_process+0x7dc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d105      	bne.n	8008c8c <tcp_process+0x68c>
 8008c80:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <tcp_process+0x7dc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	4a55      	ldr	r2, [pc, #340]	; (8008ddc <tcp_process+0x7dc>)
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	e013      	b.n	8008cb4 <tcp_process+0x6b4>
 8008c8c:	4b53      	ldr	r3, [pc, #332]	; (8008ddc <tcp_process+0x7dc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	e00c      	b.n	8008cae <tcp_process+0x6ae>
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d104      	bne.n	8008ca8 <tcp_process+0x6a8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	e005      	b.n	8008cb4 <tcp_process+0x6b4>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1ef      	bne.n	8008c94 <tcp_process+0x694>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	4b43      	ldr	r3, [pc, #268]	; (8008dc8 <tcp_process+0x7c8>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008cc6:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <tcp_process+0x7cc>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	4a3f      	ldr	r2, [pc, #252]	; (8008dcc <tcp_process+0x7cc>)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	f002 fc92 	bl	800b5fc <tcp_timer_needed>
      }
      break;
 8008cd8:	e06c      	b.n	8008db4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f984 	bl	8008fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ce0:	4b3b      	ldr	r3, [pc, #236]	; (8008dd0 <tcp_process+0x7d0>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d065      	beq.n	8008db8 <tcp_process+0x7b8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cf0:	4b38      	ldr	r3, [pc, #224]	; (8008dd4 <tcp_process+0x7d4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d15f      	bne.n	8008db8 <tcp_process+0x7b8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d15b      	bne.n	8008db8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe fcf1 	bl	80076e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008d06:	4b35      	ldr	r3, [pc, #212]	; (8008ddc <tcp_process+0x7dc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d105      	bne.n	8008d1c <tcp_process+0x71c>
 8008d10:	4b32      	ldr	r3, [pc, #200]	; (8008ddc <tcp_process+0x7dc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	4a31      	ldr	r2, [pc, #196]	; (8008ddc <tcp_process+0x7dc>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e013      	b.n	8008d44 <tcp_process+0x744>
 8008d1c:	4b2f      	ldr	r3, [pc, #188]	; (8008ddc <tcp_process+0x7dc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e00c      	b.n	8008d3e <tcp_process+0x73e>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d104      	bne.n	8008d38 <tcp_process+0x738>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	60da      	str	r2, [r3, #12]
 8008d36:	e005      	b.n	8008d44 <tcp_process+0x744>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1ef      	bne.n	8008d24 <tcp_process+0x724>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	4b1f      	ldr	r3, [pc, #124]	; (8008dc8 <tcp_process+0x7c8>)
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	220a      	movs	r2, #10
 8008d54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <tcp_process+0x7cc>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	4a1b      	ldr	r2, [pc, #108]	; (8008dcc <tcp_process+0x7cc>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	f002 fc4a 	bl	800b5fc <tcp_timer_needed>
      }
      break;
 8008d68:	e026      	b.n	8008db8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f93c 	bl	8008fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008d70:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <tcp_process+0x7d0>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 0310 	and.w	r3, r3, #16
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01f      	beq.n	8008dbc <tcp_process+0x7bc>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d80:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <tcp_process+0x7d4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d119      	bne.n	8008dbc <tcp_process+0x7bc>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d115      	bne.n	8008dbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008d90:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <tcp_process+0x7d8>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f043 0310 	orr.w	r3, r3, #16
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <tcp_process+0x7d8>)
 8008d9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d9e:	e00d      	b.n	8008dbc <tcp_process+0x7bc>
    default:
      break;
 8008da0:	bf00      	nop
 8008da2:	e00c      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008da4:	bf00      	nop
 8008da6:	e00a      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008da8:	bf00      	nop
 8008daa:	e008      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008dac:	bf00      	nop
 8008dae:	e006      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008db0:	bf00      	nop
 8008db2:	e004      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008db4:	bf00      	nop
 8008db6:	e002      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008db8:	bf00      	nop
 8008dba:	e000      	b.n	8008dbe <tcp_process+0x7be>
      break;
 8008dbc:	bf00      	nop
  }
  return ERR_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3724      	adds	r7, #36	; 0x24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}
 8008dc8:	200082a0 	.word	0x200082a0
 8008dcc:	2000829c 	.word	0x2000829c
 8008dd0:	200082d0 	.word	0x200082d0
 8008dd4:	200082c8 	.word	0x200082c8
 8008dd8:	200082d1 	.word	0x200082d1
 8008ddc:	20008298 	.word	0x20008298

08008de0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <tcp_oos_insert_segment+0x1e>
 8008df0:	4b3b      	ldr	r3, [pc, #236]	; (8008ee0 <tcp_oos_insert_segment+0x100>)
 8008df2:	f240 421f 	movw	r2, #1055	; 0x41f
 8008df6:	493b      	ldr	r1, [pc, #236]	; (8008ee4 <tcp_oos_insert_segment+0x104>)
 8008df8:	483b      	ldr	r0, [pc, #236]	; (8008ee8 <tcp_oos_insert_segment+0x108>)
 8008dfa:	f005 fd8b 	bl	800e914 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fb fca0 	bl	800474c <lwip_htons>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d028      	beq.n	8008e6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008e18:	6838      	ldr	r0, [r7, #0]
 8008e1a:	f7fe fa63 	bl	80072e4 <tcp_segs_free>
    next = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	e056      	b.n	8008ed2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	899b      	ldrh	r3, [r3, #12]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fb fc8d 	bl	800474c <lwip_htons>
 8008e32:	4603      	mov	r3, r0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	899b      	ldrh	r3, [r3, #12]
 8008e44:	b29c      	uxth	r4, r3
 8008e46:	2001      	movs	r0, #1
 8008e48:	f7fb fc80 	bl	800474c <lwip_htons>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	4322      	orrs	r2, r4
 8008e56:	b292      	uxth	r2, r2
 8008e58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7fe fa52 	bl	800730e <tcp_seg_free>
    while (next &&
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00e      	beq.n	8008e8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	891b      	ldrh	r3, [r3, #8]
 8008e74:	461a      	mov	r2, r3
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <tcp_oos_insert_segment+0x10c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	441a      	add	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	8909      	ldrh	r1, [r1, #8]
 8008e86:	440b      	add	r3, r1
 8008e88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	daca      	bge.n	8008e24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01e      	beq.n	8008ed2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	891b      	ldrh	r3, [r3, #8]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4b14      	ldr	r3, [pc, #80]	; (8008eec <tcp_oos_insert_segment+0x10c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	441a      	add	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dd12      	ble.n	8008ed2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <tcp_oos_insert_segment+0x10c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	891b      	ldrh	r3, [r3, #8]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7fc fe15 	bl	8005afc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	601a      	str	r2, [r3, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	08010c00 	.word	0x08010c00
 8008ee4:	08010ec0 	.word	0x08010ec0
 8008ee8:	08010c4c 	.word	0x08010c4c
 8008eec:	200082c4 	.word	0x200082c4

08008ef0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008ef0:	b5b0      	push	{r4, r5, r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008efe:	e03e      	b.n	8008f7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fd f802 	bl	8005f18 <pbuf_clen>
 8008f14:	4603      	mov	r3, r0
 8008f16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f1e:	8a7a      	ldrh	r2, [r7, #18]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d906      	bls.n	8008f32 <tcp_free_acked_segments+0x42>
 8008f24:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <tcp_free_acked_segments+0xe0>)
 8008f26:	f240 4257 	movw	r2, #1111	; 0x457
 8008f2a:	492a      	ldr	r1, [pc, #168]	; (8008fd4 <tcp_free_acked_segments+0xe4>)
 8008f2c:	482a      	ldr	r0, [pc, #168]	; (8008fd8 <tcp_free_acked_segments+0xe8>)
 8008f2e:	f005 fcf1 	bl	800e914 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008f38:	8a7b      	ldrh	r3, [r7, #18]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	891a      	ldrh	r2, [r3, #8]
 8008f48:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <tcp_free_acked_segments+0xec>)
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	4b22      	ldr	r3, [pc, #136]	; (8008fdc <tcp_free_acked_segments+0xec>)
 8008f52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008f54:	6978      	ldr	r0, [r7, #20]
 8008f56:	f7fe f9da 	bl	800730e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <tcp_free_acked_segments+0x8e>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <tcp_free_acked_segments+0x8e>
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <tcp_free_acked_segments+0xe0>)
 8008f72:	f240 4261 	movw	r2, #1121	; 0x461
 8008f76:	491a      	ldr	r1, [pc, #104]	; (8008fe0 <tcp_free_acked_segments+0xf0>)
 8008f78:	4817      	ldr	r0, [pc, #92]	; (8008fd8 <tcp_free_acked_segments+0xe8>)
 8008f7a:	f005 fccb 	bl	800e914 <iprintf>
  while (seg_list != NULL &&
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d020      	beq.n	8008fc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fb fbf3 	bl	8004776 <lwip_htonl>
 8008f90:	4604      	mov	r4, r0
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	891b      	ldrh	r3, [r3, #8]
 8008f96:	461d      	mov	r5, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fb fbd3 	bl	800474c <lwip_htons>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <tcp_free_acked_segments+0xc6>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <tcp_free_acked_segments+0xc8>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	442b      	add	r3, r5
 8008fba:	18e2      	adds	r2, r4, r3
 8008fbc:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <tcp_free_acked_segments+0xf4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dd9c      	ble.n	8008f00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd0:	08010c00 	.word	0x08010c00
 8008fd4:	08010ee8 	.word	0x08010ee8
 8008fd8:	08010c4c 	.word	0x08010c4c
 8008fdc:	200082cc 	.word	0x200082cc
 8008fe0:	08010f10 	.word	0x08010f10
 8008fe4:	200082c8 	.word	0x200082c8

08008fe8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008fe8:	b5b0      	push	{r4, r5, r7, lr}
 8008fea:	b094      	sub	sp, #80	; 0x50
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <tcp_receive+0x20>
 8008ffa:	4b91      	ldr	r3, [pc, #580]	; (8009240 <tcp_receive+0x258>)
 8008ffc:	f240 427b 	movw	r2, #1147	; 0x47b
 8009000:	4990      	ldr	r1, [pc, #576]	; (8009244 <tcp_receive+0x25c>)
 8009002:	4891      	ldr	r0, [pc, #580]	; (8009248 <tcp_receive+0x260>)
 8009004:	f005 fc86 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7d1b      	ldrb	r3, [r3, #20]
 800900c:	2b03      	cmp	r3, #3
 800900e:	d806      	bhi.n	800901e <tcp_receive+0x36>
 8009010:	4b8b      	ldr	r3, [pc, #556]	; (8009240 <tcp_receive+0x258>)
 8009012:	f240 427c 	movw	r2, #1148	; 0x47c
 8009016:	498d      	ldr	r1, [pc, #564]	; (800924c <tcp_receive+0x264>)
 8009018:	488b      	ldr	r0, [pc, #556]	; (8009248 <tcp_receive+0x260>)
 800901a:	f005 fc7b 	bl	800e914 <iprintf>

  if (flags & TCP_ACK) {
 800901e:	4b8c      	ldr	r3, [pc, #560]	; (8009250 <tcp_receive+0x268>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8264 	beq.w	80094f4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009032:	461a      	mov	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	4413      	add	r3, r2
 800903a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009040:	4b84      	ldr	r3, [pc, #528]	; (8009254 <tcp_receive+0x26c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	db1b      	blt.n	8009082 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800904e:	4b81      	ldr	r3, [pc, #516]	; (8009254 <tcp_receive+0x26c>)
 8009050:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009052:	429a      	cmp	r2, r3
 8009054:	d106      	bne.n	8009064 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800905a:	4b7f      	ldr	r3, [pc, #508]	; (8009258 <tcp_receive+0x270>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	db0e      	blt.n	8009082 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009068:	4b7b      	ldr	r3, [pc, #492]	; (8009258 <tcp_receive+0x270>)
 800906a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800906c:	429a      	cmp	r2, r3
 800906e:	d125      	bne.n	80090bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009070:	4b7a      	ldr	r3, [pc, #488]	; (800925c <tcp_receive+0x274>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	89db      	ldrh	r3, [r3, #14]
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800907e:	429a      	cmp	r2, r3
 8009080:	d91c      	bls.n	80090bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009082:	4b76      	ldr	r3, [pc, #472]	; (800925c <tcp_receive+0x274>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	89db      	ldrh	r3, [r3, #14]
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800909c:	429a      	cmp	r2, r3
 800909e:	d205      	bcs.n	80090ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80090ac:	4b69      	ldr	r3, [pc, #420]	; (8009254 <tcp_receive+0x26c>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80090b4:	4b68      	ldr	r3, [pc, #416]	; (8009258 <tcp_receive+0x270>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80090bc:	4b66      	ldr	r3, [pc, #408]	; (8009258 <tcp_receive+0x270>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dc58      	bgt.n	800917c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80090ca:	4b65      	ldr	r3, [pc, #404]	; (8009260 <tcp_receive+0x278>)
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d14b      	bne.n	800916a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80090dc:	4413      	add	r3, r2
 80090de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d142      	bne.n	800916a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	db3d      	blt.n	800916a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090f2:	4b59      	ldr	r3, [pc, #356]	; (8009258 <tcp_receive+0x270>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d137      	bne.n	800916a <tcp_receive+0x182>
              found_dupack = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009104:	2bff      	cmp	r3, #255	; 0xff
 8009106:	d007      	beq.n	8009118 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800910e:	3301      	adds	r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800911e:	2b03      	cmp	r3, #3
 8009120:	d91b      	bls.n	800915a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800912c:	4413      	add	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009136:	429a      	cmp	r2, r3
 8009138:	d30a      	bcc.n	8009150 <tcp_receive+0x168>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009144:	4413      	add	r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800914e:	e004      	b.n	800915a <tcp_receive+0x172>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009160:	2b02      	cmp	r3, #2
 8009162:	d902      	bls.n	800916a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 feeb 	bl	800af40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800916a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916c:	2b00      	cmp	r3, #0
 800916e:	f040 8161 	bne.w	8009434 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800917a:	e15b      	b.n	8009434 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <tcp_receive+0x270>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	f2c0 814e 	blt.w	800942a <tcp_receive+0x442>
 800918e:	4b32      	ldr	r3, [pc, #200]	; (8009258 <tcp_receive+0x270>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	f300 8146 	bgt.w	800942a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8b5b      	ldrh	r3, [r3, #26]
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d010      	beq.n	80091cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8b5b      	ldrh	r3, [r3, #26]
 80091ae:	f023 0304 	bic.w	r3, r3, #4
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091da:	10db      	asrs	r3, r3, #3
 80091dc:	b21b      	sxth	r3, r3
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	b21a      	sxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80091f4:	4b18      	ldr	r3, [pc, #96]	; (8009258 <tcp_receive+0x270>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	b29b      	uxth	r3, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800920c:	4b12      	ldr	r3, [pc, #72]	; (8009258 <tcp_receive+0x270>)
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7d1b      	ldrb	r3, [r3, #20]
 8009218:	2b03      	cmp	r3, #3
 800921a:	f240 8097 	bls.w	800934c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800922a:	429a      	cmp	r2, r3
 800922c:	d245      	bcs.n	80092ba <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	8b5b      	ldrh	r3, [r3, #26]
 8009232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009236:	2b00      	cmp	r3, #0
 8009238:	d014      	beq.n	8009264 <tcp_receive+0x27c>
 800923a:	2301      	movs	r3, #1
 800923c:	e013      	b.n	8009266 <tcp_receive+0x27e>
 800923e:	bf00      	nop
 8009240:	08010c00 	.word	0x08010c00
 8009244:	08010f30 	.word	0x08010f30
 8009248:	08010c4c 	.word	0x08010c4c
 800924c:	08010f4c 	.word	0x08010f4c
 8009250:	200082d0 	.word	0x200082d0
 8009254:	200082c4 	.word	0x200082c4
 8009258:	200082c8 	.word	0x200082c8
 800925c:	200082b4 	.word	0x200082b4
 8009260:	200082ce 	.word	0x200082ce
 8009264:	2302      	movs	r3, #2
 8009266:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800926a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009274:	fb12 f303 	smulbb	r3, r2, r3
 8009278:	b29b      	uxth	r3, r3
 800927a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800927c:	4293      	cmp	r3, r2
 800927e:	bf28      	it	cs
 8009280:	4613      	movcs	r3, r2
 8009282:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800928a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800928c:	4413      	add	r3, r2
 800928e:	b29a      	uxth	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009296:	429a      	cmp	r2, r3
 8009298:	d309      	bcc.n	80092ae <tcp_receive+0x2c6>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092a2:	4413      	add	r3, r2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80092ac:	e04e      	b.n	800934c <tcp_receive+0x364>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80092b8:	e048      	b.n	800934c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092c2:	4413      	add	r3, r2
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d309      	bcc.n	80092e4 <tcp_receive+0x2fc>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092d8:	4413      	add	r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80092e2:	e004      	b.n	80092ee <tcp_receive+0x306>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d326      	bcc.n	800934c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800931e:	4413      	add	r3, r2
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009328:	429a      	cmp	r2, r3
 800932a:	d30a      	bcc.n	8009342 <tcp_receive+0x35a>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009336:	4413      	add	r3, r2
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009340:	e004      	b.n	800934c <tcp_receive+0x364>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009348:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	4a98      	ldr	r2, [pc, #608]	; (80095b8 <tcp_receive+0x5d0>)
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fdca 	bl	8008ef0 <tcp_free_acked_segments>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	4a94      	ldr	r2, [pc, #592]	; (80095bc <tcp_receive+0x5d4>)
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff fdbf 	bl	8008ef0 <tcp_free_acked_segments>
 8009372:	4602      	mov	r2, r0
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	2b00      	cmp	r3, #0
 800937e:	d104      	bne.n	800938a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009386:	861a      	strh	r2, [r3, #48]	; 0x30
 8009388:	e002      	b.n	8009390 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d103      	bne.n	80093a6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80093ac:	4b84      	ldr	r3, [pc, #528]	; (80095c0 <tcp_receive+0x5d8>)
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	4413      	add	r3, r2
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	8b5b      	ldrh	r3, [r3, #26]
 80093be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d035      	beq.n	8009432 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d118      	bne.n	8009400 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00c      	beq.n	80093f0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fb f9c7 	bl	8004776 <lwip_htonl>
 80093e8:	4603      	mov	r3, r0
 80093ea:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dc20      	bgt.n	8009432 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8b5b      	ldrh	r3, [r3, #26]
 80093f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093fe:	e018      	b.n	8009432 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4618      	mov	r0, r3
 800940e:	f7fb f9b2 	bl	8004776 <lwip_htonl>
 8009412:	4603      	mov	r3, r0
 8009414:	1ae3      	subs	r3, r4, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	dc0b      	bgt.n	8009432 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	8b5b      	ldrh	r3, [r3, #26]
 800941e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009428:	e003      	b.n	8009432 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 ff76 	bl	800b31c <tcp_send_empty_ack>
 8009430:	e000      	b.n	8009434 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009432:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009438:	2b00      	cmp	r3, #0
 800943a:	d05b      	beq.n	80094f4 <tcp_receive+0x50c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009440:	4b60      	ldr	r3, [pc, #384]	; (80095c4 <tcp_receive+0x5dc>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	da54      	bge.n	80094f4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800944a:	4b5f      	ldr	r3, [pc, #380]	; (80095c8 <tcp_receive+0x5e0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009454:	b29b      	uxth	r3, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	b29b      	uxth	r3, r3
 800945a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800945e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009468:	10db      	asrs	r3, r3, #3
 800946a:	b21b      	sxth	r3, r3
 800946c:	b29b      	uxth	r3, r3
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	b29b      	uxth	r3, r3
 8009472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009482:	4413      	add	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	b21a      	sxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800948c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009490:	2b00      	cmp	r3, #0
 8009492:	da05      	bge.n	80094a0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009494:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009498:	425b      	negs	r3, r3
 800949a:	b29b      	uxth	r3, r3
 800949c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80094a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094aa:	109b      	asrs	r3, r3, #2
 80094ac:	b21b      	sxth	r3, r3
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80094c4:	4413      	add	r3, r2
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	b21a      	sxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094d4:	10db      	asrs	r3, r3, #3
 80094d6:	b21b      	sxth	r3, r3
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	4413      	add	r3, r2
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b21a      	sxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80094f4:	4b35      	ldr	r3, [pc, #212]	; (80095cc <tcp_receive+0x5e4>)
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 84e2 	beq.w	8009ec2 <tcp_receive+0xeda>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7d1b      	ldrb	r3, [r3, #20]
 8009502:	2b06      	cmp	r3, #6
 8009504:	f200 84dd 	bhi.w	8009ec2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800950c:	4b30      	ldr	r3, [pc, #192]	; (80095d0 <tcp_receive+0x5e8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	f2c0 808f 	blt.w	8009638 <tcp_receive+0x650>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800951e:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <tcp_receive+0x5e4>)
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	4619      	mov	r1, r3
 8009524:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <tcp_receive+0x5e8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	440b      	add	r3, r1
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	3301      	adds	r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	f300 8082 	bgt.w	8009638 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009534:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <tcp_receive+0x5ec>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800953e:	4b24      	ldr	r3, [pc, #144]	; (80095d0 <tcp_receive+0x5e8>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009546:	4b23      	ldr	r3, [pc, #140]	; (80095d4 <tcp_receive+0x5ec>)
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <tcp_receive+0x574>
 800954e:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <tcp_receive+0x5f0>)
 8009550:	f240 5294 	movw	r2, #1428	; 0x594
 8009554:	4921      	ldr	r1, [pc, #132]	; (80095dc <tcp_receive+0x5f4>)
 8009556:	4822      	ldr	r0, [pc, #136]	; (80095e0 <tcp_receive+0x5f8>)
 8009558:	f005 f9dc 	bl	800e914 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009562:	4293      	cmp	r3, r2
 8009564:	d906      	bls.n	8009574 <tcp_receive+0x58c>
 8009566:	4b1c      	ldr	r3, [pc, #112]	; (80095d8 <tcp_receive+0x5f0>)
 8009568:	f240 5295 	movw	r2, #1429	; 0x595
 800956c:	491d      	ldr	r1, [pc, #116]	; (80095e4 <tcp_receive+0x5fc>)
 800956e:	481c      	ldr	r0, [pc, #112]	; (80095e0 <tcp_receive+0x5f8>)
 8009570:	f005 f9d0 	bl	800e914 <iprintf>
      off = (u16_t)off32;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800957a:	4b16      	ldr	r3, [pc, #88]	; (80095d4 <tcp_receive+0x5ec>)
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	891b      	ldrh	r3, [r3, #8]
 8009580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009584:	429a      	cmp	r2, r3
 8009586:	d906      	bls.n	8009596 <tcp_receive+0x5ae>
 8009588:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <tcp_receive+0x5f0>)
 800958a:	f240 5297 	movw	r2, #1431	; 0x597
 800958e:	4916      	ldr	r1, [pc, #88]	; (80095e8 <tcp_receive+0x600>)
 8009590:	4813      	ldr	r0, [pc, #76]	; (80095e0 <tcp_receive+0x5f8>)
 8009592:	f005 f9bf 	bl	800e914 <iprintf>
      inseg.len -= off;
 8009596:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <tcp_receive+0x5ec>)
 8009598:	891a      	ldrh	r2, [r3, #8]
 800959a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <tcp_receive+0x5ec>)
 80095a4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80095a6:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <tcp_receive+0x5ec>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	891a      	ldrh	r2, [r3, #8]
 80095ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80095b4:	e02a      	b.n	800960c <tcp_receive+0x624>
 80095b6:	bf00      	nop
 80095b8:	08010f68 	.word	0x08010f68
 80095bc:	08010f70 	.word	0x08010f70
 80095c0:	200082cc 	.word	0x200082cc
 80095c4:	200082c8 	.word	0x200082c8
 80095c8:	2000828c 	.word	0x2000828c
 80095cc:	200082ce 	.word	0x200082ce
 80095d0:	200082c4 	.word	0x200082c4
 80095d4:	200082a4 	.word	0x200082a4
 80095d8:	08010c00 	.word	0x08010c00
 80095dc:	08010f78 	.word	0x08010f78
 80095e0:	08010c4c 	.word	0x08010c4c
 80095e4:	08010f88 	.word	0x08010f88
 80095e8:	08010f98 	.word	0x08010f98
        off -= p->len;
 80095ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ee:	895b      	ldrh	r3, [r3, #10]
 80095f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80095fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095fe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009602:	2200      	movs	r2, #0
 8009604:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800960c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800960e:	895b      	ldrh	r3, [r3, #10]
 8009610:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009614:	429a      	cmp	r2, r3
 8009616:	d8e9      	bhi.n	80095ec <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009618:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800961c:	4619      	mov	r1, r3
 800961e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009620:	f7fc fb6c 	bl	8005cfc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	4a91      	ldr	r2, [pc, #580]	; (8009870 <tcp_receive+0x888>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	4b91      	ldr	r3, [pc, #580]	; (8009874 <tcp_receive+0x88c>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4a8f      	ldr	r2, [pc, #572]	; (8009870 <tcp_receive+0x888>)
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009636:	e00d      	b.n	8009654 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009638:	4b8d      	ldr	r3, [pc, #564]	; (8009870 <tcp_receive+0x888>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	da06      	bge.n	8009654 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	8b5b      	ldrh	r3, [r3, #26]
 800964a:	f043 0302 	orr.w	r3, r3, #2
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009654:	4b86      	ldr	r3, [pc, #536]	; (8009870 <tcp_receive+0x888>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	f2c0 842a 	blt.w	8009eb8 <tcp_receive+0xed0>
 8009664:	4b82      	ldr	r3, [pc, #520]	; (8009870 <tcp_receive+0x888>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009670:	440b      	add	r3, r1
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	3301      	adds	r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	f300 841e 	bgt.w	8009eb8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009680:	4b7b      	ldr	r3, [pc, #492]	; (8009870 <tcp_receive+0x888>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	f040 829a 	bne.w	8009bbe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800968a:	4b7a      	ldr	r3, [pc, #488]	; (8009874 <tcp_receive+0x88c>)
 800968c:	891c      	ldrh	r4, [r3, #8]
 800968e:	4b79      	ldr	r3, [pc, #484]	; (8009874 <tcp_receive+0x88c>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	899b      	ldrh	r3, [r3, #12]
 8009694:	b29b      	uxth	r3, r3
 8009696:	4618      	mov	r0, r3
 8009698:	f7fb f858 	bl	800474c <lwip_htons>
 800969c:	4603      	mov	r3, r0
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <tcp_receive+0x6c4>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <tcp_receive+0x6c6>
 80096ac:	2300      	movs	r3, #0
 80096ae:	4423      	add	r3, r4
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	4b71      	ldr	r3, [pc, #452]	; (8009878 <tcp_receive+0x890>)
 80096b4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096ba:	4b6f      	ldr	r3, [pc, #444]	; (8009878 <tcp_receive+0x890>)
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d275      	bcs.n	80097ae <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80096c2:	4b6c      	ldr	r3, [pc, #432]	; (8009874 <tcp_receive+0x88c>)
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	899b      	ldrh	r3, [r3, #12]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fb f83e 	bl	800474c <lwip_htons>
 80096d0:	4603      	mov	r3, r0
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01f      	beq.n	800971c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80096dc:	4b65      	ldr	r3, [pc, #404]	; (8009874 <tcp_receive+0x88c>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	899b      	ldrh	r3, [r3, #12]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	b21b      	sxth	r3, r3
 80096e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096ea:	b21c      	sxth	r4, r3
 80096ec:	4b61      	ldr	r3, [pc, #388]	; (8009874 <tcp_receive+0x88c>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	899b      	ldrh	r3, [r3, #12]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fb f829 	bl	800474c <lwip_htons>
 80096fa:	4603      	mov	r3, r0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009704:	b29b      	uxth	r3, r3
 8009706:	4618      	mov	r0, r3
 8009708:	f7fb f820 	bl	800474c <lwip_htons>
 800970c:	4603      	mov	r3, r0
 800970e:	b21b      	sxth	r3, r3
 8009710:	4323      	orrs	r3, r4
 8009712:	b21a      	sxth	r2, r3
 8009714:	4b57      	ldr	r3, [pc, #348]	; (8009874 <tcp_receive+0x88c>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	b292      	uxth	r2, r2
 800971a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009720:	4b54      	ldr	r3, [pc, #336]	; (8009874 <tcp_receive+0x88c>)
 8009722:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009724:	4b53      	ldr	r3, [pc, #332]	; (8009874 <tcp_receive+0x88c>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	899b      	ldrh	r3, [r3, #12]
 800972a:	b29b      	uxth	r3, r3
 800972c:	4618      	mov	r0, r3
 800972e:	f7fb f80d 	bl	800474c <lwip_htons>
 8009732:	4603      	mov	r3, r0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <tcp_receive+0x762>
            inseg.len -= 1;
 800973e:	4b4d      	ldr	r3, [pc, #308]	; (8009874 <tcp_receive+0x88c>)
 8009740:	891b      	ldrh	r3, [r3, #8]
 8009742:	3b01      	subs	r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <tcp_receive+0x88c>)
 8009748:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800974a:	4b4a      	ldr	r3, [pc, #296]	; (8009874 <tcp_receive+0x88c>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4a49      	ldr	r2, [pc, #292]	; (8009874 <tcp_receive+0x88c>)
 8009750:	8912      	ldrh	r2, [r2, #8]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7fc f9d1 	bl	8005afc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800975a:	4b46      	ldr	r3, [pc, #280]	; (8009874 <tcp_receive+0x88c>)
 800975c:	891c      	ldrh	r4, [r3, #8]
 800975e:	4b45      	ldr	r3, [pc, #276]	; (8009874 <tcp_receive+0x88c>)
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	899b      	ldrh	r3, [r3, #12]
 8009764:	b29b      	uxth	r3, r3
 8009766:	4618      	mov	r0, r3
 8009768:	f7fa fff0 	bl	800474c <lwip_htons>
 800976c:	4603      	mov	r3, r0
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <tcp_receive+0x794>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <tcp_receive+0x796>
 800977c:	2300      	movs	r3, #0
 800977e:	4423      	add	r3, r4
 8009780:	b29a      	uxth	r2, r3
 8009782:	4b3d      	ldr	r3, [pc, #244]	; (8009878 <tcp_receive+0x890>)
 8009784:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009786:	4b3c      	ldr	r3, [pc, #240]	; (8009878 <tcp_receive+0x890>)
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	4b38      	ldr	r3, [pc, #224]	; (8009870 <tcp_receive+0x888>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	441a      	add	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800979a:	440b      	add	r3, r1
 800979c:	429a      	cmp	r2, r3
 800979e:	d006      	beq.n	80097ae <tcp_receive+0x7c6>
 80097a0:	4b36      	ldr	r3, [pc, #216]	; (800987c <tcp_receive+0x894>)
 80097a2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80097a6:	4936      	ldr	r1, [pc, #216]	; (8009880 <tcp_receive+0x898>)
 80097a8:	4836      	ldr	r0, [pc, #216]	; (8009884 <tcp_receive+0x89c>)
 80097aa:	f005 f8b3 	bl	800e914 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80e7 	beq.w	8009986 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80097b8:	4b2e      	ldr	r3, [pc, #184]	; (8009874 <tcp_receive+0x88c>)
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	899b      	ldrh	r3, [r3, #12]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fa ffc3 	bl	800474c <lwip_htons>
 80097c6:	4603      	mov	r3, r0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d010      	beq.n	80097f4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80097d2:	e00a      	b.n	80097ea <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7fd fd92 	bl	800730e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f0      	bne.n	80097d4 <tcp_receive+0x7ec>
 80097f2:	e0c8      	b.n	8009986 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80097fa:	e052      	b.n	80098a2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80097fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	899b      	ldrh	r3, [r3, #12]
 8009802:	b29b      	uxth	r3, r3
 8009804:	4618      	mov	r0, r3
 8009806:	f7fa ffa1 	bl	800474c <lwip_htons>
 800980a:	4603      	mov	r3, r0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d03d      	beq.n	8009892 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009816:	4b17      	ldr	r3, [pc, #92]	; (8009874 <tcp_receive+0x88c>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	899b      	ldrh	r3, [r3, #12]
 800981c:	b29b      	uxth	r3, r3
 800981e:	4618      	mov	r0, r3
 8009820:	f7fa ff94 	bl	800474c <lwip_htons>
 8009824:	4603      	mov	r3, r0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800982c:	2b00      	cmp	r3, #0
 800982e:	d130      	bne.n	8009892 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009830:	4b10      	ldr	r3, [pc, #64]	; (8009874 <tcp_receive+0x88c>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	899b      	ldrh	r3, [r3, #12]
 8009836:	b29c      	uxth	r4, r3
 8009838:	2001      	movs	r0, #1
 800983a:	f7fa ff87 	bl	800474c <lwip_htons>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <tcp_receive+0x88c>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	4322      	orrs	r2, r4
 8009848:	b292      	uxth	r2, r2
 800984a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <tcp_receive+0x88c>)
 800984e:	891c      	ldrh	r4, [r3, #8]
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <tcp_receive+0x88c>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	899b      	ldrh	r3, [r3, #12]
 8009856:	b29b      	uxth	r3, r3
 8009858:	4618      	mov	r0, r3
 800985a:	f7fa ff77 	bl	800474c <lwip_htons>
 800985e:	4603      	mov	r3, r0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00e      	beq.n	8009888 <tcp_receive+0x8a0>
 800986a:	2301      	movs	r3, #1
 800986c:	e00d      	b.n	800988a <tcp_receive+0x8a2>
 800986e:	bf00      	nop
 8009870:	200082c4 	.word	0x200082c4
 8009874:	200082a4 	.word	0x200082a4
 8009878:	200082ce 	.word	0x200082ce
 800987c:	08010c00 	.word	0x08010c00
 8009880:	08010fa8 	.word	0x08010fa8
 8009884:	08010c4c 	.word	0x08010c4c
 8009888:	2300      	movs	r3, #0
 800988a:	4423      	add	r3, r4
 800988c:	b29a      	uxth	r2, r3
 800988e:	4b98      	ldr	r3, [pc, #608]	; (8009af0 <tcp_receive+0xb08>)
 8009890:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009894:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800989c:	6938      	ldr	r0, [r7, #16]
 800989e:	f7fd fd36 	bl	800730e <tcp_seg_free>
            while (next &&
 80098a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00e      	beq.n	80098c6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80098a8:	4b91      	ldr	r3, [pc, #580]	; (8009af0 <tcp_receive+0xb08>)
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	4b91      	ldr	r3, [pc, #580]	; (8009af4 <tcp_receive+0xb0c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	441a      	add	r2, r3
 80098b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098bc:	8909      	ldrh	r1, [r1, #8]
 80098be:	440b      	add	r3, r1
 80098c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da9a      	bge.n	80097fc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d059      	beq.n	8009980 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80098cc:	4b88      	ldr	r3, [pc, #544]	; (8009af0 <tcp_receive+0xb08>)
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	4b88      	ldr	r3, [pc, #544]	; (8009af4 <tcp_receive+0xb0c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	441a      	add	r2, r3
 80098d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	1ad3      	subs	r3, r2, r3
            if (next &&
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dd4d      	ble.n	8009980 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80098e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	4b81      	ldr	r3, [pc, #516]	; (8009af4 <tcp_receive+0xb0c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	4b80      	ldr	r3, [pc, #512]	; (8009af8 <tcp_receive+0xb10>)
 80098f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098fa:	4b7f      	ldr	r3, [pc, #508]	; (8009af8 <tcp_receive+0xb10>)
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	899b      	ldrh	r3, [r3, #12]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4618      	mov	r0, r3
 8009904:	f7fa ff22 	bl	800474c <lwip_htons>
 8009908:	4603      	mov	r3, r0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <tcp_receive+0x938>
                inseg.len -= 1;
 8009914:	4b78      	ldr	r3, [pc, #480]	; (8009af8 <tcp_receive+0xb10>)
 8009916:	891b      	ldrh	r3, [r3, #8]
 8009918:	3b01      	subs	r3, #1
 800991a:	b29a      	uxth	r2, r3
 800991c:	4b76      	ldr	r3, [pc, #472]	; (8009af8 <tcp_receive+0xb10>)
 800991e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009920:	4b75      	ldr	r3, [pc, #468]	; (8009af8 <tcp_receive+0xb10>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4a74      	ldr	r2, [pc, #464]	; (8009af8 <tcp_receive+0xb10>)
 8009926:	8912      	ldrh	r2, [r2, #8]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7fc f8e6 	bl	8005afc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009930:	4b71      	ldr	r3, [pc, #452]	; (8009af8 <tcp_receive+0xb10>)
 8009932:	891c      	ldrh	r4, [r3, #8]
 8009934:	4b70      	ldr	r3, [pc, #448]	; (8009af8 <tcp_receive+0xb10>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	899b      	ldrh	r3, [r3, #12]
 800993a:	b29b      	uxth	r3, r3
 800993c:	4618      	mov	r0, r3
 800993e:	f7fa ff05 	bl	800474c <lwip_htons>
 8009942:	4603      	mov	r3, r0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <tcp_receive+0x96a>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <tcp_receive+0x96c>
 8009952:	2300      	movs	r3, #0
 8009954:	4423      	add	r3, r4
 8009956:	b29a      	uxth	r2, r3
 8009958:	4b65      	ldr	r3, [pc, #404]	; (8009af0 <tcp_receive+0xb08>)
 800995a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800995c:	4b64      	ldr	r3, [pc, #400]	; (8009af0 <tcp_receive+0xb08>)
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	4b64      	ldr	r3, [pc, #400]	; (8009af4 <tcp_receive+0xb0c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	441a      	add	r2, r3
 8009968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d006      	beq.n	8009980 <tcp_receive+0x998>
 8009972:	4b62      	ldr	r3, [pc, #392]	; (8009afc <tcp_receive+0xb14>)
 8009974:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009978:	4961      	ldr	r1, [pc, #388]	; (8009b00 <tcp_receive+0xb18>)
 800997a:	4862      	ldr	r0, [pc, #392]	; (8009b04 <tcp_receive+0xb1c>)
 800997c:	f004 ffca 	bl	800e914 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009984:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009986:	4b5a      	ldr	r3, [pc, #360]	; (8009af0 <tcp_receive+0xb08>)
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <tcp_receive+0xb0c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	441a      	add	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800999a:	4b55      	ldr	r3, [pc, #340]	; (8009af0 <tcp_receive+0xb08>)
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d206      	bcs.n	80099b0 <tcp_receive+0x9c8>
 80099a2:	4b56      	ldr	r3, [pc, #344]	; (8009afc <tcp_receive+0xb14>)
 80099a4:	f240 6207 	movw	r2, #1543	; 0x607
 80099a8:	4957      	ldr	r1, [pc, #348]	; (8009b08 <tcp_receive+0xb20>)
 80099aa:	4856      	ldr	r0, [pc, #344]	; (8009b04 <tcp_receive+0xb1c>)
 80099ac:	f004 ffb2 	bl	800e914 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80099b4:	4b4e      	ldr	r3, [pc, #312]	; (8009af0 <tcp_receive+0xb08>)
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7fc ffc5 	bl	8006950 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80099c6:	4b4c      	ldr	r3, [pc, #304]	; (8009af8 <tcp_receive+0xb10>)
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80099d0:	4b49      	ldr	r3, [pc, #292]	; (8009af8 <tcp_receive+0xb10>)
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	4a4d      	ldr	r2, [pc, #308]	; (8009b0c <tcp_receive+0xb24>)
 80099d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80099d8:	4b47      	ldr	r3, [pc, #284]	; (8009af8 <tcp_receive+0xb10>)
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80099de:	4b46      	ldr	r3, [pc, #280]	; (8009af8 <tcp_receive+0xb10>)
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	899b      	ldrh	r3, [r3, #12]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fa feb0 	bl	800474c <lwip_htons>
 80099ec:	4603      	mov	r3, r0
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80b8 	beq.w	8009b6a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80099fa:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <tcp_receive+0xb28>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f043 0320 	orr.w	r3, r3, #32
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <tcp_receive+0xb28>)
 8009a06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009a08:	e0af      	b.n	8009b6a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a36      	ldr	r2, [pc, #216]	; (8009af4 <tcp_receive+0xb0c>)
 8009a1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	891b      	ldrh	r3, [r3, #8]
 8009a20:	461c      	mov	r4, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	899b      	ldrh	r3, [r3, #12]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fa fe8e 	bl	800474c <lwip_htons>
 8009a30:	4603      	mov	r3, r0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <tcp_receive+0xa58>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <tcp_receive+0xa5a>
 8009a40:	2300      	movs	r3, #0
 8009a42:	191a      	adds	r2, r3, r4
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	441a      	add	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a52:	461c      	mov	r4, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	891b      	ldrh	r3, [r3, #8]
 8009a58:	461d      	mov	r5, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	899b      	ldrh	r3, [r3, #12]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fa fe72 	bl	800474c <lwip_htons>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <tcp_receive+0xa90>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <tcp_receive+0xa92>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	442b      	add	r3, r5
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	d206      	bcs.n	8009a8e <tcp_receive+0xaa6>
 8009a80:	4b1e      	ldr	r3, [pc, #120]	; (8009afc <tcp_receive+0xb14>)
 8009a82:	f240 622b 	movw	r2, #1579	; 0x62b
 8009a86:	4923      	ldr	r1, [pc, #140]	; (8009b14 <tcp_receive+0xb2c>)
 8009a88:	481e      	ldr	r0, [pc, #120]	; (8009b04 <tcp_receive+0xb1c>)
 8009a8a:	f004 ff43 	bl	800e914 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	891b      	ldrh	r3, [r3, #8]
 8009a92:	461c      	mov	r4, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	899b      	ldrh	r3, [r3, #12]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fa fe55 	bl	800474c <lwip_htons>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <tcp_receive+0xaca>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <tcp_receive+0xacc>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	1919      	adds	r1, r3, r4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009aba:	b28b      	uxth	r3, r1
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fc ff43 	bl	8006950 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	891b      	ldrh	r3, [r3, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d028      	beq.n	8009b26 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ad4:	4b0d      	ldr	r3, [pc, #52]	; (8009b0c <tcp_receive+0xb24>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01d      	beq.n	8009b18 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009adc:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <tcp_receive+0xb24>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f7fc fa50 	bl	8005f8c <pbuf_cat>
 8009aec:	e018      	b.n	8009b20 <tcp_receive+0xb38>
 8009aee:	bf00      	nop
 8009af0:	200082ce 	.word	0x200082ce
 8009af4:	200082c4 	.word	0x200082c4
 8009af8:	200082a4 	.word	0x200082a4
 8009afc:	08010c00 	.word	0x08010c00
 8009b00:	08010fe0 	.word	0x08010fe0
 8009b04:	08010c4c 	.word	0x08010c4c
 8009b08:	0801101c 	.word	0x0801101c
 8009b0c:	200082d4 	.word	0x200082d4
 8009b10:	200082d1 	.word	0x200082d1
 8009b14:	0801103c 	.word	0x0801103c
            } else {
              recv_data = cseg->p;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4a70      	ldr	r2, [pc, #448]	; (8009ce0 <tcp_receive+0xcf8>)
 8009b1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	899b      	ldrh	r3, [r3, #12]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fa fe0c 	bl	800474c <lwip_htons>
 8009b34:	4603      	mov	r3, r0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00d      	beq.n	8009b5c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009b40:	4b68      	ldr	r3, [pc, #416]	; (8009ce4 <tcp_receive+0xcfc>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	f043 0320 	orr.w	r3, r3, #32
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	4b66      	ldr	r3, [pc, #408]	; (8009ce4 <tcp_receive+0xcfc>)
 8009b4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7d1b      	ldrb	r3, [r3, #20]
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d102      	bne.n	8009b5c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2207      	movs	r2, #7
 8009b5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7fd fbd2 	bl	800730e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	f43f af43 	beq.w	8009a0a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8b5b      	ldrh	r3, [r3, #26]
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <tcp_receive+0xbc6>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8b5b      	ldrh	r3, [r3, #26]
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	835a      	strh	r2, [r3, #26]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009bac:	e188      	b.n	8009ec0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8b5b      	ldrh	r3, [r3, #26]
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009bbc:	e180      	b.n	8009ec0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009bc6:	4848      	ldr	r0, [pc, #288]	; (8009ce8 <tcp_receive+0xd00>)
 8009bc8:	f7fd fbba 	bl	8007340 <tcp_seg_copy>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	675a      	str	r2, [r3, #116]	; 0x74
 8009bd2:	e16d      	b.n	8009eb0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bde:	e157      	b.n	8009e90 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	4b41      	ldr	r3, [pc, #260]	; (8009cec <tcp_receive+0xd04>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d11d      	bne.n	8009c2a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009bee:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <tcp_receive+0xd00>)
 8009bf0:	891a      	ldrh	r2, [r3, #8]
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	891b      	ldrh	r3, [r3, #8]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f240 814f 	bls.w	8009e9a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009bfc:	483a      	ldr	r0, [pc, #232]	; (8009ce8 <tcp_receive+0xd00>)
 8009bfe:	f7fd fb9f 	bl	8007340 <tcp_seg_copy>
 8009c02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 8149 	beq.w	8009e9e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <tcp_receive+0xc32>
                    prev->next = cseg;
 8009c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e002      	b.n	8009c20 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009c20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c22:	6978      	ldr	r0, [r7, #20]
 8009c24:	f7ff f8dc 	bl	8008de0 <tcp_oos_insert_segment>
                }
                break;
 8009c28:	e139      	b.n	8009e9e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d117      	bne.n	8009c60 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009c30:	4b2e      	ldr	r3, [pc, #184]	; (8009cec <tcp_receive+0xd04>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	da57      	bge.n	8009cf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c40:	4829      	ldr	r0, [pc, #164]	; (8009ce8 <tcp_receive+0xd00>)
 8009c42:	f7fd fb7d 	bl	8007340 <tcp_seg_copy>
 8009c46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 8129 	beq.w	8009ea2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f7ff f8c1 	bl	8008de0 <tcp_oos_insert_segment>
                  }
                  break;
 8009c5e:	e120      	b.n	8009ea2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009c60:	4b22      	ldr	r3, [pc, #136]	; (8009cec <tcp_receive+0xd04>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db3e      	blt.n	8009cf0 <tcp_receive+0xd08>
 8009c72:	4b1e      	ldr	r3, [pc, #120]	; (8009cec <tcp_receive+0xd04>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	3301      	adds	r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dc35      	bgt.n	8009cf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c84:	4818      	ldr	r0, [pc, #96]	; (8009ce8 <tcp_receive+0xd00>)
 8009c86:	f7fd fb5b 	bl	8007340 <tcp_seg_copy>
 8009c8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 8109 	beq.w	8009ea6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c9c:	8912      	ldrh	r2, [r2, #8]
 8009c9e:	441a      	add	r2, r3
 8009ca0:	4b12      	ldr	r3, [pc, #72]	; (8009cec <tcp_receive+0xd04>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dd12      	ble.n	8009cd0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009caa:	4b10      	ldr	r3, [pc, #64]	; (8009cec <tcp_receive+0xd04>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	891b      	ldrh	r3, [r3, #8]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7fb ff16 	bl	8005afc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd8:	69f8      	ldr	r0, [r7, #28]
 8009cda:	f7ff f881 	bl	8008de0 <tcp_oos_insert_segment>
                  }
                  break;
 8009cde:	e0e2      	b.n	8009ea6 <tcp_receive+0xebe>
 8009ce0:	200082d4 	.word	0x200082d4
 8009ce4:	200082d1 	.word	0x200082d1
 8009ce8:	200082a4 	.word	0x200082a4
 8009cec:	200082c4 	.word	0x200082c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 80c6 	bne.w	8009e8a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009cfe:	4b80      	ldr	r3, [pc, #512]	; (8009f00 <tcp_receive+0xf18>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f340 80bd 	ble.w	8009e8a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	899b      	ldrh	r3, [r3, #12]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fa fd17 	bl	800474c <lwip_htons>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 80bf 	bne.w	8009eaa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009d2c:	4875      	ldr	r0, [pc, #468]	; (8009f04 <tcp_receive+0xf1c>)
 8009d2e:	f7fd fb07 	bl	8007340 <tcp_seg_copy>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80b6 	beq.w	8009eae <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d4a:	8912      	ldrh	r2, [r2, #8]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	4b6c      	ldr	r3, [pc, #432]	; (8009f00 <tcp_receive+0xf18>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dd12      	ble.n	8009d7e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009d58:	4b69      	ldr	r3, [pc, #420]	; (8009f00 <tcp_receive+0xf18>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d74:	891b      	ldrh	r3, [r3, #8]
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fb febf 	bl	8005afc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009d7e:	4b62      	ldr	r3, [pc, #392]	; (8009f08 <tcp_receive+0xf20>)
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	4b5e      	ldr	r3, [pc, #376]	; (8009f00 <tcp_receive+0xf18>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	441a      	add	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d92:	440b      	add	r3, r1
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f340 8089 	ble.w	8009eae <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	899b      	ldrh	r3, [r3, #12]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fa fcd0 	bl	800474c <lwip_htons>
 8009dac:	4603      	mov	r3, r0
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d022      	beq.n	8009dfe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	899b      	ldrh	r3, [r3, #12]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dc8:	b21c      	sxth	r4, r3
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fa fcb9 	bl	800474c <lwip_htons>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fa fcb0 	bl	800474c <lwip_htons>
 8009dec:	4603      	mov	r3, r0
 8009dee:	b21b      	sxth	r3, r3
 8009df0:	4323      	orrs	r3, r4
 8009df2:	b21a      	sxth	r2, r3
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e08:	4413      	add	r3, r2
 8009e0a:	b299      	uxth	r1, r3
 8009e0c:	4b3c      	ldr	r3, [pc, #240]	; (8009f00 <tcp_receive+0xf18>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	1a8a      	subs	r2, r1, r2
 8009e18:	b292      	uxth	r2, r2
 8009e1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	891b      	ldrh	r3, [r3, #8]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fb fe66 	bl	8005afc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	891c      	ldrh	r4, [r3, #8]
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fa fc83 	bl	800474c <lwip_htons>
 8009e46:	4603      	mov	r3, r0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <tcp_receive+0xe6e>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <tcp_receive+0xe70>
 8009e56:	2300      	movs	r3, #0
 8009e58:	4423      	add	r3, r4
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	4b2a      	ldr	r3, [pc, #168]	; (8009f08 <tcp_receive+0xf20>)
 8009e5e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e60:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <tcp_receive+0xf20>)
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3
 8009e66:	4b26      	ldr	r3, [pc, #152]	; (8009f00 <tcp_receive+0xf18>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	441a      	add	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e74:	440b      	add	r3, r1
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d019      	beq.n	8009eae <tcp_receive+0xec6>
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <tcp_receive+0xf24>)
 8009e7c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009e80:	4923      	ldr	r1, [pc, #140]	; (8009f10 <tcp_receive+0xf28>)
 8009e82:	4824      	ldr	r0, [pc, #144]	; (8009f14 <tcp_receive+0xf2c>)
 8009e84:	f004 fd46 	bl	800e914 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009e88:	e011      	b.n	8009eae <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f47f aea4 	bne.w	8009be0 <tcp_receive+0xbf8>
 8009e98:	e00a      	b.n	8009eb0 <tcp_receive+0xec8>
                break;
 8009e9a:	bf00      	nop
 8009e9c:	e008      	b.n	8009eb0 <tcp_receive+0xec8>
                break;
 8009e9e:	bf00      	nop
 8009ea0:	e006      	b.n	8009eb0 <tcp_receive+0xec8>
                  break;
 8009ea2:	bf00      	nop
 8009ea4:	e004      	b.n	8009eb0 <tcp_receive+0xec8>
                  break;
 8009ea6:	bf00      	nop
 8009ea8:	e002      	b.n	8009eb0 <tcp_receive+0xec8>
                  break;
 8009eaa:	bf00      	nop
 8009eac:	e000      	b.n	8009eb0 <tcp_receive+0xec8>
                break;
 8009eae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 fa33 	bl	800b31c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009eb6:	e003      	b.n	8009ec0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 fa2f 	bl	800b31c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ebe:	e01a      	b.n	8009ef6 <tcp_receive+0xf0e>
 8009ec0:	e019      	b.n	8009ef6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <tcp_receive+0xf18>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	db0a      	blt.n	8009ee6 <tcp_receive+0xefe>
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <tcp_receive+0xf18>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009edc:	440b      	add	r3, r1
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dd07      	ble.n	8009ef6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8b5b      	ldrh	r3, [r3, #26]
 8009eea:	f043 0302 	orr.w	r3, r3, #2
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009ef4:	e7ff      	b.n	8009ef6 <tcp_receive+0xf0e>
 8009ef6:	bf00      	nop
 8009ef8:	3750      	adds	r7, #80	; 0x50
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bdb0      	pop	{r4, r5, r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200082c4 	.word	0x200082c4
 8009f04:	200082a4 	.word	0x200082a4
 8009f08:	200082ce 	.word	0x200082ce
 8009f0c:	08010c00 	.word	0x08010c00
 8009f10:	08010fa8 	.word	0x08010fa8
 8009f14:	08010c4c 	.word	0x08010c4c

08009f18 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009f1e:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <tcp_get_next_optbyte+0x5c>)
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	b291      	uxth	r1, r2
 8009f26:	4a13      	ldr	r2, [pc, #76]	; (8009f74 <tcp_get_next_optbyte+0x5c>)
 8009f28:	8011      	strh	r1, [r2, #0]
 8009f2a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f2c:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <tcp_get_next_optbyte+0x60>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d004      	beq.n	8009f3e <tcp_get_next_optbyte+0x26>
 8009f34:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <tcp_get_next_optbyte+0x64>)
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	88fa      	ldrh	r2, [r7, #6]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d208      	bcs.n	8009f50 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009f3e:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <tcp_get_next_optbyte+0x68>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3314      	adds	r3, #20
 8009f44:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	e00b      	b.n	8009f68 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <tcp_get_next_optbyte+0x64>)
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009f5e:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <tcp_get_next_optbyte+0x60>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	797b      	ldrb	r3, [r7, #5]
 8009f64:	4413      	add	r3, r2
 8009f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	200082c0 	.word	0x200082c0
 8009f78:	200082bc 	.word	0x200082bc
 8009f7c:	200082ba 	.word	0x200082ba
 8009f80:	200082b4 	.word	0x200082b4

08009f84 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <tcp_parseopt+0x1c>
 8009f92:	4b32      	ldr	r3, [pc, #200]	; (800a05c <tcp_parseopt+0xd8>)
 8009f94:	f240 727d 	movw	r2, #1917	; 0x77d
 8009f98:	4931      	ldr	r1, [pc, #196]	; (800a060 <tcp_parseopt+0xdc>)
 8009f9a:	4832      	ldr	r0, [pc, #200]	; (800a064 <tcp_parseopt+0xe0>)
 8009f9c:	f004 fcba 	bl	800e914 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009fa0:	4b31      	ldr	r3, [pc, #196]	; (800a068 <tcp_parseopt+0xe4>)
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d055      	beq.n	800a054 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fa8:	4b30      	ldr	r3, [pc, #192]	; (800a06c <tcp_parseopt+0xe8>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	e045      	b.n	800a03c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009fb0:	f7ff ffb2 	bl	8009f18 <tcp_get_next_optbyte>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d006      	beq.n	8009fcc <tcp_parseopt+0x48>
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	dc2b      	bgt.n	800a01a <tcp_parseopt+0x96>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d041      	beq.n	800a04a <tcp_parseopt+0xc6>
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d127      	bne.n	800a01a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009fca:	e037      	b.n	800a03c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009fcc:	f7ff ffa4 	bl	8009f18 <tcp_get_next_optbyte>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d13b      	bne.n	800a04e <tcp_parseopt+0xca>
 8009fd6:	4b25      	ldr	r3, [pc, #148]	; (800a06c <tcp_parseopt+0xe8>)
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	4a22      	ldr	r2, [pc, #136]	; (800a068 <tcp_parseopt+0xe4>)
 8009fde:	8812      	ldrh	r2, [r2, #0]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	da34      	bge.n	800a04e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009fe4:	f7ff ff98 	bl	8009f18 <tcp_get_next_optbyte>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009ff0:	f7ff ff92 	bl	8009f18 <tcp_get_next_optbyte>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	89bb      	ldrh	r3, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009ffe:	89bb      	ldrh	r3, [r7, #12]
 800a000:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a004:	d804      	bhi.n	800a010 <tcp_parseopt+0x8c>
 800a006:	89bb      	ldrh	r3, [r7, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <tcp_parseopt+0x8c>
 800a00c:	89ba      	ldrh	r2, [r7, #12]
 800a00e:	e001      	b.n	800a014 <tcp_parseopt+0x90>
 800a010:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a018:	e010      	b.n	800a03c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a01a:	f7ff ff7d 	bl	8009f18 <tcp_get_next_optbyte>
 800a01e:	4603      	mov	r3, r0
 800a020:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a022:	7afb      	ldrb	r3, [r7, #11]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d914      	bls.n	800a052 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <tcp_parseopt+0xe8>)
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	4413      	add	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b02      	subs	r3, #2
 800a036:	b29a      	uxth	r2, r3
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <tcp_parseopt+0xe8>)
 800a03a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <tcp_parseopt+0xe8>)
 800a03e:	881a      	ldrh	r2, [r3, #0]
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <tcp_parseopt+0xe4>)
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d3b3      	bcc.n	8009fb0 <tcp_parseopt+0x2c>
 800a048:	e004      	b.n	800a054 <tcp_parseopt+0xd0>
          return;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <tcp_parseopt+0xd0>
            return;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <tcp_parseopt+0xd0>
            return;
 800a052:	bf00      	nop
      }
    }
  }
}
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08010c00 	.word	0x08010c00
 800a060:	08011064 	.word	0x08011064
 800a064:	08010c4c 	.word	0x08010c4c
 800a068:	200082b8 	.word	0x200082b8
 800a06c:	200082c0 	.word	0x200082c0

0800a070 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <tcp_trigger_input_pcb_close+0x1c>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	f043 0310 	orr.w	r3, r3, #16
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <tcp_trigger_input_pcb_close+0x1c>)
 800a080:	701a      	strb	r2, [r3, #0]
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	200082d1 	.word	0x200082d1

0800a090 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <tcp_route+0x28>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	7a1b      	ldrb	r3, [r3, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d006      	beq.n	800a0b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	7a1b      	ldrb	r3, [r3, #8]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fb fb4a 	bl	8005748 <netif_get_by_index>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	e003      	b.n	800a0c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f003 f9f5 	bl	800d4a8 <ip4_route>
 800a0be:	4603      	mov	r3, r0
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d105      	bne.n	800a0ea <tcp_create_segment+0x22>
 800a0de:	4b44      	ldr	r3, [pc, #272]	; (800a1f0 <tcp_create_segment+0x128>)
 800a0e0:	22a3      	movs	r2, #163	; 0xa3
 800a0e2:	4944      	ldr	r1, [pc, #272]	; (800a1f4 <tcp_create_segment+0x12c>)
 800a0e4:	4844      	ldr	r0, [pc, #272]	; (800a1f8 <tcp_create_segment+0x130>)
 800a0e6:	f004 fc15 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d105      	bne.n	800a0fc <tcp_create_segment+0x34>
 800a0f0:	4b3f      	ldr	r3, [pc, #252]	; (800a1f0 <tcp_create_segment+0x128>)
 800a0f2:	22a4      	movs	r2, #164	; 0xa4
 800a0f4:	4941      	ldr	r1, [pc, #260]	; (800a1fc <tcp_create_segment+0x134>)
 800a0f6:	4840      	ldr	r0, [pc, #256]	; (800a1f8 <tcp_create_segment+0x130>)
 800a0f8:	f004 fc0c 	bl	800e914 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a0fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a10a:	2003      	movs	r0, #3
 800a10c:	f7fa ff96 	bl	800503c <memp_malloc>
 800a110:	6138      	str	r0, [r7, #16]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d104      	bne.n	800a122 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a118:	68b8      	ldr	r0, [r7, #8]
 800a11a:	f7fb fe75 	bl	8005e08 <pbuf_free>
    return NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	e061      	b.n	800a1e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a128:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	891a      	ldrh	r2, [r3, #8]
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	429a      	cmp	r2, r3
 800a140:	d205      	bcs.n	800a14e <tcp_create_segment+0x86>
 800a142:	4b2b      	ldr	r3, [pc, #172]	; (800a1f0 <tcp_create_segment+0x128>)
 800a144:	22b0      	movs	r2, #176	; 0xb0
 800a146:	492e      	ldr	r1, [pc, #184]	; (800a200 <tcp_create_segment+0x138>)
 800a148:	482b      	ldr	r0, [pc, #172]	; (800a1f8 <tcp_create_segment+0x130>)
 800a14a:	f004 fbe3 	bl	800e914 <iprintf>
  seg->len = p->tot_len - optlen;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	891a      	ldrh	r2, [r3, #8]
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	b29b      	uxth	r3, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	b29a      	uxth	r2, r3
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a15e:	2114      	movs	r1, #20
 800a160:	68b8      	ldr	r0, [r7, #8]
 800a162:	f7fb fdbb 	bl	8005cdc <pbuf_add_header>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d004      	beq.n	800a176 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a16c:	6938      	ldr	r0, [r7, #16]
 800a16e:	f7fd f8ce 	bl	800730e <tcp_seg_free>
    return NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	e037      	b.n	800a1e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8ada      	ldrh	r2, [r3, #22]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	68dc      	ldr	r4, [r3, #12]
 800a188:	4610      	mov	r0, r2
 800a18a:	f7fa fadf 	bl	800474c <lwip_htons>
 800a18e:	4603      	mov	r3, r0
 800a190:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	8b1a      	ldrh	r2, [r3, #24]
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	68dc      	ldr	r4, [r3, #12]
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7fa fad6 	bl	800474c <lwip_htons>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	68dc      	ldr	r4, [r3, #12]
 800a1a8:	6838      	ldr	r0, [r7, #0]
 800a1aa:	f7fa fae4 	bl	8004776 <lwip_htonl>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	089b      	lsrs	r3, r3, #2
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3305      	adds	r3, #5
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	031b      	lsls	r3, r3, #12
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	68dc      	ldr	r4, [r3, #12]
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f7fa fabc 	bl	800474c <lwip_htons>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	749a      	strb	r2, [r3, #18]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a1e4:	693b      	ldr	r3, [r7, #16]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd90      	pop	{r4, r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08011080 	.word	0x08011080
 800a1f4:	080110b4 	.word	0x080110b4
 800a1f8:	080110d4 	.word	0x080110d4
 800a1fc:	080110fc 	.word	0x080110fc
 800a200:	08011120 	.word	0x08011120

0800a204 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b08b      	sub	sp, #44	; 0x2c
 800a208:	af02      	add	r7, sp, #8
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	61fb      	str	r3, [r7, #28]
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a218:	2300      	movs	r3, #0
 800a21a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <tcp_split_unsent_seg+0x2c>
 800a222:	4b95      	ldr	r3, [pc, #596]	; (800a478 <tcp_split_unsent_seg+0x274>)
 800a224:	f240 324b 	movw	r2, #843	; 0x34b
 800a228:	4994      	ldr	r1, [pc, #592]	; (800a47c <tcp_split_unsent_seg+0x278>)
 800a22a:	4895      	ldr	r0, [pc, #596]	; (800a480 <tcp_split_unsent_seg+0x27c>)
 800a22c:	f004 fb72 	bl	800e914 <iprintf>

  useg = pcb->unsent;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a234:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a23c:	f04f 33ff 	mov.w	r3, #4294967295
 800a240:	e116      	b.n	800a470 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a242:	887b      	ldrh	r3, [r7, #2]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a248:	4b8b      	ldr	r3, [pc, #556]	; (800a478 <tcp_split_unsent_seg+0x274>)
 800a24a:	f240 3253 	movw	r2, #851	; 0x353
 800a24e:	498d      	ldr	r1, [pc, #564]	; (800a484 <tcp_split_unsent_seg+0x280>)
 800a250:	488b      	ldr	r0, [pc, #556]	; (800a480 <tcp_split_unsent_seg+0x27c>)
 800a252:	f004 fb5f 	bl	800e914 <iprintf>
    return ERR_VAL;
 800a256:	f06f 0305 	mvn.w	r3, #5
 800a25a:	e109      	b.n	800a470 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	891b      	ldrh	r3, [r3, #8]
 800a260:	887a      	ldrh	r2, [r7, #2]
 800a262:	429a      	cmp	r2, r3
 800a264:	d301      	bcc.n	800a26a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	e102      	b.n	800a470 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a26e:	887a      	ldrh	r2, [r7, #2]
 800a270:	429a      	cmp	r2, r3
 800a272:	d906      	bls.n	800a282 <tcp_split_unsent_seg+0x7e>
 800a274:	4b80      	ldr	r3, [pc, #512]	; (800a478 <tcp_split_unsent_seg+0x274>)
 800a276:	f240 325b 	movw	r2, #859	; 0x35b
 800a27a:	4983      	ldr	r1, [pc, #524]	; (800a488 <tcp_split_unsent_seg+0x284>)
 800a27c:	4880      	ldr	r0, [pc, #512]	; (800a480 <tcp_split_unsent_seg+0x27c>)
 800a27e:	f004 fb49 	bl	800e914 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	891b      	ldrh	r3, [r3, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <tcp_split_unsent_seg+0x94>
 800a28a:	4b7b      	ldr	r3, [pc, #492]	; (800a478 <tcp_split_unsent_seg+0x274>)
 800a28c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a290:	497e      	ldr	r1, [pc, #504]	; (800a48c <tcp_split_unsent_seg+0x288>)
 800a292:	487b      	ldr	r0, [pc, #492]	; (800a480 <tcp_split_unsent_seg+0x27c>)
 800a294:	f004 fb3e 	bl	800e914 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	7a9b      	ldrb	r3, [r3, #10]
 800a29c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	891a      	ldrh	r2, [r3, #8]
 800a2ae:	887b      	ldrh	r3, [r7, #2]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	89bb      	ldrh	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	2036      	movs	r0, #54	; 0x36
 800a2c6:	f7fb fabb 	bl	8005840 <pbuf_alloc>
 800a2ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 80b7 	beq.w	800a442 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	891a      	ldrh	r2, [r3, #8]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	891b      	ldrh	r3, [r3, #8]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	887b      	ldrh	r3, [r7, #2]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	6858      	ldr	r0, [r3, #4]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
 800a2f2:	18d1      	adds	r1, r2, r3
 800a2f4:	897b      	ldrh	r3, [r7, #10]
 800a2f6:	89ba      	ldrh	r2, [r7, #12]
 800a2f8:	f7fb ff80 	bl	80061fc <pbuf_copy_partial>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	461a      	mov	r2, r3
 800a300:	89bb      	ldrh	r3, [r7, #12]
 800a302:	4293      	cmp	r3, r2
 800a304:	f040 809f 	bne.w	800a446 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	899b      	ldrh	r3, [r3, #12]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4618      	mov	r0, r3
 800a312:	f7fa fa1b 	bl	800474c <lwip_htons>
 800a316:	4603      	mov	r3, r0
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a31e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a320:	2300      	movs	r3, #0
 800a322:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a324:	7efb      	ldrb	r3, [r7, #27]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a32e:	7efb      	ldrb	r3, [r7, #27]
 800a330:	f023 0308 	bic.w	r3, r3, #8
 800a334:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a336:	7ebb      	ldrb	r3, [r7, #26]
 800a338:	f043 0308 	orr.w	r3, r3, #8
 800a33c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a33e:	7efb      	ldrb	r3, [r7, #27]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a348:	7efb      	ldrb	r3, [r7, #27]
 800a34a:	f023 0301 	bic.w	r3, r3, #1
 800a34e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a350:	7ebb      	ldrb	r3, [r7, #26]
 800a352:	f043 0301 	orr.w	r3, r3, #1
 800a356:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fa fa09 	bl	8004776 <lwip_htonl>
 800a364:	4602      	mov	r2, r0
 800a366:	887b      	ldrh	r3, [r7, #2]
 800a368:	18d1      	adds	r1, r2, r3
 800a36a:	7eba      	ldrb	r2, [r7, #26]
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	460b      	mov	r3, r1
 800a372:	6939      	ldr	r1, [r7, #16]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fea7 	bl	800a0c8 <tcp_create_segment>
 800a37a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d063      	beq.n	800a44a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	4618      	mov	r0, r3
 800a388:	f7fb fdc6 	bl	8005f18 <pbuf_clen>
 800a38c:	4603      	mov	r3, r0
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	6858      	ldr	r0, [r3, #4]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	891a      	ldrh	r2, [r3, #8]
 800a3aa:	89bb      	ldrh	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	f7fb fba3 	bl	8005afc <pbuf_realloc>
  useg->len -= remainder;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	891a      	ldrh	r2, [r3, #8]
 800a3ba:	89bb      	ldrh	r3, [r7, #12]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	b29c      	uxth	r4, r3
 800a3cc:	7efb      	ldrb	r3, [r7, #27]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fa f9bb 	bl	800474c <lwip_htons>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	4322      	orrs	r2, r4
 800a3e0:	b292      	uxth	r2, r2
 800a3e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fb fd95 	bl	8005f18 <pbuf_clen>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3f8:	4413      	add	r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	4618      	mov	r0, r3
 800a408:	f7fb fd86 	bl	8005f18 <pbuf_clen>
 800a40c:	4603      	mov	r3, r0
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a416:	4413      	add	r3, r2
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	69fa      	ldr	r2, [r7, #28]
 800a42c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e016      	b.n	800a470 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a442:	bf00      	nop
 800a444:	e002      	b.n	800a44c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a446:	bf00      	nop
 800a448:	e000      	b.n	800a44c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a44a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d006      	beq.n	800a460 <tcp_split_unsent_seg+0x25c>
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <tcp_split_unsent_seg+0x274>)
 800a454:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a458:	490d      	ldr	r1, [pc, #52]	; (800a490 <tcp_split_unsent_seg+0x28c>)
 800a45a:	4809      	ldr	r0, [pc, #36]	; (800a480 <tcp_split_unsent_seg+0x27c>)
 800a45c:	f004 fa5a 	bl	800e914 <iprintf>
  if (p != NULL) {
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a466:	6938      	ldr	r0, [r7, #16]
 800a468:	f7fb fcce 	bl	8005e08 <pbuf_free>
  }

  return ERR_MEM;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a470:	4618      	mov	r0, r3
 800a472:	3724      	adds	r7, #36	; 0x24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd90      	pop	{r4, r7, pc}
 800a478:	08011080 	.word	0x08011080
 800a47c:	08011414 	.word	0x08011414
 800a480:	080110d4 	.word	0x080110d4
 800a484:	08011438 	.word	0x08011438
 800a488:	0801145c 	.word	0x0801145c
 800a48c:	0801146c 	.word	0x0801146c
 800a490:	0801147c 	.word	0x0801147c

0800a494 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <tcp_send_fin+0x1c>
 800a4a2:	4b21      	ldr	r3, [pc, #132]	; (800a528 <tcp_send_fin+0x94>)
 800a4a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a4a8:	4920      	ldr	r1, [pc, #128]	; (800a52c <tcp_send_fin+0x98>)
 800a4aa:	4821      	ldr	r0, [pc, #132]	; (800a530 <tcp_send_fin+0x9c>)
 800a4ac:	f004 fa32 	bl	800e914 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d02e      	beq.n	800a516 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	e002      	b.n	800a4c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1f8      	bne.n	800a4c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	899b      	ldrh	r3, [r3, #12]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fa f938 	bl	800474c <lwip_htons>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f003 0307 	and.w	r3, r3, #7
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d116      	bne.n	800a516 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	b29c      	uxth	r4, r3
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f7fa f92b 	bl	800474c <lwip_htons>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	4322      	orrs	r2, r4
 800a500:	b292      	uxth	r2, r2
 800a502:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8b5b      	ldrh	r3, [r3, #26]
 800a508:	f043 0320 	orr.w	r3, r3, #32
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	e004      	b.n	800a520 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a516:	2101      	movs	r1, #1
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f80b 	bl	800a534 <tcp_enqueue_flags>
 800a51e:	4603      	mov	r3, r0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bd90      	pop	{r4, r7, pc}
 800a528:	08011080 	.word	0x08011080
 800a52c:	08011488 	.word	0x08011488
 800a530:	080110d4 	.word	0x080110d4

0800a534 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08a      	sub	sp, #40	; 0x28
 800a538:	af02      	add	r7, sp, #8
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <tcp_enqueue_flags+0x2c>
 800a552:	4b67      	ldr	r3, [pc, #412]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a554:	f240 4211 	movw	r2, #1041	; 0x411
 800a558:	4966      	ldr	r1, [pc, #408]	; (800a6f4 <tcp_enqueue_flags+0x1c0>)
 800a55a:	4867      	ldr	r0, [pc, #412]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a55c:	f004 f9da 	bl	800e914 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <tcp_enqueue_flags+0x40>
 800a566:	4b62      	ldr	r3, [pc, #392]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a568:	f240 4213 	movw	r2, #1043	; 0x413
 800a56c:	4963      	ldr	r1, [pc, #396]	; (800a6fc <tcp_enqueue_flags+0x1c8>)
 800a56e:	4862      	ldr	r0, [pc, #392]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a570:	f004 f9d0 	bl	800e914 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a57e:	2301      	movs	r3, #1
 800a580:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a582:	7ffb      	ldrb	r3, [r7, #31]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a596:	4619      	mov	r1, r3
 800a598:	2036      	movs	r0, #54	; 0x36
 800a59a:	f7fb f951 	bl	8005840 <pbuf_alloc>
 800a59e:	6138      	str	r0, [r7, #16]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	8b5b      	ldrh	r3, [r3, #26]
 800a5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b8:	e095      	b.n	800a6e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	895a      	ldrh	r2, [r3, #10]
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d206      	bcs.n	800a5d4 <tcp_enqueue_flags+0xa0>
 800a5c6:	4b4a      	ldr	r3, [pc, #296]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a5c8:	f240 4239 	movw	r2, #1081	; 0x439
 800a5cc:	494c      	ldr	r1, [pc, #304]	; (800a700 <tcp_enqueue_flags+0x1cc>)
 800a5ce:	484a      	ldr	r0, [pc, #296]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a5d0:	f004 f9a0 	bl	800e914 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a5d8:	78fa      	ldrb	r2, [r7, #3]
 800a5da:	7ffb      	ldrb	r3, [r7, #31]
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	6939      	ldr	r1, [r7, #16]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fd70 	bl	800a0c8 <tcp_create_segment>
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	8b5b      	ldrh	r3, [r3, #26]
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a602:	e070      	b.n	800a6e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d006      	beq.n	800a61e <tcp_enqueue_flags+0xea>
 800a610:	4b37      	ldr	r3, [pc, #220]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a612:	f240 4242 	movw	r2, #1090	; 0x442
 800a616:	493b      	ldr	r1, [pc, #236]	; (800a704 <tcp_enqueue_flags+0x1d0>)
 800a618:	4837      	ldr	r0, [pc, #220]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a61a:	f004 f97b 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	891b      	ldrh	r3, [r3, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <tcp_enqueue_flags+0x100>
 800a626:	4b32      	ldr	r3, [pc, #200]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a628:	f240 4243 	movw	r2, #1091	; 0x443
 800a62c:	4936      	ldr	r1, [pc, #216]	; (800a708 <tcp_enqueue_flags+0x1d4>)
 800a62e:	4832      	ldr	r0, [pc, #200]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a630:	f004 f970 	bl	800e914 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	66da      	str	r2, [r3, #108]	; 0x6c
 800a642:	e00d      	b.n	800a660 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	e002      	b.n	800a652 <tcp_enqueue_flags+0x11e>
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f8      	bne.n	800a64c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <tcp_enqueue_flags+0x148>
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a686:	78fb      	ldrb	r3, [r7, #3]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d006      	beq.n	800a69e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	8b5b      	ldrh	r3, [r3, #26]
 800a694:	f043 0320 	orr.w	r3, r3, #32
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fb fc38 	bl	8005f18 <pbuf_clen>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6b2:	4413      	add	r3, r2
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00e      	beq.n	800a6e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <tcp_enqueue_flags+0x1b0>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <tcp_enqueue_flags+0x1b0>
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <tcp_enqueue_flags+0x1bc>)
 800a6d8:	f240 4265 	movw	r2, #1125	; 0x465
 800a6dc:	490b      	ldr	r1, [pc, #44]	; (800a70c <tcp_enqueue_flags+0x1d8>)
 800a6de:	4806      	ldr	r0, [pc, #24]	; (800a6f8 <tcp_enqueue_flags+0x1c4>)
 800a6e0:	f004 f918 	bl	800e914 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3720      	adds	r7, #32
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	08011080 	.word	0x08011080
 800a6f4:	080114a4 	.word	0x080114a4
 800a6f8:	080110d4 	.word	0x080110d4
 800a6fc:	080114fc 	.word	0x080114fc
 800a700:	0801151c 	.word	0x0801151c
 800a704:	08011558 	.word	0x08011558
 800a708:	08011570 	.word	0x08011570
 800a70c:	0801159c 	.word	0x0801159c

0800a710 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <tcp_output+0x1c>
 800a71e:	4b8a      	ldr	r3, [pc, #552]	; (800a948 <tcp_output+0x238>)
 800a720:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a724:	4989      	ldr	r1, [pc, #548]	; (800a94c <tcp_output+0x23c>)
 800a726:	488a      	ldr	r0, [pc, #552]	; (800a950 <tcp_output+0x240>)
 800a728:	f004 f8f4 	bl	800e914 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7d1b      	ldrb	r3, [r3, #20]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d106      	bne.n	800a742 <tcp_output+0x32>
 800a734:	4b84      	ldr	r3, [pc, #528]	; (800a948 <tcp_output+0x238>)
 800a736:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a73a:	4986      	ldr	r1, [pc, #536]	; (800a954 <tcp_output+0x244>)
 800a73c:	4884      	ldr	r0, [pc, #528]	; (800a950 <tcp_output+0x240>)
 800a73e:	f004 f8e9 	bl	800e914 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a742:	4b85      	ldr	r3, [pc, #532]	; (800a958 <tcp_output+0x248>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d101      	bne.n	800a750 <tcp_output+0x40>
    return ERR_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e1ce      	b.n	800aaee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a75c:	4293      	cmp	r3, r2
 800a75e:	bf28      	it	cs
 800a760:	4613      	movcs	r3, r2
 800a762:	b29b      	uxth	r3, r3
 800a764:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10b      	bne.n	800a78a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	8b5b      	ldrh	r3, [r3, #26]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 81aa 	beq.w	800aad4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fdcb 	bl	800b31c <tcp_send_empty_ack>
 800a786:	4603      	mov	r3, r0
 800a788:	e1b1      	b.n	800aaee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3304      	adds	r3, #4
 800a790:	461a      	mov	r2, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fc7c 	bl	800a090 <tcp_route>
 800a798:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <tcp_output+0x96>
    return ERR_RTE;
 800a7a0:	f06f 0303 	mvn.w	r3, #3
 800a7a4:	e1a3      	b.n	800aaee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <tcp_output+0xa4>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d111      	bne.n	800a7d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <tcp_output+0xb0>
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	e000      	b.n	800a7c2 <tcp_output+0xb2>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <tcp_output+0xc0>
      return ERR_RTE;
 800a7ca:	f06f 0303 	mvn.w	r3, #3
 800a7ce:	e18e      	b.n	800aaee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7f9 ffc9 	bl	8004776 <lwip_htonl>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ee:	8912      	ldrh	r2, [r2, #8]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d227      	bcs.n	800a848 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7fe:	461a      	mov	r2, r3
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	4293      	cmp	r3, r2
 800a804:	d114      	bne.n	800a830 <tcp_output+0x120>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d110      	bne.n	800a830 <tcp_output+0x120>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10b      	bne.n	800a830 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	8b5b      	ldrh	r3, [r3, #26]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 814d 	beq.w	800aad8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fd6c 	bl	800b31c <tcp_send_empty_ack>
 800a844:	4603      	mov	r3, r0
 800a846:	e152      	b.n	800aaee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a854:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 811c 	beq.w	800aa96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a85e:	e002      	b.n	800a866 <tcp_output+0x156>
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	623b      	str	r3, [r7, #32]
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1f8      	bne.n	800a860 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a86e:	e112      	b.n	800aa96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	899b      	ldrh	r3, [r3, #12]
 800a876:	b29b      	uxth	r3, r3
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f9 ff67 	bl	800474c <lwip_htons>
 800a87e:	4603      	mov	r3, r0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d006      	beq.n	800a898 <tcp_output+0x188>
 800a88a:	4b2f      	ldr	r3, [pc, #188]	; (800a948 <tcp_output+0x238>)
 800a88c:	f240 5236 	movw	r2, #1334	; 0x536
 800a890:	4932      	ldr	r1, [pc, #200]	; (800a95c <tcp_output+0x24c>)
 800a892:	482f      	ldr	r0, [pc, #188]	; (800a950 <tcp_output+0x240>)
 800a894:	f004 f83e 	bl	800e914 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01f      	beq.n	800a8e0 <tcp_output+0x1d0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	8b5b      	ldrh	r3, [r3, #26]
 800a8a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d119      	bne.n	800a8e0 <tcp_output+0x1d0>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <tcp_output+0x1bc>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d110      	bne.n	800a8e0 <tcp_output+0x1d0>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c2:	891a      	ldrh	r2, [r3, #8]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d209      	bcs.n	800a8e0 <tcp_output+0x1d0>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <tcp_output+0x1d0>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d901      	bls.n	800a8e4 <tcp_output+0x1d4>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e000      	b.n	800a8e6 <tcp_output+0x1d6>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	8b5b      	ldrh	r3, [r3, #26]
 800a8ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 80e4 	beq.w	800aac0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7d1b      	ldrb	r3, [r3, #20]
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d00d      	beq.n	800a91c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	b29c      	uxth	r4, r3
 800a908:	2010      	movs	r0, #16
 800a90a:	f7f9 ff1f 	bl	800474c <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4322      	orrs	r2, r4
 800a918:	b292      	uxth	r2, r2
 800a91a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a922:	f000 f909 	bl	800ab38 <tcp_output_segment>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d016      	beq.n	800a960 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	8b5b      	ldrh	r3, [r3, #26]
 800a936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	835a      	strh	r2, [r3, #26]
      return err;
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a944:	e0d3      	b.n	800aaee <tcp_output+0x3de>
 800a946:	bf00      	nop
 800a948:	08011080 	.word	0x08011080
 800a94c:	080115c4 	.word	0x080115c4
 800a950:	080110d4 	.word	0x080110d4
 800a954:	080115dc 	.word	0x080115dc
 800a958:	200082d8 	.word	0x200082d8
 800a95c:	08011604 	.word	0x08011604
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	7d1b      	ldrb	r3, [r3, #20]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d006      	beq.n	800a97e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	8b5b      	ldrh	r3, [r3, #26]
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	b29a      	uxth	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4618      	mov	r0, r3
 800a986:	f7f9 fef6 	bl	8004776 <lwip_htonl>
 800a98a:	4604      	mov	r4, r0
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	891b      	ldrh	r3, [r3, #8]
 800a990:	461d      	mov	r5, r3
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	899b      	ldrh	r3, [r3, #12]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f9 fed6 	bl	800474c <lwip_htons>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0303 	and.w	r3, r3, #3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <tcp_output+0x2a0>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e000      	b.n	800a9b2 <tcp_output+0x2a2>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	442b      	add	r3, r5
 800a9b4:	4423      	add	r3, r4
 800a9b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	da02      	bge.n	800a9ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	891b      	ldrh	r3, [r3, #8]
 800a9ce:	461c      	mov	r4, r3
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	899b      	ldrh	r3, [r3, #12]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7f9 feb7 	bl	800474c <lwip_htons>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <tcp_output+0x2de>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <tcp_output+0x2e0>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4423      	add	r3, r4
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d049      	beq.n	800aa8a <tcp_output+0x37a>
      seg->next = NULL;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d105      	bne.n	800aa10 <tcp_output+0x300>
        pcb->unacked = seg;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa08:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	623b      	str	r3, [r7, #32]
 800aa0e:	e03f      	b.n	800aa90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f9 fead 	bl	8004776 <lwip_htonl>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f9 fea6 	bl	8004776 <lwip_htonl>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	1ae3      	subs	r3, r4, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da24      	bge.n	800aa7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3370      	adds	r3, #112	; 0x70
 800aa36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa38:	e002      	b.n	800aa40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d011      	beq.n	800aa6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7f9 fe90 	bl	8004776 <lwip_htonl>
 800aa56:	4604      	mov	r4, r0
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f9 fe89 	bl	8004776 <lwip_htonl>
 800aa64:	4603      	mov	r3, r0
 800aa66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dbe6      	blt.n	800aa3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	e009      	b.n	800aa90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	623b      	str	r3, [r7, #32]
 800aa88:	e002      	b.n	800aa90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aa8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa8c:	f7fc fc3f 	bl	800730e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f9 fe67 	bl	8004776 <lwip_htonl>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab2:	8912      	ldrh	r2, [r2, #8]
 800aab4:	4413      	add	r3, r2
  while (seg != NULL &&
 800aab6:	69ba      	ldr	r2, [r7, #24]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	f4bf aed9 	bcs.w	800a870 <tcp_output+0x160>
 800aabe:	e000      	b.n	800aac2 <tcp_output+0x3b2>
      break;
 800aac0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d108      	bne.n	800aadc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aad2:	e004      	b.n	800aade <tcp_output+0x3ce>
    goto output_done;
 800aad4:	bf00      	nop
 800aad6:	e002      	b.n	800aade <tcp_output+0x3ce>
    goto output_done;
 800aad8:	bf00      	nop
 800aada:	e000      	b.n	800aade <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aadc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8b5b      	ldrh	r3, [r3, #26]
 800aae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3728      	adds	r7, #40	; 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf6:	bf00      	nop

0800aaf8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <tcp_output_segment_busy+0x1c>
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <tcp_output_segment_busy+0x34>)
 800ab08:	f240 529a 	movw	r2, #1434	; 0x59a
 800ab0c:	4908      	ldr	r1, [pc, #32]	; (800ab30 <tcp_output_segment_busy+0x38>)
 800ab0e:	4809      	ldr	r0, [pc, #36]	; (800ab34 <tcp_output_segment_busy+0x3c>)
 800ab10:	f003 ff00 	bl	800e914 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	7b9b      	ldrb	r3, [r3, #14]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d001      	beq.n	800ab22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	08011080 	.word	0x08011080
 800ab30:	0801161c 	.word	0x0801161c
 800ab34:	080110d4 	.word	0x080110d4

0800ab38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ab38:	b5b0      	push	{r4, r5, r7, lr}
 800ab3a:	b08c      	sub	sp, #48	; 0x30
 800ab3c:	af04      	add	r7, sp, #16
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <tcp_output_segment+0x20>
 800ab4a:	4b63      	ldr	r3, [pc, #396]	; (800acd8 <tcp_output_segment+0x1a0>)
 800ab4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ab50:	4962      	ldr	r1, [pc, #392]	; (800acdc <tcp_output_segment+0x1a4>)
 800ab52:	4863      	ldr	r0, [pc, #396]	; (800ace0 <tcp_output_segment+0x1a8>)
 800ab54:	f003 fede 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <tcp_output_segment+0x34>
 800ab5e:	4b5e      	ldr	r3, [pc, #376]	; (800acd8 <tcp_output_segment+0x1a0>)
 800ab60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ab64:	495f      	ldr	r1, [pc, #380]	; (800ace4 <tcp_output_segment+0x1ac>)
 800ab66:	485e      	ldr	r0, [pc, #376]	; (800ace0 <tcp_output_segment+0x1a8>)
 800ab68:	f003 fed4 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <tcp_output_segment+0x48>
 800ab72:	4b59      	ldr	r3, [pc, #356]	; (800acd8 <tcp_output_segment+0x1a0>)
 800ab74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ab78:	495b      	ldr	r1, [pc, #364]	; (800ace8 <tcp_output_segment+0x1b0>)
 800ab7a:	4859      	ldr	r0, [pc, #356]	; (800ace0 <tcp_output_segment+0x1a8>)
 800ab7c:	f003 feca 	bl	800e914 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff ffb9 	bl	800aaf8 <tcp_output_segment_busy>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e09f      	b.n	800acd0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	68dc      	ldr	r4, [r3, #12]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7f9 fdec 	bl	8004776 <lwip_htonl>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	68dc      	ldr	r4, [r3, #12]
 800abaa:	4610      	mov	r0, r2
 800abac:	f7f9 fdce 	bl	800474c <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800abbc:	441a      	add	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	3314      	adds	r3, #20
 800abc8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	7a9b      	ldrb	r3, [r3, #10]
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d015      	beq.n	800ac02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	3304      	adds	r3, #4
 800abda:	461a      	mov	r2, r3
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	f44f 7006 	mov.w	r0, #536	; 0x218
 800abe2:	f7fc fe8b 	bl	80078fc <tcp_eff_send_mss_netif>
 800abe6:	4603      	mov	r3, r0
 800abe8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800abea:	8b7b      	ldrh	r3, [r7, #26]
 800abec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f9 fdc0 	bl	8004776 <lwip_htonl>
 800abf6:	4602      	mov	r2, r0
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	3304      	adds	r3, #4
 800ac00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da02      	bge.n	800ac12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10c      	bne.n	800ac34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ac1a:	4b34      	ldr	r3, [pc, #208]	; (800acec <tcp_output_segment+0x1b4>)
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7f9 fda4 	bl	8004776 <lwip_htonl>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	8959      	ldrh	r1, [r3, #10]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	8b3a      	ldrh	r2, [r7, #24]
 800ac4e:	1a8a      	subs	r2, r1, r2
 800ac50:	b292      	uxth	r2, r2
 800ac52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	8919      	ldrh	r1, [r3, #8]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	8b3a      	ldrh	r2, [r7, #24]
 800ac60:	1a8a      	subs	r2, r1, r2
 800ac62:	b292      	uxth	r2, r2
 800ac64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	68d2      	ldr	r2, [r2, #12]
 800ac6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	741a      	strb	r2, [r3, #16]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f103 0214 	add.w	r2, r3, #20
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	7a9b      	ldrb	r3, [r3, #10]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	4413      	add	r3, r2
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d006      	beq.n	800aca4 <tcp_output_segment+0x16c>
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <tcp_output_segment+0x1a0>)
 800ac98:	f240 621c 	movw	r2, #1564	; 0x61c
 800ac9c:	4914      	ldr	r1, [pc, #80]	; (800acf0 <tcp_output_segment+0x1b8>)
 800ac9e:	4810      	ldr	r0, [pc, #64]	; (800ace0 <tcp_output_segment+0x1a8>)
 800aca0:	f003 fe38 	bl	800e914 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6858      	ldr	r0, [r3, #4]
 800aca8:	68b9      	ldr	r1, [r7, #8]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	1d1c      	adds	r4, r3, #4
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	7add      	ldrb	r5, [r3, #11]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	7a9b      	ldrb	r3, [r3, #10]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	9202      	str	r2, [sp, #8]
 800acba:	2206      	movs	r2, #6
 800acbc:	9201      	str	r2, [sp, #4]
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	462b      	mov	r3, r5
 800acc2:	4622      	mov	r2, r4
 800acc4:	f002 fdae 	bl	800d824 <ip4_output_if>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800accc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bdb0      	pop	{r4, r5, r7, pc}
 800acd8:	08011080 	.word	0x08011080
 800acdc:	08011644 	.word	0x08011644
 800ace0:	080110d4 	.word	0x080110d4
 800ace4:	08011664 	.word	0x08011664
 800ace8:	08011684 	.word	0x08011684
 800acec:	2000828c 	.word	0x2000828c
 800acf0:	080116a8 	.word	0x080116a8

0800acf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800acf4:	b5b0      	push	{r4, r5, r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <tcp_rexmit_rto_prepare+0x1c>
 800ad02:	4b31      	ldr	r3, [pc, #196]	; (800adc8 <tcp_rexmit_rto_prepare+0xd4>)
 800ad04:	f240 6263 	movw	r2, #1635	; 0x663
 800ad08:	4930      	ldr	r1, [pc, #192]	; (800adcc <tcp_rexmit_rto_prepare+0xd8>)
 800ad0a:	4831      	ldr	r0, [pc, #196]	; (800add0 <tcp_rexmit_rto_prepare+0xdc>)
 800ad0c:	f003 fe02 	bl	800e914 <iprintf>

  if (pcb->unacked == NULL) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ad18:	f06f 0305 	mvn.w	r3, #5
 800ad1c:	e050      	b.n	800adc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e00b      	b.n	800ad3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fee6 	bl	800aaf8 <tcp_output_segment_busy>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ad32:	f06f 0305 	mvn.w	r3, #5
 800ad36:	e043      	b.n	800adc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ef      	bne.n	800ad26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fed6 	bl	800aaf8 <tcp_output_segment_busy>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ad52:	f06f 0305 	mvn.w	r3, #5
 800ad56:	e033      	b.n	800adc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8b5b      	ldrh	r3, [r3, #26]
 800ad72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f9 fcf7 	bl	8004776 <lwip_htonl>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	891b      	ldrh	r3, [r3, #8]
 800ad8e:	461d      	mov	r5, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	899b      	ldrh	r3, [r3, #12]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f9 fcd7 	bl	800474c <lwip_htons>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <tcp_rexmit_rto_prepare+0xba>
 800adaa:	2301      	movs	r3, #1
 800adac:	e000      	b.n	800adb0 <tcp_rexmit_rto_prepare+0xbc>
 800adae:	2300      	movs	r3, #0
 800adb0:	442b      	add	r3, r5
 800adb2:	18e2      	adds	r2, r4, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bdb0      	pop	{r4, r5, r7, pc}
 800adc8:	08011080 	.word	0x08011080
 800adcc:	080116bc 	.word	0x080116bc
 800add0:	080110d4 	.word	0x080110d4

0800add4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <tcp_rexmit_rto_commit+0x1c>
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <tcp_rexmit_rto_commit+0x44>)
 800ade4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ade8:	490c      	ldr	r1, [pc, #48]	; (800ae1c <tcp_rexmit_rto_commit+0x48>)
 800adea:	480d      	ldr	r0, [pc, #52]	; (800ae20 <tcp_rexmit_rto_commit+0x4c>)
 800adec:	f003 fd92 	bl	800e914 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adf6:	2bff      	cmp	r3, #255	; 0xff
 800adf8:	d007      	beq.n	800ae0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae00:	3301      	adds	r3, #1
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fc80 	bl	800a710 <tcp_output>
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	08011080 	.word	0x08011080
 800ae1c:	080116e0 	.word	0x080116e0
 800ae20:	080110d4 	.word	0x080110d4

0800ae24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <tcp_rexmit_rto+0x1c>
 800ae32:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <tcp_rexmit_rto+0x38>)
 800ae34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ae38:	4909      	ldr	r1, [pc, #36]	; (800ae60 <tcp_rexmit_rto+0x3c>)
 800ae3a:	480a      	ldr	r0, [pc, #40]	; (800ae64 <tcp_rexmit_rto+0x40>)
 800ae3c:	f003 fd6a 	bl	800e914 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff ff57 	bl	800acf4 <tcp_rexmit_rto_prepare>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ffc1 	bl	800add4 <tcp_rexmit_rto_commit>
  }
}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	08011080 	.word	0x08011080
 800ae60:	08011704 	.word	0x08011704
 800ae64:	080110d4 	.word	0x080110d4

0800ae68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d106      	bne.n	800ae84 <tcp_rexmit+0x1c>
 800ae76:	4b2f      	ldr	r3, [pc, #188]	; (800af34 <tcp_rexmit+0xcc>)
 800ae78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ae7c:	492e      	ldr	r1, [pc, #184]	; (800af38 <tcp_rexmit+0xd0>)
 800ae7e:	482f      	ldr	r0, [pc, #188]	; (800af3c <tcp_rexmit+0xd4>)
 800ae80:	f003 fd48 	bl	800e914 <iprintf>

  if (pcb->unacked == NULL) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ae8c:	f06f 0305 	mvn.w	r3, #5
 800ae90:	e04c      	b.n	800af2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7ff fe2d 	bl	800aaf8 <tcp_output_segment_busy>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800aea4:	f06f 0305 	mvn.w	r3, #5
 800aea8:	e040      	b.n	800af2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	336c      	adds	r3, #108	; 0x6c
 800aeb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aeb8:	e002      	b.n	800aec0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d011      	beq.n	800aeec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f9 fc50 	bl	8004776 <lwip_htonl>
 800aed6:	4604      	mov	r4, r0
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f9 fc49 	bl	8004776 <lwip_htonl>
 800aee4:	4603      	mov	r3, r0
 800aee6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	dbe6      	blt.n	800aeba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d103      	bne.n	800af0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af10:	2bff      	cmp	r3, #255	; 0xff
 800af12:	d007      	beq.n	800af24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af1a:	3301      	adds	r3, #1
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	08011080 	.word	0x08011080
 800af38:	08011720 	.word	0x08011720
 800af3c:	080110d4 	.word	0x080110d4

0800af40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <tcp_rexmit_fast+0x1c>
 800af4e:	4b2a      	ldr	r3, [pc, #168]	; (800aff8 <tcp_rexmit_fast+0xb8>)
 800af50:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800af54:	4929      	ldr	r1, [pc, #164]	; (800affc <tcp_rexmit_fast+0xbc>)
 800af56:	482a      	ldr	r0, [pc, #168]	; (800b000 <tcp_rexmit_fast+0xc0>)
 800af58:	f003 fcdc 	bl	800e914 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af60:	2b00      	cmp	r3, #0
 800af62:	d044      	beq.n	800afee <tcp_rexmit_fast+0xae>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	8b5b      	ldrh	r3, [r3, #26]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d13e      	bne.n	800afee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff ff79 	bl	800ae68 <tcp_rexmit>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d138      	bne.n	800afee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af88:	4293      	cmp	r3, r2
 800af8a:	bf28      	it	cs
 800af8c:	4613      	movcs	r3, r2
 800af8e:	b29b      	uxth	r3, r3
 800af90:	0fda      	lsrs	r2, r3, #31
 800af92:	4413      	add	r3, r2
 800af94:	105b      	asrs	r3, r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800afa4:	461a      	mov	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	429a      	cmp	r2, r3
 800afae:	d206      	bcs.n	800afbe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afc8:	4619      	mov	r1, r3
 800afca:	0049      	lsls	r1, r1, #1
 800afcc:	440b      	add	r3, r1
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4413      	add	r3, r2
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	8b5b      	ldrh	r3, [r3, #26]
 800afde:	f043 0304 	orr.w	r3, r3, #4
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	08011080 	.word	0x08011080
 800affc:	08011738 	.word	0x08011738
 800b000:	080110d4 	.word	0x080110d4

0800b004 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	607b      	str	r3, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	817b      	strh	r3, [r7, #10]
 800b012:	4613      	mov	r3, r2
 800b014:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b016:	897a      	ldrh	r2, [r7, #10]
 800b018:	893b      	ldrh	r3, [r7, #8]
 800b01a:	4413      	add	r3, r2
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	3314      	adds	r3, #20
 800b020:	b29b      	uxth	r3, r3
 800b022:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b026:	4619      	mov	r1, r3
 800b028:	2022      	movs	r0, #34	; 0x22
 800b02a:	f7fa fc09 	bl	8005840 <pbuf_alloc>
 800b02e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d04d      	beq.n	800b0d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b036:	897b      	ldrh	r3, [r7, #10]
 800b038:	3313      	adds	r3, #19
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	8952      	ldrh	r2, [r2, #10]
 800b03e:	4293      	cmp	r3, r2
 800b040:	db06      	blt.n	800b050 <tcp_output_alloc_header_common+0x4c>
 800b042:	4b26      	ldr	r3, [pc, #152]	; (800b0dc <tcp_output_alloc_header_common+0xd8>)
 800b044:	f240 7223 	movw	r2, #1827	; 0x723
 800b048:	4925      	ldr	r1, [pc, #148]	; (800b0e0 <tcp_output_alloc_header_common+0xdc>)
 800b04a:	4826      	ldr	r0, [pc, #152]	; (800b0e4 <tcp_output_alloc_header_common+0xe0>)
 800b04c:	f003 fc62 	bl	800e914 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b056:	8c3b      	ldrh	r3, [r7, #32]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f9 fb77 	bl	800474c <lwip_htons>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f9 fb6f 	bl	800474c <lwip_htons>
 800b06e:	4603      	mov	r3, r0
 800b070:	461a      	mov	r2, r3
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7f9 fb7a 	bl	8004776 <lwip_htonl>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b088:	897b      	ldrh	r3, [r7, #10]
 800b08a:	089b      	lsrs	r3, r3, #2
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	3305      	adds	r3, #5
 800b090:	b29b      	uxth	r3, r3
 800b092:	031b      	lsls	r3, r3, #12
 800b094:	b29a      	uxth	r2, r3
 800b096:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4313      	orrs	r3, r2
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7f9 fb53 	bl	800474c <lwip_htons>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b0ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f9 fb4b 	bl	800474c <lwip_htons>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	741a      	strb	r2, [r3, #16]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	749a      	strb	r2, [r3, #18]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b0d2:	697b      	ldr	r3, [r7, #20]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	08011080 	.word	0x08011080
 800b0e0:	08011758 	.word	0x08011758
 800b0e4:	080110d4 	.word	0x080110d4

0800b0e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b0e8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ea:	b08a      	sub	sp, #40	; 0x28
 800b0ec:	af04      	add	r7, sp, #16
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	607b      	str	r3, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	817b      	strh	r3, [r7, #10]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <tcp_output_alloc_header+0x26>
 800b100:	4b15      	ldr	r3, [pc, #84]	; (800b158 <tcp_output_alloc_header+0x70>)
 800b102:	f240 7242 	movw	r2, #1858	; 0x742
 800b106:	4915      	ldr	r1, [pc, #84]	; (800b15c <tcp_output_alloc_header+0x74>)
 800b108:	4815      	ldr	r0, [pc, #84]	; (800b160 <tcp_output_alloc_header+0x78>)
 800b10a:	f003 fc03 	bl	800e914 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8adb      	ldrh	r3, [r3, #22]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	8b12      	ldrh	r2, [r2, #24]
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b11e:	893d      	ldrh	r5, [r7, #8]
 800b120:	897c      	ldrh	r4, [r7, #10]
 800b122:	9103      	str	r1, [sp, #12]
 800b124:	2110      	movs	r1, #16
 800b126:	9102      	str	r1, [sp, #8]
 800b128:	9201      	str	r2, [sp, #4]
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	462a      	mov	r2, r5
 800b130:	4621      	mov	r1, r4
 800b132:	f7ff ff67 	bl	800b004 <tcp_output_alloc_header_common>
 800b136:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d006      	beq.n	800b14c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b146:	441a      	add	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b14c:	697b      	ldr	r3, [r7, #20]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bdb0      	pop	{r4, r5, r7, pc}
 800b156:	bf00      	nop
 800b158:	08011080 	.word	0x08011080
 800b15c:	08011788 	.word	0x08011788
 800b160:	080110d4 	.word	0x080110d4

0800b164 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4611      	mov	r1, r2
 800b170:	461a      	mov	r2, r3
 800b172:	460b      	mov	r3, r1
 800b174:	71fb      	strb	r3, [r7, #7]
 800b176:	4613      	mov	r3, r2
 800b178:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <tcp_output_fill_options+0x2e>
 800b184:	4b13      	ldr	r3, [pc, #76]	; (800b1d4 <tcp_output_fill_options+0x70>)
 800b186:	f240 7256 	movw	r2, #1878	; 0x756
 800b18a:	4913      	ldr	r1, [pc, #76]	; (800b1d8 <tcp_output_fill_options+0x74>)
 800b18c:	4813      	ldr	r0, [pc, #76]	; (800b1dc <tcp_output_fill_options+0x78>)
 800b18e:	f003 fbc1 	bl	800e914 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	3314      	adds	r3, #20
 800b19c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	f103 0214 	add.w	r2, r3, #20
 800b1a4:	8bfb      	ldrh	r3, [r7, #30]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	440b      	add	r3, r1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d006      	beq.n	800b1ca <tcp_output_fill_options+0x66>
 800b1bc:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <tcp_output_fill_options+0x70>)
 800b1be:	f240 7275 	movw	r2, #1909	; 0x775
 800b1c2:	4907      	ldr	r1, [pc, #28]	; (800b1e0 <tcp_output_fill_options+0x7c>)
 800b1c4:	4805      	ldr	r0, [pc, #20]	; (800b1dc <tcp_output_fill_options+0x78>)
 800b1c6:	f003 fba5 	bl	800e914 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b1ca:	bf00      	nop
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	08011080 	.word	0x08011080
 800b1d8:	080117b0 	.word	0x080117b0
 800b1dc:	080110d4 	.word	0x080110d4
 800b1e0:	080116a8 	.word	0x080116a8

0800b1e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08a      	sub	sp, #40	; 0x28
 800b1e8:	af04      	add	r7, sp, #16
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <tcp_output_control_segment+0x22>
 800b1f8:	4b1c      	ldr	r3, [pc, #112]	; (800b26c <tcp_output_control_segment+0x88>)
 800b1fa:	f240 7287 	movw	r2, #1927	; 0x787
 800b1fe:	491c      	ldr	r1, [pc, #112]	; (800b270 <tcp_output_control_segment+0x8c>)
 800b200:	481c      	ldr	r0, [pc, #112]	; (800b274 <tcp_output_control_segment+0x90>)
 800b202:	f003 fb87 	bl	800e914 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7fe ff40 	bl	800a090 <tcp_route>
 800b210:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b218:	23fc      	movs	r3, #252	; 0xfc
 800b21a:	75fb      	strb	r3, [r7, #23]
 800b21c:	e01c      	b.n	800b258 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	7adb      	ldrb	r3, [r3, #11]
 800b228:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	7a9b      	ldrb	r3, [r3, #10]
 800b22e:	757b      	strb	r3, [r7, #21]
 800b230:	e003      	b.n	800b23a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b232:	23ff      	movs	r3, #255	; 0xff
 800b234:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b23a:	7dba      	ldrb	r2, [r7, #22]
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	2306      	movs	r3, #6
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	7d7b      	ldrb	r3, [r7, #21]
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	4613      	mov	r3, r2
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	6879      	ldr	r1, [r7, #4]
 800b24e:	68b8      	ldr	r0, [r7, #8]
 800b250:	f002 fae8 	bl	800d824 <ip4_output_if>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b258:	68b8      	ldr	r0, [r7, #8]
 800b25a:	f7fa fdd5 	bl	8005e08 <pbuf_free>
  return err;
 800b25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	08011080 	.word	0x08011080
 800b270:	080117d8 	.word	0x080117d8
 800b274:	080110d4 	.word	0x080110d4

0800b278 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b08b      	sub	sp, #44	; 0x2c
 800b27c:	af04      	add	r7, sp, #16
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d106      	bne.n	800b29a <tcp_rst+0x22>
 800b28c:	4b1f      	ldr	r3, [pc, #124]	; (800b30c <tcp_rst+0x94>)
 800b28e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b292:	491f      	ldr	r1, [pc, #124]	; (800b310 <tcp_rst+0x98>)
 800b294:	481f      	ldr	r0, [pc, #124]	; (800b314 <tcp_rst+0x9c>)
 800b296:	f003 fb3d 	bl	800e914 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <tcp_rst+0x36>
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <tcp_rst+0x94>)
 800b2a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b2a6:	491c      	ldr	r1, [pc, #112]	; (800b318 <tcp_rst+0xa0>)
 800b2a8:	481a      	ldr	r0, [pc, #104]	; (800b314 <tcp_rst+0x9c>)
 800b2aa:	f003 fb33 	bl	800e914 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b2b2:	f246 0308 	movw	r3, #24584	; 0x6008
 800b2b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	b29c      	uxth	r4, r3
 800b2bc:	68b8      	ldr	r0, [r7, #8]
 800b2be:	f7f9 fa5a 	bl	8004776 <lwip_htonl>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	8abb      	ldrh	r3, [r7, #20]
 800b2c6:	9303      	str	r3, [sp, #12]
 800b2c8:	2314      	movs	r3, #20
 800b2ca:	9302      	str	r3, [sp, #8]
 800b2cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4621      	mov	r1, r4
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fe92 	bl	800b004 <tcp_output_alloc_header_common>
 800b2e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00c      	beq.n	800b302 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	6939      	ldr	r1, [r7, #16]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff ff38 	bl	800b164 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	6939      	ldr	r1, [r7, #16]
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7ff ff72 	bl	800b1e4 <tcp_output_control_segment>
 800b300:	e000      	b.n	800b304 <tcp_rst+0x8c>
    return;
 800b302:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	bd90      	pop	{r4, r7, pc}
 800b30a:	bf00      	nop
 800b30c:	08011080 	.word	0x08011080
 800b310:	08011804 	.word	0x08011804
 800b314:	080110d4 	.word	0x080110d4
 800b318:	08011820 	.word	0x08011820

0800b31c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b31c:	b590      	push	{r4, r7, lr}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <tcp_send_empty_ack+0x24>
 800b332:	4b28      	ldr	r3, [pc, #160]	; (800b3d4 <tcp_send_empty_ack+0xb8>)
 800b334:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b338:	4927      	ldr	r1, [pc, #156]	; (800b3d8 <tcp_send_empty_ack+0xbc>)
 800b33a:	4828      	ldr	r0, [pc, #160]	; (800b3dc <tcp_send_empty_ack+0xc0>)
 800b33c:	f003 faea 	bl	800e914 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	b2db      	uxtb	r3, r3
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b34c:	7d7b      	ldrb	r3, [r7, #21]
 800b34e:	b29c      	uxth	r4, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b354:	4618      	mov	r0, r3
 800b356:	f7f9 fa0e 	bl	8004776 <lwip_htonl>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2200      	movs	r2, #0
 800b35e:	4621      	mov	r1, r4
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fec1 	bl	800b0e8 <tcp_output_alloc_header>
 800b366:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d109      	bne.n	800b382 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	8b5b      	ldrh	r3, [r3, #26]
 800b372:	f043 0303 	orr.w	r3, r3, #3
 800b376:	b29a      	uxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b37c:	f06f 0301 	mvn.w	r3, #1
 800b380:	e023      	b.n	800b3ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b382:	7dbb      	ldrb	r3, [r7, #22]
 800b384:	7dfa      	ldrb	r2, [r7, #23]
 800b386:	6939      	ldr	r1, [r7, #16]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff feeb 	bl	800b164 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3304      	adds	r3, #4
 800b394:	6939      	ldr	r1, [r7, #16]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ff24 	bl	800b1e4 <tcp_output_control_segment>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8b5b      	ldrh	r3, [r3, #26]
 800b3ac:	f043 0303 	orr.w	r3, r3, #3
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	835a      	strh	r2, [r3, #26]
 800b3b6:	e006      	b.n	800b3c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	8b5b      	ldrh	r3, [r3, #26]
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd90      	pop	{r4, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	08011080 	.word	0x08011080
 800b3d8:	0801183c 	.word	0x0801183c
 800b3dc:	080110d4 	.word	0x080110d4

0800b3e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b3e0:	b590      	push	{r4, r7, lr}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <tcp_keepalive+0x20>
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <tcp_keepalive+0x74>)
 800b3f4:	f640 0224 	movw	r2, #2084	; 0x824
 800b3f8:	4917      	ldr	r1, [pc, #92]	; (800b458 <tcp_keepalive+0x78>)
 800b3fa:	4818      	ldr	r0, [pc, #96]	; (800b45c <tcp_keepalive+0x7c>)
 800b3fc:	f003 fa8a 	bl	800e914 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	b29c      	uxth	r4, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	3b01      	subs	r3, #1
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f9 f9b3 	bl	8004776 <lwip_htonl>
 800b410:	4603      	mov	r3, r0
 800b412:	2200      	movs	r2, #0
 800b414:	4621      	mov	r1, r4
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fe66 	bl	800b0e8 <tcp_output_alloc_header>
 800b41c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b424:	f04f 33ff 	mov.w	r3, #4294967295
 800b428:	e010      	b.n	800b44c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	2200      	movs	r2, #0
 800b42e:	6939      	ldr	r1, [r7, #16]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fe97 	bl	800b164 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	6939      	ldr	r1, [r7, #16]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fed0 	bl	800b1e4 <tcp_output_control_segment>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	bd90      	pop	{r4, r7, pc}
 800b454:	08011080 	.word	0x08011080
 800b458:	0801185c 	.word	0x0801185c
 800b45c:	080110d4 	.word	0x080110d4

0800b460 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b460:	b590      	push	{r4, r7, lr}
 800b462:	b08b      	sub	sp, #44	; 0x2c
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <tcp_zero_window_probe+0x22>
 800b474:	4b4c      	ldr	r3, [pc, #304]	; (800b5a8 <tcp_zero_window_probe+0x148>)
 800b476:	f640 024f 	movw	r2, #2127	; 0x84f
 800b47a:	494c      	ldr	r1, [pc, #304]	; (800b5ac <tcp_zero_window_probe+0x14c>)
 800b47c:	484c      	ldr	r0, [pc, #304]	; (800b5b0 <tcp_zero_window_probe+0x150>)
 800b47e:	f003 fa49 	bl	800e914 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b486:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	e086      	b.n	800b5a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b498:	2bff      	cmp	r3, #255	; 0xff
 800b49a:	d007      	beq.n	800b4ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	899b      	ldrh	r3, [r3, #12]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f9 f949 	bl	800474c <lwip_htons>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <tcp_zero_window_probe+0x72>
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	891b      	ldrh	r3, [r3, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <tcp_zero_window_probe+0x72>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e000      	b.n	800b4d4 <tcp_zero_window_probe+0x74>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b4d6:	7ffb      	ldrb	r3, [r7, #31]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bf0c      	ite	eq
 800b4dc:	2301      	moveq	r3, #1
 800b4de:	2300      	movne	r3, #0
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4e8:	b299      	uxth	r1, r3
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	8bba      	ldrh	r2, [r7, #28]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fdf8 	bl	800b0e8 <tcp_output_alloc_header>
 800b4f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	e04c      	b.n	800b5a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b50c:	7ffb      	ldrb	r3, [r7, #31]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d011      	beq.n	800b536 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	899b      	ldrh	r3, [r3, #12]
 800b516:	b29b      	uxth	r3, r3
 800b518:	b21b      	sxth	r3, r3
 800b51a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b51e:	b21c      	sxth	r4, r3
 800b520:	2011      	movs	r0, #17
 800b522:	f7f9 f913 	bl	800474c <lwip_htons>
 800b526:	4603      	mov	r3, r0
 800b528:	b21b      	sxth	r3, r3
 800b52a:	4323      	orrs	r3, r4
 800b52c:	b21b      	sxth	r3, r3
 800b52e:	b29a      	uxth	r2, r3
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	819a      	strh	r2, [r3, #12]
 800b534:	e010      	b.n	800b558 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	3314      	adds	r3, #20
 800b53c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	6858      	ldr	r0, [r3, #4]
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	891a      	ldrh	r2, [r3, #8]
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	891b      	ldrh	r3, [r3, #8]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	b29b      	uxth	r3, r3
 800b550:	2201      	movs	r2, #1
 800b552:	6939      	ldr	r1, [r7, #16]
 800b554:	f7fa fe52 	bl	80061fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f9 f909 	bl	8004776 <lwip_htonl>
 800b564:	4603      	mov	r3, r0
 800b566:	3301      	adds	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	da02      	bge.n	800b57c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b580:	2200      	movs	r2, #0
 800b582:	69b9      	ldr	r1, [r7, #24]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff fded 	bl	800b164 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3304      	adds	r3, #4
 800b590:	69b9      	ldr	r1, [r7, #24]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff fe26 	bl	800b1e4 <tcp_output_control_segment>
 800b598:	4603      	mov	r3, r0
 800b59a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b59c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	372c      	adds	r7, #44	; 0x2c
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd90      	pop	{r4, r7, pc}
 800b5a8:	08011080 	.word	0x08011080
 800b5ac:	08011878 	.word	0x08011878
 800b5b0:	080110d4 	.word	0x080110d4

0800b5b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b5bc:	f7fa ff0c 	bl	80063d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <tcpip_tcp_timer+0x38>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d103      	bne.n	800b5d0 <tcpip_tcp_timer+0x1c>
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <tcpip_tcp_timer+0x3c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d005      	beq.n	800b5dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4908      	ldr	r1, [pc, #32]	; (800b5f4 <tcpip_tcp_timer+0x40>)
 800b5d4:	20fa      	movs	r0, #250	; 0xfa
 800b5d6:	f000 f8f3 	bl	800b7c0 <sys_timeout>
 800b5da:	e003      	b.n	800b5e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <tcpip_tcp_timer+0x44>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
  }
}
 800b5e2:	bf00      	nop
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20008298 	.word	0x20008298
 800b5f0:	2000829c 	.word	0x2000829c
 800b5f4:	0800b5b5 	.word	0x0800b5b5
 800b5f8:	200082e4 	.word	0x200082e4

0800b5fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <tcp_timer_needed+0x30>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10f      	bne.n	800b628 <tcp_timer_needed+0x2c>
 800b608:	4b09      	ldr	r3, [pc, #36]	; (800b630 <tcp_timer_needed+0x34>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d103      	bne.n	800b618 <tcp_timer_needed+0x1c>
 800b610:	4b08      	ldr	r3, [pc, #32]	; (800b634 <tcp_timer_needed+0x38>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d007      	beq.n	800b628 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b618:	4b04      	ldr	r3, [pc, #16]	; (800b62c <tcp_timer_needed+0x30>)
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b61e:	2200      	movs	r2, #0
 800b620:	4905      	ldr	r1, [pc, #20]	; (800b638 <tcp_timer_needed+0x3c>)
 800b622:	20fa      	movs	r0, #250	; 0xfa
 800b624:	f000 f8cc 	bl	800b7c0 <sys_timeout>
  }
}
 800b628:	bf00      	nop
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	200082e4 	.word	0x200082e4
 800b630:	20008298 	.word	0x20008298
 800b634:	2000829c 	.word	0x2000829c
 800b638:	0800b5b5 	.word	0x0800b5b5

0800b63c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b648:	2006      	movs	r0, #6
 800b64a:	f7f9 fcf7 	bl	800503c <memp_malloc>
 800b64e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d109      	bne.n	800b66a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d151      	bne.n	800b700 <sys_timeout_abs+0xc4>
 800b65c:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <sys_timeout_abs+0xcc>)
 800b65e:	22be      	movs	r2, #190	; 0xbe
 800b660:	492a      	ldr	r1, [pc, #168]	; (800b70c <sys_timeout_abs+0xd0>)
 800b662:	482b      	ldr	r0, [pc, #172]	; (800b710 <sys_timeout_abs+0xd4>)
 800b664:	f003 f956 	bl	800e914 <iprintf>
    return;
 800b668:	e04a      	b.n	800b700 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b682:	4b24      	ldr	r3, [pc, #144]	; (800b714 <sys_timeout_abs+0xd8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d103      	bne.n	800b692 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b68a:	4a22      	ldr	r2, [pc, #136]	; (800b714 <sys_timeout_abs+0xd8>)
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	6013      	str	r3, [r2, #0]
    return;
 800b690:	e037      	b.n	800b702 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b1f      	ldr	r3, [pc, #124]	; (800b714 <sys_timeout_abs+0xd8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	0fdb      	lsrs	r3, r3, #31
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b6aa:	4b1a      	ldr	r3, [pc, #104]	; (800b714 <sys_timeout_abs+0xd8>)
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b6b2:	4a18      	ldr	r2, [pc, #96]	; (800b714 <sys_timeout_abs+0xd8>)
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	e023      	b.n	800b702 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b6ba:	4b16      	ldr	r3, [pc, #88]	; (800b714 <sys_timeout_abs+0xd8>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	617b      	str	r3, [r7, #20]
 800b6c0:	e01a      	b.n	800b6f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00b      	beq.n	800b6e2 <sys_timeout_abs+0xa6>
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	0fdb      	lsrs	r3, r3, #31
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d007      	beq.n	800b6f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	601a      	str	r2, [r3, #0]
        break;
 800b6f0:	e007      	b.n	800b702 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e1      	bne.n	800b6c2 <sys_timeout_abs+0x86>
 800b6fe:	e000      	b.n	800b702 <sys_timeout_abs+0xc6>
    return;
 800b700:	bf00      	nop
      }
    }
  }
}
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	0801189c 	.word	0x0801189c
 800b70c:	080118d0 	.word	0x080118d0
 800b710:	08011910 	.word	0x08011910
 800b714:	200082dc 	.word	0x200082dc

0800b718 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	4798      	blx	r3

  now = sys_now();
 800b72a:	f7f8 fe17 	bl	800435c <sys_now>
 800b72e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	4b0f      	ldr	r3, [pc, #60]	; (800b774 <lwip_cyclic_timer+0x5c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4413      	add	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	0fdb      	lsrs	r3, r3, #31
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	4413      	add	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	4907      	ldr	r1, [pc, #28]	; (800b778 <lwip_cyclic_timer+0x60>)
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff ff6e 	bl	800b63c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b760:	e004      	b.n	800b76c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	4904      	ldr	r1, [pc, #16]	; (800b778 <lwip_cyclic_timer+0x60>)
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff ff68 	bl	800b63c <sys_timeout_abs>
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200082e0 	.word	0x200082e0
 800b778:	0800b719 	.word	0x0800b719

0800b77c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b782:	2301      	movs	r3, #1
 800b784:	607b      	str	r3, [r7, #4]
 800b786:	e00e      	b.n	800b7a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b788:	4a0b      	ldr	r2, [pc, #44]	; (800b7b8 <sys_timeouts_init+0x3c>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	4a08      	ldr	r2, [pc, #32]	; (800b7b8 <sys_timeouts_init+0x3c>)
 800b796:	4413      	add	r3, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	4908      	ldr	r1, [pc, #32]	; (800b7bc <sys_timeouts_init+0x40>)
 800b79c:	f000 f810 	bl	800b7c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	607b      	str	r3, [r7, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d9ed      	bls.n	800b788 <sys_timeouts_init+0xc>
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	08012488 	.word	0x08012488
 800b7bc:	0800b719 	.word	0x0800b719

0800b7c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d2:	d306      	bcc.n	800b7e2 <sys_timeout+0x22>
 800b7d4:	4b0a      	ldr	r3, [pc, #40]	; (800b800 <sys_timeout+0x40>)
 800b7d6:	f240 1229 	movw	r2, #297	; 0x129
 800b7da:	490a      	ldr	r1, [pc, #40]	; (800b804 <sys_timeout+0x44>)
 800b7dc:	480a      	ldr	r0, [pc, #40]	; (800b808 <sys_timeout+0x48>)
 800b7de:	f003 f899 	bl	800e914 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b7e2:	f7f8 fdbb 	bl	800435c <sys_now>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	6978      	ldr	r0, [r7, #20]
 800b7f4:	f7ff ff22 	bl	800b63c <sys_timeout_abs>
#endif
}
 800b7f8:	bf00      	nop
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	0801189c 	.word	0x0801189c
 800b804:	08011938 	.word	0x08011938
 800b808:	08011910 	.word	0x08011910

0800b80c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b812:	f7f8 fda3 	bl	800435c <sys_now>
 800b816:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b818:	4b1a      	ldr	r3, [pc, #104]	; (800b884 <sys_check_timeouts+0x78>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <sys_check_timeouts+0x1a>
 800b822:	f7f9 ffb7 	bl	8005794 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b826:	4b18      	ldr	r3, [pc, #96]	; (800b888 <sys_check_timeouts+0x7c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d022      	beq.n	800b878 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	0fdb      	lsrs	r3, r3, #31
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d11a      	bne.n	800b87c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a0f      	ldr	r2, [pc, #60]	; (800b888 <sys_check_timeouts+0x7c>)
 800b84c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <sys_check_timeouts+0x80>)
 800b860:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	2006      	movs	r0, #6
 800b866:	f7f9 fc59 	bl	800511c <memp_free>
    if (handler != NULL) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0d3      	beq.n	800b818 <sys_check_timeouts+0xc>
      handler(arg);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6838      	ldr	r0, [r7, #0]
 800b874:	4798      	blx	r3
  do {
 800b876:	e7cf      	b.n	800b818 <sys_check_timeouts+0xc>
      return;
 800b878:	bf00      	nop
 800b87a:	e000      	b.n	800b87e <sys_check_timeouts+0x72>
      return;
 800b87c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20008289 	.word	0x20008289
 800b888:	200082dc 	.word	0x200082dc
 800b88c:	200082e0 	.word	0x200082e0

0800b890 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b894:	f003 f856 	bl	800e944 <rand>
 800b898:	4603      	mov	r3, r0
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	4b01      	ldr	r3, [pc, #4]	; (800b8b0 <udp_init+0x20>)
 800b8aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b8ac:	bf00      	nop
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000028 	.word	0x20000028

0800b8b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b8be:	4b17      	ldr	r3, [pc, #92]	; (800b91c <udp_new_port+0x68>)
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	b291      	uxth	r1, r2
 800b8c6:	4a15      	ldr	r2, [pc, #84]	; (800b91c <udp_new_port+0x68>)
 800b8c8:	8011      	strh	r1, [r2, #0]
 800b8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d103      	bne.n	800b8da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b8d2:	4b12      	ldr	r3, [pc, #72]	; (800b91c <udp_new_port+0x68>)
 800b8d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b8d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8da:	4b11      	ldr	r3, [pc, #68]	; (800b920 <udp_new_port+0x6c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	e011      	b.n	800b906 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	8a5a      	ldrh	r2, [r3, #18]
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <udp_new_port+0x68>)
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d108      	bne.n	800b900 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b8ee:	88fb      	ldrh	r3, [r7, #6]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	80fb      	strh	r3, [r7, #6]
 800b8f4:	88fb      	ldrh	r3, [r7, #6]
 800b8f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8fa:	d3e0      	bcc.n	800b8be <udp_new_port+0xa>
        return 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e007      	b.n	800b910 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	603b      	str	r3, [r7, #0]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1ea      	bne.n	800b8e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b90c:	4b03      	ldr	r3, [pc, #12]	; (800b91c <udp_new_port+0x68>)
 800b90e:	881b      	ldrh	r3, [r3, #0]
}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20000028 	.word	0x20000028
 800b920:	200082e8 	.word	0x200082e8

0800b924 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4613      	mov	r3, r2
 800b930:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d105      	bne.n	800b944 <udp_input_local_match+0x20>
 800b938:	4b27      	ldr	r3, [pc, #156]	; (800b9d8 <udp_input_local_match+0xb4>)
 800b93a:	2287      	movs	r2, #135	; 0x87
 800b93c:	4927      	ldr	r1, [pc, #156]	; (800b9dc <udp_input_local_match+0xb8>)
 800b93e:	4828      	ldr	r0, [pc, #160]	; (800b9e0 <udp_input_local_match+0xbc>)
 800b940:	f002 ffe8 	bl	800e914 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d105      	bne.n	800b956 <udp_input_local_match+0x32>
 800b94a:	4b23      	ldr	r3, [pc, #140]	; (800b9d8 <udp_input_local_match+0xb4>)
 800b94c:	2288      	movs	r2, #136	; 0x88
 800b94e:	4925      	ldr	r1, [pc, #148]	; (800b9e4 <udp_input_local_match+0xc0>)
 800b950:	4823      	ldr	r0, [pc, #140]	; (800b9e0 <udp_input_local_match+0xbc>)
 800b952:	f002 ffdf 	bl	800e914 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	7a1b      	ldrb	r3, [r3, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	7a1a      	ldrb	r2, [r3, #8]
 800b962:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <udp_input_local_match+0xc4>)
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b96a:	3301      	adds	r3, #1
 800b96c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b96e:	429a      	cmp	r2, r3
 800b970:	d001      	beq.n	800b976 <udp_input_local_match+0x52>
    return 0;
 800b972:	2300      	movs	r3, #0
 800b974:	e02b      	b.n	800b9ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d018      	beq.n	800b9ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d013      	beq.n	800b9aa <udp_input_local_match+0x86>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00f      	beq.n	800b9aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b98a:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <udp_input_local_match+0xc4>)
 800b98c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b992:	d00a      	beq.n	800b9aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <udp_input_local_match+0xc4>)
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	405a      	eors	r2, r3
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d110      	bne.n	800b9cc <udp_input_local_match+0xa8>
          return 1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e00f      	b.n	800b9ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d009      	beq.n	800b9c8 <udp_input_local_match+0xa4>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d005      	beq.n	800b9c8 <udp_input_local_match+0xa4>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <udp_input_local_match+0xc4>)
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d101      	bne.n	800b9cc <udp_input_local_match+0xa8>
        return 1;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e000      	b.n	800b9ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	08011984 	.word	0x08011984
 800b9dc:	080119b4 	.word	0x080119b4
 800b9e0:	080119d8 	.word	0x080119d8
 800b9e4:	08011a00 	.word	0x08011a00
 800b9e8:	20004d1c 	.word	0x20004d1c

0800b9ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b08d      	sub	sp, #52	; 0x34
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <udp_input+0x20>
 800ba00:	4b7c      	ldr	r3, [pc, #496]	; (800bbf4 <udp_input+0x208>)
 800ba02:	22cf      	movs	r2, #207	; 0xcf
 800ba04:	497c      	ldr	r1, [pc, #496]	; (800bbf8 <udp_input+0x20c>)
 800ba06:	487d      	ldr	r0, [pc, #500]	; (800bbfc <udp_input+0x210>)
 800ba08:	f002 ff84 	bl	800e914 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <udp_input+0x32>
 800ba12:	4b78      	ldr	r3, [pc, #480]	; (800bbf4 <udp_input+0x208>)
 800ba14:	22d0      	movs	r2, #208	; 0xd0
 800ba16:	497a      	ldr	r1, [pc, #488]	; (800bc00 <udp_input+0x214>)
 800ba18:	4878      	ldr	r0, [pc, #480]	; (800bbfc <udp_input+0x210>)
 800ba1a:	f002 ff7b 	bl	800e914 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	895b      	ldrh	r3, [r3, #10]
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d803      	bhi.n	800ba2e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7fa f9ee 	bl	8005e08 <pbuf_free>
    goto end;
 800ba2c:	e0de      	b.n	800bbec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ba34:	4b73      	ldr	r3, [pc, #460]	; (800bc04 <udp_input+0x218>)
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	4a72      	ldr	r2, [pc, #456]	; (800bc04 <udp_input+0x218>)
 800ba3a:	6812      	ldr	r2, [r2, #0]
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 ffc8 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800ba44:	4603      	mov	r3, r0
 800ba46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7f8 fe7c 	bl	800474c <lwip_htons>
 800ba54:	4603      	mov	r3, r0
 800ba56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	885b      	ldrh	r3, [r3, #2]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f8 fe74 	bl	800474c <lwip_htons>
 800ba64:	4603      	mov	r3, r0
 800ba66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba74:	4b64      	ldr	r3, [pc, #400]	; (800bc08 <udp_input+0x21c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7a:	e054      	b.n	800bb26 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	8a5b      	ldrh	r3, [r3, #18]
 800ba80:	89fa      	ldrh	r2, [r7, #14]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d14a      	bne.n	800bb1c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ba86:	7cfb      	ldrb	r3, [r7, #19]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba8e:	f7ff ff49 	bl	800b924 <udp_input_local_match>
 800ba92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d041      	beq.n	800bb1c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	7c1b      	ldrb	r3, [r3, #16]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d11d      	bne.n	800bae0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	61fb      	str	r3, [r7, #28]
 800baae:	e017      	b.n	800bae0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bab0:	7cfb      	ldrb	r3, [r7, #19]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d014      	beq.n	800bae0 <udp_input+0xf4>
 800bab6:	4b53      	ldr	r3, [pc, #332]	; (800bc04 <udp_input+0x218>)
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babe:	d10f      	bne.n	800bae0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	3304      	adds	r3, #4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d008      	beq.n	800bae0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	3304      	adds	r3, #4
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d101      	bne.n	800bae0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	8a9b      	ldrh	r3, [r3, #20]
 800bae4:	8a3a      	ldrh	r2, [r7, #16]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d118      	bne.n	800bb1c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	4b43      	ldr	r3, [pc, #268]	; (800bc04 <udp_input+0x218>)
 800baf8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d10e      	bne.n	800bb1c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bafe:	6a3b      	ldr	r3, [r7, #32]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d014      	beq.n	800bb2e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bb0c:	4b3e      	ldr	r3, [pc, #248]	; (800bc08 <udp_input+0x21c>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bb14:	4a3c      	ldr	r2, [pc, #240]	; (800bc08 <udp_input+0x21c>)
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bb1a:	e008      	b.n	800bb2e <udp_input+0x142>
      }
    }

    prev = pcb;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1a7      	bne.n	800ba7c <udp_input+0x90>
 800bb2c:	e000      	b.n	800bb30 <udp_input+0x144>
        break;
 800bb2e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <udp_input+0x14e>
    pcb = uncon_pcb;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <udp_input+0x15a>
    for_us = 1;
 800bb40:	2301      	movs	r3, #1
 800bb42:	76fb      	strb	r3, [r7, #27]
 800bb44:	e00a      	b.n	800bb5c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	4b2d      	ldr	r3, [pc, #180]	; (800bc04 <udp_input+0x218>)
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	bf0c      	ite	eq
 800bb54:	2301      	moveq	r3, #1
 800bb56:	2300      	movne	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bb5c:	7efb      	ldrb	r3, [r7, #27]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d041      	beq.n	800bbe6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bb62:	2108      	movs	r1, #8
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7fa f8c9 	bl	8005cfc <pbuf_remove_header>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00a      	beq.n	800bb86 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bb70:	4b20      	ldr	r3, [pc, #128]	; (800bbf4 <udp_input+0x208>)
 800bb72:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bb76:	4925      	ldr	r1, [pc, #148]	; (800bc0c <udp_input+0x220>)
 800bb78:	4820      	ldr	r0, [pc, #128]	; (800bbfc <udp_input+0x210>)
 800bb7a:	f002 fecb 	bl	800e914 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7fa f942 	bl	8005e08 <pbuf_free>
      goto end;
 800bb84:	e032      	b.n	800bbec <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d012      	beq.n	800bbb2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	699c      	ldr	r4, [r3, #24]
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	69d8      	ldr	r0, [r3, #28]
 800bb9c:	8a3b      	ldrh	r3, [r7, #16]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <udp_input+0x224>)
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bba6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bba8:	e021      	b.n	800bbee <udp_input+0x202>
        pbuf_free(p);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7fa f92c 	bl	8005e08 <pbuf_free>
        goto end;
 800bbb0:	e01c      	b.n	800bbec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bbb2:	7cfb      	ldrb	r3, [r7, #19]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d112      	bne.n	800bbde <udp_input+0x1f2>
 800bbb8:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <udp_input+0x218>)
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbc0:	2be0      	cmp	r3, #224	; 0xe0
 800bbc2:	d00c      	beq.n	800bbde <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <udp_input+0x218>)
 800bbc6:	899b      	ldrh	r3, [r3, #12]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b21b      	sxth	r3, r3
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fa f906 	bl	8005de2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bbd6:	2103      	movs	r1, #3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 fbdb 	bl	800d394 <icmp_dest_unreach>
      pbuf_free(p);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7fa f912 	bl	8005e08 <pbuf_free>
  return;
 800bbe4:	e003      	b.n	800bbee <udp_input+0x202>
    pbuf_free(p);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fa f90e 	bl	8005e08 <pbuf_free>
  return;
 800bbec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bbee:	372c      	adds	r7, #44	; 0x2c
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd90      	pop	{r4, r7, pc}
 800bbf4:	08011984 	.word	0x08011984
 800bbf8:	08011a28 	.word	0x08011a28
 800bbfc:	080119d8 	.word	0x080119d8
 800bc00:	08011a40 	.word	0x08011a40
 800bc04:	20004d1c 	.word	0x20004d1c
 800bc08:	200082e8 	.word	0x200082e8
 800bc0c:	08011a5c 	.word	0x08011a5c
 800bc10:	20004d2c 	.word	0x20004d2c

0800bc14 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d109      	bne.n	800bc38 <udp_send+0x24>
 800bc24:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <udp_send+0x58>)
 800bc26:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bc2a:	4911      	ldr	r1, [pc, #68]	; (800bc70 <udp_send+0x5c>)
 800bc2c:	4811      	ldr	r0, [pc, #68]	; (800bc74 <udp_send+0x60>)
 800bc2e:	f002 fe71 	bl	800e914 <iprintf>
 800bc32:	f06f 030f 	mvn.w	r3, #15
 800bc36:	e015      	b.n	800bc64 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d109      	bne.n	800bc52 <udp_send+0x3e>
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <udp_send+0x58>)
 800bc40:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bc44:	490c      	ldr	r1, [pc, #48]	; (800bc78 <udp_send+0x64>)
 800bc46:	480b      	ldr	r0, [pc, #44]	; (800bc74 <udp_send+0x60>)
 800bc48:	f002 fe64 	bl	800e914 <iprintf>
 800bc4c:	f06f 030f 	mvn.w	r3, #15
 800bc50:	e008      	b.n	800bc64 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	1d1a      	adds	r2, r3, #4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	8a9b      	ldrh	r3, [r3, #20]
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f80d 	bl	800bc7c <udp_sendto>
 800bc62:	4603      	mov	r3, r0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	08011984 	.word	0x08011984
 800bc70:	08011a78 	.word	0x08011a78
 800bc74:	080119d8 	.word	0x080119d8
 800bc78:	08011a90 	.word	0x08011a90

0800bc7c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d109      	bne.n	800bca4 <udp_sendto+0x28>
 800bc90:	4b23      	ldr	r3, [pc, #140]	; (800bd20 <udp_sendto+0xa4>)
 800bc92:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bc96:	4923      	ldr	r1, [pc, #140]	; (800bd24 <udp_sendto+0xa8>)
 800bc98:	4823      	ldr	r0, [pc, #140]	; (800bd28 <udp_sendto+0xac>)
 800bc9a:	f002 fe3b 	bl	800e914 <iprintf>
 800bc9e:	f06f 030f 	mvn.w	r3, #15
 800bca2:	e038      	b.n	800bd16 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d109      	bne.n	800bcbe <udp_sendto+0x42>
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	; (800bd20 <udp_sendto+0xa4>)
 800bcac:	f240 2219 	movw	r2, #537	; 0x219
 800bcb0:	491e      	ldr	r1, [pc, #120]	; (800bd2c <udp_sendto+0xb0>)
 800bcb2:	481d      	ldr	r0, [pc, #116]	; (800bd28 <udp_sendto+0xac>)
 800bcb4:	f002 fe2e 	bl	800e914 <iprintf>
 800bcb8:	f06f 030f 	mvn.w	r3, #15
 800bcbc:	e02b      	b.n	800bd16 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <udp_sendto+0x5c>
 800bcc4:	4b16      	ldr	r3, [pc, #88]	; (800bd20 <udp_sendto+0xa4>)
 800bcc6:	f240 221a 	movw	r2, #538	; 0x21a
 800bcca:	4919      	ldr	r1, [pc, #100]	; (800bd30 <udp_sendto+0xb4>)
 800bccc:	4816      	ldr	r0, [pc, #88]	; (800bd28 <udp_sendto+0xac>)
 800bcce:	f002 fe21 	bl	800e914 <iprintf>
 800bcd2:	f06f 030f 	mvn.w	r3, #15
 800bcd6:	e01e      	b.n	800bd16 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	7a1b      	ldrb	r3, [r3, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d006      	beq.n	800bcee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7a1b      	ldrb	r3, [r3, #8]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f9 fd2f 	bl	8005748 <netif_get_by_index>
 800bcea:	6178      	str	r0, [r7, #20]
 800bcec:	e003      	b.n	800bcf6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fbda 	bl	800d4a8 <ip4_route>
 800bcf4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bcfc:	f06f 0303 	mvn.w	r3, #3
 800bd00:	e009      	b.n	800bd16 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bd02:	887a      	ldrh	r2, [r7, #2]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f000 f810 	bl	800bd34 <udp_sendto_if>
 800bd14:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	08011984 	.word	0x08011984
 800bd24:	08011aa8 	.word	0x08011aa8
 800bd28:	080119d8 	.word	0x080119d8
 800bd2c:	08011ac0 	.word	0x08011ac0
 800bd30:	08011adc 	.word	0x08011adc

0800bd34 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af02      	add	r7, sp, #8
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d109      	bne.n	800bd5c <udp_sendto_if+0x28>
 800bd48:	4b2e      	ldr	r3, [pc, #184]	; (800be04 <udp_sendto_if+0xd0>)
 800bd4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd4e:	492e      	ldr	r1, [pc, #184]	; (800be08 <udp_sendto_if+0xd4>)
 800bd50:	482e      	ldr	r0, [pc, #184]	; (800be0c <udp_sendto_if+0xd8>)
 800bd52:	f002 fddf 	bl	800e914 <iprintf>
 800bd56:	f06f 030f 	mvn.w	r3, #15
 800bd5a:	e04f      	b.n	800bdfc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d109      	bne.n	800bd76 <udp_sendto_if+0x42>
 800bd62:	4b28      	ldr	r3, [pc, #160]	; (800be04 <udp_sendto_if+0xd0>)
 800bd64:	f240 2281 	movw	r2, #641	; 0x281
 800bd68:	4929      	ldr	r1, [pc, #164]	; (800be10 <udp_sendto_if+0xdc>)
 800bd6a:	4828      	ldr	r0, [pc, #160]	; (800be0c <udp_sendto_if+0xd8>)
 800bd6c:	f002 fdd2 	bl	800e914 <iprintf>
 800bd70:	f06f 030f 	mvn.w	r3, #15
 800bd74:	e042      	b.n	800bdfc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d109      	bne.n	800bd90 <udp_sendto_if+0x5c>
 800bd7c:	4b21      	ldr	r3, [pc, #132]	; (800be04 <udp_sendto_if+0xd0>)
 800bd7e:	f240 2282 	movw	r2, #642	; 0x282
 800bd82:	4924      	ldr	r1, [pc, #144]	; (800be14 <udp_sendto_if+0xe0>)
 800bd84:	4821      	ldr	r0, [pc, #132]	; (800be0c <udp_sendto_if+0xd8>)
 800bd86:	f002 fdc5 	bl	800e914 <iprintf>
 800bd8a:	f06f 030f 	mvn.w	r3, #15
 800bd8e:	e035      	b.n	800bdfc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <udp_sendto_if+0x76>
 800bd96:	4b1b      	ldr	r3, [pc, #108]	; (800be04 <udp_sendto_if+0xd0>)
 800bd98:	f240 2283 	movw	r2, #643	; 0x283
 800bd9c:	491e      	ldr	r1, [pc, #120]	; (800be18 <udp_sendto_if+0xe4>)
 800bd9e:	481b      	ldr	r0, [pc, #108]	; (800be0c <udp_sendto_if+0xd8>)
 800bda0:	f002 fdb8 	bl	800e914 <iprintf>
 800bda4:	f06f 030f 	mvn.w	r3, #15
 800bda8:	e028      	b.n	800bdfc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <udp_sendto_if+0x90>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdc0:	2be0      	cmp	r3, #224	; 0xe0
 800bdc2:	d103      	bne.n	800bdcc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	617b      	str	r3, [r7, #20]
 800bdca:	e00b      	b.n	800bde4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d002      	beq.n	800bde0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bdda:	f06f 0303 	mvn.w	r3, #3
 800bdde:	e00d      	b.n	800bdfc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bde4:	887a      	ldrh	r2, [r7, #2]
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	68b9      	ldr	r1, [r7, #8]
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f000 f811 	bl	800be1c <udp_sendto_if_src>
 800bdfa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	08011984 	.word	0x08011984
 800be08:	08011af8 	.word	0x08011af8
 800be0c:	080119d8 	.word	0x080119d8
 800be10:	08011b14 	.word	0x08011b14
 800be14:	08011b30 	.word	0x08011b30
 800be18:	08011b50 	.word	0x08011b50

0800be1c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08c      	sub	sp, #48	; 0x30
 800be20:	af04      	add	r7, sp, #16
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <udp_sendto_if_src+0x28>
 800be30:	4b65      	ldr	r3, [pc, #404]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800be32:	f240 22d1 	movw	r2, #721	; 0x2d1
 800be36:	4965      	ldr	r1, [pc, #404]	; (800bfcc <udp_sendto_if_src+0x1b0>)
 800be38:	4865      	ldr	r0, [pc, #404]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800be3a:	f002 fd6b 	bl	800e914 <iprintf>
 800be3e:	f06f 030f 	mvn.w	r3, #15
 800be42:	e0bc      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <udp_sendto_if_src+0x42>
 800be4a:	4b5f      	ldr	r3, [pc, #380]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800be4c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800be50:	4960      	ldr	r1, [pc, #384]	; (800bfd4 <udp_sendto_if_src+0x1b8>)
 800be52:	485f      	ldr	r0, [pc, #380]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800be54:	f002 fd5e 	bl	800e914 <iprintf>
 800be58:	f06f 030f 	mvn.w	r3, #15
 800be5c:	e0af      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <udp_sendto_if_src+0x5c>
 800be64:	4b58      	ldr	r3, [pc, #352]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800be66:	f240 22d3 	movw	r2, #723	; 0x2d3
 800be6a:	495b      	ldr	r1, [pc, #364]	; (800bfd8 <udp_sendto_if_src+0x1bc>)
 800be6c:	4858      	ldr	r0, [pc, #352]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800be6e:	f002 fd51 	bl	800e914 <iprintf>
 800be72:	f06f 030f 	mvn.w	r3, #15
 800be76:	e0a2      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <udp_sendto_if_src+0x76>
 800be7e:	4b52      	ldr	r3, [pc, #328]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800be80:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800be84:	4955      	ldr	r1, [pc, #340]	; (800bfdc <udp_sendto_if_src+0x1c0>)
 800be86:	4852      	ldr	r0, [pc, #328]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800be88:	f002 fd44 	bl	800e914 <iprintf>
 800be8c:	f06f 030f 	mvn.w	r3, #15
 800be90:	e095      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	2b00      	cmp	r3, #0
 800be96:	d109      	bne.n	800beac <udp_sendto_if_src+0x90>
 800be98:	4b4b      	ldr	r3, [pc, #300]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800be9a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800be9e:	4950      	ldr	r1, [pc, #320]	; (800bfe0 <udp_sendto_if_src+0x1c4>)
 800bea0:	484b      	ldr	r0, [pc, #300]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800bea2:	f002 fd37 	bl	800e914 <iprintf>
 800bea6:	f06f 030f 	mvn.w	r3, #15
 800beaa:	e088      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8a5b      	ldrh	r3, [r3, #18]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10f      	bne.n	800bed4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800beb4:	68f9      	ldr	r1, [r7, #12]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8a5b      	ldrh	r3, [r3, #18]
 800beba:	461a      	mov	r2, r3
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f000 f893 	bl	800bfe8 <udp_bind>
 800bec2:	4603      	mov	r3, r0
 800bec4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bec6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bece:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bed2:	e074      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	891b      	ldrh	r3, [r3, #8]
 800bed8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bedc:	4293      	cmp	r3, r2
 800bede:	d902      	bls.n	800bee6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bee0:	f04f 33ff 	mov.w	r3, #4294967295
 800bee4:	e06b      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bee6:	2108      	movs	r1, #8
 800bee8:	68b8      	ldr	r0, [r7, #8]
 800beea:	f7f9 fef7 	bl	8005cdc <pbuf_add_header>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d015      	beq.n	800bf20 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bef4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bef8:	2108      	movs	r1, #8
 800befa:	2022      	movs	r0, #34	; 0x22
 800befc:	f7f9 fca0 	bl	8005840 <pbuf_alloc>
 800bf00:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0c:	e057      	b.n	800bfbe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	891b      	ldrh	r3, [r3, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d006      	beq.n	800bf24 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	69f8      	ldr	r0, [r7, #28]
 800bf1a:	f7fa f88d 	bl	8006038 <pbuf_chain>
 800bf1e:	e001      	b.n	800bf24 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	895b      	ldrh	r3, [r3, #10]
 800bf28:	2b07      	cmp	r3, #7
 800bf2a:	d806      	bhi.n	800bf3a <udp_sendto_if_src+0x11e>
 800bf2c:	4b26      	ldr	r3, [pc, #152]	; (800bfc8 <udp_sendto_if_src+0x1ac>)
 800bf2e:	f240 320d 	movw	r2, #781	; 0x30d
 800bf32:	492c      	ldr	r1, [pc, #176]	; (800bfe4 <udp_sendto_if_src+0x1c8>)
 800bf34:	4826      	ldr	r0, [pc, #152]	; (800bfd0 <udp_sendto_if_src+0x1b4>)
 800bf36:	f002 fced 	bl	800e914 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8a5b      	ldrh	r3, [r3, #18]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f8 fc01 	bl	800474c <lwip_htons>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bf52:	887b      	ldrh	r3, [r7, #2]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f8 fbf9 	bl	800474c <lwip_htons>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2200      	movs	r2, #0
 800bf66:	719a      	strb	r2, [r3, #6]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	891b      	ldrh	r3, [r3, #8]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f8 fbeb 	bl	800474c <lwip_htons>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461a      	mov	r2, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bf7e:	2311      	movs	r3, #17
 800bf80:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	7adb      	ldrb	r3, [r3, #11]
 800bf86:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	7a9b      	ldrb	r3, [r3, #10]
 800bf8c:	7cb9      	ldrb	r1, [r7, #18]
 800bf8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf90:	9202      	str	r2, [sp, #8]
 800bf92:	7cfa      	ldrb	r2, [r7, #19]
 800bf94:	9201      	str	r2, [sp, #4]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf9e:	69f8      	ldr	r0, [r7, #28]
 800bfa0:	f001 fc6a 	bl	800d878 <ip4_output_if_src>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bfa8:	69fa      	ldr	r2, [r7, #28]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d004      	beq.n	800bfba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bfb0:	69f8      	ldr	r0, [r7, #28]
 800bfb2:	f7f9 ff29 	bl	8005e08 <pbuf_free>
    q = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bfba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3720      	adds	r7, #32
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	08011984 	.word	0x08011984
 800bfcc:	08011b70 	.word	0x08011b70
 800bfd0:	080119d8 	.word	0x080119d8
 800bfd4:	08011b90 	.word	0x08011b90
 800bfd8:	08011bb0 	.word	0x08011bb0
 800bfdc:	08011bd4 	.word	0x08011bd4
 800bfe0:	08011bf8 	.word	0x08011bf8
 800bfe4:	08011c1c 	.word	0x08011c1c

0800bfe8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bffc:	4b39      	ldr	r3, [pc, #228]	; (800c0e4 <udp_bind+0xfc>)
 800bffe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <udp_bind+0x32>
 800c006:	4b38      	ldr	r3, [pc, #224]	; (800c0e8 <udp_bind+0x100>)
 800c008:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c00c:	4937      	ldr	r1, [pc, #220]	; (800c0ec <udp_bind+0x104>)
 800c00e:	4838      	ldr	r0, [pc, #224]	; (800c0f0 <udp_bind+0x108>)
 800c010:	f002 fc80 	bl	800e914 <iprintf>
 800c014:	f06f 030f 	mvn.w	r3, #15
 800c018:	e060      	b.n	800c0dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c01e:	4b35      	ldr	r3, [pc, #212]	; (800c0f4 <udp_bind+0x10c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	617b      	str	r3, [r7, #20]
 800c024:	e009      	b.n	800c03a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d102      	bne.n	800c034 <udp_bind+0x4c>
      rebind = 1;
 800c02e:	2301      	movs	r3, #1
 800c030:	74fb      	strb	r3, [r7, #19]
      break;
 800c032:	e005      	b.n	800c040 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1f2      	bne.n	800c026 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c040:	88fb      	ldrh	r3, [r7, #6]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <udp_bind+0x72>
    port = udp_new_port();
 800c046:	f7ff fc35 	bl	800b8b4 <udp_new_port>
 800c04a:	4603      	mov	r3, r0
 800c04c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d12c      	bne.n	800c0ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c054:	f06f 0307 	mvn.w	r3, #7
 800c058:	e040      	b.n	800c0dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c05a:	4b26      	ldr	r3, [pc, #152]	; (800c0f4 <udp_bind+0x10c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	e022      	b.n	800c0a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	429a      	cmp	r2, r3
 800c068:	d01b      	beq.n	800c0a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	8a5b      	ldrh	r3, [r3, #18]
 800c06e:	88fa      	ldrh	r2, [r7, #6]
 800c070:	429a      	cmp	r2, r3
 800c072:	d116      	bne.n	800c0a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d00d      	beq.n	800c09c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00a      	beq.n	800c09c <udp_bind+0xb4>
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c08e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c09c:	f06f 0307 	mvn.w	r3, #7
 800c0a0:	e01c      	b.n	800c0dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1d9      	bne.n	800c062 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <udp_bind+0xd2>
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	e000      	b.n	800c0bc <udp_bind+0xd4>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	88fa      	ldrh	r2, [r7, #6]
 800c0c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c0c6:	7cfb      	ldrb	r3, [r7, #19]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c0cc:	4b09      	ldr	r3, [pc, #36]	; (800c0f4 <udp_bind+0x10c>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c0d4:	4a07      	ldr	r2, [pc, #28]	; (800c0f4 <udp_bind+0x10c>)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	080124a0 	.word	0x080124a0
 800c0e8:	08011984 	.word	0x08011984
 800c0ec:	08011c4c 	.word	0x08011c4c
 800c0f0:	080119d8 	.word	0x080119d8
 800c0f4:	200082e8 	.word	0x200082e8

0800c0f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	4613      	mov	r3, r2
 800c104:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d109      	bne.n	800c120 <udp_connect+0x28>
 800c10c:	4b2c      	ldr	r3, [pc, #176]	; (800c1c0 <udp_connect+0xc8>)
 800c10e:	f240 4235 	movw	r2, #1077	; 0x435
 800c112:	492c      	ldr	r1, [pc, #176]	; (800c1c4 <udp_connect+0xcc>)
 800c114:	482c      	ldr	r0, [pc, #176]	; (800c1c8 <udp_connect+0xd0>)
 800c116:	f002 fbfd 	bl	800e914 <iprintf>
 800c11a:	f06f 030f 	mvn.w	r3, #15
 800c11e:	e04b      	b.n	800c1b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d109      	bne.n	800c13a <udp_connect+0x42>
 800c126:	4b26      	ldr	r3, [pc, #152]	; (800c1c0 <udp_connect+0xc8>)
 800c128:	f240 4236 	movw	r2, #1078	; 0x436
 800c12c:	4927      	ldr	r1, [pc, #156]	; (800c1cc <udp_connect+0xd4>)
 800c12e:	4826      	ldr	r0, [pc, #152]	; (800c1c8 <udp_connect+0xd0>)
 800c130:	f002 fbf0 	bl	800e914 <iprintf>
 800c134:	f06f 030f 	mvn.w	r3, #15
 800c138:	e03e      	b.n	800c1b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	8a5b      	ldrh	r3, [r3, #18]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10f      	bne.n	800c162 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8a5b      	ldrh	r3, [r3, #18]
 800c148:	461a      	mov	r2, r3
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f7ff ff4c 	bl	800bfe8 <udp_bind>
 800c150:	4603      	mov	r3, r0
 800c152:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c154:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <udp_connect+0x6a>
      return err;
 800c15c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c160:	e02a      	b.n	800c1b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <udp_connect+0x76>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	e000      	b.n	800c170 <udp_connect+0x78>
 800c16e:	2300      	movs	r3, #0
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	7c1b      	ldrb	r3, [r3, #16]
 800c17e:	f043 0304 	orr.w	r3, r3, #4
 800c182:	b2da      	uxtb	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c188:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <udp_connect+0xd8>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	e008      	b.n	800c1a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	429a      	cmp	r2, r3
 800c196:	d101      	bne.n	800c19c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	e00d      	b.n	800c1b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	617b      	str	r3, [r7, #20]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1f3      	bne.n	800c190 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c1a8:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <udp_connect+0xd8>)
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c1b0:	4a07      	ldr	r2, [pc, #28]	; (800c1d0 <udp_connect+0xd8>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	08011984 	.word	0x08011984
 800c1c4:	08011c64 	.word	0x08011c64
 800c1c8:	080119d8 	.word	0x080119d8
 800c1cc:	08011c80 	.word	0x08011c80
 800c1d0:	200082e8 	.word	0x200082e8

0800c1d4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d107      	bne.n	800c1f2 <udp_disconnect+0x1e>
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <udp_disconnect+0x44>)
 800c1e4:	f240 426a 	movw	r2, #1130	; 0x46a
 800c1e8:	490c      	ldr	r1, [pc, #48]	; (800c21c <udp_disconnect+0x48>)
 800c1ea:	480d      	ldr	r0, [pc, #52]	; (800c220 <udp_disconnect+0x4c>)
 800c1ec:	f002 fb92 	bl	800e914 <iprintf>
 800c1f0:	e00f      	b.n	800c212 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7c1b      	ldrb	r3, [r3, #16]
 800c208:	f023 0304 	bic.w	r3, r3, #4
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	741a      	strb	r2, [r3, #16]
}
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	08011984 	.word	0x08011984
 800c21c:	08011c9c 	.word	0x08011c9c
 800c220:	080119d8 	.word	0x080119d8

0800c224 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d107      	bne.n	800c246 <udp_recv+0x22>
 800c236:	4b08      	ldr	r3, [pc, #32]	; (800c258 <udp_recv+0x34>)
 800c238:	f240 428a 	movw	r2, #1162	; 0x48a
 800c23c:	4907      	ldr	r1, [pc, #28]	; (800c25c <udp_recv+0x38>)
 800c23e:	4808      	ldr	r0, [pc, #32]	; (800c260 <udp_recv+0x3c>)
 800c240:	f002 fb68 	bl	800e914 <iprintf>
 800c244:	e005      	b.n	800c252 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	61da      	str	r2, [r3, #28]
}
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	08011984 	.word	0x08011984
 800c25c:	08011cb8 	.word	0x08011cb8
 800c260:	080119d8 	.word	0x080119d8

0800c264 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c26a:	2000      	movs	r0, #0
 800c26c:	f7f8 fee6 	bl	800503c <memp_malloc>
 800c270:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c278:	2220      	movs	r2, #32
 800c27a:	2100      	movs	r1, #0
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f002 fb41 	bl	800e904 <memset>
    pcb->ttl = UDP_TTL;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	22ff      	movs	r2, #255	; 0xff
 800c286:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c288:	687b      	ldr	r3, [r7, #4]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d01e      	beq.n	800c2e2 <udp_netif_ip_addr_changed+0x4e>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d01a      	beq.n	800c2e2 <udp_netif_ip_addr_changed+0x4e>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d017      	beq.n	800c2e2 <udp_netif_ip_addr_changed+0x4e>
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d013      	beq.n	800c2e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c2ba:	4b0d      	ldr	r3, [pc, #52]	; (800c2f0 <udp_netif_ip_addr_changed+0x5c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	e00c      	b.n	800c2dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d103      	bne.n	800c2d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1ef      	bne.n	800c2c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c2e2:	bf00      	nop
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	200082e8 	.word	0x200082e8

0800c2f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c2fc:	4915      	ldr	r1, [pc, #84]	; (800c354 <etharp_free_entry+0x60>)
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d013      	beq.n	800c338 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c310:	4910      	ldr	r1, [pc, #64]	; (800c354 <etharp_free_entry+0x60>)
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	4613      	mov	r3, r2
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	4413      	add	r3, r2
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	440b      	add	r3, r1
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4618      	mov	r0, r3
 800c322:	f7f9 fd71 	bl	8005e08 <pbuf_free>
    arp_table[i].q = NULL;
 800c326:	490b      	ldr	r1, [pc, #44]	; (800c354 <etharp_free_entry+0x60>)
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	440b      	add	r3, r1
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c338:	4906      	ldr	r1, [pc, #24]	; (800c354 <etharp_free_entry+0x60>)
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	440b      	add	r3, r1
 800c346:	3314      	adds	r3, #20
 800c348:	2200      	movs	r2, #0
 800c34a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	200082ec 	.word	0x200082ec

0800c358 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c35e:	2300      	movs	r3, #0
 800c360:	607b      	str	r3, [r7, #4]
 800c362:	e096      	b.n	800c492 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c364:	494f      	ldr	r1, [pc, #316]	; (800c4a4 <etharp_tmr+0x14c>)
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	4613      	mov	r3, r2
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	4413      	add	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	440b      	add	r3, r1
 800c372:	3314      	adds	r3, #20
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 8086 	beq.w	800c48c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c380:	4948      	ldr	r1, [pc, #288]	; (800c4a4 <etharp_tmr+0x14c>)
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	4613      	mov	r3, r2
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	4413      	add	r3, r2
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	440b      	add	r3, r1
 800c38e:	3312      	adds	r3, #18
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	b298      	uxth	r0, r3
 800c396:	4943      	ldr	r1, [pc, #268]	; (800c4a4 <etharp_tmr+0x14c>)
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	4613      	mov	r3, r2
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	440b      	add	r3, r1
 800c3a4:	3312      	adds	r3, #18
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c3aa:	493e      	ldr	r1, [pc, #248]	; (800c4a4 <etharp_tmr+0x14c>)
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	440b      	add	r3, r1
 800c3b8:	3312      	adds	r3, #18
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c3c0:	d215      	bcs.n	800c3ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3c2:	4938      	ldr	r1, [pc, #224]	; (800c4a4 <etharp_tmr+0x14c>)
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3314      	adds	r3, #20
 800c3d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d10e      	bne.n	800c3f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c3d8:	4932      	ldr	r1, [pc, #200]	; (800c4a4 <etharp_tmr+0x14c>)
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	4413      	add	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3312      	adds	r3, #18
 800c3e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d903      	bls.n	800c3f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff ff80 	bl	800c2f4 <etharp_free_entry>
 800c3f4:	e04a      	b.n	800c48c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c3f6:	492b      	ldr	r1, [pc, #172]	; (800c4a4 <etharp_tmr+0x14c>)
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4413      	add	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	440b      	add	r3, r1
 800c404:	3314      	adds	r3, #20
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d10a      	bne.n	800c422 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c40c:	4925      	ldr	r1, [pc, #148]	; (800c4a4 <etharp_tmr+0x14c>)
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4613      	mov	r3, r2
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	4413      	add	r3, r2
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	440b      	add	r3, r1
 800c41a:	3314      	adds	r3, #20
 800c41c:	2204      	movs	r2, #4
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	e034      	b.n	800c48c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c422:	4920      	ldr	r1, [pc, #128]	; (800c4a4 <etharp_tmr+0x14c>)
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	3314      	adds	r3, #20
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b04      	cmp	r3, #4
 800c436:	d10a      	bne.n	800c44e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c438:	491a      	ldr	r1, [pc, #104]	; (800c4a4 <etharp_tmr+0x14c>)
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	4613      	mov	r3, r2
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	4413      	add	r3, r2
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	440b      	add	r3, r1
 800c446:	3314      	adds	r3, #20
 800c448:	2202      	movs	r2, #2
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	e01e      	b.n	800c48c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c44e:	4915      	ldr	r1, [pc, #84]	; (800c4a4 <etharp_tmr+0x14c>)
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	440b      	add	r3, r1
 800c45c:	3314      	adds	r3, #20
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d113      	bne.n	800c48c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c464:	490f      	ldr	r1, [pc, #60]	; (800c4a4 <etharp_tmr+0x14c>)
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	4613      	mov	r3, r2
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	4413      	add	r3, r2
 800c46e:	00db      	lsls	r3, r3, #3
 800c470:	440b      	add	r3, r1
 800c472:	3308      	adds	r3, #8
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	4a08      	ldr	r2, [pc, #32]	; (800c4a4 <etharp_tmr+0x14c>)
 800c482:	4413      	add	r3, r2
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	f000 fe6e 	bl	800d168 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	607b      	str	r3, [r7, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b09      	cmp	r3, #9
 800c496:	f77f af65 	ble.w	800c364 <etharp_tmr+0xc>
      }
    }
  }
}
 800c49a:	bf00      	nop
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	200082ec 	.word	0x200082ec

0800c4a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c4b6:	230a      	movs	r3, #10
 800c4b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c4ba:	230a      	movs	r3, #10
 800c4bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c4be:	230a      	movs	r3, #10
 800c4c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c4c6:	230a      	movs	r3, #10
 800c4c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	83bb      	strh	r3, [r7, #28]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	837b      	strh	r3, [r7, #26]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	843b      	strh	r3, [r7, #32]
 800c4da:	e0ae      	b.n	800c63a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c4dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4e0:	49a6      	ldr	r1, [pc, #664]	; (800c77c <etharp_find_entry+0x2d4>)
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	440b      	add	r3, r1
 800c4ec:	3314      	adds	r3, #20
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c4f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4f6:	2b0a      	cmp	r3, #10
 800c4f8:	d105      	bne.n	800c506 <etharp_find_entry+0x5e>
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d102      	bne.n	800c506 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c500:	8c3b      	ldrh	r3, [r7, #32]
 800c502:	847b      	strh	r3, [r7, #34]	; 0x22
 800c504:	e095      	b.n	800c632 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c506:	7dfb      	ldrb	r3, [r7, #23]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 8092 	beq.w	800c632 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d009      	beq.n	800c528 <etharp_find_entry+0x80>
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d806      	bhi.n	800c528 <etharp_find_entry+0x80>
 800c51a:	4b99      	ldr	r3, [pc, #612]	; (800c780 <etharp_find_entry+0x2d8>)
 800c51c:	f240 1223 	movw	r2, #291	; 0x123
 800c520:	4998      	ldr	r1, [pc, #608]	; (800c784 <etharp_find_entry+0x2dc>)
 800c522:	4899      	ldr	r0, [pc, #612]	; (800c788 <etharp_find_entry+0x2e0>)
 800c524:	f002 f9f6 	bl	800e914 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d020      	beq.n	800c570 <etharp_find_entry+0xc8>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6819      	ldr	r1, [r3, #0]
 800c532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c536:	4891      	ldr	r0, [pc, #580]	; (800c77c <etharp_find_entry+0x2d4>)
 800c538:	4613      	mov	r3, r2
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	4413      	add	r3, r2
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	4403      	add	r3, r0
 800c542:	3304      	adds	r3, #4
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4299      	cmp	r1, r3
 800c548:	d112      	bne.n	800c570 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00c      	beq.n	800c56a <etharp_find_entry+0xc2>
 800c550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c554:	4989      	ldr	r1, [pc, #548]	; (800c77c <etharp_find_entry+0x2d4>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3308      	adds	r3, #8
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	429a      	cmp	r2, r3
 800c568:	d102      	bne.n	800c570 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c56a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c56e:	e100      	b.n	800c772 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c570:	7dfb      	ldrb	r3, [r7, #23]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d140      	bne.n	800c5f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c57a:	4980      	ldr	r1, [pc, #512]	; (800c77c <etharp_find_entry+0x2d4>)
 800c57c:	4613      	mov	r3, r2
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	440b      	add	r3, r1
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01a      	beq.n	800c5c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c590:	497a      	ldr	r1, [pc, #488]	; (800c77c <etharp_find_entry+0x2d4>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	3312      	adds	r3, #18
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	8bba      	ldrh	r2, [r7, #28]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d845      	bhi.n	800c632 <etharp_find_entry+0x18a>
            old_queue = i;
 800c5a6:	8c3b      	ldrh	r3, [r7, #32]
 800c5a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c5aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ae:	4973      	ldr	r1, [pc, #460]	; (800c77c <etharp_find_entry+0x2d4>)
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3312      	adds	r3, #18
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	83bb      	strh	r3, [r7, #28]
 800c5c0:	e037      	b.n	800c632 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5c6:	496d      	ldr	r1, [pc, #436]	; (800c77c <etharp_find_entry+0x2d4>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3312      	adds	r3, #18
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	8b7a      	ldrh	r2, [r7, #26]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d82a      	bhi.n	800c632 <etharp_find_entry+0x18a>
            old_pending = i;
 800c5dc:	8c3b      	ldrh	r3, [r7, #32]
 800c5de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c5e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5e4:	4965      	ldr	r1, [pc, #404]	; (800c77c <etharp_find_entry+0x2d4>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	3312      	adds	r3, #18
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	837b      	strh	r3, [r7, #26]
 800c5f6:	e01c      	b.n	800c632 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d919      	bls.n	800c632 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c5fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c602:	495e      	ldr	r1, [pc, #376]	; (800c77c <etharp_find_entry+0x2d4>)
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3312      	adds	r3, #18
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	8b3a      	ldrh	r2, [r7, #24]
 800c614:	429a      	cmp	r2, r3
 800c616:	d80c      	bhi.n	800c632 <etharp_find_entry+0x18a>
            old_stable = i;
 800c618:	8c3b      	ldrh	r3, [r7, #32]
 800c61a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c620:	4956      	ldr	r1, [pc, #344]	; (800c77c <etharp_find_entry+0x2d4>)
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	440b      	add	r3, r1
 800c62c:	3312      	adds	r3, #18
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c632:	8c3b      	ldrh	r3, [r7, #32]
 800c634:	3301      	adds	r3, #1
 800c636:	b29b      	uxth	r3, r3
 800c638:	843b      	strh	r3, [r7, #32]
 800c63a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c63e:	2b09      	cmp	r3, #9
 800c640:	f77f af4c 	ble.w	800c4dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c644:	7afb      	ldrb	r3, [r7, #11]
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d108      	bne.n	800c660 <etharp_find_entry+0x1b8>
 800c64e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c652:	2b0a      	cmp	r3, #10
 800c654:	d107      	bne.n	800c666 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c656:	7afb      	ldrb	r3, [r7, #11]
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d102      	bne.n	800c666 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c660:	f04f 33ff 	mov.w	r3, #4294967295
 800c664:	e085      	b.n	800c772 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c666:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	dc02      	bgt.n	800c674 <etharp_find_entry+0x1cc>
    i = empty;
 800c66e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c670:	843b      	strh	r3, [r7, #32]
 800c672:	e039      	b.n	800c6e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c674:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c678:	2b09      	cmp	r3, #9
 800c67a:	dc14      	bgt.n	800c6a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c67c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c67e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c684:	493d      	ldr	r1, [pc, #244]	; (800c77c <etharp_find_entry+0x2d4>)
 800c686:	4613      	mov	r3, r2
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	4413      	add	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	440b      	add	r3, r1
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d018      	beq.n	800c6c8 <etharp_find_entry+0x220>
 800c696:	4b3a      	ldr	r3, [pc, #232]	; (800c780 <etharp_find_entry+0x2d8>)
 800c698:	f240 126d 	movw	r2, #365	; 0x16d
 800c69c:	493b      	ldr	r1, [pc, #236]	; (800c78c <etharp_find_entry+0x2e4>)
 800c69e:	483a      	ldr	r0, [pc, #232]	; (800c788 <etharp_find_entry+0x2e0>)
 800c6a0:	f002 f938 	bl	800e914 <iprintf>
 800c6a4:	e010      	b.n	800c6c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c6a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	dc02      	bgt.n	800c6b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c6ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6b0:	843b      	strh	r3, [r7, #32]
 800c6b2:	e009      	b.n	800c6c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c6b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c6b8:	2b09      	cmp	r3, #9
 800c6ba:	dc02      	bgt.n	800c6c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c6bc:	8bfb      	ldrh	r3, [r7, #30]
 800c6be:	843b      	strh	r3, [r7, #32]
 800c6c0:	e002      	b.n	800c6c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c6:	e054      	b.n	800c772 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c6c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6cc:	2b09      	cmp	r3, #9
 800c6ce:	dd06      	ble.n	800c6de <etharp_find_entry+0x236>
 800c6d0:	4b2b      	ldr	r3, [pc, #172]	; (800c780 <etharp_find_entry+0x2d8>)
 800c6d2:	f240 127f 	movw	r2, #383	; 0x17f
 800c6d6:	492e      	ldr	r1, [pc, #184]	; (800c790 <etharp_find_entry+0x2e8>)
 800c6d8:	482b      	ldr	r0, [pc, #172]	; (800c788 <etharp_find_entry+0x2e0>)
 800c6da:	f002 f91b 	bl	800e914 <iprintf>
    etharp_free_entry(i);
 800c6de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff fe06 	bl	800c2f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c6e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6ec:	2b09      	cmp	r3, #9
 800c6ee:	dd06      	ble.n	800c6fe <etharp_find_entry+0x256>
 800c6f0:	4b23      	ldr	r3, [pc, #140]	; (800c780 <etharp_find_entry+0x2d8>)
 800c6f2:	f240 1283 	movw	r2, #387	; 0x183
 800c6f6:	4926      	ldr	r1, [pc, #152]	; (800c790 <etharp_find_entry+0x2e8>)
 800c6f8:	4823      	ldr	r0, [pc, #140]	; (800c788 <etharp_find_entry+0x2e0>)
 800c6fa:	f002 f90b 	bl	800e914 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c6fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c702:	491e      	ldr	r1, [pc, #120]	; (800c77c <etharp_find_entry+0x2d4>)
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	440b      	add	r3, r1
 800c70e:	3314      	adds	r3, #20
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d006      	beq.n	800c724 <etharp_find_entry+0x27c>
 800c716:	4b1a      	ldr	r3, [pc, #104]	; (800c780 <etharp_find_entry+0x2d8>)
 800c718:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c71c:	491d      	ldr	r1, [pc, #116]	; (800c794 <etharp_find_entry+0x2ec>)
 800c71e:	481a      	ldr	r0, [pc, #104]	; (800c788 <etharp_find_entry+0x2e0>)
 800c720:	f002 f8f8 	bl	800e914 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c72a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	4812      	ldr	r0, [pc, #72]	; (800c77c <etharp_find_entry+0x2d4>)
 800c734:	4613      	mov	r3, r2
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	4413      	add	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	4403      	add	r3, r0
 800c73e:	3304      	adds	r3, #4
 800c740:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c742:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c746:	490d      	ldr	r1, [pc, #52]	; (800c77c <etharp_find_entry+0x2d4>)
 800c748:	4613      	mov	r3, r2
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	4413      	add	r3, r2
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	440b      	add	r3, r1
 800c752:	3312      	adds	r3, #18
 800c754:	2200      	movs	r2, #0
 800c756:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c758:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c75c:	4907      	ldr	r1, [pc, #28]	; (800c77c <etharp_find_entry+0x2d4>)
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	440b      	add	r3, r1
 800c768:	3308      	adds	r3, #8
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c76e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3728      	adds	r7, #40	; 0x28
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	200082ec 	.word	0x200082ec
 800c780:	08011ce8 	.word	0x08011ce8
 800c784:	08011d20 	.word	0x08011d20
 800c788:	08011d60 	.word	0x08011d60
 800c78c:	08011d88 	.word	0x08011d88
 800c790:	08011da0 	.word	0x08011da0
 800c794:	08011db4 	.word	0x08011db4

0800c798 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af02      	add	r7, sp, #8
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7ac:	2b06      	cmp	r3, #6
 800c7ae:	d006      	beq.n	800c7be <etharp_update_arp_entry+0x26>
 800c7b0:	4b48      	ldr	r3, [pc, #288]	; (800c8d4 <etharp_update_arp_entry+0x13c>)
 800c7b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c7b6:	4948      	ldr	r1, [pc, #288]	; (800c8d8 <etharp_update_arp_entry+0x140>)
 800c7b8:	4848      	ldr	r0, [pc, #288]	; (800c8dc <etharp_update_arp_entry+0x144>)
 800c7ba:	f002 f8ab 	bl	800e914 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d012      	beq.n	800c7ea <etharp_update_arp_entry+0x52>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00e      	beq.n	800c7ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f001 f8fe 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800c7d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d105      	bne.n	800c7ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7e6:	2be0      	cmp	r3, #224	; 0xe0
 800c7e8:	d102      	bne.n	800c7f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c7ea:	f06f 030f 	mvn.w	r3, #15
 800c7ee:	e06c      	b.n	800c8ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c7f0:	78fb      	ldrb	r3, [r7, #3]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	f7ff fe56 	bl	800c4a8 <etharp_find_entry>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c804:	2b00      	cmp	r3, #0
 800c806:	da02      	bge.n	800c80e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c808:	8afb      	ldrh	r3, [r7, #22]
 800c80a:	b25b      	sxtb	r3, r3
 800c80c:	e05d      	b.n	800c8ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c80e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c812:	4933      	ldr	r1, [pc, #204]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c814:	4613      	mov	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	4413      	add	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	440b      	add	r3, r1
 800c81e:	3314      	adds	r3, #20
 800c820:	2202      	movs	r2, #2
 800c822:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c824:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c828:	492d      	ldr	r1, [pc, #180]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c82a:	4613      	mov	r3, r2
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4413      	add	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	440b      	add	r3, r1
 800c834:	3308      	adds	r3, #8
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c83a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c83e:	4613      	mov	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4413      	add	r3, r2
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	3308      	adds	r3, #8
 800c848:	4a25      	ldr	r2, [pc, #148]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c84a:	4413      	add	r3, r2
 800c84c:	3304      	adds	r3, #4
 800c84e:	2206      	movs	r2, #6
 800c850:	6879      	ldr	r1, [r7, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	f002 f848 	bl	800e8e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c858:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c85c:	4920      	ldr	r1, [pc, #128]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c85e:	4613      	mov	r3, r2
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4413      	add	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	440b      	add	r3, r1
 800c868:	3312      	adds	r3, #18
 800c86a:	2200      	movs	r2, #0
 800c86c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c86e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c872:	491b      	ldr	r1, [pc, #108]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c874:	4613      	mov	r3, r2
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	4413      	add	r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	440b      	add	r3, r1
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d021      	beq.n	800c8c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c888:	4915      	ldr	r1, [pc, #84]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c88a:	4613      	mov	r3, r2
 800c88c:	005b      	lsls	r3, r3, #1
 800c88e:	4413      	add	r3, r2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	440b      	add	r3, r1
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c89c:	4910      	ldr	r1, [pc, #64]	; (800c8e0 <etharp_update_arp_entry+0x148>)
 800c89e:	4613      	mov	r3, r2
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	4413      	add	r3, r2
 800c8a4:	00db      	lsls	r3, r3, #3
 800c8a6:	440b      	add	r3, r1
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c8b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6939      	ldr	r1, [r7, #16]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f001 ff97 	bl	800e7f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c8c2:	6938      	ldr	r0, [r7, #16]
 800c8c4:	f7f9 faa0 	bl	8005e08 <pbuf_free>
  }
  return ERR_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	08011ce8 	.word	0x08011ce8
 800c8d8:	08011de0 	.word	0x08011de0
 800c8dc:	08011d60 	.word	0x08011d60
 800c8e0:	200082ec 	.word	0x200082ec

0800c8e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	e01e      	b.n	800c930 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c8f2:	4913      	ldr	r1, [pc, #76]	; (800c940 <etharp_cleanup_netif+0x5c>)
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	00db      	lsls	r3, r3, #3
 800c8fe:	440b      	add	r3, r1
 800c900:	3314      	adds	r3, #20
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c906:	7afb      	ldrb	r3, [r7, #11]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00e      	beq.n	800c92a <etharp_cleanup_netif+0x46>
 800c90c:	490c      	ldr	r1, [pc, #48]	; (800c940 <etharp_cleanup_netif+0x5c>)
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	4613      	mov	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	4413      	add	r3, r2
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	440b      	add	r3, r1
 800c91a:	3308      	adds	r3, #8
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fce5 	bl	800c2f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b09      	cmp	r3, #9
 800c934:	dddd      	ble.n	800c8f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	200082ec 	.word	0x200082ec

0800c944 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c944:	b5b0      	push	{r4, r5, r7, lr}
 800c946:	b08a      	sub	sp, #40	; 0x28
 800c948:	af04      	add	r7, sp, #16
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d107      	bne.n	800c964 <etharp_input+0x20>
 800c954:	4b3d      	ldr	r3, [pc, #244]	; (800ca4c <etharp_input+0x108>)
 800c956:	f240 228a 	movw	r2, #650	; 0x28a
 800c95a:	493d      	ldr	r1, [pc, #244]	; (800ca50 <etharp_input+0x10c>)
 800c95c:	483d      	ldr	r0, [pc, #244]	; (800ca54 <etharp_input+0x110>)
 800c95e:	f001 ffd9 	bl	800e914 <iprintf>
 800c962:	e06f      	b.n	800ca44 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c974:	d10c      	bne.n	800c990 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c97a:	2b06      	cmp	r3, #6
 800c97c:	d108      	bne.n	800c990 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c982:	2b04      	cmp	r3, #4
 800c984:	d104      	bne.n	800c990 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	885b      	ldrh	r3, [r3, #2]
 800c98a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d003      	beq.n	800c998 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7f9 fa39 	bl	8005e08 <pbuf_free>
    return;
 800c996:	e055      	b.n	800ca44 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	330e      	adds	r3, #14
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	3318      	adds	r3, #24
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d102      	bne.n	800c9b8 <etharp_input+0x74>
    for_us = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]
 800c9b6:	e009      	b.n	800c9cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	bf0c      	ite	eq
 800c9c4:	2301      	moveq	r3, #1
 800c9c6:	2300      	movne	r3, #0
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f103 0208 	add.w	r2, r3, #8
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <etharp_input+0x98>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e000      	b.n	800c9de <etharp_input+0x9a>
 800c9dc:	2302      	movs	r3, #2
 800c9de:	f107 010c 	add.w	r1, r7, #12
 800c9e2:	6838      	ldr	r0, [r7, #0]
 800c9e4:	f7ff fed8 	bl	800c798 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	88db      	ldrh	r3, [r3, #6]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f2:	d003      	beq.n	800c9fc <etharp_input+0xb8>
 800c9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9f8:	d01e      	beq.n	800ca38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c9fa:	e020      	b.n	800ca3e <etharp_input+0xfa>
      if (for_us) {
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01c      	beq.n	800ca3c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca1c:	2102      	movs	r1, #2
 800ca1e:	9103      	str	r1, [sp, #12]
 800ca20:	f107 010c 	add.w	r1, r7, #12
 800ca24:	9102      	str	r1, [sp, #8]
 800ca26:	9201      	str	r2, [sp, #4]
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	4622      	mov	r2, r4
 800ca2e:	4601      	mov	r1, r0
 800ca30:	6838      	ldr	r0, [r7, #0]
 800ca32:	f000 faeb 	bl	800d00c <etharp_raw>
      break;
 800ca36:	e001      	b.n	800ca3c <etharp_input+0xf8>
      break;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <etharp_input+0xfa>
      break;
 800ca3c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7f9 f9e2 	bl	8005e08 <pbuf_free>
}
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bdb0      	pop	{r4, r5, r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	08011ce8 	.word	0x08011ce8
 800ca50:	08011e38 	.word	0x08011e38
 800ca54:	08011d60 	.word	0x08011d60

0800ca58 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ca66:	79fa      	ldrb	r2, [r7, #7]
 800ca68:	4944      	ldr	r1, [pc, #272]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	005b      	lsls	r3, r3, #1
 800ca6e:	4413      	add	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	440b      	add	r3, r1
 800ca74:	3314      	adds	r3, #20
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d806      	bhi.n	800ca8a <etharp_output_to_arp_index+0x32>
 800ca7c:	4b40      	ldr	r3, [pc, #256]	; (800cb80 <etharp_output_to_arp_index+0x128>)
 800ca7e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ca82:	4940      	ldr	r1, [pc, #256]	; (800cb84 <etharp_output_to_arp_index+0x12c>)
 800ca84:	4840      	ldr	r0, [pc, #256]	; (800cb88 <etharp_output_to_arp_index+0x130>)
 800ca86:	f001 ff45 	bl	800e914 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ca8a:	79fa      	ldrb	r2, [r7, #7]
 800ca8c:	493b      	ldr	r1, [pc, #236]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800ca8e:	4613      	mov	r3, r2
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4413      	add	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	440b      	add	r3, r1
 800ca98:	3314      	adds	r3, #20
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d153      	bne.n	800cb48 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800caa0:	79fa      	ldrb	r2, [r7, #7]
 800caa2:	4936      	ldr	r1, [pc, #216]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	440b      	add	r3, r1
 800caae:	3312      	adds	r3, #18
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cab6:	d919      	bls.n	800caec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cab8:	79fa      	ldrb	r2, [r7, #7]
 800caba:	4613      	mov	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	4413      	add	r3, r2
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	4a2e      	ldr	r2, [pc, #184]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cac4:	4413      	add	r3, r2
 800cac6:	3304      	adds	r3, #4
 800cac8:	4619      	mov	r1, r3
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f000 fb4c 	bl	800d168 <etharp_request>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d138      	bne.n	800cb48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cad6:	79fa      	ldrb	r2, [r7, #7]
 800cad8:	4928      	ldr	r1, [pc, #160]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	440b      	add	r3, r1
 800cae4:	3314      	adds	r3, #20
 800cae6:	2203      	movs	r2, #3
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	e02d      	b.n	800cb48 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800caec:	79fa      	ldrb	r2, [r7, #7]
 800caee:	4923      	ldr	r1, [pc, #140]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800caf0:	4613      	mov	r3, r2
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	4413      	add	r3, r2
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	440b      	add	r3, r1
 800cafa:	3312      	adds	r3, #18
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb02:	d321      	bcc.n	800cb48 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb04:	79fa      	ldrb	r2, [r7, #7]
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	4a1b      	ldr	r2, [pc, #108]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cb10:	4413      	add	r3, r2
 800cb12:	1d19      	adds	r1, r3, #4
 800cb14:	79fa      	ldrb	r2, [r7, #7]
 800cb16:	4613      	mov	r3, r2
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	3308      	adds	r3, #8
 800cb20:	4a16      	ldr	r2, [pc, #88]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cb22:	4413      	add	r3, r2
 800cb24:	3304      	adds	r3, #4
 800cb26:	461a      	mov	r2, r3
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 fafb 	bl	800d124 <etharp_request_dst>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d109      	bne.n	800cb48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb34:	79fa      	ldrb	r2, [r7, #7]
 800cb36:	4911      	ldr	r1, [pc, #68]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cb38:	4613      	mov	r3, r2
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	4413      	add	r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	440b      	add	r3, r1
 800cb42:	3314      	adds	r3, #20
 800cb44:	2203      	movs	r2, #3
 800cb46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cb4e:	79fa      	ldrb	r2, [r7, #7]
 800cb50:	4613      	mov	r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	4413      	add	r3, r2
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	3308      	adds	r3, #8
 800cb5a:	4a08      	ldr	r2, [pc, #32]	; (800cb7c <etharp_output_to_arp_index+0x124>)
 800cb5c:	4413      	add	r3, r2
 800cb5e:	3304      	adds	r3, #4
 800cb60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb64:	9200      	str	r2, [sp, #0]
 800cb66:	460a      	mov	r2, r1
 800cb68:	68b9      	ldr	r1, [r7, #8]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f001 fe40 	bl	800e7f0 <ethernet_output>
 800cb70:	4603      	mov	r3, r0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200082ec 	.word	0x200082ec
 800cb80:	08011ce8 	.word	0x08011ce8
 800cb84:	08011e58 	.word	0x08011e58
 800cb88:	08011d60 	.word	0x08011d60

0800cb8c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08a      	sub	sp, #40	; 0x28
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <etharp_output+0x24>
 800cba2:	4b73      	ldr	r3, [pc, #460]	; (800cd70 <etharp_output+0x1e4>)
 800cba4:	f240 321e 	movw	r2, #798	; 0x31e
 800cba8:	4972      	ldr	r1, [pc, #456]	; (800cd74 <etharp_output+0x1e8>)
 800cbaa:	4873      	ldr	r0, [pc, #460]	; (800cd78 <etharp_output+0x1ec>)
 800cbac:	f001 feb2 	bl	800e914 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <etharp_output+0x38>
 800cbb6:	4b6e      	ldr	r3, [pc, #440]	; (800cd70 <etharp_output+0x1e4>)
 800cbb8:	f240 321f 	movw	r2, #799	; 0x31f
 800cbbc:	496f      	ldr	r1, [pc, #444]	; (800cd7c <etharp_output+0x1f0>)
 800cbbe:	486e      	ldr	r0, [pc, #440]	; (800cd78 <etharp_output+0x1ec>)
 800cbc0:	f001 fea8 	bl	800e914 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <etharp_output+0x4c>
 800cbca:	4b69      	ldr	r3, [pc, #420]	; (800cd70 <etharp_output+0x1e4>)
 800cbcc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cbd0:	496b      	ldr	r1, [pc, #428]	; (800cd80 <etharp_output+0x1f4>)
 800cbd2:	4869      	ldr	r0, [pc, #420]	; (800cd78 <etharp_output+0x1ec>)
 800cbd4:	f001 fe9e 	bl	800e914 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68f9      	ldr	r1, [r7, #12]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fef8 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cbea:	4b66      	ldr	r3, [pc, #408]	; (800cd84 <etharp_output+0x1f8>)
 800cbec:	61fb      	str	r3, [r7, #28]
 800cbee:	e0af      	b.n	800cd50 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf8:	2be0      	cmp	r3, #224	; 0xe0
 800cbfa:	d118      	bne.n	800cc2e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc00:	2300      	movs	r3, #0
 800cc02:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc04:	235e      	movs	r3, #94	; 0x5e
 800cc06:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3302      	adds	r3, #2
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3303      	adds	r3, #3
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cc26:	f107 0310 	add.w	r3, r7, #16
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e090      	b.n	800cd50 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3304      	adds	r3, #4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	405a      	eors	r2, r3
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4013      	ands	r3, r2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d012      	beq.n	800cc6c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc4c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00b      	beq.n	800cc6c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	330c      	adds	r3, #12
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	330c      	adds	r3, #12
 800cc62:	61bb      	str	r3, [r7, #24]
 800cc64:	e002      	b.n	800cc6c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cc66:	f06f 0303 	mvn.w	r3, #3
 800cc6a:	e07d      	b.n	800cd68 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc6c:	4b46      	ldr	r3, [pc, #280]	; (800cd88 <etharp_output+0x1fc>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	4619      	mov	r1, r3
 800cc72:	4a46      	ldr	r2, [pc, #280]	; (800cd8c <etharp_output+0x200>)
 800cc74:	460b      	mov	r3, r1
 800cc76:	005b      	lsls	r3, r3, #1
 800cc78:	440b      	add	r3, r1
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	4413      	add	r3, r2
 800cc7e:	3314      	adds	r3, #20
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d925      	bls.n	800ccd2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc86:	4b40      	ldr	r3, [pc, #256]	; (800cd88 <etharp_output+0x1fc>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4a3f      	ldr	r2, [pc, #252]	; (800cd8c <etharp_output+0x200>)
 800cc8e:	460b      	mov	r3, r1
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	440b      	add	r3, r1
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	4413      	add	r3, r2
 800cc98:	3308      	adds	r3, #8
 800cc9a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d117      	bne.n	800ccd2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	4b38      	ldr	r3, [pc, #224]	; (800cd88 <etharp_output+0x1fc>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	4937      	ldr	r1, [pc, #220]	; (800cd8c <etharp_output+0x200>)
 800ccae:	4603      	mov	r3, r0
 800ccb0:	005b      	lsls	r3, r3, #1
 800ccb2:	4403      	add	r3, r0
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3304      	adds	r3, #4
 800ccba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d108      	bne.n	800ccd2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ccc0:	4b31      	ldr	r3, [pc, #196]	; (800cd88 <etharp_output+0x1fc>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff fec5 	bl	800ca58 <etharp_output_to_arp_index>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	e04a      	b.n	800cd68 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	75fb      	strb	r3, [r7, #23]
 800ccd6:	e031      	b.n	800cd3c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccd8:	7dfa      	ldrb	r2, [r7, #23]
 800ccda:	492c      	ldr	r1, [pc, #176]	; (800cd8c <etharp_output+0x200>)
 800ccdc:	4613      	mov	r3, r2
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	4413      	add	r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	440b      	add	r3, r1
 800cce6:	3314      	adds	r3, #20
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d923      	bls.n	800cd36 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ccee:	7dfa      	ldrb	r2, [r7, #23]
 800ccf0:	4926      	ldr	r1, [pc, #152]	; (800cd8c <etharp_output+0x200>)
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d117      	bne.n	800cd36 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	6819      	ldr	r1, [r3, #0]
 800cd0a:	7dfa      	ldrb	r2, [r7, #23]
 800cd0c:	481f      	ldr	r0, [pc, #124]	; (800cd8c <etharp_output+0x200>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	4403      	add	r3, r0
 800cd18:	3304      	adds	r3, #4
 800cd1a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd1c:	4299      	cmp	r1, r3
 800cd1e:	d10a      	bne.n	800cd36 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cd20:	4a19      	ldr	r2, [pc, #100]	; (800cd88 <etharp_output+0x1fc>)
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fe93 	bl	800ca58 <etharp_output_to_arp_index>
 800cd32:	4603      	mov	r3, r0
 800cd34:	e018      	b.n	800cd68 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	75fb      	strb	r3, [r7, #23]
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
 800cd3e:	2b09      	cmp	r3, #9
 800cd40:	d9ca      	bls.n	800ccd8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	69b9      	ldr	r1, [r7, #24]
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f000 f822 	bl	800cd90 <etharp_query>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	e00b      	b.n	800cd68 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f001 fd45 	bl	800e7f0 <ethernet_output>
 800cd66:	4603      	mov	r3, r0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	08011ce8 	.word	0x08011ce8
 800cd74:	08011e38 	.word	0x08011e38
 800cd78:	08011d60 	.word	0x08011d60
 800cd7c:	08011e88 	.word	0x08011e88
 800cd80:	08011e28 	.word	0x08011e28
 800cd84:	080124a4 	.word	0x080124a4
 800cd88:	200083dc 	.word	0x200083dc
 800cd8c:	200082ec 	.word	0x200082ec

0800cd90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08c      	sub	sp, #48	; 0x30
 800cd94:	af02      	add	r7, sp, #8
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3326      	adds	r3, #38	; 0x26
 800cda0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cda2:	23ff      	movs	r3, #255	; 0xff
 800cda4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68f9      	ldr	r1, [r7, #12]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 fe0e 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10c      	bne.n	800cdd8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdc6:	2be0      	cmp	r3, #224	; 0xe0
 800cdc8:	d006      	beq.n	800cdd8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cdd8:	f06f 030f 	mvn.w	r3, #15
 800cddc:	e101      	b.n	800cfe2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	2101      	movs	r1, #1
 800cde2:	68b8      	ldr	r0, [r7, #8]
 800cde4:	f7ff fb60 	bl	800c4a8 <etharp_find_entry>
 800cde8:	4603      	mov	r3, r0
 800cdea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cdec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	da02      	bge.n	800cdfa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cdf4:	8a7b      	ldrh	r3, [r7, #18]
 800cdf6:	b25b      	sxtb	r3, r3
 800cdf8:	e0f3      	b.n	800cfe2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cdfa:	8a7b      	ldrh	r3, [r7, #18]
 800cdfc:	2b7e      	cmp	r3, #126	; 0x7e
 800cdfe:	d906      	bls.n	800ce0e <etharp_query+0x7e>
 800ce00:	4b7a      	ldr	r3, [pc, #488]	; (800cfec <etharp_query+0x25c>)
 800ce02:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce06:	497a      	ldr	r1, [pc, #488]	; (800cff0 <etharp_query+0x260>)
 800ce08:	487a      	ldr	r0, [pc, #488]	; (800cff4 <etharp_query+0x264>)
 800ce0a:	f001 fd83 	bl	800e914 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce0e:	8a7b      	ldrh	r3, [r7, #18]
 800ce10:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce12:	7c7a      	ldrb	r2, [r7, #17]
 800ce14:	4978      	ldr	r1, [pc, #480]	; (800cff8 <etharp_query+0x268>)
 800ce16:	4613      	mov	r3, r2
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	4413      	add	r3, r2
 800ce1c:	00db      	lsls	r3, r3, #3
 800ce1e:	440b      	add	r3, r1
 800ce20:	3314      	adds	r3, #20
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d115      	bne.n	800ce54 <etharp_query+0xc4>
    is_new_entry = 1;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ce2c:	7c7a      	ldrb	r2, [r7, #17]
 800ce2e:	4972      	ldr	r1, [pc, #456]	; (800cff8 <etharp_query+0x268>)
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	440b      	add	r3, r1
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce40:	7c7a      	ldrb	r2, [r7, #17]
 800ce42:	496d      	ldr	r1, [pc, #436]	; (800cff8 <etharp_query+0x268>)
 800ce44:	4613      	mov	r3, r2
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	4413      	add	r3, r2
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	440b      	add	r3, r1
 800ce4e:	3308      	adds	r3, #8
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ce54:	7c7a      	ldrb	r2, [r7, #17]
 800ce56:	4968      	ldr	r1, [pc, #416]	; (800cff8 <etharp_query+0x268>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	3314      	adds	r3, #20
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d011      	beq.n	800ce8e <etharp_query+0xfe>
 800ce6a:	7c7a      	ldrb	r2, [r7, #17]
 800ce6c:	4962      	ldr	r1, [pc, #392]	; (800cff8 <etharp_query+0x268>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3314      	adds	r3, #20
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d806      	bhi.n	800ce8e <etharp_query+0xfe>
 800ce80:	4b5a      	ldr	r3, [pc, #360]	; (800cfec <etharp_query+0x25c>)
 800ce82:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ce86:	495d      	ldr	r1, [pc, #372]	; (800cffc <etharp_query+0x26c>)
 800ce88:	485a      	ldr	r0, [pc, #360]	; (800cff4 <etharp_query+0x264>)
 800ce8a:	f001 fd43 	bl	800e914 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d102      	bne.n	800ce9a <etharp_query+0x10a>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10c      	bne.n	800ceb4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f000 f963 	bl	800d168 <etharp_request>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <etharp_query+0x124>
      return result;
 800ceae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceb2:	e096      	b.n	800cfe2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <etharp_query+0x138>
 800ceba:	4b4c      	ldr	r3, [pc, #304]	; (800cfec <etharp_query+0x25c>)
 800cebc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cec0:	494f      	ldr	r1, [pc, #316]	; (800d000 <etharp_query+0x270>)
 800cec2:	484c      	ldr	r0, [pc, #304]	; (800cff4 <etharp_query+0x264>)
 800cec4:	f001 fd26 	bl	800e914 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cec8:	7c7a      	ldrb	r2, [r7, #17]
 800ceca:	494b      	ldr	r1, [pc, #300]	; (800cff8 <etharp_query+0x268>)
 800cecc:	4613      	mov	r3, r2
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	4413      	add	r3, r2
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	440b      	add	r3, r1
 800ced6:	3314      	adds	r3, #20
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d917      	bls.n	800cf0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cede:	4a49      	ldr	r2, [pc, #292]	; (800d004 <etharp_query+0x274>)
 800cee0:	7c7b      	ldrb	r3, [r7, #17]
 800cee2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cee4:	7c7a      	ldrb	r2, [r7, #17]
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	3308      	adds	r3, #8
 800cef0:	4a41      	ldr	r2, [pc, #260]	; (800cff8 <etharp_query+0x268>)
 800cef2:	4413      	add	r3, r2
 800cef4:	3304      	adds	r3, #4
 800cef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cefa:	9200      	str	r2, [sp, #0]
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f001 fc75 	bl	800e7f0 <ethernet_output>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf0c:	e067      	b.n	800cfde <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf0e:	7c7a      	ldrb	r2, [r7, #17]
 800cf10:	4939      	ldr	r1, [pc, #228]	; (800cff8 <etharp_query+0x268>)
 800cf12:	4613      	mov	r3, r2
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	4413      	add	r3, r2
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	440b      	add	r3, r1
 800cf1c:	3314      	adds	r3, #20
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d15c      	bne.n	800cfde <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf2c:	e01c      	b.n	800cf68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	895a      	ldrh	r2, [r3, #10]
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	891b      	ldrh	r3, [r3, #8]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d10a      	bne.n	800cf50 <etharp_query+0x1c0>
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d006      	beq.n	800cf50 <etharp_query+0x1c0>
 800cf42:	4b2a      	ldr	r3, [pc, #168]	; (800cfec <etharp_query+0x25c>)
 800cf44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cf48:	492f      	ldr	r1, [pc, #188]	; (800d008 <etharp_query+0x278>)
 800cf4a:	482a      	ldr	r0, [pc, #168]	; (800cff4 <etharp_query+0x264>)
 800cf4c:	f001 fce2 	bl	800e914 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	7b1b      	ldrb	r3, [r3, #12]
 800cf54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <etharp_query+0x1d2>
        copy_needed = 1;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	61bb      	str	r3, [r7, #24]
        break;
 800cf60:	e005      	b.n	800cf6e <etharp_query+0x1de>
      }
      p = p->next;
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1df      	bne.n	800cf2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d007      	beq.n	800cf84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cf7a:	200e      	movs	r0, #14
 800cf7c:	f7f9 f9b0 	bl	80062e0 <pbuf_clone>
 800cf80:	61f8      	str	r0, [r7, #28]
 800cf82:	e004      	b.n	800cf8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cf88:	69f8      	ldr	r0, [r7, #28]
 800cf8a:	f7f8 ffdd 	bl	8005f48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d021      	beq.n	800cfd8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cf94:	7c7a      	ldrb	r2, [r7, #17]
 800cf96:	4918      	ldr	r1, [pc, #96]	; (800cff8 <etharp_query+0x268>)
 800cf98:	4613      	mov	r3, r2
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	4413      	add	r3, r2
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	440b      	add	r3, r1
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00a      	beq.n	800cfbe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cfa8:	7c7a      	ldrb	r2, [r7, #17]
 800cfaa:	4913      	ldr	r1, [pc, #76]	; (800cff8 <etharp_query+0x268>)
 800cfac:	4613      	mov	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	440b      	add	r3, r1
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f8 ff25 	bl	8005e08 <pbuf_free>
      }
      arp_table[i].q = p;
 800cfbe:	7c7a      	ldrb	r2, [r7, #17]
 800cfc0:	490d      	ldr	r1, [pc, #52]	; (800cff8 <etharp_query+0x268>)
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4413      	add	r3, r2
 800cfc8:	00db      	lsls	r3, r3, #3
 800cfca:	440b      	add	r3, r1
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfd6:	e002      	b.n	800cfde <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cfd8:	23ff      	movs	r3, #255	; 0xff
 800cfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cfde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3728      	adds	r7, #40	; 0x28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	08011ce8 	.word	0x08011ce8
 800cff0:	08011e94 	.word	0x08011e94
 800cff4:	08011d60 	.word	0x08011d60
 800cff8:	200082ec 	.word	0x200082ec
 800cffc:	08011ea4 	.word	0x08011ea4
 800d000:	08011e88 	.word	0x08011e88
 800d004:	200083dc 	.word	0x200083dc
 800d008:	08011ecc 	.word	0x08011ecc

0800d00c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08a      	sub	sp, #40	; 0x28
 800d010:	af02      	add	r7, sp, #8
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d106      	bne.n	800d032 <etharp_raw+0x26>
 800d024:	4b3a      	ldr	r3, [pc, #232]	; (800d110 <etharp_raw+0x104>)
 800d026:	f240 4257 	movw	r2, #1111	; 0x457
 800d02a:	493a      	ldr	r1, [pc, #232]	; (800d114 <etharp_raw+0x108>)
 800d02c:	483a      	ldr	r0, [pc, #232]	; (800d118 <etharp_raw+0x10c>)
 800d02e:	f001 fc71 	bl	800e914 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d032:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d036:	211c      	movs	r1, #28
 800d038:	200e      	movs	r0, #14
 800d03a:	f7f8 fc01 	bl	8005840 <pbuf_alloc>
 800d03e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	e05d      	b.n	800d108 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	2b1b      	cmp	r3, #27
 800d052:	d806      	bhi.n	800d062 <etharp_raw+0x56>
 800d054:	4b2e      	ldr	r3, [pc, #184]	; (800d110 <etharp_raw+0x104>)
 800d056:	f240 4262 	movw	r2, #1122	; 0x462
 800d05a:	4930      	ldr	r1, [pc, #192]	; (800d11c <etharp_raw+0x110>)
 800d05c:	482e      	ldr	r0, [pc, #184]	; (800d118 <etharp_raw+0x10c>)
 800d05e:	f001 fc59 	bl	800e914 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d068:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7f7 fb6e 	bl	800474c <lwip_htons>
 800d070:	4603      	mov	r3, r0
 800d072:	461a      	mov	r2, r3
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d07e:	2b06      	cmp	r3, #6
 800d080:	d006      	beq.n	800d090 <etharp_raw+0x84>
 800d082:	4b23      	ldr	r3, [pc, #140]	; (800d110 <etharp_raw+0x104>)
 800d084:	f240 4269 	movw	r2, #1129	; 0x469
 800d088:	4925      	ldr	r1, [pc, #148]	; (800d120 <etharp_raw+0x114>)
 800d08a:	4823      	ldr	r0, [pc, #140]	; (800d118 <etharp_raw+0x10c>)
 800d08c:	f001 fc42 	bl	800e914 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	3308      	adds	r3, #8
 800d094:	2206      	movs	r2, #6
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 fc25 	bl	800e8e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	3312      	adds	r3, #18
 800d0a2:	2206      	movs	r2, #6
 800d0a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f001 fc1e 	bl	800e8e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	330e      	adds	r3, #14
 800d0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b2:	6812      	ldr	r2, [r2, #0]
 800d0b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	3318      	adds	r3, #24
 800d0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0bc:	6812      	ldr	r2, [r2, #0]
 800d0be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	701a      	strb	r2, [r3, #0]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f042 0201 	orr.w	r2, r2, #1
 800d0cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f042 0208 	orr.w	r2, r2, #8
 800d0d6:	709a      	strb	r2, [r3, #2]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2206      	movs	r2, #6
 800d0e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2204      	movs	r2, #4
 800d0e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d0e8:	f640 0306 	movw	r3, #2054	; 0x806
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	69b9      	ldr	r1, [r7, #24]
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f001 fb7b 	bl	800e7f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d0fa:	69b8      	ldr	r0, [r7, #24]
 800d0fc:	f7f8 fe84 	bl	8005e08 <pbuf_free>
  p = NULL;
 800d100:	2300      	movs	r3, #0
 800d102:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d104:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3720      	adds	r7, #32
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	08011ce8 	.word	0x08011ce8
 800d114:	08011e38 	.word	0x08011e38
 800d118:	08011d60 	.word	0x08011d60
 800d11c:	08011ee8 	.word	0x08011ee8
 800d120:	08011f1c 	.word	0x08011f1c

0800d124 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af04      	add	r7, sp, #16
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d140:	2201      	movs	r2, #1
 800d142:	9203      	str	r2, [sp, #12]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	9202      	str	r2, [sp, #8]
 800d148:	4a06      	ldr	r2, [pc, #24]	; (800d164 <etharp_request_dst+0x40>)
 800d14a:	9201      	str	r2, [sp, #4]
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	4603      	mov	r3, r0
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7ff ff5a 	bl	800d00c <etharp_raw>
 800d158:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	080124ac 	.word	0x080124ac

0800d168 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d172:	4a05      	ldr	r2, [pc, #20]	; (800d188 <etharp_request+0x20>)
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff ffd4 	bl	800d124 <etharp_request_dst>
 800d17c:	4603      	mov	r3, r0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	080124a4 	.word	0x080124a4

0800d18c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08e      	sub	sp, #56	; 0x38
 800d190:	af04      	add	r7, sp, #16
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d196:	4b79      	ldr	r3, [pc, #484]	; (800d37c <icmp_input+0x1f0>)
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	f003 030f 	and.w	r3, r3, #15
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ae:	2b13      	cmp	r3, #19
 800d1b0:	f240 80cd 	bls.w	800d34e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	895b      	ldrh	r3, [r3, #10]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	f240 80ca 	bls.w	800d352 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d1c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80b7 	beq.w	800d340 <icmp_input+0x1b4>
 800d1d2:	2b08      	cmp	r3, #8
 800d1d4:	f040 80b7 	bne.w	800d346 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d1d8:	4b69      	ldr	r3, [pc, #420]	; (800d380 <icmp_input+0x1f4>)
 800d1da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d1dc:	4b67      	ldr	r3, [pc, #412]	; (800d37c <icmp_input+0x1f0>)
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e4:	2be0      	cmp	r3, #224	; 0xe0
 800d1e6:	f000 80bb 	beq.w	800d360 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d1ea:	4b64      	ldr	r3, [pc, #400]	; (800d37c <icmp_input+0x1f0>)
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	4a63      	ldr	r2, [pc, #396]	; (800d37c <icmp_input+0x1f0>)
 800d1f0:	6812      	ldr	r2, [r2, #0]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 fbed 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 80b1 	bne.w	800d364 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	2b07      	cmp	r3, #7
 800d208:	f240 80a5 	bls.w	800d356 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d20e:	330e      	adds	r3, #14
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7f8 fd62 	bl	8005cdc <pbuf_add_header>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d04b      	beq.n	800d2b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	891a      	ldrh	r2, [r3, #8]
 800d222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d224:	4413      	add	r3, r2
 800d226:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	891b      	ldrh	r3, [r3, #8]
 800d22c:	8b7a      	ldrh	r2, [r7, #26]
 800d22e:	429a      	cmp	r2, r3
 800d230:	f0c0 809a 	bcc.w	800d368 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d234:	8b7b      	ldrh	r3, [r7, #26]
 800d236:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d23a:	4619      	mov	r1, r3
 800d23c:	200e      	movs	r0, #14
 800d23e:	f7f8 faff 	bl	8005840 <pbuf_alloc>
 800d242:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f000 8090 	beq.w	800d36c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	895b      	ldrh	r3, [r3, #10]
 800d250:	461a      	mov	r2, r3
 800d252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d254:	3308      	adds	r3, #8
 800d256:	429a      	cmp	r2, r3
 800d258:	d203      	bcs.n	800d262 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f7f8 fdd4 	bl	8005e08 <pbuf_free>
          goto icmperr;
 800d260:	e085      	b.n	800d36e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f001 fb3c 	bl	800e8e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d272:	4619      	mov	r1, r3
 800d274:	6978      	ldr	r0, [r7, #20]
 800d276:	f7f8 fd41 	bl	8005cfc <pbuf_remove_header>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d009      	beq.n	800d294 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d280:	4b40      	ldr	r3, [pc, #256]	; (800d384 <icmp_input+0x1f8>)
 800d282:	22b6      	movs	r2, #182	; 0xb6
 800d284:	4940      	ldr	r1, [pc, #256]	; (800d388 <icmp_input+0x1fc>)
 800d286:	4841      	ldr	r0, [pc, #260]	; (800d38c <icmp_input+0x200>)
 800d288:	f001 fb44 	bl	800e914 <iprintf>
          pbuf_free(r);
 800d28c:	6978      	ldr	r0, [r7, #20]
 800d28e:	f7f8 fdbb 	bl	8005e08 <pbuf_free>
          goto icmperr;
 800d292:	e06c      	b.n	800d36e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	6978      	ldr	r0, [r7, #20]
 800d298:	f7f8 fede 	bl	8006058 <pbuf_copy>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d003      	beq.n	800d2aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d2a2:	6978      	ldr	r0, [r7, #20]
 800d2a4:	f7f8 fdb0 	bl	8005e08 <pbuf_free>
          goto icmperr;
 800d2a8:	e061      	b.n	800d36e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7f8 fdac 	bl	8005e08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	607b      	str	r3, [r7, #4]
 800d2b4:	e00f      	b.n	800d2d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d2b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2b8:	330e      	adds	r3, #14
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7f8 fd1d 	bl	8005cfc <pbuf_remove_header>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d2c8:	4b2e      	ldr	r3, [pc, #184]	; (800d384 <icmp_input+0x1f8>)
 800d2ca:	22c7      	movs	r2, #199	; 0xc7
 800d2cc:	4930      	ldr	r1, [pc, #192]	; (800d390 <icmp_input+0x204>)
 800d2ce:	482f      	ldr	r0, [pc, #188]	; (800d38c <icmp_input+0x200>)
 800d2d0:	f001 fb20 	bl	800e914 <iprintf>
          goto icmperr;
 800d2d4:	e04b      	b.n	800d36e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d2dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7f8 fcfb 	bl	8005cdc <pbuf_add_header>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d12b      	bne.n	800d344 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d2fa:	4b20      	ldr	r3, [pc, #128]	; (800d37c <icmp_input+0x1f0>)
 800d2fc:	691a      	ldr	r2, [r3, #16]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	2200      	movs	r2, #0
 800d30c:	709a      	strb	r2, [r3, #2]
 800d30e:	2200      	movs	r2, #0
 800d310:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	22ff      	movs	r2, #255	; 0xff
 800d316:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	729a      	strb	r2, [r3, #10]
 800d31e:	2200      	movs	r2, #0
 800d320:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	2301      	movs	r3, #1
 800d328:	9301      	str	r3, [sp, #4]
 800d32a:	2300      	movs	r3, #0
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	23ff      	movs	r3, #255	; 0xff
 800d330:	2200      	movs	r2, #0
 800d332:	69f9      	ldr	r1, [r7, #28]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fa75 	bl	800d824 <ip4_output_if>
 800d33a:	4603      	mov	r3, r0
 800d33c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d33e:	e001      	b.n	800d344 <icmp_input+0x1b8>
      break;
 800d340:	bf00      	nop
 800d342:	e000      	b.n	800d346 <icmp_input+0x1ba>
      break;
 800d344:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7f8 fd5e 	bl	8005e08 <pbuf_free>
  return;
 800d34c:	e013      	b.n	800d376 <icmp_input+0x1ea>
    goto lenerr;
 800d34e:	bf00      	nop
 800d350:	e002      	b.n	800d358 <icmp_input+0x1cc>
    goto lenerr;
 800d352:	bf00      	nop
 800d354:	e000      	b.n	800d358 <icmp_input+0x1cc>
        goto lenerr;
 800d356:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7f8 fd55 	bl	8005e08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d35e:	e00a      	b.n	800d376 <icmp_input+0x1ea>
        goto icmperr;
 800d360:	bf00      	nop
 800d362:	e004      	b.n	800d36e <icmp_input+0x1e2>
        goto icmperr;
 800d364:	bf00      	nop
 800d366:	e002      	b.n	800d36e <icmp_input+0x1e2>
          goto icmperr;
 800d368:	bf00      	nop
 800d36a:	e000      	b.n	800d36e <icmp_input+0x1e2>
          goto icmperr;
 800d36c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7f8 fd4a 	bl	8005e08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d374:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d376:	3728      	adds	r7, #40	; 0x28
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20004d1c 	.word	0x20004d1c
 800d380:	20004d30 	.word	0x20004d30
 800d384:	08011f60 	.word	0x08011f60
 800d388:	08011f98 	.word	0x08011f98
 800d38c:	08011fd0 	.word	0x08011fd0
 800d390:	08011ff8 	.word	0x08011ff8

0800d394 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	2103      	movs	r1, #3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f814 	bl	800d3d4 <icmp_send_response>
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	210b      	movs	r1, #11
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f804 	bl	800d3d4 <icmp_send_response>
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08c      	sub	sp, #48	; 0x30
 800d3d8:	af04      	add	r7, sp, #16
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	70fb      	strb	r3, [r7, #3]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d3e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3e8:	2124      	movs	r1, #36	; 0x24
 800d3ea:	2022      	movs	r0, #34	; 0x22
 800d3ec:	f7f8 fa28 	bl	8005840 <pbuf_alloc>
 800d3f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d04c      	beq.n	800d492 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	895b      	ldrh	r3, [r3, #10]
 800d3fc:	2b23      	cmp	r3, #35	; 0x23
 800d3fe:	d806      	bhi.n	800d40e <icmp_send_response+0x3a>
 800d400:	4b26      	ldr	r3, [pc, #152]	; (800d49c <icmp_send_response+0xc8>)
 800d402:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d406:	4926      	ldr	r1, [pc, #152]	; (800d4a0 <icmp_send_response+0xcc>)
 800d408:	4826      	ldr	r0, [pc, #152]	; (800d4a4 <icmp_send_response+0xd0>)
 800d40a:	f001 fa83 	bl	800e914 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	78fa      	ldrb	r2, [r7, #3]
 800d41e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	78ba      	ldrb	r2, [r7, #2]
 800d424:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2200      	movs	r2, #0
 800d42a:	711a      	strb	r2, [r3, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2200      	movs	r2, #0
 800d434:	719a      	strb	r2, [r3, #6]
 800d436:	2200      	movs	r2, #0
 800d438:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f103 0008 	add.w	r0, r3, #8
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	221c      	movs	r2, #28
 800d448:	4619      	mov	r1, r3
 800d44a:	f001 fa4d 	bl	800e8e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d454:	f107 030c 	add.w	r3, r7, #12
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 f825 	bl	800d4a8 <ip4_route>
 800d45e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d011      	beq.n	800d48a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2200      	movs	r2, #0
 800d46a:	709a      	strb	r2, [r3, #2]
 800d46c:	2200      	movs	r2, #0
 800d46e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d470:	f107 020c 	add.w	r2, r7, #12
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	9302      	str	r3, [sp, #8]
 800d478:	2301      	movs	r3, #1
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	2300      	movs	r3, #0
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	23ff      	movs	r3, #255	; 0xff
 800d482:	2100      	movs	r1, #0
 800d484:	69f8      	ldr	r0, [r7, #28]
 800d486:	f000 f9cd 	bl	800d824 <ip4_output_if>
  }
  pbuf_free(q);
 800d48a:	69f8      	ldr	r0, [r7, #28]
 800d48c:	f7f8 fcbc 	bl	8005e08 <pbuf_free>
 800d490:	e000      	b.n	800d494 <icmp_send_response+0xc0>
    return;
 800d492:	bf00      	nop
}
 800d494:	3720      	adds	r7, #32
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	08011f60 	.word	0x08011f60
 800d4a0:	0801202c 	.word	0x0801202c
 800d4a4:	08011fd0 	.word	0x08011fd0

0800d4a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d4b0:	4b33      	ldr	r3, [pc, #204]	; (800d580 <ip4_route+0xd8>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	e036      	b.n	800d526 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d02b      	beq.n	800d520 <ip4_route+0x78>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ce:	089b      	lsrs	r3, r3, #2
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d022      	beq.n	800d520 <ip4_route+0x78>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3304      	adds	r3, #4
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d01d      	beq.n	800d520 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	405a      	eors	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	e038      	b.n	800d572 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d108      	bne.n	800d520 <ip4_route+0x78>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	330c      	adds	r3, #12
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d101      	bne.n	800d520 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	e028      	b.n	800d572 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1c5      	bne.n	800d4b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d52c:	4b15      	ldr	r3, [pc, #84]	; (800d584 <ip4_route+0xdc>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01a      	beq.n	800d56a <ip4_route+0xc2>
 800d534:	4b13      	ldr	r3, [pc, #76]	; (800d584 <ip4_route+0xdc>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	2b00      	cmp	r3, #0
 800d542:	d012      	beq.n	800d56a <ip4_route+0xc2>
 800d544:	4b0f      	ldr	r3, [pc, #60]	; (800d584 <ip4_route+0xdc>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00a      	beq.n	800d56a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d554:	4b0b      	ldr	r3, [pc, #44]	; (800d584 <ip4_route+0xdc>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3304      	adds	r3, #4
 800d55a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b7f      	cmp	r3, #127	; 0x7f
 800d568:	d101      	bne.n	800d56e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	e001      	b.n	800d572 <ip4_route+0xca>
  }

  return netif_default;
 800d56e:	4b05      	ldr	r3, [pc, #20]	; (800d584 <ip4_route+0xdc>)
 800d570:	681b      	ldr	r3, [r3, #0]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	20008280 	.word	0x20008280
 800d584:	20008284 	.word	0x20008284

0800d588 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d016      	beq.n	800d5ce <ip4_input_accept+0x46>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d011      	beq.n	800d5ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d5aa:	4b0b      	ldr	r3, [pc, #44]	; (800d5d8 <ip4_input_accept+0x50>)
 800d5ac:	695a      	ldr	r2, [r3, #20]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d008      	beq.n	800d5ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d5b8:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <ip4_input_accept+0x50>)
 800d5ba:	695b      	ldr	r3, [r3, #20]
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 fa08 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800d5c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20004d1c 	.word	0x20004d1c

0800d5dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	091b      	lsrs	r3, r3, #4
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d004      	beq.n	800d602 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7f8 fc05 	bl	8005e08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e107      	b.n	800d812 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	f003 030f 	and.w	r3, r3, #15
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	885b      	ldrh	r3, [r3, #2]
 800d616:	b29b      	uxth	r3, r3
 800d618:	4618      	mov	r0, r3
 800d61a:	f7f7 f897 	bl	800474c <lwip_htons>
 800d61e:	4603      	mov	r3, r0
 800d620:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	891b      	ldrh	r3, [r3, #8]
 800d626:	89ba      	ldrh	r2, [r7, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d204      	bcs.n	800d636 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d62c:	89bb      	ldrh	r3, [r7, #12]
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7f8 fa63 	bl	8005afc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	895b      	ldrh	r3, [r3, #10]
 800d63a:	89fa      	ldrh	r2, [r7, #14]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d807      	bhi.n	800d650 <ip4_input+0x74>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	891b      	ldrh	r3, [r3, #8]
 800d644:	89ba      	ldrh	r2, [r7, #12]
 800d646:	429a      	cmp	r2, r3
 800d648:	d802      	bhi.n	800d650 <ip4_input+0x74>
 800d64a:	89fb      	ldrh	r3, [r7, #14]
 800d64c:	2b13      	cmp	r3, #19
 800d64e:	d804      	bhi.n	800d65a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f8 fbd9 	bl	8005e08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	e0db      	b.n	800d812 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	4a6f      	ldr	r2, [pc, #444]	; (800d81c <ip4_input+0x240>)
 800d660:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	4a6d      	ldr	r2, [pc, #436]	; (800d81c <ip4_input+0x240>)
 800d668:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d66a:	4b6c      	ldr	r3, [pc, #432]	; (800d81c <ip4_input+0x240>)
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d672:	2be0      	cmp	r3, #224	; 0xe0
 800d674:	d112      	bne.n	800d69c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d67c:	f003 0301 	and.w	r3, r3, #1
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d007      	beq.n	800d696 <ip4_input+0xba>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	3304      	adds	r3, #4
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <ip4_input+0xba>
      netif = inp;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	613b      	str	r3, [r7, #16]
 800d694:	e02a      	b.n	800d6ec <ip4_input+0x110>
    } else {
      netif = NULL;
 800d696:	2300      	movs	r3, #0
 800d698:	613b      	str	r3, [r7, #16]
 800d69a:	e027      	b.n	800d6ec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d69c:	6838      	ldr	r0, [r7, #0]
 800d69e:	f7ff ff73 	bl	800d588 <ip4_input_accept>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <ip4_input+0xd2>
      netif = inp;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	613b      	str	r3, [r7, #16]
 800d6ac:	e01e      	b.n	800d6ec <ip4_input+0x110>
    } else {
      netif = NULL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d6b2:	4b5a      	ldr	r3, [pc, #360]	; (800d81c <ip4_input+0x240>)
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b7f      	cmp	r3, #127	; 0x7f
 800d6ba:	d017      	beq.n	800d6ec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d6bc:	4b58      	ldr	r3, [pc, #352]	; (800d820 <ip4_input+0x244>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	613b      	str	r3, [r7, #16]
 800d6c2:	e00e      	b.n	800d6e2 <ip4_input+0x106>
          if (netif == inp) {
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d006      	beq.n	800d6da <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d6cc:	6938      	ldr	r0, [r7, #16]
 800d6ce:	f7ff ff5b 	bl	800d588 <ip4_input_accept>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d108      	bne.n	800d6ea <ip4_input+0x10e>
 800d6d8:	e000      	b.n	800d6dc <ip4_input+0x100>
            continue;
 800d6da:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	613b      	str	r3, [r7, #16]
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1ed      	bne.n	800d6c4 <ip4_input+0xe8>
 800d6e8:	e000      	b.n	800d6ec <ip4_input+0x110>
            break;
 800d6ea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d6ec:	4b4b      	ldr	r3, [pc, #300]	; (800d81c <ip4_input+0x240>)
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 f96e 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d105      	bne.n	800d70a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d6fe:	4b47      	ldr	r3, [pc, #284]	; (800d81c <ip4_input+0x240>)
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d706:	2be0      	cmp	r3, #224	; 0xe0
 800d708:	d104      	bne.n	800d714 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7f8 fb7c 	bl	8005e08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	e07e      	b.n	800d812 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d104      	bne.n	800d724 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7f8 fb74 	bl	8005e08 <pbuf_free>
    return ERR_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	e076      	b.n	800d812 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	88db      	ldrh	r3, [r3, #6]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	461a      	mov	r2, r3
 800d72c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d730:	4013      	ands	r3, r2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00b      	beq.n	800d74e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fc92 	bl	800e060 <ip4_reass>
 800d73c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <ip4_input+0x16c>
      return ERR_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	e064      	b.n	800d812 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d74e:	4a33      	ldr	r2, [pc, #204]	; (800d81c <ip4_input+0x240>)
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d754:	4a31      	ldr	r2, [pc, #196]	; (800d81c <ip4_input+0x240>)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d75a:	4a30      	ldr	r2, [pc, #192]	; (800d81c <ip4_input+0x240>)
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	f003 030f 	and.w	r3, r3, #15
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	b29a      	uxth	r2, r3
 800d770:	4b2a      	ldr	r3, [pc, #168]	; (800d81c <ip4_input+0x240>)
 800d772:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	4619      	mov	r1, r3
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7f8 fabf 	bl	8005cfc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	7a5b      	ldrb	r3, [r3, #9]
 800d782:	2b11      	cmp	r3, #17
 800d784:	d006      	beq.n	800d794 <ip4_input+0x1b8>
 800d786:	2b11      	cmp	r3, #17
 800d788:	dc13      	bgt.n	800d7b2 <ip4_input+0x1d6>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d00c      	beq.n	800d7a8 <ip4_input+0x1cc>
 800d78e:	2b06      	cmp	r3, #6
 800d790:	d005      	beq.n	800d79e <ip4_input+0x1c2>
 800d792:	e00e      	b.n	800d7b2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7fe f928 	bl	800b9ec <udp_input>
        break;
 800d79c:	e026      	b.n	800d7ec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7fa f969 	bl	8007a78 <tcp_input>
        break;
 800d7a6:	e021      	b.n	800d7ec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff fcee 	bl	800d18c <icmp_input>
        break;
 800d7b0:	e01c      	b.n	800d7ec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d7b2:	4b1a      	ldr	r3, [pc, #104]	; (800d81c <ip4_input+0x240>)
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	6939      	ldr	r1, [r7, #16]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f90b 	bl	800d9d4 <ip4_addr_isbroadcast_u32>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10f      	bne.n	800d7e4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d7c4:	4b15      	ldr	r3, [pc, #84]	; (800d81c <ip4_input+0x240>)
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d7cc:	2be0      	cmp	r3, #224	; 0xe0
 800d7ce:	d009      	beq.n	800d7e4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d7d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7f8 fb03 	bl	8005de2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d7dc:	2102      	movs	r1, #2
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fdd8 	bl	800d394 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7f8 fb0f 	bl	8005e08 <pbuf_free>
        break;
 800d7ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d7ec:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <ip4_input+0x240>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d7f2:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <ip4_input+0x240>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d7f8:	4b08      	ldr	r3, [pc, #32]	; (800d81c <ip4_input+0x240>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d7fe:	4b07      	ldr	r3, [pc, #28]	; (800d81c <ip4_input+0x240>)
 800d800:	2200      	movs	r2, #0
 800d802:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d804:	4b05      	ldr	r3, [pc, #20]	; (800d81c <ip4_input+0x240>)
 800d806:	2200      	movs	r2, #0
 800d808:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d80a:	4b04      	ldr	r3, [pc, #16]	; (800d81c <ip4_input+0x240>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20004d1c 	.word	0x20004d1c
 800d820:	20008280 	.word	0x20008280

0800d824 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08a      	sub	sp, #40	; 0x28
 800d828:	af04      	add	r7, sp, #16
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d009      	beq.n	800d850 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <ip4_output_if+0x26>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	3304      	adds	r3, #4
 800d84e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	4613      	mov	r3, r2
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	6979      	ldr	r1, [r7, #20]
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 f805 	bl	800d878 <ip4_output_if_src>
 800d86e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d870:	4618      	mov	r0, r3
 800d872:	3718      	adds	r7, #24
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	7b9b      	ldrb	r3, [r3, #14]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d006      	beq.n	800d89c <ip4_output_if_src+0x24>
 800d88e:	4b4b      	ldr	r3, [pc, #300]	; (800d9bc <ip4_output_if_src+0x144>)
 800d890:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d894:	494a      	ldr	r1, [pc, #296]	; (800d9c0 <ip4_output_if_src+0x148>)
 800d896:	484b      	ldr	r0, [pc, #300]	; (800d9c4 <ip4_output_if_src+0x14c>)
 800d898:	f001 f83c 	bl	800e914 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d060      	beq.n	800d964 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d8a2:	2314      	movs	r3, #20
 800d8a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d8a6:	2114      	movs	r1, #20
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7f8 fa17 	bl	8005cdc <pbuf_add_header>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8b4:	f06f 0301 	mvn.w	r3, #1
 800d8b8:	e07c      	b.n	800d9b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	895b      	ldrh	r3, [r3, #10]
 800d8c4:	2b13      	cmp	r3, #19
 800d8c6:	d806      	bhi.n	800d8d6 <ip4_output_if_src+0x5e>
 800d8c8:	4b3c      	ldr	r3, [pc, #240]	; (800d9bc <ip4_output_if_src+0x144>)
 800d8ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d8ce:	493e      	ldr	r1, [pc, #248]	; (800d9c8 <ip4_output_if_src+0x150>)
 800d8d0:	483c      	ldr	r0, [pc, #240]	; (800d9c4 <ip4_output_if_src+0x14c>)
 800d8d2:	f001 f81f 	bl	800e914 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	78fa      	ldrb	r2, [r7, #3]
 800d8da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d8e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d8ec:	8b7b      	ldrh	r3, [r7, #26]
 800d8ee:	089b      	lsrs	r3, r3, #2
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d904:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	891b      	ldrh	r3, [r3, #8]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f6 ff1e 	bl	800474c <lwip_htons>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2200      	movs	r2, #0
 800d91c:	719a      	strb	r2, [r3, #6]
 800d91e:	2200      	movs	r2, #0
 800d920:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d922:	4b2a      	ldr	r3, [pc, #168]	; (800d9cc <ip4_output_if_src+0x154>)
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f7f6 ff10 	bl	800474c <lwip_htons>
 800d92c:	4603      	mov	r3, r0
 800d92e:	461a      	mov	r2, r3
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d934:	4b25      	ldr	r3, [pc, #148]	; (800d9cc <ip4_output_if_src+0x154>)
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	3301      	adds	r3, #1
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	4b23      	ldr	r3, [pc, #140]	; (800d9cc <ip4_output_if_src+0x154>)
 800d93e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d104      	bne.n	800d950 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d946:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <ip4_output_if_src+0x158>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	60da      	str	r2, [r3, #12]
 800d94e:	e003      	b.n	800d958 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	2200      	movs	r2, #0
 800d95c:	729a      	strb	r2, [r3, #10]
 800d95e:	2200      	movs	r2, #0
 800d960:	72da      	strb	r2, [r3, #11]
 800d962:	e00f      	b.n	800d984 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	895b      	ldrh	r3, [r3, #10]
 800d968:	2b13      	cmp	r3, #19
 800d96a:	d802      	bhi.n	800d972 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d96c:	f06f 0301 	mvn.w	r3, #1
 800d970:	e020      	b.n	800d9b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d97e:	f107 0314 	add.w	r3, r7, #20
 800d982:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00c      	beq.n	800d9a6 <ip4_output_if_src+0x12e>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	891a      	ldrh	r2, [r3, #8]
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d994:	429a      	cmp	r2, r3
 800d996:	d906      	bls.n	800d9a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fd53 	bl	800e448 <ip4_frag>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	e006      	b.n	800d9b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9b0:	4798      	blx	r3
 800d9b2:	4603      	mov	r3, r0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3720      	adds	r7, #32
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	08012058 	.word	0x08012058
 800d9c0:	0801208c 	.word	0x0801208c
 800d9c4:	08012098 	.word	0x08012098
 800d9c8:	080120c0 	.word	0x080120c0
 800d9cc:	200083de 	.word	0x200083de
 800d9d0:	080124a0 	.word	0x080124a0

0800d9d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e8:	d002      	beq.n	800d9f0 <ip4_addr_isbroadcast_u32+0x1c>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e02a      	b.n	800da4a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d101      	bne.n	800da06 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800da02:	2300      	movs	r3, #0
 800da04:	e021      	b.n	800da4a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	3304      	adds	r3, #4
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d101      	bne.n	800da16 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800da12:	2300      	movs	r3, #0
 800da14:	e019      	b.n	800da4a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	3304      	adds	r3, #4
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	405a      	eors	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	3308      	adds	r3, #8
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4013      	ands	r3, r2
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10d      	bne.n	800da48 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	3308      	adds	r3, #8
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	43da      	mvns	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	3308      	adds	r3, #8
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da40:	429a      	cmp	r2, r3
 800da42:	d101      	bne.n	800da48 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800da44:	2301      	movs	r3, #1
 800da46:	e000      	b.n	800da4a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800da48:	2300      	movs	r3, #0
  }
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3714      	adds	r7, #20
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
	...

0800da58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800da62:	4b12      	ldr	r3, [pc, #72]	; (800daac <ip_reass_tmr+0x54>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800da68:	e018      	b.n	800da9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	7fdb      	ldrb	r3, [r3, #31]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00b      	beq.n	800da8a <ip_reass_tmr+0x32>
      r->timer--;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	7fdb      	ldrb	r3, [r3, #31]
 800da76:	3b01      	subs	r3, #1
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	e008      	b.n	800da9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800da94:	68b9      	ldr	r1, [r7, #8]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f80a 	bl	800dab0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1e3      	bne.n	800da6a <ip_reass_tmr+0x12>
    }
  }
}
 800daa2:	bf00      	nop
 800daa4:	bf00      	nop
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	200083e0 	.word	0x200083e0

0800dab0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d105      	bne.n	800dad2 <ip_reass_free_complete_datagram+0x22>
 800dac6:	4b45      	ldr	r3, [pc, #276]	; (800dbdc <ip_reass_free_complete_datagram+0x12c>)
 800dac8:	22ab      	movs	r2, #171	; 0xab
 800daca:	4945      	ldr	r1, [pc, #276]	; (800dbe0 <ip_reass_free_complete_datagram+0x130>)
 800dacc:	4845      	ldr	r0, [pc, #276]	; (800dbe4 <ip_reass_free_complete_datagram+0x134>)
 800dace:	f000 ff21 	bl	800e914 <iprintf>
  if (prev != NULL) {
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00a      	beq.n	800daee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d005      	beq.n	800daee <ip_reass_free_complete_datagram+0x3e>
 800dae2:	4b3e      	ldr	r3, [pc, #248]	; (800dbdc <ip_reass_free_complete_datagram+0x12c>)
 800dae4:	22ad      	movs	r2, #173	; 0xad
 800dae6:	4940      	ldr	r1, [pc, #256]	; (800dbe8 <ip_reass_free_complete_datagram+0x138>)
 800dae8:	483e      	ldr	r0, [pc, #248]	; (800dbe4 <ip_reass_free_complete_datagram+0x134>)
 800daea:	f000 ff13 	bl	800e914 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	889b      	ldrh	r3, [r3, #4]
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d12a      	bne.n	800db56 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	6858      	ldr	r0, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3308      	adds	r3, #8
 800db16:	2214      	movs	r2, #20
 800db18:	4619      	mov	r1, r3
 800db1a:	f000 fee5 	bl	800e8e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800db1e:	2101      	movs	r1, #1
 800db20:	69b8      	ldr	r0, [r7, #24]
 800db22:	f7ff fc47 	bl	800d3b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800db26:	69b8      	ldr	r0, [r7, #24]
 800db28:	f7f8 f9f6 	bl	8005f18 <pbuf_clen>
 800db2c:	4603      	mov	r3, r0
 800db2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db30:	8bfa      	ldrh	r2, [r7, #30]
 800db32:	8a7b      	ldrh	r3, [r7, #18]
 800db34:	4413      	add	r3, r2
 800db36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db3a:	db05      	blt.n	800db48 <ip_reass_free_complete_datagram+0x98>
 800db3c:	4b27      	ldr	r3, [pc, #156]	; (800dbdc <ip_reass_free_complete_datagram+0x12c>)
 800db3e:	22bc      	movs	r2, #188	; 0xbc
 800db40:	492a      	ldr	r1, [pc, #168]	; (800dbec <ip_reass_free_complete_datagram+0x13c>)
 800db42:	4828      	ldr	r0, [pc, #160]	; (800dbe4 <ip_reass_free_complete_datagram+0x134>)
 800db44:	f000 fee6 	bl	800e914 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db48:	8bfa      	ldrh	r2, [r7, #30]
 800db4a:	8a7b      	ldrh	r3, [r7, #18]
 800db4c:	4413      	add	r3, r2
 800db4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db50:	69b8      	ldr	r0, [r7, #24]
 800db52:	f7f8 f959 	bl	8005e08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800db5c:	e01f      	b.n	800db9e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	617b      	str	r3, [r7, #20]
    pcur = p;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7f8 f9d2 	bl	8005f18 <pbuf_clen>
 800db74:	4603      	mov	r3, r0
 800db76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db78:	8bfa      	ldrh	r2, [r7, #30]
 800db7a:	8a7b      	ldrh	r3, [r7, #18]
 800db7c:	4413      	add	r3, r2
 800db7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db82:	db05      	blt.n	800db90 <ip_reass_free_complete_datagram+0xe0>
 800db84:	4b15      	ldr	r3, [pc, #84]	; (800dbdc <ip_reass_free_complete_datagram+0x12c>)
 800db86:	22cc      	movs	r2, #204	; 0xcc
 800db88:	4918      	ldr	r1, [pc, #96]	; (800dbec <ip_reass_free_complete_datagram+0x13c>)
 800db8a:	4816      	ldr	r0, [pc, #88]	; (800dbe4 <ip_reass_free_complete_datagram+0x134>)
 800db8c:	f000 fec2 	bl	800e914 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db90:	8bfa      	ldrh	r2, [r7, #30]
 800db92:	8a7b      	ldrh	r3, [r7, #18]
 800db94:	4413      	add	r3, r2
 800db96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7f8 f935 	bl	8005e08 <pbuf_free>
  while (p != NULL) {
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1dc      	bne.n	800db5e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f8c2 	bl	800dd30 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dbac:	4b10      	ldr	r3, [pc, #64]	; (800dbf0 <ip_reass_free_complete_datagram+0x140>)
 800dbae:	881b      	ldrh	r3, [r3, #0]
 800dbb0:	8bfa      	ldrh	r2, [r7, #30]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d905      	bls.n	800dbc2 <ip_reass_free_complete_datagram+0x112>
 800dbb6:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <ip_reass_free_complete_datagram+0x12c>)
 800dbb8:	22d2      	movs	r2, #210	; 0xd2
 800dbba:	490e      	ldr	r1, [pc, #56]	; (800dbf4 <ip_reass_free_complete_datagram+0x144>)
 800dbbc:	4809      	ldr	r0, [pc, #36]	; (800dbe4 <ip_reass_free_complete_datagram+0x134>)
 800dbbe:	f000 fea9 	bl	800e914 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dbc2:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <ip_reass_free_complete_datagram+0x140>)
 800dbc4:	881a      	ldrh	r2, [r3, #0]
 800dbc6:	8bfb      	ldrh	r3, [r7, #30]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	4b08      	ldr	r3, [pc, #32]	; (800dbf0 <ip_reass_free_complete_datagram+0x140>)
 800dbce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dbd0:	8bfb      	ldrh	r3, [r7, #30]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3720      	adds	r7, #32
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	080120f0 	.word	0x080120f0
 800dbe0:	0801212c 	.word	0x0801212c
 800dbe4:	08012138 	.word	0x08012138
 800dbe8:	08012160 	.word	0x08012160
 800dbec:	08012174 	.word	0x08012174
 800dbf0:	200083e4 	.word	0x200083e4
 800dbf4:	08012194 	.word	0x08012194

0800dbf8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08a      	sub	sp, #40	; 0x28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dc02:	2300      	movs	r3, #0
 800dc04:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dc16:	4b28      	ldr	r3, [pc, #160]	; (800dcb8 <ip_reass_remove_oldest_datagram+0xc0>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc1c:	e030      	b.n	800dc80 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	695a      	ldr	r2, [r3, #20]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d10c      	bne.n	800dc44 <ip_reass_remove_oldest_datagram+0x4c>
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d106      	bne.n	800dc44 <ip_reass_remove_oldest_datagram+0x4c>
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	899a      	ldrh	r2, [r3, #12]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	889b      	ldrh	r3, [r3, #4]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d014      	beq.n	800dc6e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	3301      	adds	r3, #1
 800dc48:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d104      	bne.n	800dc5a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	61bb      	str	r3, [r7, #24]
 800dc58:	e009      	b.n	800dc6e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	7fda      	ldrb	r2, [r3, #31]
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	7fdb      	ldrb	r3, [r3, #31]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d803      	bhi.n	800dc6e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1cb      	bne.n	800dc1e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d008      	beq.n	800dc9e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dc8c:	69b9      	ldr	r1, [r7, #24]
 800dc8e:	6a38      	ldr	r0, [r7, #32]
 800dc90:	f7ff ff0e 	bl	800dab0 <ip_reass_free_complete_datagram>
 800dc94:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	da02      	bge.n	800dcac <ip_reass_remove_oldest_datagram+0xb4>
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	dcac      	bgt.n	800dc06 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dcac:	697b      	ldr	r3, [r7, #20]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3728      	adds	r7, #40	; 0x28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200083e0 	.word	0x200083e0

0800dcbc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dcc6:	2004      	movs	r0, #4
 800dcc8:	f7f7 f9b8 	bl	800503c <memp_malloc>
 800dccc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d110      	bne.n	800dcf6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff ff8e 	bl	800dbf8 <ip_reass_remove_oldest_datagram>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	4293      	cmp	r3, r2
 800dce2:	dc03      	bgt.n	800dcec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dce4:	2004      	movs	r0, #4
 800dce6:	f7f7 f9a9 	bl	800503c <memp_malloc>
 800dcea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d101      	bne.n	800dcf6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	e016      	b.n	800dd24 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f000 fe02 	bl	800e904 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	220f      	movs	r2, #15
 800dd04:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dd06:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <ip_reass_enqueue_new_datagram+0x70>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dd0e:	4a07      	ldr	r2, [pc, #28]	; (800dd2c <ip_reass_enqueue_new_datagram+0x70>)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3308      	adds	r3, #8
 800dd18:	2214      	movs	r2, #20
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 fde3 	bl	800e8e8 <memcpy>
  return ipr;
 800dd22:	68fb      	ldr	r3, [r7, #12]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3710      	adds	r7, #16
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	200083e0 	.word	0x200083e0

0800dd30 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dd3a:	4b10      	ldr	r3, [pc, #64]	; (800dd7c <ip_reass_dequeue_datagram+0x4c>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d104      	bne.n	800dd4e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a0c      	ldr	r2, [pc, #48]	; (800dd7c <ip_reass_dequeue_datagram+0x4c>)
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	e00d      	b.n	800dd6a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <ip_reass_dequeue_datagram+0x32>
 800dd54:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <ip_reass_dequeue_datagram+0x50>)
 800dd56:	f240 1245 	movw	r2, #325	; 0x145
 800dd5a:	490a      	ldr	r1, [pc, #40]	; (800dd84 <ip_reass_dequeue_datagram+0x54>)
 800dd5c:	480a      	ldr	r0, [pc, #40]	; (800dd88 <ip_reass_dequeue_datagram+0x58>)
 800dd5e:	f000 fdd9 	bl	800e914 <iprintf>
    prev->next = ipr->next;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	2004      	movs	r0, #4
 800dd6e:	f7f7 f9d5 	bl	800511c <memp_free>
}
 800dd72:	bf00      	nop
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	200083e0 	.word	0x200083e0
 800dd80:	080120f0 	.word	0x080120f0
 800dd84:	080121b8 	.word	0x080121b8
 800dd88:	08012138 	.word	0x08012138

0800dd8c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08c      	sub	sp, #48	; 0x30
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	885b      	ldrh	r3, [r3, #2]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7f6 fccd 	bl	800474c <lwip_htons>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	f003 030f 	and.w	r3, r3, #15
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ddc4:	7e7b      	ldrb	r3, [r7, #25]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	8b7a      	ldrh	r2, [r7, #26]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d202      	bcs.n	800ddd4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ddce:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd2:	e135      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ddd4:	7e7b      	ldrb	r3, [r7, #25]
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	8b7a      	ldrh	r2, [r7, #26]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	88db      	ldrh	r3, [r3, #6]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7f6 fcb1 	bl	800474c <lwip_htons>
 800ddea:	4603      	mov	r3, r0
 800ddec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	2200      	movs	r2, #0
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	2200      	movs	r2, #0
 800de04:	705a      	strb	r2, [r3, #1]
 800de06:	2200      	movs	r2, #0
 800de08:	709a      	strb	r2, [r3, #2]
 800de0a:	2200      	movs	r2, #0
 800de0c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de10:	8afa      	ldrh	r2, [r7, #22]
 800de12:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800de14:	8afa      	ldrh	r2, [r7, #22]
 800de16:	8b7b      	ldrh	r3, [r7, #26]
 800de18:	4413      	add	r3, r2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	88db      	ldrh	r3, [r3, #6]
 800de24:	b29b      	uxth	r3, r3
 800de26:	8afa      	ldrh	r2, [r7, #22]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d902      	bls.n	800de32 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de2c:	f04f 33ff 	mov.w	r3, #4294967295
 800de30:	e106      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
 800de38:	e068      	b.n	800df0c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	889b      	ldrh	r3, [r3, #4]
 800de44:	b29a      	uxth	r2, r3
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	889b      	ldrh	r3, [r3, #4]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d235      	bcs.n	800debc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de54:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d020      	beq.n	800de9e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	889b      	ldrh	r3, [r3, #4]
 800de60:	b29a      	uxth	r2, r3
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	88db      	ldrh	r3, [r3, #6]
 800de66:	b29b      	uxth	r3, r3
 800de68:	429a      	cmp	r2, r3
 800de6a:	d307      	bcc.n	800de7c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800de6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6e:	88db      	ldrh	r3, [r3, #6]
 800de70:	b29a      	uxth	r2, r3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	889b      	ldrh	r3, [r3, #4]
 800de76:	b29b      	uxth	r3, r3
 800de78:	429a      	cmp	r2, r3
 800de7a:	d902      	bls.n	800de82 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de7c:	f04f 33ff 	mov.w	r3, #4294967295
 800de80:	e0de      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	88db      	ldrh	r3, [r3, #6]
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	889b      	ldrh	r3, [r3, #4]
 800de92:	b29b      	uxth	r3, r3
 800de94:	429a      	cmp	r2, r3
 800de96:	d03d      	beq.n	800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800de9c:	e03a      	b.n	800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	88db      	ldrh	r3, [r3, #6]
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	889b      	ldrh	r3, [r3, #4]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	429a      	cmp	r2, r3
 800deac:	d902      	bls.n	800deb4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deae:	f04f 33ff 	mov.w	r3, #4294967295
 800deb2:	e0c5      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	605a      	str	r2, [r3, #4]
      break;
 800deba:	e02b      	b.n	800df14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	889b      	ldrh	r3, [r3, #4]
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	889b      	ldrh	r3, [r3, #4]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	429a      	cmp	r2, r3
 800deca:	d102      	bne.n	800ded2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800decc:	f04f 33ff 	mov.w	r3, #4294967295
 800ded0:	e0b6      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	889b      	ldrh	r3, [r3, #4]
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	88db      	ldrh	r3, [r3, #6]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	429a      	cmp	r2, r3
 800dee0:	d202      	bcs.n	800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dee2:	f04f 33ff 	mov.w	r3, #4294967295
 800dee6:	e0ab      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	2b00      	cmp	r3, #0
 800deec:	d009      	beq.n	800df02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	88db      	ldrh	r3, [r3, #6]
 800def2:	b29a      	uxth	r2, r3
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	889b      	ldrh	r3, [r3, #4]
 800def8:	b29b      	uxth	r3, r3
 800defa:	429a      	cmp	r2, r3
 800defc:	d001      	beq.n	800df02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d193      	bne.n	800de3a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800df12:	e000      	b.n	800df16 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800df14:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d12d      	bne.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01c      	beq.n	800df5c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	88db      	ldrh	r3, [r3, #6]
 800df26:	b29a      	uxth	r2, r3
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	889b      	ldrh	r3, [r3, #4]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	429a      	cmp	r2, r3
 800df30:	d906      	bls.n	800df40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df32:	4b45      	ldr	r3, [pc, #276]	; (800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df34:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df38:	4944      	ldr	r1, [pc, #272]	; (800e04c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800df3a:	4845      	ldr	r0, [pc, #276]	; (800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df3c:	f000 fcea 	bl	800e914 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	88db      	ldrh	r3, [r3, #6]
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	889b      	ldrh	r3, [r3, #4]
 800df50:	b29b      	uxth	r3, r3
 800df52:	429a      	cmp	r2, r3
 800df54:	d010      	beq.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	623b      	str	r3, [r7, #32]
 800df5a:	e00d      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d006      	beq.n	800df72 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800df64:	4b38      	ldr	r3, [pc, #224]	; (800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df66:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800df6a:	493a      	ldr	r1, [pc, #232]	; (800e054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800df6c:	4838      	ldr	r0, [pc, #224]	; (800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df6e:	f000 fcd1 	bl	800e914 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d105      	bne.n	800df8a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	7f9b      	ldrb	r3, [r3, #30]
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b00      	cmp	r3, #0
 800df88:	d059      	beq.n	800e03e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d04f      	beq.n	800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d006      	beq.n	800dfa6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	889b      	ldrh	r3, [r3, #4]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	623b      	str	r3, [r7, #32]
 800dfaa:	e041      	b.n	800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dfb6:	e012      	b.n	800dfde <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	889b      	ldrh	r3, [r3, #4]
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d002      	beq.n	800dfd4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	623b      	str	r3, [r7, #32]
            break;
 800dfd2:	e007      	b.n	800dfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e9      	bne.n	800dfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d022      	beq.n	800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dff2:	4b15      	ldr	r3, [pc, #84]	; (800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dff4:	f240 12df 	movw	r2, #479	; 0x1df
 800dff8:	4917      	ldr	r1, [pc, #92]	; (800e058 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dffa:	4815      	ldr	r0, [pc, #84]	; (800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dffc:	f000 fc8a 	bl	800e914 <iprintf>
          LWIP_ASSERT("sanity check",
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e008:	429a      	cmp	r2, r3
 800e00a:	d106      	bne.n	800e01a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e00e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e012:	4911      	ldr	r1, [pc, #68]	; (800e058 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e014:	480e      	ldr	r0, [pc, #56]	; (800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e016:	f000 fc7d 	bl	800e914 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d006      	beq.n	800e030 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e022:	4b09      	ldr	r3, [pc, #36]	; (800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e024:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e028:	490c      	ldr	r1, [pc, #48]	; (800e05c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e02a:	4809      	ldr	r0, [pc, #36]	; (800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e02c:	f000 fc72 	bl	800e914 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	2b00      	cmp	r3, #0
 800e034:	bf14      	ite	ne
 800e036:	2301      	movne	r3, #1
 800e038:	2300      	moveq	r3, #0
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	e000      	b.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3730      	adds	r7, #48	; 0x30
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	080120f0 	.word	0x080120f0
 800e04c:	080121d4 	.word	0x080121d4
 800e050:	08012138 	.word	0x08012138
 800e054:	080121f4 	.word	0x080121f4
 800e058:	0801222c 	.word	0x0801222c
 800e05c:	0801223c 	.word	0x0801223c

0800e060 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	f003 030f 	and.w	r3, r3, #15
 800e076:	b2db      	uxtb	r3, r3
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b14      	cmp	r3, #20
 800e07e:	f040 8171 	bne.w	800e364 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e084:	88db      	ldrh	r3, [r3, #6]
 800e086:	b29b      	uxth	r3, r3
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f6 fb5f 	bl	800474c <lwip_htons>
 800e08e:	4603      	mov	r3, r0
 800e090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e094:	b29b      	uxth	r3, r3
 800e096:	00db      	lsls	r3, r3, #3
 800e098:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	885b      	ldrh	r3, [r3, #2]
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7f6 fb53 	bl	800474c <lwip_htons>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	f003 030f 	and.w	r3, r3, #15
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	f0c0 8150 	bcc.w	800e368 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e0c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7f7 ff1f 	bl	8005f18 <pbuf_clen>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e0de:	4b8c      	ldr	r3, [pc, #560]	; (800e310 <ip4_reass+0x2b0>)
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	8c3b      	ldrh	r3, [r7, #32]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	2b0a      	cmp	r3, #10
 800e0ea:	dd10      	ble.n	800e10e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0ec:	8c3b      	ldrh	r3, [r7, #32]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0f2:	f7ff fd81 	bl	800dbf8 <ip_reass_remove_oldest_datagram>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f000 8137 	beq.w	800e36c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e0fe:	4b84      	ldr	r3, [pc, #528]	; (800e310 <ip4_reass+0x2b0>)
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	8c3b      	ldrh	r3, [r7, #32]
 800e106:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e108:	2b0a      	cmp	r3, #10
 800e10a:	f300 812f 	bgt.w	800e36c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e10e:	4b81      	ldr	r3, [pc, #516]	; (800e314 <ip4_reass+0x2b4>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	633b      	str	r3, [r7, #48]	; 0x30
 800e114:	e015      	b.n	800e142 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	695a      	ldr	r2, [r3, #20]
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d10c      	bne.n	800e13c <ip4_reass+0xdc>
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d106      	bne.n	800e13c <ip4_reass+0xdc>
 800e12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e130:	899a      	ldrh	r2, [r3, #12]
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	889b      	ldrh	r3, [r3, #4]
 800e136:	b29b      	uxth	r3, r3
 800e138:	429a      	cmp	r2, r3
 800e13a:	d006      	beq.n	800e14a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	633b      	str	r3, [r7, #48]	; 0x30
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1e6      	bne.n	800e116 <ip4_reass+0xb6>
 800e148:	e000      	b.n	800e14c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e14a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d109      	bne.n	800e166 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e152:	8c3b      	ldrh	r3, [r7, #32]
 800e154:	4619      	mov	r1, r3
 800e156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e158:	f7ff fdb0 	bl	800dcbc <ip_reass_enqueue_new_datagram>
 800e15c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	2b00      	cmp	r3, #0
 800e162:	d11c      	bne.n	800e19e <ip4_reass+0x13e>
      goto nullreturn;
 800e164:	e105      	b.n	800e372 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e168:	88db      	ldrh	r3, [r3, #6]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7f6 faed 	bl	800474c <lwip_htons>
 800e172:	4603      	mov	r3, r0
 800e174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d110      	bne.n	800e19e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17e:	89db      	ldrh	r3, [r3, #14]
 800e180:	4618      	mov	r0, r3
 800e182:	f7f6 fae3 	bl	800474c <lwip_htons>
 800e186:	4603      	mov	r3, r0
 800e188:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	3308      	adds	r3, #8
 800e194:	2214      	movs	r2, #20
 800e196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 fba5 	bl	800e8e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a0:	88db      	ldrh	r3, [r3, #6]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	f003 0320 	and.w	r3, r3, #32
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bf0c      	ite	eq
 800e1ac:	2301      	moveq	r3, #1
 800e1ae:	2300      	movne	r3, #0
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00e      	beq.n	800e1d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1be:	4413      	add	r3, r2
 800e1c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e1c2:	8b7a      	ldrh	r2, [r7, #26]
 800e1c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	f0c0 80a0 	bcc.w	800e30c <ip4_reass+0x2ac>
 800e1cc:	8b7b      	ldrh	r3, [r7, #26]
 800e1ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	f200 809a 	bhi.w	800e30c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e1d8:	69fa      	ldr	r2, [r7, #28]
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1de:	f7ff fdd5 	bl	800dd8c <ip_reass_chain_frag_into_datagram_and_validate>
 800e1e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ea:	f000 809b 	beq.w	800e324 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e1ee:	4b48      	ldr	r3, [pc, #288]	; (800e310 <ip4_reass+0x2b0>)
 800e1f0:	881a      	ldrh	r2, [r3, #0]
 800e1f2:	8c3b      	ldrh	r3, [r7, #32]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	4b45      	ldr	r3, [pc, #276]	; (800e310 <ip4_reass+0x2b0>)
 800e1fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00d      	beq.n	800e21e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e202:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e206:	4413      	add	r3, r2
 800e208:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	8a7a      	ldrh	r2, [r7, #18]
 800e20e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e212:	7f9b      	ldrb	r3, [r3, #30]
 800e214:	f043 0301 	orr.w	r3, r3, #1
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d171      	bne.n	800e308 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	8b9b      	ldrh	r3, [r3, #28]
 800e228:	3314      	adds	r3, #20
 800e22a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	3308      	adds	r3, #8
 800e242:	2214      	movs	r2, #20
 800e244:	4619      	mov	r1, r3
 800e246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e248:	f000 fb4e 	bl	800e8e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e24c:	8a3b      	ldrh	r3, [r7, #16]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f6 fa7c 	bl	800474c <lwip_htons>
 800e254:	4603      	mov	r3, r0
 800e256:	461a      	mov	r2, r3
 800e258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	2200      	movs	r2, #0
 800e260:	719a      	strb	r2, [r3, #6]
 800e262:	2200      	movs	r2, #0
 800e264:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	2200      	movs	r2, #0
 800e26a:	729a      	strb	r2, [r3, #10]
 800e26c:	2200      	movs	r2, #0
 800e26e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e276:	e00d      	b.n	800e294 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e27e:	2114      	movs	r1, #20
 800e280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e282:	f7f7 fd3b 	bl	8005cfc <pbuf_remove_header>
      pbuf_cat(p, r);
 800e286:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7f7 fe7f 	bl	8005f8c <pbuf_cat>
      r = iprh->next_pbuf;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1ee      	bne.n	800e278 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e29a:	4b1e      	ldr	r3, [pc, #120]	; (800e314 <ip4_reass+0x2b4>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d102      	bne.n	800e2aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2a8:	e010      	b.n	800e2cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2aa:	4b1a      	ldr	r3, [pc, #104]	; (800e314 <ip4_reass+0x2b4>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2b0:	e007      	b.n	800e2c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d006      	beq.n	800e2ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1f4      	bne.n	800e2b2 <ip4_reass+0x252>
 800e2c8:	e000      	b.n	800e2cc <ip4_reass+0x26c>
          break;
 800e2ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e2cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2d0:	f7ff fd2e 	bl	800dd30 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f7 fe1f 	bl	8005f18 <pbuf_clen>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e2de:	4b0c      	ldr	r3, [pc, #48]	; (800e310 <ip4_reass+0x2b0>)
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	8c3a      	ldrh	r2, [r7, #32]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d906      	bls.n	800e2f6 <ip4_reass+0x296>
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <ip4_reass+0x2b8>)
 800e2ea:	f240 229b 	movw	r2, #667	; 0x29b
 800e2ee:	490b      	ldr	r1, [pc, #44]	; (800e31c <ip4_reass+0x2bc>)
 800e2f0:	480b      	ldr	r0, [pc, #44]	; (800e320 <ip4_reass+0x2c0>)
 800e2f2:	f000 fb0f 	bl	800e914 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e2f6:	4b06      	ldr	r3, [pc, #24]	; (800e310 <ip4_reass+0x2b0>)
 800e2f8:	881a      	ldrh	r2, [r3, #0]
 800e2fa:	8c3b      	ldrh	r3, [r7, #32]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	4b03      	ldr	r3, [pc, #12]	; (800e310 <ip4_reass+0x2b0>)
 800e302:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	e038      	b.n	800e37a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e308:	2300      	movs	r3, #0
 800e30a:	e036      	b.n	800e37a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e30c:	bf00      	nop
 800e30e:	e00a      	b.n	800e326 <ip4_reass+0x2c6>
 800e310:	200083e4 	.word	0x200083e4
 800e314:	200083e0 	.word	0x200083e0
 800e318:	080120f0 	.word	0x080120f0
 800e31c:	08012260 	.word	0x08012260
 800e320:	08012138 	.word	0x08012138
    goto nullreturn_ipr;
 800e324:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <ip4_reass+0x2da>
 800e32c:	4b15      	ldr	r3, [pc, #84]	; (800e384 <ip4_reass+0x324>)
 800e32e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e332:	4915      	ldr	r1, [pc, #84]	; (800e388 <ip4_reass+0x328>)
 800e334:	4815      	ldr	r0, [pc, #84]	; (800e38c <ip4_reass+0x32c>)
 800e336:	f000 faed 	bl	800e914 <iprintf>
  if (ipr->p == NULL) {
 800e33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d116      	bne.n	800e370 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e342:	4b13      	ldr	r3, [pc, #76]	; (800e390 <ip4_reass+0x330>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e348:	429a      	cmp	r2, r3
 800e34a:	d006      	beq.n	800e35a <ip4_reass+0x2fa>
 800e34c:	4b0d      	ldr	r3, [pc, #52]	; (800e384 <ip4_reass+0x324>)
 800e34e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e352:	4910      	ldr	r1, [pc, #64]	; (800e394 <ip4_reass+0x334>)
 800e354:	480d      	ldr	r0, [pc, #52]	; (800e38c <ip4_reass+0x32c>)
 800e356:	f000 fadd 	bl	800e914 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e35a:	2100      	movs	r1, #0
 800e35c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e35e:	f7ff fce7 	bl	800dd30 <ip_reass_dequeue_datagram>
 800e362:	e006      	b.n	800e372 <ip4_reass+0x312>
    goto nullreturn;
 800e364:	bf00      	nop
 800e366:	e004      	b.n	800e372 <ip4_reass+0x312>
    goto nullreturn;
 800e368:	bf00      	nop
 800e36a:	e002      	b.n	800e372 <ip4_reass+0x312>
      goto nullreturn;
 800e36c:	bf00      	nop
 800e36e:	e000      	b.n	800e372 <ip4_reass+0x312>
  }

nullreturn:
 800e370:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7f7 fd48 	bl	8005e08 <pbuf_free>
  return NULL;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3738      	adds	r7, #56	; 0x38
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	080120f0 	.word	0x080120f0
 800e388:	0801227c 	.word	0x0801227c
 800e38c:	08012138 	.word	0x08012138
 800e390:	200083e0 	.word	0x200083e0
 800e394:	08012288 	.word	0x08012288

0800e398 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e39c:	2005      	movs	r0, #5
 800e39e:	f7f6 fe4d 	bl	800503c <memp_malloc>
 800e3a2:	4603      	mov	r3, r0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e3b6:	4b07      	ldr	r3, [pc, #28]	; (800e3d4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e3b8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e3bc:	4906      	ldr	r1, [pc, #24]	; (800e3d8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e3be:	4807      	ldr	r0, [pc, #28]	; (800e3dc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e3c0:	f000 faa8 	bl	800e914 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e3c4:	6879      	ldr	r1, [r7, #4]
 800e3c6:	2005      	movs	r0, #5
 800e3c8:	f7f6 fea8 	bl	800511c <memp_free>
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	080120f0 	.word	0x080120f0
 800e3d8:	080122a8 	.word	0x080122a8
 800e3dc:	08012138 	.word	0x08012138

0800e3e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d106      	bne.n	800e400 <ipfrag_free_pbuf_custom+0x20>
 800e3f2:	4b11      	ldr	r3, [pc, #68]	; (800e438 <ipfrag_free_pbuf_custom+0x58>)
 800e3f4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e3f8:	4910      	ldr	r1, [pc, #64]	; (800e43c <ipfrag_free_pbuf_custom+0x5c>)
 800e3fa:	4811      	ldr	r0, [pc, #68]	; (800e440 <ipfrag_free_pbuf_custom+0x60>)
 800e3fc:	f000 fa8a 	bl	800e914 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	429a      	cmp	r2, r3
 800e406:	d006      	beq.n	800e416 <ipfrag_free_pbuf_custom+0x36>
 800e408:	4b0b      	ldr	r3, [pc, #44]	; (800e438 <ipfrag_free_pbuf_custom+0x58>)
 800e40a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e40e:	490d      	ldr	r1, [pc, #52]	; (800e444 <ipfrag_free_pbuf_custom+0x64>)
 800e410:	480b      	ldr	r0, [pc, #44]	; (800e440 <ipfrag_free_pbuf_custom+0x60>)
 800e412:	f000 fa7f 	bl	800e914 <iprintf>
  if (pcr->original != NULL) {
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d004      	beq.n	800e428 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	4618      	mov	r0, r3
 800e424:	f7f7 fcf0 	bl	8005e08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff ffbd 	bl	800e3a8 <ip_frag_free_pbuf_custom_ref>
}
 800e42e:	bf00      	nop
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	080120f0 	.word	0x080120f0
 800e43c:	080122b4 	.word	0x080122b4
 800e440:	08012138 	.word	0x08012138
 800e444:	080122c0 	.word	0x080122c0

0800e448 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b094      	sub	sp, #80	; 0x50
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e454:	2300      	movs	r3, #0
 800e456:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e45e:	3b14      	subs	r3, #20
 800e460:	2b00      	cmp	r3, #0
 800e462:	da00      	bge.n	800e466 <ip4_frag+0x1e>
 800e464:	3307      	adds	r3, #7
 800e466:	10db      	asrs	r3, r3, #3
 800e468:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e46a:	2314      	movs	r3, #20
 800e46c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e476:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	b2db      	uxtb	r3, r3
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b14      	cmp	r3, #20
 800e488:	d002      	beq.n	800e490 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e48a:	f06f 0305 	mvn.w	r3, #5
 800e48e:	e110      	b.n	800e6b2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	895b      	ldrh	r3, [r3, #10]
 800e494:	2b13      	cmp	r3, #19
 800e496:	d809      	bhi.n	800e4ac <ip4_frag+0x64>
 800e498:	4b88      	ldr	r3, [pc, #544]	; (800e6bc <ip4_frag+0x274>)
 800e49a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e49e:	4988      	ldr	r1, [pc, #544]	; (800e6c0 <ip4_frag+0x278>)
 800e4a0:	4888      	ldr	r0, [pc, #544]	; (800e6c4 <ip4_frag+0x27c>)
 800e4a2:	f000 fa37 	bl	800e914 <iprintf>
 800e4a6:	f06f 0305 	mvn.w	r3, #5
 800e4aa:	e102      	b.n	800e6b2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	88db      	ldrh	r3, [r3, #6]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f6 f94a 	bl	800474c <lwip_htons>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e4bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e4c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	891b      	ldrh	r3, [r3, #8]
 800e4d2:	3b14      	subs	r3, #20
 800e4d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e4d8:	e0e1      	b.n	800e69e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e4da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	bf28      	it	cs
 800e4e8:	4613      	movcs	r3, r2
 800e4ea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e4ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4f0:	2114      	movs	r1, #20
 800e4f2:	200e      	movs	r0, #14
 800e4f4:	f7f7 f9a4 	bl	8005840 <pbuf_alloc>
 800e4f8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 80d5 	beq.w	800e6ac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	895b      	ldrh	r3, [r3, #10]
 800e506:	2b13      	cmp	r3, #19
 800e508:	d806      	bhi.n	800e518 <ip4_frag+0xd0>
 800e50a:	4b6c      	ldr	r3, [pc, #432]	; (800e6bc <ip4_frag+0x274>)
 800e50c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e510:	496d      	ldr	r1, [pc, #436]	; (800e6c8 <ip4_frag+0x280>)
 800e512:	486c      	ldr	r0, [pc, #432]	; (800e6c4 <ip4_frag+0x27c>)
 800e514:	f000 f9fe 	bl	800e914 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	2214      	movs	r2, #20
 800e51e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e520:	4618      	mov	r0, r3
 800e522:	f000 f9e1 	bl	800e8e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e52c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e52e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e532:	e064      	b.n	800e5fe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	895a      	ldrh	r2, [r3, #10]
 800e538:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	895b      	ldrh	r3, [r3, #10]
 800e542:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e544:	429a      	cmp	r2, r3
 800e546:	d906      	bls.n	800e556 <ip4_frag+0x10e>
 800e548:	4b5c      	ldr	r3, [pc, #368]	; (800e6bc <ip4_frag+0x274>)
 800e54a:	f240 322d 	movw	r2, #813	; 0x32d
 800e54e:	495f      	ldr	r1, [pc, #380]	; (800e6cc <ip4_frag+0x284>)
 800e550:	485c      	ldr	r0, [pc, #368]	; (800e6c4 <ip4_frag+0x27c>)
 800e552:	f000 f9df 	bl	800e914 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e556:	8bfa      	ldrh	r2, [r7, #30]
 800e558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e55c:	4293      	cmp	r3, r2
 800e55e:	bf28      	it	cs
 800e560:	4613      	movcs	r3, r2
 800e562:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e566:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <ip4_frag+0x132>
        poff = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]
        continue;
 800e578:	e041      	b.n	800e5fe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e57a:	f7ff ff0d 	bl	800e398 <ip_frag_alloc_pbuf_custom_ref>
 800e57e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e588:	f7f7 fc3e 	bl	8005e08 <pbuf_free>
        goto memerr;
 800e58c:	e08f      	b.n	800e6ae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e58e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e596:	4413      	add	r3, r2
 800e598:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e59c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e5a0:	9201      	str	r2, [sp, #4]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2241      	movs	r2, #65	; 0x41
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	f7f7 fa73 	bl	8005a94 <pbuf_alloced_custom>
 800e5ae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e5b6:	69b8      	ldr	r0, [r7, #24]
 800e5b8:	f7ff fef6 	bl	800e3a8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e5bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5be:	f7f7 fc23 	bl	8005e08 <pbuf_free>
        goto memerr;
 800e5c2:	e074      	b.n	800e6ae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7f7 fcbf 	bl	8005f48 <pbuf_ref>
      pcr->original = p;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	4a3f      	ldr	r2, [pc, #252]	; (800e6d0 <ip4_frag+0x288>)
 800e5d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e5d6:	6979      	ldr	r1, [r7, #20]
 800e5d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5da:	f7f7 fcd7 	bl	8005f8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e5de:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e5e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d004      	beq.n	800e5fe <ip4_frag+0x1b6>
        poff = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e5fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e602:	2b00      	cmp	r3, #0
 800e604:	d196      	bne.n	800e534 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e606:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e60c:	4413      	add	r3, r2
 800e60e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e614:	f1a3 0213 	sub.w	r2, r3, #19
 800e618:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e61c:	429a      	cmp	r2, r3
 800e61e:	bfcc      	ite	gt
 800e620:	2301      	movgt	r3, #1
 800e622:	2300      	movle	r3, #0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e628:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e62c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e630:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d002      	beq.n	800e63e <ip4_frag+0x1f6>
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e63e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e644:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e646:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e648:	4618      	mov	r0, r3
 800e64a:	f7f6 f87f 	bl	800474c <lwip_htons>
 800e64e:	4603      	mov	r3, r0
 800e650:	461a      	mov	r2, r3
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e658:	3314      	adds	r3, #20
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f6 f875 	bl	800474c <lwip_htons>
 800e662:	4603      	mov	r3, r0
 800e664:	461a      	mov	r2, r3
 800e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e668:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	2200      	movs	r2, #0
 800e66e:	729a      	strb	r2, [r3, #10]
 800e670:	2200      	movs	r2, #0
 800e672:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e682:	f7f7 fbc1 	bl	8005e08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e68a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e692:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e696:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e698:	4413      	add	r3, r2
 800e69a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e69e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f47f af19 	bne.w	800e4da <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e002      	b.n	800e6b2 <ip4_frag+0x26a>
      goto memerr;
 800e6ac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e6ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3748      	adds	r7, #72	; 0x48
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	080120f0 	.word	0x080120f0
 800e6c0:	080122cc 	.word	0x080122cc
 800e6c4:	08012138 	.word	0x08012138
 800e6c8:	080122e8 	.word	0x080122e8
 800e6cc:	08012308 	.word	0x08012308
 800e6d0:	0800e3e1 	.word	0x0800e3e1

0800e6d4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b086      	sub	sp, #24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e6de:	230e      	movs	r3, #14
 800e6e0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	895b      	ldrh	r3, [r3, #10]
 800e6e6:	2b0e      	cmp	r3, #14
 800e6e8:	d96e      	bls.n	800e7c8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7bdb      	ldrb	r3, [r3, #15]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d106      	bne.n	800e700 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	b2da      	uxtb	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	7b1a      	ldrb	r2, [r3, #12]
 800e70a:	7b5b      	ldrb	r3, [r3, #13]
 800e70c:	021b      	lsls	r3, r3, #8
 800e70e:	4313      	orrs	r3, r2
 800e710:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d023      	beq.n	800e766 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b01      	cmp	r3, #1
 800e724:	d10f      	bne.n	800e746 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	785b      	ldrb	r3, [r3, #1]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d11b      	bne.n	800e766 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e732:	2b5e      	cmp	r3, #94	; 0x5e
 800e734:	d117      	bne.n	800e766 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	7b5b      	ldrb	r3, [r3, #13]
 800e73a:	f043 0310 	orr.w	r3, r3, #16
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	735a      	strb	r2, [r3, #13]
 800e744:	e00f      	b.n	800e766 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2206      	movs	r2, #6
 800e74a:	4928      	ldr	r1, [pc, #160]	; (800e7ec <ethernet_input+0x118>)
 800e74c:	4618      	mov	r0, r3
 800e74e:	f000 f8bb 	bl	800e8c8 <memcmp>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d106      	bne.n	800e766 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	7b5b      	ldrb	r3, [r3, #13]
 800e75c:	f043 0308 	orr.w	r3, r3, #8
 800e760:	b2da      	uxtb	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e766:	89fb      	ldrh	r3, [r7, #14]
 800e768:	2b08      	cmp	r3, #8
 800e76a:	d003      	beq.n	800e774 <ethernet_input+0xa0>
 800e76c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e770:	d014      	beq.n	800e79c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e772:	e032      	b.n	800e7da <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e77a:	f003 0308 	and.w	r3, r3, #8
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d024      	beq.n	800e7cc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e782:	8afb      	ldrh	r3, [r7, #22]
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7f7 fab8 	bl	8005cfc <pbuf_remove_header>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d11e      	bne.n	800e7d0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7fe ff21 	bl	800d5dc <ip4_input>
      break;
 800e79a:	e013      	b.n	800e7c4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7a2:	f003 0308 	and.w	r3, r3, #8
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d014      	beq.n	800e7d4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7aa:	8afb      	ldrh	r3, [r7, #22]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7f7 faa4 	bl	8005cfc <pbuf_remove_header>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10e      	bne.n	800e7d8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e7ba:	6839      	ldr	r1, [r7, #0]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7fe f8c1 	bl	800c944 <etharp_input>
      break;
 800e7c2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	e00c      	b.n	800e7e2 <ethernet_input+0x10e>
    goto free_and_return;
 800e7c8:	bf00      	nop
 800e7ca:	e006      	b.n	800e7da <ethernet_input+0x106>
        goto free_and_return;
 800e7cc:	bf00      	nop
 800e7ce:	e004      	b.n	800e7da <ethernet_input+0x106>
        goto free_and_return;
 800e7d0:	bf00      	nop
 800e7d2:	e002      	b.n	800e7da <ethernet_input+0x106>
        goto free_and_return;
 800e7d4:	bf00      	nop
 800e7d6:	e000      	b.n	800e7da <ethernet_input+0x106>
        goto free_and_return;
 800e7d8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7f7 fb14 	bl	8005e08 <pbuf_free>
  return ERR_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3718      	adds	r7, #24
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	080124a4 	.word	0x080124a4

0800e7f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
 800e7fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e7fe:	8c3b      	ldrh	r3, [r7, #32]
 800e800:	4618      	mov	r0, r3
 800e802:	f7f5 ffa3 	bl	800474c <lwip_htons>
 800e806:	4603      	mov	r3, r0
 800e808:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e80a:	210e      	movs	r1, #14
 800e80c:	68b8      	ldr	r0, [r7, #8]
 800e80e:	f7f7 fa65 	bl	8005cdc <pbuf_add_header>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d125      	bne.n	800e864 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	8afa      	ldrh	r2, [r7, #22]
 800e822:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2206      	movs	r2, #6
 800e828:	6839      	ldr	r1, [r7, #0]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 f85c 	bl	800e8e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	3306      	adds	r3, #6
 800e834:	2206      	movs	r2, #6
 800e836:	6879      	ldr	r1, [r7, #4]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 f855 	bl	800e8e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e844:	2b06      	cmp	r3, #6
 800e846:	d006      	beq.n	800e856 <ethernet_output+0x66>
 800e848:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <ethernet_output+0x84>)
 800e84a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e84e:	490a      	ldr	r1, [pc, #40]	; (800e878 <ethernet_output+0x88>)
 800e850:	480a      	ldr	r0, [pc, #40]	; (800e87c <ethernet_output+0x8c>)
 800e852:	f000 f85f 	bl	800e914 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	68b9      	ldr	r1, [r7, #8]
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	4798      	blx	r3
 800e860:	4603      	mov	r3, r0
 800e862:	e002      	b.n	800e86a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e864:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e866:	f06f 0301 	mvn.w	r3, #1
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3718      	adds	r7, #24
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	08012318 	.word	0x08012318
 800e878:	08012350 	.word	0x08012350
 800e87c:	08012384 	.word	0x08012384

0800e880 <__libc_init_array>:
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	4d0d      	ldr	r5, [pc, #52]	; (800e8b8 <__libc_init_array+0x38>)
 800e884:	4c0d      	ldr	r4, [pc, #52]	; (800e8bc <__libc_init_array+0x3c>)
 800e886:	1b64      	subs	r4, r4, r5
 800e888:	10a4      	asrs	r4, r4, #2
 800e88a:	2600      	movs	r6, #0
 800e88c:	42a6      	cmp	r6, r4
 800e88e:	d109      	bne.n	800e8a4 <__libc_init_array+0x24>
 800e890:	4d0b      	ldr	r5, [pc, #44]	; (800e8c0 <__libc_init_array+0x40>)
 800e892:	4c0c      	ldr	r4, [pc, #48]	; (800e8c4 <__libc_init_array+0x44>)
 800e894:	f001 f88e 	bl	800f9b4 <_init>
 800e898:	1b64      	subs	r4, r4, r5
 800e89a:	10a4      	asrs	r4, r4, #2
 800e89c:	2600      	movs	r6, #0
 800e89e:	42a6      	cmp	r6, r4
 800e8a0:	d105      	bne.n	800e8ae <__libc_init_array+0x2e>
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8a8:	4798      	blx	r3
 800e8aa:	3601      	adds	r6, #1
 800e8ac:	e7ee      	b.n	800e88c <__libc_init_array+0xc>
 800e8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b2:	4798      	blx	r3
 800e8b4:	3601      	adds	r6, #1
 800e8b6:	e7f2      	b.n	800e89e <__libc_init_array+0x1e>
 800e8b8:	08012604 	.word	0x08012604
 800e8bc:	08012604 	.word	0x08012604
 800e8c0:	08012604 	.word	0x08012604
 800e8c4:	08012608 	.word	0x08012608

0800e8c8 <memcmp>:
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	3901      	subs	r1, #1
 800e8cc:	4402      	add	r2, r0
 800e8ce:	4290      	cmp	r0, r2
 800e8d0:	d101      	bne.n	800e8d6 <memcmp+0xe>
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	e005      	b.n	800e8e2 <memcmp+0x1a>
 800e8d6:	7803      	ldrb	r3, [r0, #0]
 800e8d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e8dc:	42a3      	cmp	r3, r4
 800e8de:	d001      	beq.n	800e8e4 <memcmp+0x1c>
 800e8e0:	1b18      	subs	r0, r3, r4
 800e8e2:	bd10      	pop	{r4, pc}
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	e7f2      	b.n	800e8ce <memcmp+0x6>

0800e8e8 <memcpy>:
 800e8e8:	440a      	add	r2, r1
 800e8ea:	4291      	cmp	r1, r2
 800e8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8f0:	d100      	bne.n	800e8f4 <memcpy+0xc>
 800e8f2:	4770      	bx	lr
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8fe:	4291      	cmp	r1, r2
 800e900:	d1f9      	bne.n	800e8f6 <memcpy+0xe>
 800e902:	bd10      	pop	{r4, pc}

0800e904 <memset>:
 800e904:	4402      	add	r2, r0
 800e906:	4603      	mov	r3, r0
 800e908:	4293      	cmp	r3, r2
 800e90a:	d100      	bne.n	800e90e <memset+0xa>
 800e90c:	4770      	bx	lr
 800e90e:	f803 1b01 	strb.w	r1, [r3], #1
 800e912:	e7f9      	b.n	800e908 <memset+0x4>

0800e914 <iprintf>:
 800e914:	b40f      	push	{r0, r1, r2, r3}
 800e916:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <iprintf+0x2c>)
 800e918:	b513      	push	{r0, r1, r4, lr}
 800e91a:	681c      	ldr	r4, [r3, #0]
 800e91c:	b124      	cbz	r4, 800e928 <iprintf+0x14>
 800e91e:	69a3      	ldr	r3, [r4, #24]
 800e920:	b913      	cbnz	r3, 800e928 <iprintf+0x14>
 800e922:	4620      	mov	r0, r4
 800e924:	f000 f8c2 	bl	800eaac <__sinit>
 800e928:	ab05      	add	r3, sp, #20
 800e92a:	9a04      	ldr	r2, [sp, #16]
 800e92c:	68a1      	ldr	r1, [r4, #8]
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	4620      	mov	r0, r4
 800e932:	f000 fa7f 	bl	800ee34 <_vfiprintf_r>
 800e936:	b002      	add	sp, #8
 800e938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e93c:	b004      	add	sp, #16
 800e93e:	4770      	bx	lr
 800e940:	2000002c 	.word	0x2000002c

0800e944 <rand>:
 800e944:	4b16      	ldr	r3, [pc, #88]	; (800e9a0 <rand+0x5c>)
 800e946:	b510      	push	{r4, lr}
 800e948:	681c      	ldr	r4, [r3, #0]
 800e94a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e94c:	b9b3      	cbnz	r3, 800e97c <rand+0x38>
 800e94e:	2018      	movs	r0, #24
 800e950:	f000 f95e 	bl	800ec10 <malloc>
 800e954:	63a0      	str	r0, [r4, #56]	; 0x38
 800e956:	b928      	cbnz	r0, 800e964 <rand+0x20>
 800e958:	4602      	mov	r2, r0
 800e95a:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <rand+0x60>)
 800e95c:	4812      	ldr	r0, [pc, #72]	; (800e9a8 <rand+0x64>)
 800e95e:	214e      	movs	r1, #78	; 0x4e
 800e960:	f000 f82e 	bl	800e9c0 <__assert_func>
 800e964:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <rand+0x68>)
 800e966:	4b12      	ldr	r3, [pc, #72]	; (800e9b0 <rand+0x6c>)
 800e968:	e9c0 2300 	strd	r2, r3, [r0]
 800e96c:	4b11      	ldr	r3, [pc, #68]	; (800e9b4 <rand+0x70>)
 800e96e:	6083      	str	r3, [r0, #8]
 800e970:	230b      	movs	r3, #11
 800e972:	8183      	strh	r3, [r0, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	2300      	movs	r3, #0
 800e978:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e97c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e97e:	4a0e      	ldr	r2, [pc, #56]	; (800e9b8 <rand+0x74>)
 800e980:	6920      	ldr	r0, [r4, #16]
 800e982:	6963      	ldr	r3, [r4, #20]
 800e984:	490d      	ldr	r1, [pc, #52]	; (800e9bc <rand+0x78>)
 800e986:	4342      	muls	r2, r0
 800e988:	fb01 2203 	mla	r2, r1, r3, r2
 800e98c:	fba0 0101 	umull	r0, r1, r0, r1
 800e990:	1c43      	adds	r3, r0, #1
 800e992:	eb42 0001 	adc.w	r0, r2, r1
 800e996:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e99a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e99e:	bd10      	pop	{r4, pc}
 800e9a0:	2000002c 	.word	0x2000002c
 800e9a4:	080124b8 	.word	0x080124b8
 800e9a8:	080124cf 	.word	0x080124cf
 800e9ac:	abcd330e 	.word	0xabcd330e
 800e9b0:	e66d1234 	.word	0xe66d1234
 800e9b4:	0005deec 	.word	0x0005deec
 800e9b8:	5851f42d 	.word	0x5851f42d
 800e9bc:	4c957f2d 	.word	0x4c957f2d

0800e9c0 <__assert_func>:
 800e9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9c2:	4614      	mov	r4, r2
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4b09      	ldr	r3, [pc, #36]	; (800e9ec <__assert_func+0x2c>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	68d8      	ldr	r0, [r3, #12]
 800e9ce:	b14c      	cbz	r4, 800e9e4 <__assert_func+0x24>
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <__assert_func+0x30>)
 800e9d2:	9100      	str	r1, [sp, #0]
 800e9d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9d8:	4906      	ldr	r1, [pc, #24]	; (800e9f4 <__assert_func+0x34>)
 800e9da:	462b      	mov	r3, r5
 800e9dc:	f000 f8e4 	bl	800eba8 <fiprintf>
 800e9e0:	f000 fe12 	bl	800f608 <abort>
 800e9e4:	4b04      	ldr	r3, [pc, #16]	; (800e9f8 <__assert_func+0x38>)
 800e9e6:	461c      	mov	r4, r3
 800e9e8:	e7f3      	b.n	800e9d2 <__assert_func+0x12>
 800e9ea:	bf00      	nop
 800e9ec:	2000002c 	.word	0x2000002c
 800e9f0:	0801252a 	.word	0x0801252a
 800e9f4:	08012537 	.word	0x08012537
 800e9f8:	08012565 	.word	0x08012565

0800e9fc <std>:
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	b510      	push	{r4, lr}
 800ea00:	4604      	mov	r4, r0
 800ea02:	e9c0 3300 	strd	r3, r3, [r0]
 800ea06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea0a:	6083      	str	r3, [r0, #8]
 800ea0c:	8181      	strh	r1, [r0, #12]
 800ea0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ea10:	81c2      	strh	r2, [r0, #14]
 800ea12:	6183      	str	r3, [r0, #24]
 800ea14:	4619      	mov	r1, r3
 800ea16:	2208      	movs	r2, #8
 800ea18:	305c      	adds	r0, #92	; 0x5c
 800ea1a:	f7ff ff73 	bl	800e904 <memset>
 800ea1e:	4b05      	ldr	r3, [pc, #20]	; (800ea34 <std+0x38>)
 800ea20:	6263      	str	r3, [r4, #36]	; 0x24
 800ea22:	4b05      	ldr	r3, [pc, #20]	; (800ea38 <std+0x3c>)
 800ea24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea26:	4b05      	ldr	r3, [pc, #20]	; (800ea3c <std+0x40>)
 800ea28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea2a:	4b05      	ldr	r3, [pc, #20]	; (800ea40 <std+0x44>)
 800ea2c:	6224      	str	r4, [r4, #32]
 800ea2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ea30:	bd10      	pop	{r4, pc}
 800ea32:	bf00      	nop
 800ea34:	0800f3dd 	.word	0x0800f3dd
 800ea38:	0800f3ff 	.word	0x0800f3ff
 800ea3c:	0800f437 	.word	0x0800f437
 800ea40:	0800f45b 	.word	0x0800f45b

0800ea44 <_cleanup_r>:
 800ea44:	4901      	ldr	r1, [pc, #4]	; (800ea4c <_cleanup_r+0x8>)
 800ea46:	f000 b8c1 	b.w	800ebcc <_fwalk_reent>
 800ea4a:	bf00      	nop
 800ea4c:	0800f745 	.word	0x0800f745

0800ea50 <__sfmoreglue>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	2268      	movs	r2, #104	; 0x68
 800ea54:	1e4d      	subs	r5, r1, #1
 800ea56:	4355      	muls	r5, r2
 800ea58:	460e      	mov	r6, r1
 800ea5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea5e:	f000 f94b 	bl	800ecf8 <_malloc_r>
 800ea62:	4604      	mov	r4, r0
 800ea64:	b140      	cbz	r0, 800ea78 <__sfmoreglue+0x28>
 800ea66:	2100      	movs	r1, #0
 800ea68:	e9c0 1600 	strd	r1, r6, [r0]
 800ea6c:	300c      	adds	r0, #12
 800ea6e:	60a0      	str	r0, [r4, #8]
 800ea70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea74:	f7ff ff46 	bl	800e904 <memset>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}

0800ea7c <__sfp_lock_acquire>:
 800ea7c:	4801      	ldr	r0, [pc, #4]	; (800ea84 <__sfp_lock_acquire+0x8>)
 800ea7e:	f000 b8c5 	b.w	800ec0c <__retarget_lock_acquire_recursive>
 800ea82:	bf00      	nop
 800ea84:	200083ed 	.word	0x200083ed

0800ea88 <__sfp_lock_release>:
 800ea88:	4801      	ldr	r0, [pc, #4]	; (800ea90 <__sfp_lock_release+0x8>)
 800ea8a:	f000 b8c0 	b.w	800ec0e <__retarget_lock_release_recursive>
 800ea8e:	bf00      	nop
 800ea90:	200083ed 	.word	0x200083ed

0800ea94 <__sinit_lock_acquire>:
 800ea94:	4801      	ldr	r0, [pc, #4]	; (800ea9c <__sinit_lock_acquire+0x8>)
 800ea96:	f000 b8b9 	b.w	800ec0c <__retarget_lock_acquire_recursive>
 800ea9a:	bf00      	nop
 800ea9c:	200083ee 	.word	0x200083ee

0800eaa0 <__sinit_lock_release>:
 800eaa0:	4801      	ldr	r0, [pc, #4]	; (800eaa8 <__sinit_lock_release+0x8>)
 800eaa2:	f000 b8b4 	b.w	800ec0e <__retarget_lock_release_recursive>
 800eaa6:	bf00      	nop
 800eaa8:	200083ee 	.word	0x200083ee

0800eaac <__sinit>:
 800eaac:	b510      	push	{r4, lr}
 800eaae:	4604      	mov	r4, r0
 800eab0:	f7ff fff0 	bl	800ea94 <__sinit_lock_acquire>
 800eab4:	69a3      	ldr	r3, [r4, #24]
 800eab6:	b11b      	cbz	r3, 800eac0 <__sinit+0x14>
 800eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eabc:	f7ff bff0 	b.w	800eaa0 <__sinit_lock_release>
 800eac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eac4:	6523      	str	r3, [r4, #80]	; 0x50
 800eac6:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <__sinit+0x68>)
 800eac8:	4a13      	ldr	r2, [pc, #76]	; (800eb18 <__sinit+0x6c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	62a2      	str	r2, [r4, #40]	; 0x28
 800eace:	42a3      	cmp	r3, r4
 800ead0:	bf04      	itt	eq
 800ead2:	2301      	moveq	r3, #1
 800ead4:	61a3      	streq	r3, [r4, #24]
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 f820 	bl	800eb1c <__sfp>
 800eadc:	6060      	str	r0, [r4, #4]
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 f81c 	bl	800eb1c <__sfp>
 800eae4:	60a0      	str	r0, [r4, #8]
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 f818 	bl	800eb1c <__sfp>
 800eaec:	2200      	movs	r2, #0
 800eaee:	60e0      	str	r0, [r4, #12]
 800eaf0:	2104      	movs	r1, #4
 800eaf2:	6860      	ldr	r0, [r4, #4]
 800eaf4:	f7ff ff82 	bl	800e9fc <std>
 800eaf8:	68a0      	ldr	r0, [r4, #8]
 800eafa:	2201      	movs	r2, #1
 800eafc:	2109      	movs	r1, #9
 800eafe:	f7ff ff7d 	bl	800e9fc <std>
 800eb02:	68e0      	ldr	r0, [r4, #12]
 800eb04:	2202      	movs	r2, #2
 800eb06:	2112      	movs	r1, #18
 800eb08:	f7ff ff78 	bl	800e9fc <std>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	61a3      	str	r3, [r4, #24]
 800eb10:	e7d2      	b.n	800eab8 <__sinit+0xc>
 800eb12:	bf00      	nop
 800eb14:	080124b4 	.word	0x080124b4
 800eb18:	0800ea45 	.word	0x0800ea45

0800eb1c <__sfp>:
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	4607      	mov	r7, r0
 800eb20:	f7ff ffac 	bl	800ea7c <__sfp_lock_acquire>
 800eb24:	4b1e      	ldr	r3, [pc, #120]	; (800eba0 <__sfp+0x84>)
 800eb26:	681e      	ldr	r6, [r3, #0]
 800eb28:	69b3      	ldr	r3, [r6, #24]
 800eb2a:	b913      	cbnz	r3, 800eb32 <__sfp+0x16>
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff ffbd 	bl	800eaac <__sinit>
 800eb32:	3648      	adds	r6, #72	; 0x48
 800eb34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	d503      	bpl.n	800eb44 <__sfp+0x28>
 800eb3c:	6833      	ldr	r3, [r6, #0]
 800eb3e:	b30b      	cbz	r3, 800eb84 <__sfp+0x68>
 800eb40:	6836      	ldr	r6, [r6, #0]
 800eb42:	e7f7      	b.n	800eb34 <__sfp+0x18>
 800eb44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb48:	b9d5      	cbnz	r5, 800eb80 <__sfp+0x64>
 800eb4a:	4b16      	ldr	r3, [pc, #88]	; (800eba4 <__sfp+0x88>)
 800eb4c:	60e3      	str	r3, [r4, #12]
 800eb4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb52:	6665      	str	r5, [r4, #100]	; 0x64
 800eb54:	f000 f859 	bl	800ec0a <__retarget_lock_init_recursive>
 800eb58:	f7ff ff96 	bl	800ea88 <__sfp_lock_release>
 800eb5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb64:	6025      	str	r5, [r4, #0]
 800eb66:	61a5      	str	r5, [r4, #24]
 800eb68:	2208      	movs	r2, #8
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb70:	f7ff fec8 	bl	800e904 <memset>
 800eb74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb80:	3468      	adds	r4, #104	; 0x68
 800eb82:	e7d9      	b.n	800eb38 <__sfp+0x1c>
 800eb84:	2104      	movs	r1, #4
 800eb86:	4638      	mov	r0, r7
 800eb88:	f7ff ff62 	bl	800ea50 <__sfmoreglue>
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	6030      	str	r0, [r6, #0]
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d1d5      	bne.n	800eb40 <__sfp+0x24>
 800eb94:	f7ff ff78 	bl	800ea88 <__sfp_lock_release>
 800eb98:	230c      	movs	r3, #12
 800eb9a:	603b      	str	r3, [r7, #0]
 800eb9c:	e7ee      	b.n	800eb7c <__sfp+0x60>
 800eb9e:	bf00      	nop
 800eba0:	080124b4 	.word	0x080124b4
 800eba4:	ffff0001 	.word	0xffff0001

0800eba8 <fiprintf>:
 800eba8:	b40e      	push	{r1, r2, r3}
 800ebaa:	b503      	push	{r0, r1, lr}
 800ebac:	4601      	mov	r1, r0
 800ebae:	ab03      	add	r3, sp, #12
 800ebb0:	4805      	ldr	r0, [pc, #20]	; (800ebc8 <fiprintf+0x20>)
 800ebb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	f000 f93b 	bl	800ee34 <_vfiprintf_r>
 800ebbe:	b002      	add	sp, #8
 800ebc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebc4:	b003      	add	sp, #12
 800ebc6:	4770      	bx	lr
 800ebc8:	2000002c 	.word	0x2000002c

0800ebcc <_fwalk_reent>:
 800ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd0:	4606      	mov	r6, r0
 800ebd2:	4688      	mov	r8, r1
 800ebd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ebd8:	2700      	movs	r7, #0
 800ebda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebde:	f1b9 0901 	subs.w	r9, r9, #1
 800ebe2:	d505      	bpl.n	800ebf0 <_fwalk_reent+0x24>
 800ebe4:	6824      	ldr	r4, [r4, #0]
 800ebe6:	2c00      	cmp	r4, #0
 800ebe8:	d1f7      	bne.n	800ebda <_fwalk_reent+0xe>
 800ebea:	4638      	mov	r0, r7
 800ebec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf0:	89ab      	ldrh	r3, [r5, #12]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d907      	bls.n	800ec06 <_fwalk_reent+0x3a>
 800ebf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	d003      	beq.n	800ec06 <_fwalk_reent+0x3a>
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4630      	mov	r0, r6
 800ec02:	47c0      	blx	r8
 800ec04:	4307      	orrs	r7, r0
 800ec06:	3568      	adds	r5, #104	; 0x68
 800ec08:	e7e9      	b.n	800ebde <_fwalk_reent+0x12>

0800ec0a <__retarget_lock_init_recursive>:
 800ec0a:	4770      	bx	lr

0800ec0c <__retarget_lock_acquire_recursive>:
 800ec0c:	4770      	bx	lr

0800ec0e <__retarget_lock_release_recursive>:
 800ec0e:	4770      	bx	lr

0800ec10 <malloc>:
 800ec10:	4b02      	ldr	r3, [pc, #8]	; (800ec1c <malloc+0xc>)
 800ec12:	4601      	mov	r1, r0
 800ec14:	6818      	ldr	r0, [r3, #0]
 800ec16:	f000 b86f 	b.w	800ecf8 <_malloc_r>
 800ec1a:	bf00      	nop
 800ec1c:	2000002c 	.word	0x2000002c

0800ec20 <_free_r>:
 800ec20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec22:	2900      	cmp	r1, #0
 800ec24:	d044      	beq.n	800ecb0 <_free_r+0x90>
 800ec26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec2a:	9001      	str	r0, [sp, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec32:	bfb8      	it	lt
 800ec34:	18e4      	addlt	r4, r4, r3
 800ec36:	f000 fe39 	bl	800f8ac <__malloc_lock>
 800ec3a:	4a1e      	ldr	r2, [pc, #120]	; (800ecb4 <_free_r+0x94>)
 800ec3c:	9801      	ldr	r0, [sp, #4]
 800ec3e:	6813      	ldr	r3, [r2, #0]
 800ec40:	b933      	cbnz	r3, 800ec50 <_free_r+0x30>
 800ec42:	6063      	str	r3, [r4, #4]
 800ec44:	6014      	str	r4, [r2, #0]
 800ec46:	b003      	add	sp, #12
 800ec48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec4c:	f000 be34 	b.w	800f8b8 <__malloc_unlock>
 800ec50:	42a3      	cmp	r3, r4
 800ec52:	d908      	bls.n	800ec66 <_free_r+0x46>
 800ec54:	6825      	ldr	r5, [r4, #0]
 800ec56:	1961      	adds	r1, r4, r5
 800ec58:	428b      	cmp	r3, r1
 800ec5a:	bf01      	itttt	eq
 800ec5c:	6819      	ldreq	r1, [r3, #0]
 800ec5e:	685b      	ldreq	r3, [r3, #4]
 800ec60:	1949      	addeq	r1, r1, r5
 800ec62:	6021      	streq	r1, [r4, #0]
 800ec64:	e7ed      	b.n	800ec42 <_free_r+0x22>
 800ec66:	461a      	mov	r2, r3
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	b10b      	cbz	r3, 800ec70 <_free_r+0x50>
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	d9fa      	bls.n	800ec66 <_free_r+0x46>
 800ec70:	6811      	ldr	r1, [r2, #0]
 800ec72:	1855      	adds	r5, r2, r1
 800ec74:	42a5      	cmp	r5, r4
 800ec76:	d10b      	bne.n	800ec90 <_free_r+0x70>
 800ec78:	6824      	ldr	r4, [r4, #0]
 800ec7a:	4421      	add	r1, r4
 800ec7c:	1854      	adds	r4, r2, r1
 800ec7e:	42a3      	cmp	r3, r4
 800ec80:	6011      	str	r1, [r2, #0]
 800ec82:	d1e0      	bne.n	800ec46 <_free_r+0x26>
 800ec84:	681c      	ldr	r4, [r3, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	6053      	str	r3, [r2, #4]
 800ec8a:	4421      	add	r1, r4
 800ec8c:	6011      	str	r1, [r2, #0]
 800ec8e:	e7da      	b.n	800ec46 <_free_r+0x26>
 800ec90:	d902      	bls.n	800ec98 <_free_r+0x78>
 800ec92:	230c      	movs	r3, #12
 800ec94:	6003      	str	r3, [r0, #0]
 800ec96:	e7d6      	b.n	800ec46 <_free_r+0x26>
 800ec98:	6825      	ldr	r5, [r4, #0]
 800ec9a:	1961      	adds	r1, r4, r5
 800ec9c:	428b      	cmp	r3, r1
 800ec9e:	bf04      	itt	eq
 800eca0:	6819      	ldreq	r1, [r3, #0]
 800eca2:	685b      	ldreq	r3, [r3, #4]
 800eca4:	6063      	str	r3, [r4, #4]
 800eca6:	bf04      	itt	eq
 800eca8:	1949      	addeq	r1, r1, r5
 800ecaa:	6021      	streq	r1, [r4, #0]
 800ecac:	6054      	str	r4, [r2, #4]
 800ecae:	e7ca      	b.n	800ec46 <_free_r+0x26>
 800ecb0:	b003      	add	sp, #12
 800ecb2:	bd30      	pop	{r4, r5, pc}
 800ecb4:	200083f0 	.word	0x200083f0

0800ecb8 <sbrk_aligned>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	4e0e      	ldr	r6, [pc, #56]	; (800ecf4 <sbrk_aligned+0x3c>)
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	6831      	ldr	r1, [r6, #0]
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	b911      	cbnz	r1, 800ecca <sbrk_aligned+0x12>
 800ecc4:	f000 fb7a 	bl	800f3bc <_sbrk_r>
 800ecc8:	6030      	str	r0, [r6, #0]
 800ecca:	4621      	mov	r1, r4
 800eccc:	4628      	mov	r0, r5
 800ecce:	f000 fb75 	bl	800f3bc <_sbrk_r>
 800ecd2:	1c43      	adds	r3, r0, #1
 800ecd4:	d00a      	beq.n	800ecec <sbrk_aligned+0x34>
 800ecd6:	1cc4      	adds	r4, r0, #3
 800ecd8:	f024 0403 	bic.w	r4, r4, #3
 800ecdc:	42a0      	cmp	r0, r4
 800ecde:	d007      	beq.n	800ecf0 <sbrk_aligned+0x38>
 800ece0:	1a21      	subs	r1, r4, r0
 800ece2:	4628      	mov	r0, r5
 800ece4:	f000 fb6a 	bl	800f3bc <_sbrk_r>
 800ece8:	3001      	adds	r0, #1
 800ecea:	d101      	bne.n	800ecf0 <sbrk_aligned+0x38>
 800ecec:	f04f 34ff 	mov.w	r4, #4294967295
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	200083f4 	.word	0x200083f4

0800ecf8 <_malloc_r>:
 800ecf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfc:	1ccd      	adds	r5, r1, #3
 800ecfe:	f025 0503 	bic.w	r5, r5, #3
 800ed02:	3508      	adds	r5, #8
 800ed04:	2d0c      	cmp	r5, #12
 800ed06:	bf38      	it	cc
 800ed08:	250c      	movcc	r5, #12
 800ed0a:	2d00      	cmp	r5, #0
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	db01      	blt.n	800ed14 <_malloc_r+0x1c>
 800ed10:	42a9      	cmp	r1, r5
 800ed12:	d905      	bls.n	800ed20 <_malloc_r+0x28>
 800ed14:	230c      	movs	r3, #12
 800ed16:	603b      	str	r3, [r7, #0]
 800ed18:	2600      	movs	r6, #0
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed20:	4e2e      	ldr	r6, [pc, #184]	; (800eddc <_malloc_r+0xe4>)
 800ed22:	f000 fdc3 	bl	800f8ac <__malloc_lock>
 800ed26:	6833      	ldr	r3, [r6, #0]
 800ed28:	461c      	mov	r4, r3
 800ed2a:	bb34      	cbnz	r4, 800ed7a <_malloc_r+0x82>
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f7ff ffc2 	bl	800ecb8 <sbrk_aligned>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	4604      	mov	r4, r0
 800ed38:	d14d      	bne.n	800edd6 <_malloc_r+0xde>
 800ed3a:	6834      	ldr	r4, [r6, #0]
 800ed3c:	4626      	mov	r6, r4
 800ed3e:	2e00      	cmp	r6, #0
 800ed40:	d140      	bne.n	800edc4 <_malloc_r+0xcc>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	4631      	mov	r1, r6
 800ed46:	4638      	mov	r0, r7
 800ed48:	eb04 0803 	add.w	r8, r4, r3
 800ed4c:	f000 fb36 	bl	800f3bc <_sbrk_r>
 800ed50:	4580      	cmp	r8, r0
 800ed52:	d13a      	bne.n	800edca <_malloc_r+0xd2>
 800ed54:	6821      	ldr	r1, [r4, #0]
 800ed56:	3503      	adds	r5, #3
 800ed58:	1a6d      	subs	r5, r5, r1
 800ed5a:	f025 0503 	bic.w	r5, r5, #3
 800ed5e:	3508      	adds	r5, #8
 800ed60:	2d0c      	cmp	r5, #12
 800ed62:	bf38      	it	cc
 800ed64:	250c      	movcc	r5, #12
 800ed66:	4629      	mov	r1, r5
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff ffa5 	bl	800ecb8 <sbrk_aligned>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	d02b      	beq.n	800edca <_malloc_r+0xd2>
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	442b      	add	r3, r5
 800ed76:	6023      	str	r3, [r4, #0]
 800ed78:	e00e      	b.n	800ed98 <_malloc_r+0xa0>
 800ed7a:	6822      	ldr	r2, [r4, #0]
 800ed7c:	1b52      	subs	r2, r2, r5
 800ed7e:	d41e      	bmi.n	800edbe <_malloc_r+0xc6>
 800ed80:	2a0b      	cmp	r2, #11
 800ed82:	d916      	bls.n	800edb2 <_malloc_r+0xba>
 800ed84:	1961      	adds	r1, r4, r5
 800ed86:	42a3      	cmp	r3, r4
 800ed88:	6025      	str	r5, [r4, #0]
 800ed8a:	bf18      	it	ne
 800ed8c:	6059      	strne	r1, [r3, #4]
 800ed8e:	6863      	ldr	r3, [r4, #4]
 800ed90:	bf08      	it	eq
 800ed92:	6031      	streq	r1, [r6, #0]
 800ed94:	5162      	str	r2, [r4, r5]
 800ed96:	604b      	str	r3, [r1, #4]
 800ed98:	4638      	mov	r0, r7
 800ed9a:	f104 060b 	add.w	r6, r4, #11
 800ed9e:	f000 fd8b 	bl	800f8b8 <__malloc_unlock>
 800eda2:	f026 0607 	bic.w	r6, r6, #7
 800eda6:	1d23      	adds	r3, r4, #4
 800eda8:	1af2      	subs	r2, r6, r3
 800edaa:	d0b6      	beq.n	800ed1a <_malloc_r+0x22>
 800edac:	1b9b      	subs	r3, r3, r6
 800edae:	50a3      	str	r3, [r4, r2]
 800edb0:	e7b3      	b.n	800ed1a <_malloc_r+0x22>
 800edb2:	6862      	ldr	r2, [r4, #4]
 800edb4:	42a3      	cmp	r3, r4
 800edb6:	bf0c      	ite	eq
 800edb8:	6032      	streq	r2, [r6, #0]
 800edba:	605a      	strne	r2, [r3, #4]
 800edbc:	e7ec      	b.n	800ed98 <_malloc_r+0xa0>
 800edbe:	4623      	mov	r3, r4
 800edc0:	6864      	ldr	r4, [r4, #4]
 800edc2:	e7b2      	b.n	800ed2a <_malloc_r+0x32>
 800edc4:	4634      	mov	r4, r6
 800edc6:	6876      	ldr	r6, [r6, #4]
 800edc8:	e7b9      	b.n	800ed3e <_malloc_r+0x46>
 800edca:	230c      	movs	r3, #12
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	4638      	mov	r0, r7
 800edd0:	f000 fd72 	bl	800f8b8 <__malloc_unlock>
 800edd4:	e7a1      	b.n	800ed1a <_malloc_r+0x22>
 800edd6:	6025      	str	r5, [r4, #0]
 800edd8:	e7de      	b.n	800ed98 <_malloc_r+0xa0>
 800edda:	bf00      	nop
 800eddc:	200083f0 	.word	0x200083f0

0800ede0 <__sfputc_r>:
 800ede0:	6893      	ldr	r3, [r2, #8]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	b410      	push	{r4}
 800ede8:	6093      	str	r3, [r2, #8]
 800edea:	da08      	bge.n	800edfe <__sfputc_r+0x1e>
 800edec:	6994      	ldr	r4, [r2, #24]
 800edee:	42a3      	cmp	r3, r4
 800edf0:	db01      	blt.n	800edf6 <__sfputc_r+0x16>
 800edf2:	290a      	cmp	r1, #10
 800edf4:	d103      	bne.n	800edfe <__sfputc_r+0x1e>
 800edf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edfa:	f000 bb33 	b.w	800f464 <__swbuf_r>
 800edfe:	6813      	ldr	r3, [r2, #0]
 800ee00:	1c58      	adds	r0, r3, #1
 800ee02:	6010      	str	r0, [r2, #0]
 800ee04:	7019      	strb	r1, [r3, #0]
 800ee06:	4608      	mov	r0, r1
 800ee08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <__sfputs_r>:
 800ee0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee10:	4606      	mov	r6, r0
 800ee12:	460f      	mov	r7, r1
 800ee14:	4614      	mov	r4, r2
 800ee16:	18d5      	adds	r5, r2, r3
 800ee18:	42ac      	cmp	r4, r5
 800ee1a:	d101      	bne.n	800ee20 <__sfputs_r+0x12>
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	e007      	b.n	800ee30 <__sfputs_r+0x22>
 800ee20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee24:	463a      	mov	r2, r7
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff ffda 	bl	800ede0 <__sfputc_r>
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d1f3      	bne.n	800ee18 <__sfputs_r+0xa>
 800ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee34 <_vfiprintf_r>:
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	460d      	mov	r5, r1
 800ee3a:	b09d      	sub	sp, #116	; 0x74
 800ee3c:	4614      	mov	r4, r2
 800ee3e:	4698      	mov	r8, r3
 800ee40:	4606      	mov	r6, r0
 800ee42:	b118      	cbz	r0, 800ee4c <_vfiprintf_r+0x18>
 800ee44:	6983      	ldr	r3, [r0, #24]
 800ee46:	b90b      	cbnz	r3, 800ee4c <_vfiprintf_r+0x18>
 800ee48:	f7ff fe30 	bl	800eaac <__sinit>
 800ee4c:	4b89      	ldr	r3, [pc, #548]	; (800f074 <_vfiprintf_r+0x240>)
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	d11b      	bne.n	800ee8a <_vfiprintf_r+0x56>
 800ee52:	6875      	ldr	r5, [r6, #4]
 800ee54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee56:	07d9      	lsls	r1, r3, #31
 800ee58:	d405      	bmi.n	800ee66 <_vfiprintf_r+0x32>
 800ee5a:	89ab      	ldrh	r3, [r5, #12]
 800ee5c:	059a      	lsls	r2, r3, #22
 800ee5e:	d402      	bmi.n	800ee66 <_vfiprintf_r+0x32>
 800ee60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee62:	f7ff fed3 	bl	800ec0c <__retarget_lock_acquire_recursive>
 800ee66:	89ab      	ldrh	r3, [r5, #12]
 800ee68:	071b      	lsls	r3, r3, #28
 800ee6a:	d501      	bpl.n	800ee70 <_vfiprintf_r+0x3c>
 800ee6c:	692b      	ldr	r3, [r5, #16]
 800ee6e:	b9eb      	cbnz	r3, 800eeac <_vfiprintf_r+0x78>
 800ee70:	4629      	mov	r1, r5
 800ee72:	4630      	mov	r0, r6
 800ee74:	f000 fb5a 	bl	800f52c <__swsetup_r>
 800ee78:	b1c0      	cbz	r0, 800eeac <_vfiprintf_r+0x78>
 800ee7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee7c:	07dc      	lsls	r4, r3, #31
 800ee7e:	d50e      	bpl.n	800ee9e <_vfiprintf_r+0x6a>
 800ee80:	f04f 30ff 	mov.w	r0, #4294967295
 800ee84:	b01d      	add	sp, #116	; 0x74
 800ee86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8a:	4b7b      	ldr	r3, [pc, #492]	; (800f078 <_vfiprintf_r+0x244>)
 800ee8c:	429d      	cmp	r5, r3
 800ee8e:	d101      	bne.n	800ee94 <_vfiprintf_r+0x60>
 800ee90:	68b5      	ldr	r5, [r6, #8]
 800ee92:	e7df      	b.n	800ee54 <_vfiprintf_r+0x20>
 800ee94:	4b79      	ldr	r3, [pc, #484]	; (800f07c <_vfiprintf_r+0x248>)
 800ee96:	429d      	cmp	r5, r3
 800ee98:	bf08      	it	eq
 800ee9a:	68f5      	ldreq	r5, [r6, #12]
 800ee9c:	e7da      	b.n	800ee54 <_vfiprintf_r+0x20>
 800ee9e:	89ab      	ldrh	r3, [r5, #12]
 800eea0:	0598      	lsls	r0, r3, #22
 800eea2:	d4ed      	bmi.n	800ee80 <_vfiprintf_r+0x4c>
 800eea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea6:	f7ff feb2 	bl	800ec0e <__retarget_lock_release_recursive>
 800eeaa:	e7e9      	b.n	800ee80 <_vfiprintf_r+0x4c>
 800eeac:	2300      	movs	r3, #0
 800eeae:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb0:	2320      	movs	r3, #32
 800eeb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeba:	2330      	movs	r3, #48	; 0x30
 800eebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f080 <_vfiprintf_r+0x24c>
 800eec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eec4:	f04f 0901 	mov.w	r9, #1
 800eec8:	4623      	mov	r3, r4
 800eeca:	469a      	mov	sl, r3
 800eecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eed0:	b10a      	cbz	r2, 800eed6 <_vfiprintf_r+0xa2>
 800eed2:	2a25      	cmp	r2, #37	; 0x25
 800eed4:	d1f9      	bne.n	800eeca <_vfiprintf_r+0x96>
 800eed6:	ebba 0b04 	subs.w	fp, sl, r4
 800eeda:	d00b      	beq.n	800eef4 <_vfiprintf_r+0xc0>
 800eedc:	465b      	mov	r3, fp
 800eede:	4622      	mov	r2, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	4630      	mov	r0, r6
 800eee4:	f7ff ff93 	bl	800ee0e <__sfputs_r>
 800eee8:	3001      	adds	r0, #1
 800eeea:	f000 80aa 	beq.w	800f042 <_vfiprintf_r+0x20e>
 800eeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef0:	445a      	add	r2, fp
 800eef2:	9209      	str	r2, [sp, #36]	; 0x24
 800eef4:	f89a 3000 	ldrb.w	r3, [sl]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f000 80a2 	beq.w	800f042 <_vfiprintf_r+0x20e>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295
 800ef04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef08:	f10a 0a01 	add.w	sl, sl, #1
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	9307      	str	r3, [sp, #28]
 800ef10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef14:	931a      	str	r3, [sp, #104]	; 0x68
 800ef16:	4654      	mov	r4, sl
 800ef18:	2205      	movs	r2, #5
 800ef1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1e:	4858      	ldr	r0, [pc, #352]	; (800f080 <_vfiprintf_r+0x24c>)
 800ef20:	f7f1 f956 	bl	80001d0 <memchr>
 800ef24:	9a04      	ldr	r2, [sp, #16]
 800ef26:	b9d8      	cbnz	r0, 800ef60 <_vfiprintf_r+0x12c>
 800ef28:	06d1      	lsls	r1, r2, #27
 800ef2a:	bf44      	itt	mi
 800ef2c:	2320      	movmi	r3, #32
 800ef2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef32:	0713      	lsls	r3, r2, #28
 800ef34:	bf44      	itt	mi
 800ef36:	232b      	movmi	r3, #43	; 0x2b
 800ef38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef40:	2b2a      	cmp	r3, #42	; 0x2a
 800ef42:	d015      	beq.n	800ef70 <_vfiprintf_r+0x13c>
 800ef44:	9a07      	ldr	r2, [sp, #28]
 800ef46:	4654      	mov	r4, sl
 800ef48:	2000      	movs	r0, #0
 800ef4a:	f04f 0c0a 	mov.w	ip, #10
 800ef4e:	4621      	mov	r1, r4
 800ef50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef54:	3b30      	subs	r3, #48	; 0x30
 800ef56:	2b09      	cmp	r3, #9
 800ef58:	d94e      	bls.n	800eff8 <_vfiprintf_r+0x1c4>
 800ef5a:	b1b0      	cbz	r0, 800ef8a <_vfiprintf_r+0x156>
 800ef5c:	9207      	str	r2, [sp, #28]
 800ef5e:	e014      	b.n	800ef8a <_vfiprintf_r+0x156>
 800ef60:	eba0 0308 	sub.w	r3, r0, r8
 800ef64:	fa09 f303 	lsl.w	r3, r9, r3
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	9304      	str	r3, [sp, #16]
 800ef6c:	46a2      	mov	sl, r4
 800ef6e:	e7d2      	b.n	800ef16 <_vfiprintf_r+0xe2>
 800ef70:	9b03      	ldr	r3, [sp, #12]
 800ef72:	1d19      	adds	r1, r3, #4
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	9103      	str	r1, [sp, #12]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	bfbb      	ittet	lt
 800ef7c:	425b      	neglt	r3, r3
 800ef7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef82:	9307      	strge	r3, [sp, #28]
 800ef84:	9307      	strlt	r3, [sp, #28]
 800ef86:	bfb8      	it	lt
 800ef88:	9204      	strlt	r2, [sp, #16]
 800ef8a:	7823      	ldrb	r3, [r4, #0]
 800ef8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef8e:	d10c      	bne.n	800efaa <_vfiprintf_r+0x176>
 800ef90:	7863      	ldrb	r3, [r4, #1]
 800ef92:	2b2a      	cmp	r3, #42	; 0x2a
 800ef94:	d135      	bne.n	800f002 <_vfiprintf_r+0x1ce>
 800ef96:	9b03      	ldr	r3, [sp, #12]
 800ef98:	1d1a      	adds	r2, r3, #4
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	9203      	str	r2, [sp, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bfb8      	it	lt
 800efa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800efa6:	3402      	adds	r4, #2
 800efa8:	9305      	str	r3, [sp, #20]
 800efaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f090 <_vfiprintf_r+0x25c>
 800efae:	7821      	ldrb	r1, [r4, #0]
 800efb0:	2203      	movs	r2, #3
 800efb2:	4650      	mov	r0, sl
 800efb4:	f7f1 f90c 	bl	80001d0 <memchr>
 800efb8:	b140      	cbz	r0, 800efcc <_vfiprintf_r+0x198>
 800efba:	2340      	movs	r3, #64	; 0x40
 800efbc:	eba0 000a 	sub.w	r0, r0, sl
 800efc0:	fa03 f000 	lsl.w	r0, r3, r0
 800efc4:	9b04      	ldr	r3, [sp, #16]
 800efc6:	4303      	orrs	r3, r0
 800efc8:	3401      	adds	r4, #1
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd0:	482c      	ldr	r0, [pc, #176]	; (800f084 <_vfiprintf_r+0x250>)
 800efd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efd6:	2206      	movs	r2, #6
 800efd8:	f7f1 f8fa 	bl	80001d0 <memchr>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d03f      	beq.n	800f060 <_vfiprintf_r+0x22c>
 800efe0:	4b29      	ldr	r3, [pc, #164]	; (800f088 <_vfiprintf_r+0x254>)
 800efe2:	bb1b      	cbnz	r3, 800f02c <_vfiprintf_r+0x1f8>
 800efe4:	9b03      	ldr	r3, [sp, #12]
 800efe6:	3307      	adds	r3, #7
 800efe8:	f023 0307 	bic.w	r3, r3, #7
 800efec:	3308      	adds	r3, #8
 800efee:	9303      	str	r3, [sp, #12]
 800eff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff2:	443b      	add	r3, r7
 800eff4:	9309      	str	r3, [sp, #36]	; 0x24
 800eff6:	e767      	b.n	800eec8 <_vfiprintf_r+0x94>
 800eff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800effc:	460c      	mov	r4, r1
 800effe:	2001      	movs	r0, #1
 800f000:	e7a5      	b.n	800ef4e <_vfiprintf_r+0x11a>
 800f002:	2300      	movs	r3, #0
 800f004:	3401      	adds	r4, #1
 800f006:	9305      	str	r3, [sp, #20]
 800f008:	4619      	mov	r1, r3
 800f00a:	f04f 0c0a 	mov.w	ip, #10
 800f00e:	4620      	mov	r0, r4
 800f010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f014:	3a30      	subs	r2, #48	; 0x30
 800f016:	2a09      	cmp	r2, #9
 800f018:	d903      	bls.n	800f022 <_vfiprintf_r+0x1ee>
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0c5      	beq.n	800efaa <_vfiprintf_r+0x176>
 800f01e:	9105      	str	r1, [sp, #20]
 800f020:	e7c3      	b.n	800efaa <_vfiprintf_r+0x176>
 800f022:	fb0c 2101 	mla	r1, ip, r1, r2
 800f026:	4604      	mov	r4, r0
 800f028:	2301      	movs	r3, #1
 800f02a:	e7f0      	b.n	800f00e <_vfiprintf_r+0x1da>
 800f02c:	ab03      	add	r3, sp, #12
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	462a      	mov	r2, r5
 800f032:	4b16      	ldr	r3, [pc, #88]	; (800f08c <_vfiprintf_r+0x258>)
 800f034:	a904      	add	r1, sp, #16
 800f036:	4630      	mov	r0, r6
 800f038:	f3af 8000 	nop.w
 800f03c:	4607      	mov	r7, r0
 800f03e:	1c78      	adds	r0, r7, #1
 800f040:	d1d6      	bne.n	800eff0 <_vfiprintf_r+0x1bc>
 800f042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f044:	07d9      	lsls	r1, r3, #31
 800f046:	d405      	bmi.n	800f054 <_vfiprintf_r+0x220>
 800f048:	89ab      	ldrh	r3, [r5, #12]
 800f04a:	059a      	lsls	r2, r3, #22
 800f04c:	d402      	bmi.n	800f054 <_vfiprintf_r+0x220>
 800f04e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f050:	f7ff fddd 	bl	800ec0e <__retarget_lock_release_recursive>
 800f054:	89ab      	ldrh	r3, [r5, #12]
 800f056:	065b      	lsls	r3, r3, #25
 800f058:	f53f af12 	bmi.w	800ee80 <_vfiprintf_r+0x4c>
 800f05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f05e:	e711      	b.n	800ee84 <_vfiprintf_r+0x50>
 800f060:	ab03      	add	r3, sp, #12
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	462a      	mov	r2, r5
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <_vfiprintf_r+0x258>)
 800f068:	a904      	add	r1, sp, #16
 800f06a:	4630      	mov	r0, r6
 800f06c:	f000 f880 	bl	800f170 <_printf_i>
 800f070:	e7e4      	b.n	800f03c <_vfiprintf_r+0x208>
 800f072:	bf00      	nop
 800f074:	08012588 	.word	0x08012588
 800f078:	080125a8 	.word	0x080125a8
 800f07c:	08012568 	.word	0x08012568
 800f080:	080125c8 	.word	0x080125c8
 800f084:	080125d2 	.word	0x080125d2
 800f088:	00000000 	.word	0x00000000
 800f08c:	0800ee0f 	.word	0x0800ee0f
 800f090:	080125ce 	.word	0x080125ce

0800f094 <_printf_common>:
 800f094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	4616      	mov	r6, r2
 800f09a:	4699      	mov	r9, r3
 800f09c:	688a      	ldr	r2, [r1, #8]
 800f09e:	690b      	ldr	r3, [r1, #16]
 800f0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	bfb8      	it	lt
 800f0a8:	4613      	movlt	r3, r2
 800f0aa:	6033      	str	r3, [r6, #0]
 800f0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b10a      	cbz	r2, 800f0ba <_printf_common+0x26>
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	6033      	str	r3, [r6, #0]
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	0699      	lsls	r1, r3, #26
 800f0be:	bf42      	ittt	mi
 800f0c0:	6833      	ldrmi	r3, [r6, #0]
 800f0c2:	3302      	addmi	r3, #2
 800f0c4:	6033      	strmi	r3, [r6, #0]
 800f0c6:	6825      	ldr	r5, [r4, #0]
 800f0c8:	f015 0506 	ands.w	r5, r5, #6
 800f0cc:	d106      	bne.n	800f0dc <_printf_common+0x48>
 800f0ce:	f104 0a19 	add.w	sl, r4, #25
 800f0d2:	68e3      	ldr	r3, [r4, #12]
 800f0d4:	6832      	ldr	r2, [r6, #0]
 800f0d6:	1a9b      	subs	r3, r3, r2
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	dc26      	bgt.n	800f12a <_printf_common+0x96>
 800f0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0e0:	1e13      	subs	r3, r2, #0
 800f0e2:	6822      	ldr	r2, [r4, #0]
 800f0e4:	bf18      	it	ne
 800f0e6:	2301      	movne	r3, #1
 800f0e8:	0692      	lsls	r2, r2, #26
 800f0ea:	d42b      	bmi.n	800f144 <_printf_common+0xb0>
 800f0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	47c0      	blx	r8
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d01e      	beq.n	800f138 <_printf_common+0xa4>
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	68e5      	ldr	r5, [r4, #12]
 800f0fe:	6832      	ldr	r2, [r6, #0]
 800f100:	f003 0306 	and.w	r3, r3, #6
 800f104:	2b04      	cmp	r3, #4
 800f106:	bf08      	it	eq
 800f108:	1aad      	subeq	r5, r5, r2
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	6922      	ldr	r2, [r4, #16]
 800f10e:	bf0c      	ite	eq
 800f110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f114:	2500      	movne	r5, #0
 800f116:	4293      	cmp	r3, r2
 800f118:	bfc4      	itt	gt
 800f11a:	1a9b      	subgt	r3, r3, r2
 800f11c:	18ed      	addgt	r5, r5, r3
 800f11e:	2600      	movs	r6, #0
 800f120:	341a      	adds	r4, #26
 800f122:	42b5      	cmp	r5, r6
 800f124:	d11a      	bne.n	800f15c <_printf_common+0xc8>
 800f126:	2000      	movs	r0, #0
 800f128:	e008      	b.n	800f13c <_printf_common+0xa8>
 800f12a:	2301      	movs	r3, #1
 800f12c:	4652      	mov	r2, sl
 800f12e:	4649      	mov	r1, r9
 800f130:	4638      	mov	r0, r7
 800f132:	47c0      	blx	r8
 800f134:	3001      	adds	r0, #1
 800f136:	d103      	bne.n	800f140 <_printf_common+0xac>
 800f138:	f04f 30ff 	mov.w	r0, #4294967295
 800f13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f140:	3501      	adds	r5, #1
 800f142:	e7c6      	b.n	800f0d2 <_printf_common+0x3e>
 800f144:	18e1      	adds	r1, r4, r3
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	2030      	movs	r0, #48	; 0x30
 800f14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f14e:	4422      	add	r2, r4
 800f150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f158:	3302      	adds	r3, #2
 800f15a:	e7c7      	b.n	800f0ec <_printf_common+0x58>
 800f15c:	2301      	movs	r3, #1
 800f15e:	4622      	mov	r2, r4
 800f160:	4649      	mov	r1, r9
 800f162:	4638      	mov	r0, r7
 800f164:	47c0      	blx	r8
 800f166:	3001      	adds	r0, #1
 800f168:	d0e6      	beq.n	800f138 <_printf_common+0xa4>
 800f16a:	3601      	adds	r6, #1
 800f16c:	e7d9      	b.n	800f122 <_printf_common+0x8e>
	...

0800f170 <_printf_i>:
 800f170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f174:	7e0f      	ldrb	r7, [r1, #24]
 800f176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f178:	2f78      	cmp	r7, #120	; 0x78
 800f17a:	4691      	mov	r9, r2
 800f17c:	4680      	mov	r8, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	469a      	mov	sl, r3
 800f182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f186:	d807      	bhi.n	800f198 <_printf_i+0x28>
 800f188:	2f62      	cmp	r7, #98	; 0x62
 800f18a:	d80a      	bhi.n	800f1a2 <_printf_i+0x32>
 800f18c:	2f00      	cmp	r7, #0
 800f18e:	f000 80d8 	beq.w	800f342 <_printf_i+0x1d2>
 800f192:	2f58      	cmp	r7, #88	; 0x58
 800f194:	f000 80a3 	beq.w	800f2de <_printf_i+0x16e>
 800f198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1a0:	e03a      	b.n	800f218 <_printf_i+0xa8>
 800f1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1a6:	2b15      	cmp	r3, #21
 800f1a8:	d8f6      	bhi.n	800f198 <_printf_i+0x28>
 800f1aa:	a101      	add	r1, pc, #4	; (adr r1, 800f1b0 <_printf_i+0x40>)
 800f1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1b0:	0800f209 	.word	0x0800f209
 800f1b4:	0800f21d 	.word	0x0800f21d
 800f1b8:	0800f199 	.word	0x0800f199
 800f1bc:	0800f199 	.word	0x0800f199
 800f1c0:	0800f199 	.word	0x0800f199
 800f1c4:	0800f199 	.word	0x0800f199
 800f1c8:	0800f21d 	.word	0x0800f21d
 800f1cc:	0800f199 	.word	0x0800f199
 800f1d0:	0800f199 	.word	0x0800f199
 800f1d4:	0800f199 	.word	0x0800f199
 800f1d8:	0800f199 	.word	0x0800f199
 800f1dc:	0800f329 	.word	0x0800f329
 800f1e0:	0800f24d 	.word	0x0800f24d
 800f1e4:	0800f30b 	.word	0x0800f30b
 800f1e8:	0800f199 	.word	0x0800f199
 800f1ec:	0800f199 	.word	0x0800f199
 800f1f0:	0800f34b 	.word	0x0800f34b
 800f1f4:	0800f199 	.word	0x0800f199
 800f1f8:	0800f24d 	.word	0x0800f24d
 800f1fc:	0800f199 	.word	0x0800f199
 800f200:	0800f199 	.word	0x0800f199
 800f204:	0800f313 	.word	0x0800f313
 800f208:	682b      	ldr	r3, [r5, #0]
 800f20a:	1d1a      	adds	r2, r3, #4
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	602a      	str	r2, [r5, #0]
 800f210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f218:	2301      	movs	r3, #1
 800f21a:	e0a3      	b.n	800f364 <_printf_i+0x1f4>
 800f21c:	6820      	ldr	r0, [r4, #0]
 800f21e:	6829      	ldr	r1, [r5, #0]
 800f220:	0606      	lsls	r6, r0, #24
 800f222:	f101 0304 	add.w	r3, r1, #4
 800f226:	d50a      	bpl.n	800f23e <_printf_i+0xce>
 800f228:	680e      	ldr	r6, [r1, #0]
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	2e00      	cmp	r6, #0
 800f22e:	da03      	bge.n	800f238 <_printf_i+0xc8>
 800f230:	232d      	movs	r3, #45	; 0x2d
 800f232:	4276      	negs	r6, r6
 800f234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f238:	485e      	ldr	r0, [pc, #376]	; (800f3b4 <_printf_i+0x244>)
 800f23a:	230a      	movs	r3, #10
 800f23c:	e019      	b.n	800f272 <_printf_i+0x102>
 800f23e:	680e      	ldr	r6, [r1, #0]
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f246:	bf18      	it	ne
 800f248:	b236      	sxthne	r6, r6
 800f24a:	e7ef      	b.n	800f22c <_printf_i+0xbc>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	6820      	ldr	r0, [r4, #0]
 800f250:	1d19      	adds	r1, r3, #4
 800f252:	6029      	str	r1, [r5, #0]
 800f254:	0601      	lsls	r1, r0, #24
 800f256:	d501      	bpl.n	800f25c <_printf_i+0xec>
 800f258:	681e      	ldr	r6, [r3, #0]
 800f25a:	e002      	b.n	800f262 <_printf_i+0xf2>
 800f25c:	0646      	lsls	r6, r0, #25
 800f25e:	d5fb      	bpl.n	800f258 <_printf_i+0xe8>
 800f260:	881e      	ldrh	r6, [r3, #0]
 800f262:	4854      	ldr	r0, [pc, #336]	; (800f3b4 <_printf_i+0x244>)
 800f264:	2f6f      	cmp	r7, #111	; 0x6f
 800f266:	bf0c      	ite	eq
 800f268:	2308      	moveq	r3, #8
 800f26a:	230a      	movne	r3, #10
 800f26c:	2100      	movs	r1, #0
 800f26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f272:	6865      	ldr	r5, [r4, #4]
 800f274:	60a5      	str	r5, [r4, #8]
 800f276:	2d00      	cmp	r5, #0
 800f278:	bfa2      	ittt	ge
 800f27a:	6821      	ldrge	r1, [r4, #0]
 800f27c:	f021 0104 	bicge.w	r1, r1, #4
 800f280:	6021      	strge	r1, [r4, #0]
 800f282:	b90e      	cbnz	r6, 800f288 <_printf_i+0x118>
 800f284:	2d00      	cmp	r5, #0
 800f286:	d04d      	beq.n	800f324 <_printf_i+0x1b4>
 800f288:	4615      	mov	r5, r2
 800f28a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f28e:	fb03 6711 	mls	r7, r3, r1, r6
 800f292:	5dc7      	ldrb	r7, [r0, r7]
 800f294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f298:	4637      	mov	r7, r6
 800f29a:	42bb      	cmp	r3, r7
 800f29c:	460e      	mov	r6, r1
 800f29e:	d9f4      	bls.n	800f28a <_printf_i+0x11a>
 800f2a0:	2b08      	cmp	r3, #8
 800f2a2:	d10b      	bne.n	800f2bc <_printf_i+0x14c>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	07de      	lsls	r6, r3, #31
 800f2a8:	d508      	bpl.n	800f2bc <_printf_i+0x14c>
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	6861      	ldr	r1, [r4, #4]
 800f2ae:	4299      	cmp	r1, r3
 800f2b0:	bfde      	ittt	le
 800f2b2:	2330      	movle	r3, #48	; 0x30
 800f2b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2bc:	1b52      	subs	r2, r2, r5
 800f2be:	6122      	str	r2, [r4, #16]
 800f2c0:	f8cd a000 	str.w	sl, [sp]
 800f2c4:	464b      	mov	r3, r9
 800f2c6:	aa03      	add	r2, sp, #12
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	f7ff fee2 	bl	800f094 <_printf_common>
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	d14c      	bne.n	800f36e <_printf_i+0x1fe>
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d8:	b004      	add	sp, #16
 800f2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2de:	4835      	ldr	r0, [pc, #212]	; (800f3b4 <_printf_i+0x244>)
 800f2e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f2e4:	6829      	ldr	r1, [r5, #0]
 800f2e6:	6823      	ldr	r3, [r4, #0]
 800f2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2ec:	6029      	str	r1, [r5, #0]
 800f2ee:	061d      	lsls	r5, r3, #24
 800f2f0:	d514      	bpl.n	800f31c <_printf_i+0x1ac>
 800f2f2:	07df      	lsls	r7, r3, #31
 800f2f4:	bf44      	itt	mi
 800f2f6:	f043 0320 	orrmi.w	r3, r3, #32
 800f2fa:	6023      	strmi	r3, [r4, #0]
 800f2fc:	b91e      	cbnz	r6, 800f306 <_printf_i+0x196>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	f023 0320 	bic.w	r3, r3, #32
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	2310      	movs	r3, #16
 800f308:	e7b0      	b.n	800f26c <_printf_i+0xfc>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	f043 0320 	orr.w	r3, r3, #32
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	2378      	movs	r3, #120	; 0x78
 800f314:	4828      	ldr	r0, [pc, #160]	; (800f3b8 <_printf_i+0x248>)
 800f316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f31a:	e7e3      	b.n	800f2e4 <_printf_i+0x174>
 800f31c:	0659      	lsls	r1, r3, #25
 800f31e:	bf48      	it	mi
 800f320:	b2b6      	uxthmi	r6, r6
 800f322:	e7e6      	b.n	800f2f2 <_printf_i+0x182>
 800f324:	4615      	mov	r5, r2
 800f326:	e7bb      	b.n	800f2a0 <_printf_i+0x130>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	6826      	ldr	r6, [r4, #0]
 800f32c:	6961      	ldr	r1, [r4, #20]
 800f32e:	1d18      	adds	r0, r3, #4
 800f330:	6028      	str	r0, [r5, #0]
 800f332:	0635      	lsls	r5, r6, #24
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	d501      	bpl.n	800f33c <_printf_i+0x1cc>
 800f338:	6019      	str	r1, [r3, #0]
 800f33a:	e002      	b.n	800f342 <_printf_i+0x1d2>
 800f33c:	0670      	lsls	r0, r6, #25
 800f33e:	d5fb      	bpl.n	800f338 <_printf_i+0x1c8>
 800f340:	8019      	strh	r1, [r3, #0]
 800f342:	2300      	movs	r3, #0
 800f344:	6123      	str	r3, [r4, #16]
 800f346:	4615      	mov	r5, r2
 800f348:	e7ba      	b.n	800f2c0 <_printf_i+0x150>
 800f34a:	682b      	ldr	r3, [r5, #0]
 800f34c:	1d1a      	adds	r2, r3, #4
 800f34e:	602a      	str	r2, [r5, #0]
 800f350:	681d      	ldr	r5, [r3, #0]
 800f352:	6862      	ldr	r2, [r4, #4]
 800f354:	2100      	movs	r1, #0
 800f356:	4628      	mov	r0, r5
 800f358:	f7f0 ff3a 	bl	80001d0 <memchr>
 800f35c:	b108      	cbz	r0, 800f362 <_printf_i+0x1f2>
 800f35e:	1b40      	subs	r0, r0, r5
 800f360:	6060      	str	r0, [r4, #4]
 800f362:	6863      	ldr	r3, [r4, #4]
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	2300      	movs	r3, #0
 800f368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f36c:	e7a8      	b.n	800f2c0 <_printf_i+0x150>
 800f36e:	6923      	ldr	r3, [r4, #16]
 800f370:	462a      	mov	r2, r5
 800f372:	4649      	mov	r1, r9
 800f374:	4640      	mov	r0, r8
 800f376:	47d0      	blx	sl
 800f378:	3001      	adds	r0, #1
 800f37a:	d0ab      	beq.n	800f2d4 <_printf_i+0x164>
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	079b      	lsls	r3, r3, #30
 800f380:	d413      	bmi.n	800f3aa <_printf_i+0x23a>
 800f382:	68e0      	ldr	r0, [r4, #12]
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	4298      	cmp	r0, r3
 800f388:	bfb8      	it	lt
 800f38a:	4618      	movlt	r0, r3
 800f38c:	e7a4      	b.n	800f2d8 <_printf_i+0x168>
 800f38e:	2301      	movs	r3, #1
 800f390:	4632      	mov	r2, r6
 800f392:	4649      	mov	r1, r9
 800f394:	4640      	mov	r0, r8
 800f396:	47d0      	blx	sl
 800f398:	3001      	adds	r0, #1
 800f39a:	d09b      	beq.n	800f2d4 <_printf_i+0x164>
 800f39c:	3501      	adds	r5, #1
 800f39e:	68e3      	ldr	r3, [r4, #12]
 800f3a0:	9903      	ldr	r1, [sp, #12]
 800f3a2:	1a5b      	subs	r3, r3, r1
 800f3a4:	42ab      	cmp	r3, r5
 800f3a6:	dcf2      	bgt.n	800f38e <_printf_i+0x21e>
 800f3a8:	e7eb      	b.n	800f382 <_printf_i+0x212>
 800f3aa:	2500      	movs	r5, #0
 800f3ac:	f104 0619 	add.w	r6, r4, #25
 800f3b0:	e7f5      	b.n	800f39e <_printf_i+0x22e>
 800f3b2:	bf00      	nop
 800f3b4:	080125d9 	.word	0x080125d9
 800f3b8:	080125ea 	.word	0x080125ea

0800f3bc <_sbrk_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	; (800f3d8 <_sbrk_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f1 fa7e 	bl	80008c8 <_sbrk>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_sbrk_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_sbrk_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	200083e8 	.word	0x200083e8

0800f3dc <__sread>:
 800f3dc:	b510      	push	{r4, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e4:	f000 fa6e 	bl	800f8c4 <_read_r>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	bfab      	itete	ge
 800f3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800f3f0:	181b      	addge	r3, r3, r0
 800f3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3f6:	bfac      	ite	ge
 800f3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3fa:	81a3      	strhlt	r3, [r4, #12]
 800f3fc:	bd10      	pop	{r4, pc}

0800f3fe <__swrite>:
 800f3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f402:	461f      	mov	r7, r3
 800f404:	898b      	ldrh	r3, [r1, #12]
 800f406:	05db      	lsls	r3, r3, #23
 800f408:	4605      	mov	r5, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	4616      	mov	r6, r2
 800f40e:	d505      	bpl.n	800f41c <__swrite+0x1e>
 800f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f414:	2302      	movs	r3, #2
 800f416:	2200      	movs	r2, #0
 800f418:	f000 f9d0 	bl	800f7bc <_lseek_r>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	4632      	mov	r2, r6
 800f42a:	463b      	mov	r3, r7
 800f42c:	4628      	mov	r0, r5
 800f42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	f000 b869 	b.w	800f508 <_write_r>

0800f436 <__sseek>:
 800f436:	b510      	push	{r4, lr}
 800f438:	460c      	mov	r4, r1
 800f43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f43e:	f000 f9bd 	bl	800f7bc <_lseek_r>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	bf15      	itete	ne
 800f448:	6560      	strne	r0, [r4, #84]	; 0x54
 800f44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f452:	81a3      	strheq	r3, [r4, #12]
 800f454:	bf18      	it	ne
 800f456:	81a3      	strhne	r3, [r4, #12]
 800f458:	bd10      	pop	{r4, pc}

0800f45a <__sclose>:
 800f45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45e:	f000 b8db 	b.w	800f618 <_close_r>
	...

0800f464 <__swbuf_r>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	460e      	mov	r6, r1
 800f468:	4614      	mov	r4, r2
 800f46a:	4605      	mov	r5, r0
 800f46c:	b118      	cbz	r0, 800f476 <__swbuf_r+0x12>
 800f46e:	6983      	ldr	r3, [r0, #24]
 800f470:	b90b      	cbnz	r3, 800f476 <__swbuf_r+0x12>
 800f472:	f7ff fb1b 	bl	800eaac <__sinit>
 800f476:	4b21      	ldr	r3, [pc, #132]	; (800f4fc <__swbuf_r+0x98>)
 800f478:	429c      	cmp	r4, r3
 800f47a:	d12b      	bne.n	800f4d4 <__swbuf_r+0x70>
 800f47c:	686c      	ldr	r4, [r5, #4]
 800f47e:	69a3      	ldr	r3, [r4, #24]
 800f480:	60a3      	str	r3, [r4, #8]
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	071a      	lsls	r2, r3, #28
 800f486:	d52f      	bpl.n	800f4e8 <__swbuf_r+0x84>
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	b36b      	cbz	r3, 800f4e8 <__swbuf_r+0x84>
 800f48c:	6923      	ldr	r3, [r4, #16]
 800f48e:	6820      	ldr	r0, [r4, #0]
 800f490:	1ac0      	subs	r0, r0, r3
 800f492:	6963      	ldr	r3, [r4, #20]
 800f494:	b2f6      	uxtb	r6, r6
 800f496:	4283      	cmp	r3, r0
 800f498:	4637      	mov	r7, r6
 800f49a:	dc04      	bgt.n	800f4a6 <__swbuf_r+0x42>
 800f49c:	4621      	mov	r1, r4
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f000 f950 	bl	800f744 <_fflush_r>
 800f4a4:	bb30      	cbnz	r0, 800f4f4 <__swbuf_r+0x90>
 800f4a6:	68a3      	ldr	r3, [r4, #8]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	60a3      	str	r3, [r4, #8]
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	6022      	str	r2, [r4, #0]
 800f4b2:	701e      	strb	r6, [r3, #0]
 800f4b4:	6963      	ldr	r3, [r4, #20]
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	4283      	cmp	r3, r0
 800f4ba:	d004      	beq.n	800f4c6 <__swbuf_r+0x62>
 800f4bc:	89a3      	ldrh	r3, [r4, #12]
 800f4be:	07db      	lsls	r3, r3, #31
 800f4c0:	d506      	bpl.n	800f4d0 <__swbuf_r+0x6c>
 800f4c2:	2e0a      	cmp	r6, #10
 800f4c4:	d104      	bne.n	800f4d0 <__swbuf_r+0x6c>
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	f000 f93b 	bl	800f744 <_fflush_r>
 800f4ce:	b988      	cbnz	r0, 800f4f4 <__swbuf_r+0x90>
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d4:	4b0a      	ldr	r3, [pc, #40]	; (800f500 <__swbuf_r+0x9c>)
 800f4d6:	429c      	cmp	r4, r3
 800f4d8:	d101      	bne.n	800f4de <__swbuf_r+0x7a>
 800f4da:	68ac      	ldr	r4, [r5, #8]
 800f4dc:	e7cf      	b.n	800f47e <__swbuf_r+0x1a>
 800f4de:	4b09      	ldr	r3, [pc, #36]	; (800f504 <__swbuf_r+0xa0>)
 800f4e0:	429c      	cmp	r4, r3
 800f4e2:	bf08      	it	eq
 800f4e4:	68ec      	ldreq	r4, [r5, #12]
 800f4e6:	e7ca      	b.n	800f47e <__swbuf_r+0x1a>
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f000 f81e 	bl	800f52c <__swsetup_r>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d0cb      	beq.n	800f48c <__swbuf_r+0x28>
 800f4f4:	f04f 37ff 	mov.w	r7, #4294967295
 800f4f8:	e7ea      	b.n	800f4d0 <__swbuf_r+0x6c>
 800f4fa:	bf00      	nop
 800f4fc:	08012588 	.word	0x08012588
 800f500:	080125a8 	.word	0x080125a8
 800f504:	08012568 	.word	0x08012568

0800f508 <_write_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_write_r+0x20>)
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	2200      	movs	r2, #0
 800f514:	602a      	str	r2, [r5, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	f7f1 f985 	bl	8000826 <_write>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_write_r+0x1e>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_write_r+0x1e>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	200083e8 	.word	0x200083e8

0800f52c <__swsetup_r>:
 800f52c:	4b32      	ldr	r3, [pc, #200]	; (800f5f8 <__swsetup_r+0xcc>)
 800f52e:	b570      	push	{r4, r5, r6, lr}
 800f530:	681d      	ldr	r5, [r3, #0]
 800f532:	4606      	mov	r6, r0
 800f534:	460c      	mov	r4, r1
 800f536:	b125      	cbz	r5, 800f542 <__swsetup_r+0x16>
 800f538:	69ab      	ldr	r3, [r5, #24]
 800f53a:	b913      	cbnz	r3, 800f542 <__swsetup_r+0x16>
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7ff fab5 	bl	800eaac <__sinit>
 800f542:	4b2e      	ldr	r3, [pc, #184]	; (800f5fc <__swsetup_r+0xd0>)
 800f544:	429c      	cmp	r4, r3
 800f546:	d10f      	bne.n	800f568 <__swsetup_r+0x3c>
 800f548:	686c      	ldr	r4, [r5, #4]
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f550:	0719      	lsls	r1, r3, #28
 800f552:	d42c      	bmi.n	800f5ae <__swsetup_r+0x82>
 800f554:	06dd      	lsls	r5, r3, #27
 800f556:	d411      	bmi.n	800f57c <__swsetup_r+0x50>
 800f558:	2309      	movs	r3, #9
 800f55a:	6033      	str	r3, [r6, #0]
 800f55c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f560:	81a3      	strh	r3, [r4, #12]
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	e03e      	b.n	800f5e6 <__swsetup_r+0xba>
 800f568:	4b25      	ldr	r3, [pc, #148]	; (800f600 <__swsetup_r+0xd4>)
 800f56a:	429c      	cmp	r4, r3
 800f56c:	d101      	bne.n	800f572 <__swsetup_r+0x46>
 800f56e:	68ac      	ldr	r4, [r5, #8]
 800f570:	e7eb      	b.n	800f54a <__swsetup_r+0x1e>
 800f572:	4b24      	ldr	r3, [pc, #144]	; (800f604 <__swsetup_r+0xd8>)
 800f574:	429c      	cmp	r4, r3
 800f576:	bf08      	it	eq
 800f578:	68ec      	ldreq	r4, [r5, #12]
 800f57a:	e7e6      	b.n	800f54a <__swsetup_r+0x1e>
 800f57c:	0758      	lsls	r0, r3, #29
 800f57e:	d512      	bpl.n	800f5a6 <__swsetup_r+0x7a>
 800f580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f582:	b141      	cbz	r1, 800f596 <__swsetup_r+0x6a>
 800f584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f588:	4299      	cmp	r1, r3
 800f58a:	d002      	beq.n	800f592 <__swsetup_r+0x66>
 800f58c:	4630      	mov	r0, r6
 800f58e:	f7ff fb47 	bl	800ec20 <_free_r>
 800f592:	2300      	movs	r3, #0
 800f594:	6363      	str	r3, [r4, #52]	; 0x34
 800f596:	89a3      	ldrh	r3, [r4, #12]
 800f598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f59c:	81a3      	strh	r3, [r4, #12]
 800f59e:	2300      	movs	r3, #0
 800f5a0:	6063      	str	r3, [r4, #4]
 800f5a2:	6923      	ldr	r3, [r4, #16]
 800f5a4:	6023      	str	r3, [r4, #0]
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	f043 0308 	orr.w	r3, r3, #8
 800f5ac:	81a3      	strh	r3, [r4, #12]
 800f5ae:	6923      	ldr	r3, [r4, #16]
 800f5b0:	b94b      	cbnz	r3, 800f5c6 <__swsetup_r+0x9a>
 800f5b2:	89a3      	ldrh	r3, [r4, #12]
 800f5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5bc:	d003      	beq.n	800f5c6 <__swsetup_r+0x9a>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f000 f933 	bl	800f82c <__smakebuf_r>
 800f5c6:	89a0      	ldrh	r0, [r4, #12]
 800f5c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5cc:	f010 0301 	ands.w	r3, r0, #1
 800f5d0:	d00a      	beq.n	800f5e8 <__swsetup_r+0xbc>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60a3      	str	r3, [r4, #8]
 800f5d6:	6963      	ldr	r3, [r4, #20]
 800f5d8:	425b      	negs	r3, r3
 800f5da:	61a3      	str	r3, [r4, #24]
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	b943      	cbnz	r3, 800f5f2 <__swsetup_r+0xc6>
 800f5e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5e4:	d1ba      	bne.n	800f55c <__swsetup_r+0x30>
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	0781      	lsls	r1, r0, #30
 800f5ea:	bf58      	it	pl
 800f5ec:	6963      	ldrpl	r3, [r4, #20]
 800f5ee:	60a3      	str	r3, [r4, #8]
 800f5f0:	e7f4      	b.n	800f5dc <__swsetup_r+0xb0>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	e7f7      	b.n	800f5e6 <__swsetup_r+0xba>
 800f5f6:	bf00      	nop
 800f5f8:	2000002c 	.word	0x2000002c
 800f5fc:	08012588 	.word	0x08012588
 800f600:	080125a8 	.word	0x080125a8
 800f604:	08012568 	.word	0x08012568

0800f608 <abort>:
 800f608:	b508      	push	{r3, lr}
 800f60a:	2006      	movs	r0, #6
 800f60c:	f000 f994 	bl	800f938 <raise>
 800f610:	2001      	movs	r0, #1
 800f612:	f7f1 f8e1 	bl	80007d8 <_exit>
	...

0800f618 <_close_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	4d06      	ldr	r5, [pc, #24]	; (800f634 <_close_r+0x1c>)
 800f61c:	2300      	movs	r3, #0
 800f61e:	4604      	mov	r4, r0
 800f620:	4608      	mov	r0, r1
 800f622:	602b      	str	r3, [r5, #0]
 800f624:	f7f1 f91b 	bl	800085e <_close>
 800f628:	1c43      	adds	r3, r0, #1
 800f62a:	d102      	bne.n	800f632 <_close_r+0x1a>
 800f62c:	682b      	ldr	r3, [r5, #0]
 800f62e:	b103      	cbz	r3, 800f632 <_close_r+0x1a>
 800f630:	6023      	str	r3, [r4, #0]
 800f632:	bd38      	pop	{r3, r4, r5, pc}
 800f634:	200083e8 	.word	0x200083e8

0800f638 <__sflush_r>:
 800f638:	898a      	ldrh	r2, [r1, #12]
 800f63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f63e:	4605      	mov	r5, r0
 800f640:	0710      	lsls	r0, r2, #28
 800f642:	460c      	mov	r4, r1
 800f644:	d458      	bmi.n	800f6f8 <__sflush_r+0xc0>
 800f646:	684b      	ldr	r3, [r1, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dc05      	bgt.n	800f658 <__sflush_r+0x20>
 800f64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f64e:	2b00      	cmp	r3, #0
 800f650:	dc02      	bgt.n	800f658 <__sflush_r+0x20>
 800f652:	2000      	movs	r0, #0
 800f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d0f9      	beq.n	800f652 <__sflush_r+0x1a>
 800f65e:	2300      	movs	r3, #0
 800f660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f664:	682f      	ldr	r7, [r5, #0]
 800f666:	602b      	str	r3, [r5, #0]
 800f668:	d032      	beq.n	800f6d0 <__sflush_r+0x98>
 800f66a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	075a      	lsls	r2, r3, #29
 800f670:	d505      	bpl.n	800f67e <__sflush_r+0x46>
 800f672:	6863      	ldr	r3, [r4, #4]
 800f674:	1ac0      	subs	r0, r0, r3
 800f676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f678:	b10b      	cbz	r3, 800f67e <__sflush_r+0x46>
 800f67a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f67c:	1ac0      	subs	r0, r0, r3
 800f67e:	2300      	movs	r3, #0
 800f680:	4602      	mov	r2, r0
 800f682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f684:	6a21      	ldr	r1, [r4, #32]
 800f686:	4628      	mov	r0, r5
 800f688:	47b0      	blx	r6
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	d106      	bne.n	800f69e <__sflush_r+0x66>
 800f690:	6829      	ldr	r1, [r5, #0]
 800f692:	291d      	cmp	r1, #29
 800f694:	d82c      	bhi.n	800f6f0 <__sflush_r+0xb8>
 800f696:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <__sflush_r+0x108>)
 800f698:	40ca      	lsrs	r2, r1
 800f69a:	07d6      	lsls	r6, r2, #31
 800f69c:	d528      	bpl.n	800f6f0 <__sflush_r+0xb8>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	6062      	str	r2, [r4, #4]
 800f6a2:	04d9      	lsls	r1, r3, #19
 800f6a4:	6922      	ldr	r2, [r4, #16]
 800f6a6:	6022      	str	r2, [r4, #0]
 800f6a8:	d504      	bpl.n	800f6b4 <__sflush_r+0x7c>
 800f6aa:	1c42      	adds	r2, r0, #1
 800f6ac:	d101      	bne.n	800f6b2 <__sflush_r+0x7a>
 800f6ae:	682b      	ldr	r3, [r5, #0]
 800f6b0:	b903      	cbnz	r3, 800f6b4 <__sflush_r+0x7c>
 800f6b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6b6:	602f      	str	r7, [r5, #0]
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	d0ca      	beq.n	800f652 <__sflush_r+0x1a>
 800f6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6c0:	4299      	cmp	r1, r3
 800f6c2:	d002      	beq.n	800f6ca <__sflush_r+0x92>
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7ff faab 	bl	800ec20 <_free_r>
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f6ce:	e7c1      	b.n	800f654 <__sflush_r+0x1c>
 800f6d0:	6a21      	ldr	r1, [r4, #32]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b0      	blx	r6
 800f6d8:	1c41      	adds	r1, r0, #1
 800f6da:	d1c7      	bne.n	800f66c <__sflush_r+0x34>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0c4      	beq.n	800f66c <__sflush_r+0x34>
 800f6e2:	2b1d      	cmp	r3, #29
 800f6e4:	d001      	beq.n	800f6ea <__sflush_r+0xb2>
 800f6e6:	2b16      	cmp	r3, #22
 800f6e8:	d101      	bne.n	800f6ee <__sflush_r+0xb6>
 800f6ea:	602f      	str	r7, [r5, #0]
 800f6ec:	e7b1      	b.n	800f652 <__sflush_r+0x1a>
 800f6ee:	89a3      	ldrh	r3, [r4, #12]
 800f6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6f4:	81a3      	strh	r3, [r4, #12]
 800f6f6:	e7ad      	b.n	800f654 <__sflush_r+0x1c>
 800f6f8:	690f      	ldr	r7, [r1, #16]
 800f6fa:	2f00      	cmp	r7, #0
 800f6fc:	d0a9      	beq.n	800f652 <__sflush_r+0x1a>
 800f6fe:	0793      	lsls	r3, r2, #30
 800f700:	680e      	ldr	r6, [r1, #0]
 800f702:	bf08      	it	eq
 800f704:	694b      	ldreq	r3, [r1, #20]
 800f706:	600f      	str	r7, [r1, #0]
 800f708:	bf18      	it	ne
 800f70a:	2300      	movne	r3, #0
 800f70c:	eba6 0807 	sub.w	r8, r6, r7
 800f710:	608b      	str	r3, [r1, #8]
 800f712:	f1b8 0f00 	cmp.w	r8, #0
 800f716:	dd9c      	ble.n	800f652 <__sflush_r+0x1a>
 800f718:	6a21      	ldr	r1, [r4, #32]
 800f71a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f71c:	4643      	mov	r3, r8
 800f71e:	463a      	mov	r2, r7
 800f720:	4628      	mov	r0, r5
 800f722:	47b0      	blx	r6
 800f724:	2800      	cmp	r0, #0
 800f726:	dc06      	bgt.n	800f736 <__sflush_r+0xfe>
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	e78e      	b.n	800f654 <__sflush_r+0x1c>
 800f736:	4407      	add	r7, r0
 800f738:	eba8 0800 	sub.w	r8, r8, r0
 800f73c:	e7e9      	b.n	800f712 <__sflush_r+0xda>
 800f73e:	bf00      	nop
 800f740:	20400001 	.word	0x20400001

0800f744 <_fflush_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	690b      	ldr	r3, [r1, #16]
 800f748:	4605      	mov	r5, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	b913      	cbnz	r3, 800f754 <_fflush_r+0x10>
 800f74e:	2500      	movs	r5, #0
 800f750:	4628      	mov	r0, r5
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	b118      	cbz	r0, 800f75e <_fflush_r+0x1a>
 800f756:	6983      	ldr	r3, [r0, #24]
 800f758:	b90b      	cbnz	r3, 800f75e <_fflush_r+0x1a>
 800f75a:	f7ff f9a7 	bl	800eaac <__sinit>
 800f75e:	4b14      	ldr	r3, [pc, #80]	; (800f7b0 <_fflush_r+0x6c>)
 800f760:	429c      	cmp	r4, r3
 800f762:	d11b      	bne.n	800f79c <_fflush_r+0x58>
 800f764:	686c      	ldr	r4, [r5, #4]
 800f766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0ef      	beq.n	800f74e <_fflush_r+0xa>
 800f76e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f770:	07d0      	lsls	r0, r2, #31
 800f772:	d404      	bmi.n	800f77e <_fflush_r+0x3a>
 800f774:	0599      	lsls	r1, r3, #22
 800f776:	d402      	bmi.n	800f77e <_fflush_r+0x3a>
 800f778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f77a:	f7ff fa47 	bl	800ec0c <__retarget_lock_acquire_recursive>
 800f77e:	4628      	mov	r0, r5
 800f780:	4621      	mov	r1, r4
 800f782:	f7ff ff59 	bl	800f638 <__sflush_r>
 800f786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f788:	07da      	lsls	r2, r3, #31
 800f78a:	4605      	mov	r5, r0
 800f78c:	d4e0      	bmi.n	800f750 <_fflush_r+0xc>
 800f78e:	89a3      	ldrh	r3, [r4, #12]
 800f790:	059b      	lsls	r3, r3, #22
 800f792:	d4dd      	bmi.n	800f750 <_fflush_r+0xc>
 800f794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f796:	f7ff fa3a 	bl	800ec0e <__retarget_lock_release_recursive>
 800f79a:	e7d9      	b.n	800f750 <_fflush_r+0xc>
 800f79c:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <_fflush_r+0x70>)
 800f79e:	429c      	cmp	r4, r3
 800f7a0:	d101      	bne.n	800f7a6 <_fflush_r+0x62>
 800f7a2:	68ac      	ldr	r4, [r5, #8]
 800f7a4:	e7df      	b.n	800f766 <_fflush_r+0x22>
 800f7a6:	4b04      	ldr	r3, [pc, #16]	; (800f7b8 <_fflush_r+0x74>)
 800f7a8:	429c      	cmp	r4, r3
 800f7aa:	bf08      	it	eq
 800f7ac:	68ec      	ldreq	r4, [r5, #12]
 800f7ae:	e7da      	b.n	800f766 <_fflush_r+0x22>
 800f7b0:	08012588 	.word	0x08012588
 800f7b4:	080125a8 	.word	0x080125a8
 800f7b8:	08012568 	.word	0x08012568

0800f7bc <_lseek_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	; (800f7dc <_lseek_r+0x20>)
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4608      	mov	r0, r1
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f7f1 f86e 	bl	80008ac <_lseek>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_lseek_r+0x1e>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_lseek_r+0x1e>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	200083e8 	.word	0x200083e8

0800f7e0 <__swhatbuf_r>:
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	460e      	mov	r6, r1
 800f7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7e8:	2900      	cmp	r1, #0
 800f7ea:	b096      	sub	sp, #88	; 0x58
 800f7ec:	4614      	mov	r4, r2
 800f7ee:	461d      	mov	r5, r3
 800f7f0:	da08      	bge.n	800f804 <__swhatbuf_r+0x24>
 800f7f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	061a      	lsls	r2, r3, #24
 800f7fc:	d410      	bmi.n	800f820 <__swhatbuf_r+0x40>
 800f7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f802:	e00e      	b.n	800f822 <__swhatbuf_r+0x42>
 800f804:	466a      	mov	r2, sp
 800f806:	f000 f8b3 	bl	800f970 <_fstat_r>
 800f80a:	2800      	cmp	r0, #0
 800f80c:	dbf1      	blt.n	800f7f2 <__swhatbuf_r+0x12>
 800f80e:	9a01      	ldr	r2, [sp, #4]
 800f810:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f814:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f818:	425a      	negs	r2, r3
 800f81a:	415a      	adcs	r2, r3
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	e7ee      	b.n	800f7fe <__swhatbuf_r+0x1e>
 800f820:	2340      	movs	r3, #64	; 0x40
 800f822:	2000      	movs	r0, #0
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	b016      	add	sp, #88	; 0x58
 800f828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f82c <__smakebuf_r>:
 800f82c:	898b      	ldrh	r3, [r1, #12]
 800f82e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f830:	079d      	lsls	r5, r3, #30
 800f832:	4606      	mov	r6, r0
 800f834:	460c      	mov	r4, r1
 800f836:	d507      	bpl.n	800f848 <__smakebuf_r+0x1c>
 800f838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f83c:	6023      	str	r3, [r4, #0]
 800f83e:	6123      	str	r3, [r4, #16]
 800f840:	2301      	movs	r3, #1
 800f842:	6163      	str	r3, [r4, #20]
 800f844:	b002      	add	sp, #8
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	ab01      	add	r3, sp, #4
 800f84a:	466a      	mov	r2, sp
 800f84c:	f7ff ffc8 	bl	800f7e0 <__swhatbuf_r>
 800f850:	9900      	ldr	r1, [sp, #0]
 800f852:	4605      	mov	r5, r0
 800f854:	4630      	mov	r0, r6
 800f856:	f7ff fa4f 	bl	800ecf8 <_malloc_r>
 800f85a:	b948      	cbnz	r0, 800f870 <__smakebuf_r+0x44>
 800f85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f860:	059a      	lsls	r2, r3, #22
 800f862:	d4ef      	bmi.n	800f844 <__smakebuf_r+0x18>
 800f864:	f023 0303 	bic.w	r3, r3, #3
 800f868:	f043 0302 	orr.w	r3, r3, #2
 800f86c:	81a3      	strh	r3, [r4, #12]
 800f86e:	e7e3      	b.n	800f838 <__smakebuf_r+0xc>
 800f870:	4b0d      	ldr	r3, [pc, #52]	; (800f8a8 <__smakebuf_r+0x7c>)
 800f872:	62b3      	str	r3, [r6, #40]	; 0x28
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	6020      	str	r0, [r4, #0]
 800f878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	9b00      	ldr	r3, [sp, #0]
 800f880:	6163      	str	r3, [r4, #20]
 800f882:	9b01      	ldr	r3, [sp, #4]
 800f884:	6120      	str	r0, [r4, #16]
 800f886:	b15b      	cbz	r3, 800f8a0 <__smakebuf_r+0x74>
 800f888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f88c:	4630      	mov	r0, r6
 800f88e:	f000 f881 	bl	800f994 <_isatty_r>
 800f892:	b128      	cbz	r0, 800f8a0 <__smakebuf_r+0x74>
 800f894:	89a3      	ldrh	r3, [r4, #12]
 800f896:	f023 0303 	bic.w	r3, r3, #3
 800f89a:	f043 0301 	orr.w	r3, r3, #1
 800f89e:	81a3      	strh	r3, [r4, #12]
 800f8a0:	89a0      	ldrh	r0, [r4, #12]
 800f8a2:	4305      	orrs	r5, r0
 800f8a4:	81a5      	strh	r5, [r4, #12]
 800f8a6:	e7cd      	b.n	800f844 <__smakebuf_r+0x18>
 800f8a8:	0800ea45 	.word	0x0800ea45

0800f8ac <__malloc_lock>:
 800f8ac:	4801      	ldr	r0, [pc, #4]	; (800f8b4 <__malloc_lock+0x8>)
 800f8ae:	f7ff b9ad 	b.w	800ec0c <__retarget_lock_acquire_recursive>
 800f8b2:	bf00      	nop
 800f8b4:	200083ec 	.word	0x200083ec

0800f8b8 <__malloc_unlock>:
 800f8b8:	4801      	ldr	r0, [pc, #4]	; (800f8c0 <__malloc_unlock+0x8>)
 800f8ba:	f7ff b9a8 	b.w	800ec0e <__retarget_lock_release_recursive>
 800f8be:	bf00      	nop
 800f8c0:	200083ec 	.word	0x200083ec

0800f8c4 <_read_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d07      	ldr	r5, [pc, #28]	; (800f8e4 <_read_r+0x20>)
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	4608      	mov	r0, r1
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	602a      	str	r2, [r5, #0]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	f7f0 ff8a 	bl	80007ec <_read>
 800f8d8:	1c43      	adds	r3, r0, #1
 800f8da:	d102      	bne.n	800f8e2 <_read_r+0x1e>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	b103      	cbz	r3, 800f8e2 <_read_r+0x1e>
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	bd38      	pop	{r3, r4, r5, pc}
 800f8e4:	200083e8 	.word	0x200083e8

0800f8e8 <_raise_r>:
 800f8e8:	291f      	cmp	r1, #31
 800f8ea:	b538      	push	{r3, r4, r5, lr}
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	460d      	mov	r5, r1
 800f8f0:	d904      	bls.n	800f8fc <_raise_r+0x14>
 800f8f2:	2316      	movs	r3, #22
 800f8f4:	6003      	str	r3, [r0, #0]
 800f8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8fe:	b112      	cbz	r2, 800f906 <_raise_r+0x1e>
 800f900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f904:	b94b      	cbnz	r3, 800f91a <_raise_r+0x32>
 800f906:	4620      	mov	r0, r4
 800f908:	f000 f830 	bl	800f96c <_getpid_r>
 800f90c:	462a      	mov	r2, r5
 800f90e:	4601      	mov	r1, r0
 800f910:	4620      	mov	r0, r4
 800f912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f916:	f000 b817 	b.w	800f948 <_kill_r>
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d00a      	beq.n	800f934 <_raise_r+0x4c>
 800f91e:	1c59      	adds	r1, r3, #1
 800f920:	d103      	bne.n	800f92a <_raise_r+0x42>
 800f922:	2316      	movs	r3, #22
 800f924:	6003      	str	r3, [r0, #0]
 800f926:	2001      	movs	r0, #1
 800f928:	e7e7      	b.n	800f8fa <_raise_r+0x12>
 800f92a:	2400      	movs	r4, #0
 800f92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f930:	4628      	mov	r0, r5
 800f932:	4798      	blx	r3
 800f934:	2000      	movs	r0, #0
 800f936:	e7e0      	b.n	800f8fa <_raise_r+0x12>

0800f938 <raise>:
 800f938:	4b02      	ldr	r3, [pc, #8]	; (800f944 <raise+0xc>)
 800f93a:	4601      	mov	r1, r0
 800f93c:	6818      	ldr	r0, [r3, #0]
 800f93e:	f7ff bfd3 	b.w	800f8e8 <_raise_r>
 800f942:	bf00      	nop
 800f944:	2000002c 	.word	0x2000002c

0800f948 <_kill_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	4d07      	ldr	r5, [pc, #28]	; (800f968 <_kill_r+0x20>)
 800f94c:	2300      	movs	r3, #0
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	4611      	mov	r1, r2
 800f954:	602b      	str	r3, [r5, #0]
 800f956:	f7f0 ff2d 	bl	80007b4 <_kill>
 800f95a:	1c43      	adds	r3, r0, #1
 800f95c:	d102      	bne.n	800f964 <_kill_r+0x1c>
 800f95e:	682b      	ldr	r3, [r5, #0]
 800f960:	b103      	cbz	r3, 800f964 <_kill_r+0x1c>
 800f962:	6023      	str	r3, [r4, #0]
 800f964:	bd38      	pop	{r3, r4, r5, pc}
 800f966:	bf00      	nop
 800f968:	200083e8 	.word	0x200083e8

0800f96c <_getpid_r>:
 800f96c:	f7f0 bf1a 	b.w	80007a4 <_getpid>

0800f970 <_fstat_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d07      	ldr	r5, [pc, #28]	; (800f990 <_fstat_r+0x20>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	4611      	mov	r1, r2
 800f97c:	602b      	str	r3, [r5, #0]
 800f97e:	f7f0 ff7a 	bl	8000876 <_fstat>
 800f982:	1c43      	adds	r3, r0, #1
 800f984:	d102      	bne.n	800f98c <_fstat_r+0x1c>
 800f986:	682b      	ldr	r3, [r5, #0]
 800f988:	b103      	cbz	r3, 800f98c <_fstat_r+0x1c>
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	bd38      	pop	{r3, r4, r5, pc}
 800f98e:	bf00      	nop
 800f990:	200083e8 	.word	0x200083e8

0800f994 <_isatty_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4d06      	ldr	r5, [pc, #24]	; (800f9b0 <_isatty_r+0x1c>)
 800f998:	2300      	movs	r3, #0
 800f99a:	4604      	mov	r4, r0
 800f99c:	4608      	mov	r0, r1
 800f99e:	602b      	str	r3, [r5, #0]
 800f9a0:	f7f0 ff79 	bl	8000896 <_isatty>
 800f9a4:	1c43      	adds	r3, r0, #1
 800f9a6:	d102      	bne.n	800f9ae <_isatty_r+0x1a>
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	b103      	cbz	r3, 800f9ae <_isatty_r+0x1a>
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	bd38      	pop	{r3, r4, r5, pc}
 800f9b0:	200083e8 	.word	0x200083e8

0800f9b4 <_init>:
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	bf00      	nop
 800f9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ba:	bc08      	pop	{r3}
 800f9bc:	469e      	mov	lr, r3
 800f9be:	4770      	bx	lr

0800f9c0 <_fini>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	bf00      	nop
 800f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c6:	bc08      	pop	{r3}
 800f9c8:	469e      	mov	lr, r3
 800f9ca:	4770      	bx	lr
