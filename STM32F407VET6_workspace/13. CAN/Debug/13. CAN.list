
13. CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000444c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004650  08004650  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004658  08004658  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b58c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d44  00000000  00000000  0002b62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a8  00000000  00000000  0002dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020edb  00000000  00000000  0002e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1e9  00000000  00000000  0004f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c554f  00000000  00000000  0005a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f99b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024fc  00000000  00000000  0011f9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045c4 	.word	0x080045c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080045c4 	.word	0x080045c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_CAN1_Init+0x64>)
 800057a:	4a18      	ldr	r2, [pc, #96]	; (80005dc <MX_CAN1_Init+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_CAN1_Init+0x64>)
 8000580:	2215      	movs	r2, #21
 8000582:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_CAN1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_CAN1_Init+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_CAN1_Init+0x64>)
 8000592:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000596:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_CAN1_Init+0x64>)
 800059a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800059e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_CAN1_Init+0x64>)
 80005c6:	f000 fcb5 	bl	8000f34 <HAL_CAN_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005d0:	f000 fac2 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000fc 	.word	0x200000fc
 80005dc:	40006400 	.word	0x40006400

080005e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_CAN_MspInit+0x94>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d134      	bne.n	800066c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <HAL_CAN_MspInit+0x98>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <HAL_CAN_MspInit+0x98>)
 800060c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000610:	6413      	str	r3, [r2, #64]	; 0x40
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_CAN_MspInit+0x98>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_CAN_MspInit+0x98>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_CAN_MspInit+0x98>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_CAN_MspInit+0x98>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800063a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800064c:	2309      	movs	r3, #9
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <HAL_CAN_MspInit+0x9c>)
 8000658:	f001 fca8 	bl	8001fac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2014      	movs	r0, #20
 8000662:	f001 fbda 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000666:	2014      	movs	r0, #20
 8000668:	f001 fbf3 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40006400 	.word	0x40006400
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000

08000680 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fb97 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f979 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ffcf 	bl	8000680 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006e2:	f7ff ff47 	bl	8000574 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80006e6:	f000 faeb 	bl	8000cc0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 80006ea:	4b95      	ldr	r3, [pc, #596]	; (8000940 <main+0x270>)
 80006ec:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80006f0:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 80006f2:	4b93      	ldr	r3, [pc, #588]	; (8000940 <main+0x270>)
 80006f4:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80006f8:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 80006fa:	4b91      	ldr	r3, [pc, #580]	; (8000940 <main+0x270>)
 80006fc:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000700:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 8000702:	4b8f      	ldr	r3, [pc, #572]	; (8000940 <main+0x270>)
 8000704:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8000708:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800070a:	4b8d      	ldr	r3, [pc, #564]	; (8000940 <main+0x270>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000710:	4b8b      	ldr	r3, [pc, #556]	; (8000940 <main+0x270>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000716:	4b8a      	ldr	r3, [pc, #552]	; (8000940 <main+0x270>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 800071c:	4b88      	ldr	r3, [pc, #544]	; (8000940 <main+0x270>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 8000722:	4b87      	ldr	r3, [pc, #540]	; (8000940 <main+0x270>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8000728:	4985      	ldr	r1, [pc, #532]	; (8000940 <main+0x270>)
 800072a:	4886      	ldr	r0, [pc, #536]	; (8000944 <main+0x274>)
 800072c:	f000 fcfe 	bl	800112c <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000730:	2102      	movs	r1, #2
 8000732:	4884      	ldr	r0, [pc, #528]	; (8000944 <main+0x274>)
 8000734:	f001 f840 	bl	80017b8 <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan1);
 8000738:	4882      	ldr	r0, [pc, #520]	; (8000944 <main+0x274>)
 800073a:	f000 fdd7 	bl	80012ec <HAL_CAN_Start>

  HAL_UART_Receive_IT(&huart1, &uart_rx_data, sizeof(uart_rx_data));
 800073e:	2201      	movs	r2, #1
 8000740:	4981      	ldr	r1, [pc, #516]	; (8000948 <main+0x278>)
 8000742:	4882      	ldr	r0, [pc, #520]	; (800094c <main+0x27c>)
 8000744:	f002 fb05 	bl	8002d52 <HAL_UART_Receive_IT>

  char str[20] = {0};
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]

  while (1)
  {
	  if(can1_rx0_flag)
 8000758:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <main+0x280>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d035      	beq.n	80007ce <main+0xfe>
	  {
		  can1_rx0_flag = 0;
 8000762:	4b7b      	ldr	r3, [pc, #492]	; (8000950 <main+0x280>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "Rx ID: 0x%X\n", canRxHeader.StdId);
 8000768:	4b7a      	ldr	r3, [pc, #488]	; (8000954 <main+0x284>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	463b      	mov	r3, r7
 800076e:	497a      	ldr	r1, [pc, #488]	; (8000958 <main+0x288>)
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fab9 	bl	8003ce8 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000776:	4639      	mov	r1, r7
 8000778:	230a      	movs	r3, #10
 800077a:	2214      	movs	r2, #20
 800077c:	4873      	ldr	r0, [pc, #460]	; (800094c <main+0x27c>)
 800077e:	f002 fa56 	bl	8002c2e <HAL_UART_Transmit>

		  for(int i = 0; i < 8; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
 8000786:	e014      	b.n	80007b2 <main+0xe2>
		  {
			  sprintf(str, "Rx Data[%d]: 0x%X\n", i, can1Rx0Data[i]);
 8000788:	4a74      	ldr	r2, [pc, #464]	; (800095c <main+0x28c>)
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4638      	mov	r0, r7
 8000792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000794:	4972      	ldr	r1, [pc, #456]	; (8000960 <main+0x290>)
 8000796:	f003 faa7 	bl	8003ce8 <siprintf>
			  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 800079a:	4639      	mov	r1, r7
 800079c:	230a      	movs	r3, #10
 800079e:	2214      	movs	r2, #20
 80007a0:	486a      	ldr	r0, [pc, #424]	; (800094c <main+0x27c>)
 80007a2:	f002 fa44 	bl	8002c2e <HAL_UART_Transmit>
			  HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fba0 	bl	8000eec <HAL_Delay>
		  for(int i = 0; i < 8; i++)
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	dde7      	ble.n	8000788 <main+0xb8>
		  }
		  sprintf(str, "\n\n");
 80007b8:	463b      	mov	r3, r7
 80007ba:	496a      	ldr	r1, [pc, #424]	; (8000964 <main+0x294>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 fa93 	bl	8003ce8 <siprintf>
		  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 80007c2:	4639      	mov	r1, r7
 80007c4:	230a      	movs	r3, #10
 80007c6:	2214      	movs	r2, #20
 80007c8:	4860      	ldr	r0, [pc, #384]	; (800094c <main+0x27c>)
 80007ca:	f002 fa30 	bl	8002c2e <HAL_UART_Transmit>
	  }

	  // flag1
	  if(SW1_flag)
 80007ce:	4b66      	ldr	r3, [pc, #408]	; (8000968 <main+0x298>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d02f      	beq.n	8000838 <main+0x168>
	  {
		  SW1_flag = 0;
 80007d8:	4b63      	ldr	r3, [pc, #396]	; (8000968 <main+0x298>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x102;
 80007de:	4b63      	ldr	r3, [pc, #396]	; (800096c <main+0x29c>)
 80007e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80007e4:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80007e6:	4b61      	ldr	r3, [pc, #388]	; (800096c <main+0x29c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <main+0x29c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80007f2:	4b5e      	ldr	r3, [pc, #376]	; (800096c <main+0x29c>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
 80007fc:	e00d      	b.n	800081a <main+0x14a>
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <main+0x2a0>)
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b2d9      	uxtb	r1, r3
 800080a:	4a59      	ldr	r2, [pc, #356]	; (8000970 <main+0x2a0>)
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	4413      	add	r3, r2
 8000810:	460a      	mov	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	3301      	adds	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	2b07      	cmp	r3, #7
 800081e:	ddee      	ble.n	80007fe <main+0x12e>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000820:	4848      	ldr	r0, [pc, #288]	; (8000944 <main+0x274>)
 8000822:	f000 fe82 	bl	800152a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000826:	4603      	mov	r3, r0
 8000828:	4a52      	ldr	r2, [pc, #328]	; (8000974 <main+0x2a4>)
 800082a:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 800082c:	4b51      	ldr	r3, [pc, #324]	; (8000974 <main+0x2a4>)
 800082e:	4a50      	ldr	r2, [pc, #320]	; (8000970 <main+0x2a0>)
 8000830:	494e      	ldr	r1, [pc, #312]	; (800096c <main+0x29c>)
 8000832:	4844      	ldr	r0, [pc, #272]	; (8000944 <main+0x274>)
 8000834:	f000 fd9e 	bl	8001374 <HAL_CAN_AddTxMessage>
	  }

	  // flag2
	  if(SW2_flag)
 8000838:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <main+0x2a8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d02f      	beq.n	80008a2 <main+0x1d2>
	  {
		  SW2_flag = 0;
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <main+0x2a8>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x106;
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <main+0x29c>)
 800084a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800084e:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <main+0x29c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <main+0x29c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <main+0x29c>)
 800085e:	2208      	movs	r2, #8
 8000860:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	e00d      	b.n	8000884 <main+0x1b4>
 8000868:	4a41      	ldr	r2, [pc, #260]	; (8000970 <main+0x2a0>)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b2d9      	uxtb	r1, r3
 8000874:	4a3e      	ldr	r2, [pc, #248]	; (8000970 <main+0x2a0>)
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	4413      	add	r3, r2
 800087a:	460a      	mov	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b07      	cmp	r3, #7
 8000888:	ddee      	ble.n	8000868 <main+0x198>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800088a:	482e      	ldr	r0, [pc, #184]	; (8000944 <main+0x274>)
 800088c:	f000 fe4d 	bl	800152a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000890:	4603      	mov	r3, r0
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <main+0x2a4>)
 8000894:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <main+0x2a4>)
 8000898:	4a35      	ldr	r2, [pc, #212]	; (8000970 <main+0x2a0>)
 800089a:	4934      	ldr	r1, [pc, #208]	; (800096c <main+0x29c>)
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <main+0x274>)
 800089e:	f000 fd69 	bl	8001374 <HAL_CAN_AddTxMessage>
	  }

	  // flag3
	  if(SW3_flag)
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <main+0x2ac>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d02f      	beq.n	800090c <main+0x23c>
	  {
		  SW3_flag = 0;
 80008ac:	4b33      	ldr	r3, [pc, #204]	; (800097c <main+0x2ac>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x10A;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <main+0x29c>)
 80008b4:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80008b8:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <main+0x29c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <main+0x29c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <main+0x29c>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	e00d      	b.n	80008ee <main+0x21e>
 80008d2:	4a27      	ldr	r2, [pc, #156]	; (8000970 <main+0x2a0>)
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <main+0x2a0>)
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	4413      	add	r3, r2
 80008e4:	460a      	mov	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	ddee      	ble.n	80008d2 <main+0x202>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <main+0x274>)
 80008f6:	f000 fe18 	bl	800152a <HAL_CAN_GetTxMailboxesFreeLevel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <main+0x2a4>)
 80008fe:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <main+0x2a4>)
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <main+0x2a0>)
 8000904:	4919      	ldr	r1, [pc, #100]	; (800096c <main+0x29c>)
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <main+0x274>)
 8000908:	f000 fd34 	bl	8001374 <HAL_CAN_AddTxMessage>
	  }

	  // flag4
	  if(SW4_flag)
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <main+0x2b0>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	f43f af20 	beq.w	8000758 <main+0x88>
	  {
		  SW4_flag = 0;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <main+0x2b0>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x10E;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <main+0x29c>)
 8000920:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000924:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <main+0x29c>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <main+0x29c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <main+0x29c>)
 8000934:	2208      	movs	r2, #8
 8000936:	611a      	str	r2, [r3, #16]

		  for(int i = 0; i < 8; i++) can1Tx0Data[i]++;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e030      	b.n	80009a0 <main+0x2d0>
 800093e:	bf00      	nop
 8000940:	2000008c 	.word	0x2000008c
 8000944:	200000fc 	.word	0x200000fc
 8000948:	20000124 	.word	0x20000124
 800094c:	20000130 	.word	0x20000130
 8000950:	20000129 	.word	0x20000129
 8000954:	200000b4 	.word	0x200000b4
 8000958:	080045dc 	.word	0x080045dc
 800095c:	200000e8 	.word	0x200000e8
 8000960:	080045ec 	.word	0x080045ec
 8000964:	08004600 	.word	0x08004600
 8000968:	20000125 	.word	0x20000125
 800096c:	200000d0 	.word	0x200000d0
 8000970:	200000f4 	.word	0x200000f4
 8000974:	200000f0 	.word	0x200000f0
 8000978:	20000126 	.word	0x20000126
 800097c:	20000127 	.word	0x20000127
 8000980:	20000128 	.word	0x20000128
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <main+0x2f0>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2d9      	uxtb	r1, r3
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <main+0x2f0>)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	ddee      	ble.n	8000984 <main+0x2b4>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <main+0x2f4>)
 80009a8:	f000 fdbf 	bl	800152a <HAL_CAN_GetTxMailboxesFreeLevel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <main+0x2f8>)
 80009b0:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <main+0x2f8>)
 80009b4:	4a02      	ldr	r2, [pc, #8]	; (80009c0 <main+0x2f0>)
 80009b6:	4905      	ldr	r1, [pc, #20]	; (80009cc <main+0x2fc>)
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <main+0x2f4>)
 80009ba:	f000 fcdb 	bl	8001374 <HAL_CAN_AddTxMessage>
	  if(can1_rx0_flag)
 80009be:	e6cb      	b.n	8000758 <main+0x88>
 80009c0:	200000f4 	.word	0x200000f4
 80009c4:	200000fc 	.word	0x200000fc
 80009c8:	200000f0 	.word	0x200000f0
 80009cc:	200000d0 	.word	0x200000d0

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 f97a 	bl	8003cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <SystemClock_Config+0xb8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <SystemClock_Config+0xb8>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SystemClock_Config+0xb8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <SystemClock_Config+0xbc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <SystemClock_Config+0xbc>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <SystemClock_Config+0xbc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fc4f 	bl	80022e4 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a4c:	f000 f884 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 feb0 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a7a:	f000 f86d 	bl	8000b58 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	; 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_UART_RxCpltCallback+0x6c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d127      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x62>
	{
		HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4916      	ldr	r1, [pc, #88]	; (8000b00 <HAL_UART_RxCpltCallback+0x70>)
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_UART_RxCpltCallback+0x74>)
 8000aa8:	f002 f953 	bl	8002d52 <HAL_UART_Receive_IT>

		if(uart_rx_data == '1')
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_UART_RxCpltCallback+0x70>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b31      	cmp	r3, #49	; 0x31
 8000ab4:	d103      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x2e>
		{
			SW1_flag = 1;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_UART_RxCpltCallback+0x78>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
		else if(uart_rx_data == '4')
		{
			SW4_flag = 1;
		}
	}
}
 8000abc:	e019      	b.n	8000af2 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data  == '2')
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_UART_RxCpltCallback+0x70>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b32      	cmp	r3, #50	; 0x32
 8000ac6:	d103      	bne.n	8000ad0 <HAL_UART_RxCpltCallback+0x40>
			SW2_flag = 1;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_UART_RxCpltCallback+0x7c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	e010      	b.n	8000af2 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '3')
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_UART_RxCpltCallback+0x70>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b33      	cmp	r3, #51	; 0x33
 8000ad8:	d103      	bne.n	8000ae2 <HAL_UART_RxCpltCallback+0x52>
			SW3_flag = 1;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_UART_RxCpltCallback+0x80>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
}
 8000ae0:	e007      	b.n	8000af2 <HAL_UART_RxCpltCallback+0x62>
		else if(uart_rx_data == '4')
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_UART_RxCpltCallback+0x70>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b34      	cmp	r3, #52	; 0x34
 8000aea:	d102      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x62>
			SW4_flag = 1;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_UART_RxCpltCallback+0x84>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40011000 	.word	0x40011000
 8000b00:	20000124 	.word	0x20000124
 8000b04:	20000130 	.word	0x20000130
 8000b08:	20000125 	.word	0x20000125
 8000b0c:	20000126 	.word	0x20000126
 8000b10:	20000127 	.word	0x20000127
 8000b14:	20000128 	.word	0x20000128

08000b18 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d108      	bne.n	8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000b32:	f000 fd2f 	bl	8001594 <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40006400 	.word	0x40006400
 8000b48:	200000e8 	.word	0x200000e8
 8000b4c:	200000b4 	.word	0x200000b4
 8000b50:	200000fc 	.word	0x200000fc
 8000b54:	20000129 	.word	0x20000129

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f954 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <CAN1_RX0_IRQHandler+0x10>)
 8000c0e:	f000 fdf9 	bl	8001804 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000fc 	.word	0x200000fc

08000c1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <USART1_IRQHandler+0x10>)
 8000c22:	f002 f8c7 	bl	8002db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f003 f810 	bl	8003c84 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000012c 	.word	0x2000012c
 8000c98:	20000188 	.word	0x20000188

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f001 ff4c 	bl	8002b94 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f7ff ff29 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000130 	.word	0x20000130
 8000d10:	40011000 	.word	0x40011000

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0x94>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d134      	bne.n	8000da0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_UART_MspInit+0x98>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d80:	2307      	movs	r3, #7
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <HAL_UART_MspInit+0x9c>)
 8000d8c:	f001 f90e 	bl	8001fac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2025      	movs	r0, #37	; 0x25
 8000d96:	f001 f840 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9a:	2025      	movs	r0, #37	; 0x25
 8000d9c:	f001 f859 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ff5d 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 ff55 	bl	8003c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc73 	bl	80006d0 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df8:	08004660 	.word	0x08004660
  ldr r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e00:	20000188 	.word	0x20000188

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 ffe7 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe92 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 ffff 	bl	8001e6e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 ffc7 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000174 	.word	0x20000174

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000174 	.word	0x20000174

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0ed      	b.n	8001122 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fb44 	bl	80005e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f68:	f7ff ffb4 	bl	8000ed4 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff ffb0 	bl	8000ed4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0c5      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0202 	bic.w	r2, r2, #2
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff ff8e 	bl	8000ed4 <HAL_GetTick>
 8000fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fba:	e012      	b.n	8000fe2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fbc:	f7ff ff8a 	bl	8000ed4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d90b      	bls.n	8000fe2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2205      	movs	r2, #5
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e09f      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e5      	bne.n	8000fbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e1b      	ldrb	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d108      	bne.n	800100a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e007      	b.n	800101a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e5b      	ldrb	r3, [r3, #25]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e007      	b.n	8001044 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e9b      	ldrb	r3, [r3, #26]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0220 	orr.w	r2, r2, #32
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0220 	bic.w	r2, r2, #32
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7edb      	ldrb	r3, [r3, #27]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0210 	bic.w	r2, r2, #16
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0208 	bic.w	r2, r2, #8
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7f5b      	ldrb	r3, [r3, #29]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e007      	b.n	80010ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	ea42 0103 	orr.w	r1, r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001142:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001144:	7cfb      	ldrb	r3, [r7, #19]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d003      	beq.n	8001152 <HAL_CAN_ConfigFilter+0x26>
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	2b02      	cmp	r3, #2
 800114e:	f040 80be 	bne.w	80012ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001154:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800115c:	f043 0201 	orr.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800116c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d123      	bne.n	80011fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3248      	adds	r2, #72	; 0x48
 80011dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011f2:	6979      	ldr	r1, [r7, #20]
 80011f4:	3348      	adds	r3, #72	; 0x48
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d122      	bne.n	800124a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001224:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3248      	adds	r2, #72	; 0x48
 800122a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001240:	6979      	ldr	r1, [r7, #20]
 8001242:	3348      	adds	r3, #72	; 0x48
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	401a      	ands	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001264:	e007      	b.n	8001276 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001290:	e007      	b.n	80012a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012c0:	f023 0201 	bic.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e006      	b.n	80012dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40006400 	.word	0x40006400

080012ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d12e      	bne.n	800135e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001318:	f7ff fddc 	bl	8000ed4 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800131e:	e012      	b.n	8001346 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001320:	f7ff fdd8 	bl	8000ed4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d90b      	bls.n	8001346 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e012      	b.n	800136c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e5      	bne.n	8001320 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e006      	b.n	800136c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001388:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_AddTxMessage+0x2c>
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	2b02      	cmp	r3, #2
 800139c:	f040 80b8 	bne.w	8001510 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80a0 	beq.w	8001500 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	0e1b      	lsrs	r3, r3, #24
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d907      	bls.n	80013e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e09e      	b.n	800151e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013e0:	2201      	movs	r2, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	409a      	lsls	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	6809      	ldr	r1, [r1, #0]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3318      	adds	r3, #24
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e00f      	b.n	800142e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001418:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800141e:	68f9      	ldr	r1, [r7, #12]
 8001420:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001422:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3318      	adds	r3, #24
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	440b      	add	r3, r1
 800142c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3318      	adds	r3, #24
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	7d1b      	ldrb	r3, [r3, #20]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d111      	bne.n	800146e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3318      	adds	r3, #24
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	6811      	ldr	r1, [r2, #0]
 800145e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3318      	adds	r3, #24
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	440b      	add	r3, r1
 800146a:	3304      	adds	r3, #4
 800146c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3307      	adds	r3, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	061a      	lsls	r2, r3, #24
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3306      	adds	r3, #6
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3305      	adds	r3, #5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	3204      	adds	r2, #4
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	4610      	mov	r0, r2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	ea43 0200 	orr.w	r2, r3, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	440b      	add	r3, r1
 80014a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3303      	adds	r3, #3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3302      	adds	r3, #2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	041b      	lsls	r3, r3, #16
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4313      	orrs	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	4610      	mov	r0, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	6811      	ldr	r1, [r2, #0]
 80014cc:	ea43 0200 	orr.w	r2, r3, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3318      	adds	r3, #24
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	6811      	ldr	r1, [r2, #0]
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3318      	adds	r3, #24
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e00e      	b.n	800151e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e006      	b.n	800151e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d002      	beq.n	800154a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d11d      	bne.n	8001586 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d003      	beq.n	80015b8 <HAL_CAN_GetRxMessage+0x24>
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	f040 80f3 	bne.w	800179e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10e      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d116      	bne.n	80015fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0e7      	b.n	80017ac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0d8      	b.n	80017ac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	331b      	adds	r3, #27
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0204 	and.w	r2, r3, #4
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	331b      	adds	r3, #27
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0d5b      	lsrs	r3, r3, #21
 8001628:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e00b      	b.n	800164a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	331b      	adds	r3, #27
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	331b      	adds	r3, #27
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0202 	and.w	r2, r3, #2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	331b      	adds	r3, #27
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 020f 	and.w	r2, r3, #15
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	331b      	adds	r3, #27
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	3304      	adds	r3, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b2da      	uxtb	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	331b      	adds	r3, #27
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	4413      	add	r3, r2
 800169c:	3304      	adds	r3, #4
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0a1a      	lsrs	r2, r3, #8
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0c1a      	lsrs	r2, r3, #16
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	0e1a      	lsrs	r2, r3, #24
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	3303      	adds	r3, #3
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3304      	adds	r3, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	4413      	add	r3, r2
 800172e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0a1a      	lsrs	r2, r3, #8
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3305      	adds	r3, #5
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0c1a      	lsrs	r2, r3, #16
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3306      	adds	r3, #6
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0e1a      	lsrs	r2, r3, #24
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3307      	adds	r3, #7
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d108      	bne.n	800178a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	e007      	b.n	800179a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e006      	b.n	80017ac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_ActivateNotification+0x1e>
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d109      	bne.n	80017ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6959      	ldr	r1, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e006      	b.n	80017f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d07c      	beq.n	8001944 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d023      	beq.n	800189c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f983 	bl	8001b72 <HAL_CAN_TxMailbox0CompleteCallback>
 800186c:	e016      	b.n	800189c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	e00c      	b.n	800189c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e002      	b.n	800189c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f989 	bl	8001bae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d024      	beq.n	80018f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f963 	bl	8001b86 <HAL_CAN_TxMailbox1CompleteCallback>
 80018c0:	e016      	b.n	80018f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e00c      	b.n	80018f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	e002      	b.n	80018f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f969 	bl	8001bc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f943 	bl	8001b9a <HAL_CAN_TxMailbox2CompleteCallback>
 8001914:	e016      	b.n	8001944 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e00c      	b.n	8001944 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e002      	b.n	8001944 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f949 	bl	8001bd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f930 	bl	8001bea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff f8b8 	bl	8000b18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2210      	movs	r2, #16
 80019ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2208      	movs	r2, #8
 80019e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f912 	bl	8001c12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8f9 	bl	8001bfe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2210      	movs	r2, #16
 8001a26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8fc 	bl	8001c26 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8f5 	bl	8001c3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d07b      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d072      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d043      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03e      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ad2:	2b60      	cmp	r3, #96	; 0x60
 8001ad4:	d02b      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x32a>
 8001ad6:	2b60      	cmp	r3, #96	; 0x60
 8001ad8:	d82e      	bhi.n	8001b38 <HAL_CAN_IRQHandler+0x334>
 8001ada:	2b50      	cmp	r3, #80	; 0x50
 8001adc:	d022      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x320>
 8001ade:	2b50      	cmp	r3, #80	; 0x50
 8001ae0:	d82a      	bhi.n	8001b38 <HAL_CAN_IRQHandler+0x334>
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d019      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x316>
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d826      	bhi.n	8001b38 <HAL_CAN_IRQHandler+0x334>
 8001aea:	2b30      	cmp	r3, #48	; 0x30
 8001aec:	d010      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x30c>
 8001aee:	2b30      	cmp	r3, #48	; 0x30
 8001af0:	d822      	bhi.n	8001b38 <HAL_CAN_IRQHandler+0x334>
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d002      	beq.n	8001afc <HAL_CAN_IRQHandler+0x2f8>
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d005      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001afa:	e01d      	b.n	8001b38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b04:	e019      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0e:	e014      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f043 0320 	orr.w	r3, r3, #32
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b18:	e00f      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b22:	e00a      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b2c:	e005      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b36:	e000      	b.n	8001b3a <HAL_CAN_IRQHandler+0x336>
            break;
 8001b38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f872 	bl	8001c4e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff3e 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff31 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff f81e 	bl	8000ed4 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d008      	beq.n	8001eb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e052      	b.n	8001f5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0216 	bic.w	r2, r2, #22
 8001ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <HAL_DMA_Abort+0x62>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f08:	e013      	b.n	8001f32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0a:	f7fe ffe3 	bl	8000ed4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d90c      	bls.n	8001f32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e015      	b.n	8001f5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d004      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00c      	b.n	8001f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2205      	movs	r2, #5
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e16b      	b.n	80022a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 815a 	bne.w	800229a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d005      	beq.n	8001ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b03      	cmp	r3, #3
 800206a:	d017      	beq.n	800209c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80b4 	beq.w	800229a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a5f      	ldr	r2, [pc, #380]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a5b      	ldr	r2, [pc, #364]	; (80022bc <HAL_GPIO_Init+0x310>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_GPIO_Init+0x314>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <HAL_GPIO_Init+0x318>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <HAL_GPIO_Init+0x31c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	; (80022cc <HAL_GPIO_Init+0x320>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x21a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x216>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x328>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x212>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_GPIO_Init+0x32c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x20e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_GPIO_Init+0x330>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x20a>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021b6:	2308      	movs	r3, #8
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x310>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_GPIO_Init+0x334>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_GPIO_Init+0x334>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_GPIO_Init+0x334>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae90 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e267      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e242      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fd9a 	bl	8000ed4 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fd96 	bl	8000ed4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e207      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fd86 	bl	8000ed4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fd82 	bl	8000ed4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1f3      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c7      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fd3b 	bl	8000ed4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fd37 	bl	8000ed4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a8      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4925      	ldr	r1, [pc, #148]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fd1a 	bl	8000ed4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fd16 	bl	8000ed4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e187      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x248>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fcfa 	bl	8000ed4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fcf6 	bl	8000ed4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e167      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x248>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe fce3 	bl	8000ed4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00e      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fcdf 	bl	8000ed4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d907      	bls.n	8002530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e150      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ea      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe fc9f 	bl	8000ed4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fc9b 	bl	8000ed4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e10c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x2ea>
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a63      	ldr	r2, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x30c>
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fc60 	bl	8000ed4 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fc5c 	bl	8000ed4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0cb      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x334>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe fc4a 	bl	8000ed4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fc46 	bl	8000ed4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0b5      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a38      	ldr	r2, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a1 	beq.w	80027c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d05c      	beq.n	8002748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d141      	bne.n	800271a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCC_OscConfig+0x478>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fc1a 	bl	8000ed4 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fc16 	bl	8000ed4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e087      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x478>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fbef 	bl	8000ed4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fbeb 	bl	8000ed4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e05c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x416>
 8002718:	e054      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fbd8 	bl	8000ed4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fbd4 	bl	8000ed4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e045      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x444>
 8002746:	e03d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e038      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000
 800275c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d028      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d121      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11a      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fb06 	bl	8000ed4 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fb02 	bl	8000ed4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fa66 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08004604 	.word	0x08004604
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b090      	sub	sp, #64	; 0x40
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
 80029ac:	2300      	movs	r3, #0
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b0:	2300      	movs	r3, #0
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80a1 	bhi.w	8002b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e09b      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029d8:	e09b      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029de:	e098      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d028      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	627a      	str	r2, [r7, #36]	; 0x24
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0c:	fb03 f201 	mul.w	r2, r3, r1
 8002a10:	2300      	movs	r3, #0
 8002a12:	fb00 f303 	mul.w	r3, r0, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a20:	460a      	mov	r2, r1
 8002a22:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a26:	4413      	add	r3, r2
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a3a:	f7fd fc19 	bl	8000270 <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4613      	mov	r3, r2
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a46:	e053      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	617a      	str	r2, [r7, #20]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a5a:	f04f 0b00 	mov.w	fp, #0
 8002a5e:	4652      	mov	r2, sl
 8002a60:	465b      	mov	r3, fp
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	0159      	lsls	r1, r3, #5
 8002a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a70:	0150      	lsls	r0, r2, #5
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	ebb2 080a 	subs.w	r8, r2, sl
 8002a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a92:	ebb2 0408 	subs.w	r4, r2, r8
 8002a96:	eb63 0509 	sbc.w	r5, r3, r9
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	00eb      	lsls	r3, r5, #3
 8002aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa8:	00e2      	lsls	r2, r4, #3
 8002aaa:	4614      	mov	r4, r2
 8002aac:	461d      	mov	r5, r3
 8002aae:	eb14 030a 	adds.w	r3, r4, sl
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	eb45 030b 	adc.w	r3, r5, fp
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	028b      	lsls	r3, r1, #10
 8002aca:	4621      	mov	r1, r4
 8002acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	028a      	lsls	r2, r1, #10
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	2200      	movs	r2, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	60fa      	str	r2, [r7, #12]
 8002ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae4:	f7fd fbc4 	bl	8000270 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3740      	adds	r7, #64	; 0x40
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	017d7840 	.word	0x017d7840

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000

08002b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b48:	f7ff fff0 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08004614 	.word	0x08004614

08002b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b70:	f7ff ffdc 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	0b5b      	lsrs	r3, r3, #13
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08004614 	.word	0x08004614

08002b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e03f      	b.n	8002c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f8aa 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fddf 	bl	800379c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	; 0x28
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d17c      	bne.n	8002d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_Transmit+0x2c>
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e075      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Transmit+0x3e>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e06e      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c82:	f7fe f927 	bl	8000ed4 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9c:	d108      	bne.n	8002cb0 <HAL_UART_Transmit+0x82>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e003      	b.n	8002cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cc0:	e02a      	b.n	8002d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fb1f 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e036      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1cf      	bne.n	8002cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 faef 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e006      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d11d      	bne.n	8002da8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Receive_IT+0x26>
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e016      	b.n	8002daa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Receive_IT+0x38>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e00f      	b.n	8002daa <HAL_UART_Receive_IT+0x58>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb24 	bl	80033ec <UART_Start_Receive_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	e000      	b.n	8002daa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0ba      	sub	sp, #232	; 0xe8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_UART_IRQHandler+0x66>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fc07 	bl	8003626 <UART_Receive_IT>
      return;
 8002e18:	e256      	b.n	80032c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80de 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x22c>
 8002e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80d1 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_UART_IRQHandler+0xae>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_UART_IRQHandler+0xd2>
 8002e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_UART_IRQHandler+0xf6>
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0204 	orr.w	r2, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_UART_IRQHandler+0x126>
 8002eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0208 	orr.w	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 81ed 	beq.w	80032be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_UART_IRQHandler+0x14e>
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb92 	bl	8003626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_UART_IRQHandler+0x17a>
 8002f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04f      	beq.n	8002fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa9a 	bl	8003468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d141      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1d9      	bne.n	8002f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	; (8003190 <HAL_UART_IRQHandler+0x3dc>)
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe ffdf 	bl	8001f66 <HAL_DMA_Abort_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	e00e      	b.n	8002fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f990 	bl	80032e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	e00a      	b.n	8002fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f98c 	bl	80032e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	e006      	b.n	8002fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f988 	bl	80032e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fda:	e170      	b.n	80032be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	bf00      	nop
    return;
 8002fde:	e16e      	b.n	80032be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 814a 	bne.w	800327e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8143 	beq.w	800327e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 813c 	beq.w	800327e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	f040 80b4 	bne.w	8003194 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8140 	beq.w	80032c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800304a:	429a      	cmp	r2, r3
 800304c:	f080 8139 	bcs.w	80032c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003056:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003062:	f000 8088 	beq.w	8003176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800307c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800309e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1d9      	bne.n	8003066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3314      	adds	r3, #20
 80030d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e1      	bne.n	80030b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003114:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003158:	65ba      	str	r2, [r7, #88]	; 0x58
 800315a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800315e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e3      	bne.n	8003134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fe88 	bl	8001e86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317e:	b29b      	uxth	r3, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8b6 	bl	80032f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800318c:	e099      	b.n	80032c2 <HAL_UART_IRQHandler+0x50e>
 800318e:	bf00      	nop
 8003190:	0800352f 	.word	0x0800352f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800319c:	b29b      	uxth	r3, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 808b 	beq.w	80032c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8086 	beq.w	80032c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031de:	647a      	str	r2, [r7, #68]	; 0x44
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e3      	bne.n	80031ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	623b      	str	r3, [r7, #32]
   return(result);
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3314      	adds	r3, #20
 8003212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003216:	633a      	str	r2, [r7, #48]	; 0x30
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800321c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e3      	bne.n	80031f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	60fb      	str	r3, [r7, #12]
   return(result);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800325c:	61fa      	str	r2, [r7, #28]
 800325e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	e841 2300 	strex	r3, r2, [r1]
 8003268:	617b      	str	r3, [r7, #20]
   return(result);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e3      	bne.n	8003238 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f83e 	bl	80032f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800327c:	e023      	b.n	80032c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_UART_IRQHandler+0x4ea>
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f95d 	bl	8003556 <UART_Transmit_IT>
    return;
 800329c:	e014      	b.n	80032c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <HAL_UART_IRQHandler+0x514>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f99d 	bl	80035f6 <UART_EndTransmit_IT>
    return;
 80032bc:	e004      	b.n	80032c8 <HAL_UART_IRQHandler+0x514>
    return;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <HAL_UART_IRQHandler+0x514>
      return;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <HAL_UART_IRQHandler+0x514>
      return;
 80032c6:	bf00      	nop
  }
}
 80032c8:	37e8      	adds	r7, #232	; 0xe8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop

080032d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b090      	sub	sp, #64	; 0x40
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003320:	e050      	b.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d04c      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x30>
 8003330:	f7fd fdd0 	bl	8000ed4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800333c:	429a      	cmp	r2, r3
 800333e:	d241      	bcs.n	80033c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003360:	637a      	str	r2, [r7, #52]	; 0x34
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e5      	bne.n	8003340 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	613b      	str	r3, [r7, #16]
   return(result);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003394:	623a      	str	r2, [r7, #32]
 8003396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	69f9      	ldr	r1, [r7, #28]
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e5      	bne.n	8003374 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e00f      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d09f      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3740      	adds	r7, #64	; 0x40
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2222      	movs	r2, #34	; 0x22
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003438:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0220 	orr.w	r2, r2, #32
 8003458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b095      	sub	sp, #84	; 0x54
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003490:	643a      	str	r2, [r7, #64]	; 0x40
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e5      	bne.n	8003470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3314      	adds	r3, #20
 80034aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d119      	bne.n	8003514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0310 	bic.w	r3, r3, #16
 80034f6:	647b      	str	r3, [r7, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003500:	61ba      	str	r2, [r7, #24]
 8003502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	613b      	str	r3, [r7, #16]
   return(result);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003522:	bf00      	nop
 8003524:	3754      	adds	r7, #84	; 0x54
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fecb 	bl	80032e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b21      	cmp	r3, #33	; 0x21
 8003568:	d13e      	bne.n	80035e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d114      	bne.n	800359e <UART_Transmit_IT+0x48>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]
 800359c:	e008      	b.n	80035b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6211      	str	r1, [r2, #32]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fe5a 	bl	80032d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b08c      	sub	sp, #48	; 0x30
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b22      	cmp	r3, #34	; 0x22
 8003638:	f040 80ab 	bne.w	8003792 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d117      	bne.n	8003676 <UART_Receive_IT+0x50>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d113      	bne.n	8003676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	b29a      	uxth	r2, r3
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	1c9a      	adds	r2, r3, #2
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
 8003674:	e026      	b.n	80036c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d007      	beq.n	800369a <UART_Receive_IT+0x74>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <UART_Receive_IT+0x82>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e008      	b.n	80036ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4619      	mov	r1, r3
 80036d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d15a      	bne.n	800378e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0220 	bic.w	r2, r2, #32
 80036e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2b01      	cmp	r3, #1
 8003716:	d135      	bne.n	8003784 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	613b      	str	r3, [r7, #16]
   return(result);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f023 0310 	bic.w	r3, r3, #16
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	623a      	str	r2, [r7, #32]
 8003740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	6a3a      	ldr	r2, [r7, #32]
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	61bb      	str	r3, [r7, #24]
   return(result);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e5      	bne.n	800371e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	d10a      	bne.n	8003776 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fdbb 	bl	80032f8 <HAL_UARTEx_RxEventCallback>
 8003782:	e002      	b.n	800378a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fd f983 	bl	8000a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e002      	b.n	8003794 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3730      	adds	r7, #48	; 0x30
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b0c0      	sub	sp, #256	; 0x100
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	68d9      	ldr	r1, [r3, #12]
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	ea40 0301 	orr.w	r3, r0, r1
 80037c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037f4:	f021 010c 	bic.w	r1, r1, #12
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003802:	430b      	orrs	r3, r1
 8003804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	ea40 0301 	orr.w	r3, r0, r1
 8003822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <UART_SetConfig+0x2cc>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0xa0>
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <UART_SetConfig+0x2d0>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d104      	bne.n	8003846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7ff f996 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8003840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003844:	e003      	b.n	800384e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003846:	f7ff f97d 	bl	8002b44 <HAL_RCC_GetPCLK1Freq>
 800384a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	f040 810c 	bne.w	8003a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800386a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	1891      	adds	r1, r2, r2
 8003874:	65b9      	str	r1, [r7, #88]	; 0x58
 8003876:	415b      	adcs	r3, r3
 8003878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800387e:	4621      	mov	r1, r4
 8003880:	eb12 0801 	adds.w	r8, r2, r1
 8003884:	4629      	mov	r1, r5
 8003886:	eb43 0901 	adc.w	r9, r3, r1
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800389e:	4690      	mov	r8, r2
 80038a0:	4699      	mov	r9, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	eb18 0303 	adds.w	r3, r8, r3
 80038a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ac:	462b      	mov	r3, r5
 80038ae:	eb49 0303 	adc.w	r3, r9, r3
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ca:	460b      	mov	r3, r1
 80038cc:	18db      	adds	r3, r3, r3
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
 80038d0:	4613      	mov	r3, r2
 80038d2:	eb42 0303 	adc.w	r3, r2, r3
 80038d6:	657b      	str	r3, [r7, #84]	; 0x54
 80038d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e0:	f7fc fcc6 	bl	8000270 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <UART_SetConfig+0x2d4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	64b9      	str	r1, [r7, #72]	; 0x48
 800390c:	415b      	adcs	r3, r3
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003914:	4641      	mov	r1, r8
 8003916:	eb12 0a01 	adds.w	sl, r2, r1
 800391a:	4649      	mov	r1, r9
 800391c:	eb43 0b01 	adc.w	fp, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800392c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003934:	4692      	mov	sl, r2
 8003936:	469b      	mov	fp, r3
 8003938:	4643      	mov	r3, r8
 800393a:	eb1a 0303 	adds.w	r3, sl, r3
 800393e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003942:	464b      	mov	r3, r9
 8003944:	eb4b 0303 	adc.w	r3, fp, r3
 8003948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800395c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003960:	460b      	mov	r3, r1
 8003962:	18db      	adds	r3, r3, r3
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
 8003966:	4613      	mov	r3, r2
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003976:	f7fc fc7b 	bl	8000270 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4611      	mov	r1, r2
 8003980:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003982:	fba3 2301 	umull	r2, r3, r3, r1
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2264      	movs	r2, #100	; 0x64
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	1acb      	subs	r3, r1, r3
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003998:	fba3 2302 	umull	r2, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039a4:	441c      	add	r4, r3
 80039a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c0:	415b      	adcs	r3, r3
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c8:	4641      	mov	r1, r8
 80039ca:	1851      	adds	r1, r2, r1
 80039cc:	6339      	str	r1, [r7, #48]	; 0x30
 80039ce:	4649      	mov	r1, r9
 80039d0:	414b      	adcs	r3, r1
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e0:	4659      	mov	r1, fp
 80039e2:	00cb      	lsls	r3, r1, #3
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ea:	4651      	mov	r1, sl
 80039ec:	00ca      	lsls	r2, r1, #3
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4642      	mov	r2, r8
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fc:	464b      	mov	r3, r9
 80039fe:	460a      	mov	r2, r1
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	18db      	adds	r3, r3, r3
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a22:	4613      	mov	r3, r2
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a32:	f7fc fc1d 	bl	8000270 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4422      	add	r2, r4
 8003a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a64:	e105      	b.n	8003c72 <UART_SetConfig+0x4d6>
 8003a66:	bf00      	nop
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a86:	4642      	mov	r2, r8
 8003a88:	464b      	mov	r3, r9
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	6239      	str	r1, [r7, #32]
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	4641      	mov	r1, r8
 8003a98:	1854      	adds	r4, r2, r1
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	eb43 0501 	adc.w	r5, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	00eb      	lsls	r3, r5, #3
 8003aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	18e3      	adds	r3, r4, r3
 8003ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003abc:	464b      	mov	r3, r9
 8003abe:	eb45 0303 	adc.w	r3, r5, r3
 8003ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	008b      	lsls	r3, r1, #2
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aec:	4621      	mov	r1, r4
 8003aee:	008a      	lsls	r2, r1, #2
 8003af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003af4:	f7fc fbbc 	bl	8000270 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003afe:	fba3 2302 	umull	r2, r3, r3, r2
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	011c      	lsls	r4, r3, #4
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	61b9      	str	r1, [r7, #24]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6139      	str	r1, [r7, #16]
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b80:	4649      	mov	r1, r9
 8003b82:	008b      	lsls	r3, r1, #2
 8003b84:	4641      	mov	r1, r8
 8003b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	008a      	lsls	r2, r1, #2
 8003b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b92:	f7fc fb6d 	bl	8000270 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	; 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	3332      	adds	r3, #50	; 0x32
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bba:	441c      	add	r4, r3
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bca:	4642      	mov	r2, r8
 8003bcc:	464b      	mov	r3, r9
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1851      	adds	r1, r2, r1
 8003bde:	6039      	str	r1, [r7, #0]
 8003be0:	4649      	mov	r1, r9
 8003be2:	414b      	adcs	r3, r1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bf2:	4659      	mov	r1, fp
 8003bf4:	00cb      	lsls	r3, r1, #3
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	00ca      	lsls	r2, r1, #3
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	4642      	mov	r2, r8
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	460a      	mov	r2, r1
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c20:	667a      	str	r2, [r7, #100]	; 0x64
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c2e:	4649      	mov	r1, r9
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	4641      	mov	r1, r8
 8003c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c38:	4641      	mov	r1, r8
 8003c3a:	008a      	lsls	r2, r1, #2
 8003c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c40:	f7fc fb16 	bl	8000270 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2164      	movs	r1, #100	; 0x64
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4422      	add	r2, r4
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	51eb851f 	.word	0x51eb851f

08003c84 <__errno>:
 8003c84:	4b01      	ldr	r3, [pc, #4]	; (8003c8c <__errno+0x8>)
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <__libc_init_array>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4d0d      	ldr	r5, [pc, #52]	; (8003cc8 <__libc_init_array+0x38>)
 8003c94:	4c0d      	ldr	r4, [pc, #52]	; (8003ccc <__libc_init_array+0x3c>)
 8003c96:	1b64      	subs	r4, r4, r5
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	42a6      	cmp	r6, r4
 8003c9e:	d109      	bne.n	8003cb4 <__libc_init_array+0x24>
 8003ca0:	4d0b      	ldr	r5, [pc, #44]	; (8003cd0 <__libc_init_array+0x40>)
 8003ca2:	4c0c      	ldr	r4, [pc, #48]	; (8003cd4 <__libc_init_array+0x44>)
 8003ca4:	f000 fc8e 	bl	80045c4 <_init>
 8003ca8:	1b64      	subs	r4, r4, r5
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	2600      	movs	r6, #0
 8003cae:	42a6      	cmp	r6, r4
 8003cb0:	d105      	bne.n	8003cbe <__libc_init_array+0x2e>
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb8:	4798      	blx	r3
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e7ee      	b.n	8003c9c <__libc_init_array+0xc>
 8003cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc2:	4798      	blx	r3
 8003cc4:	3601      	adds	r6, #1
 8003cc6:	e7f2      	b.n	8003cae <__libc_init_array+0x1e>
 8003cc8:	08004658 	.word	0x08004658
 8003ccc:	08004658 	.word	0x08004658
 8003cd0:	08004658 	.word	0x08004658
 8003cd4:	0800465c 	.word	0x0800465c

08003cd8 <memset>:
 8003cd8:	4402      	add	r2, r0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d100      	bne.n	8003ce2 <memset+0xa>
 8003ce0:	4770      	bx	lr
 8003ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce6:	e7f9      	b.n	8003cdc <memset+0x4>

08003ce8 <siprintf>:
 8003ce8:	b40e      	push	{r1, r2, r3}
 8003cea:	b500      	push	{lr}
 8003cec:	b09c      	sub	sp, #112	; 0x70
 8003cee:	ab1d      	add	r3, sp, #116	; 0x74
 8003cf0:	9002      	str	r0, [sp, #8]
 8003cf2:	9006      	str	r0, [sp, #24]
 8003cf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cf8:	4809      	ldr	r0, [pc, #36]	; (8003d20 <siprintf+0x38>)
 8003cfa:	9107      	str	r1, [sp, #28]
 8003cfc:	9104      	str	r1, [sp, #16]
 8003cfe:	4909      	ldr	r1, [pc, #36]	; (8003d24 <siprintf+0x3c>)
 8003d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d04:	9105      	str	r1, [sp, #20]
 8003d06:	6800      	ldr	r0, [r0, #0]
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	a902      	add	r1, sp, #8
 8003d0c:	f000 f868 	bl	8003de0 <_svfiprintf_r>
 8003d10:	9b02      	ldr	r3, [sp, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	b01c      	add	sp, #112	; 0x70
 8003d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d1c:	b003      	add	sp, #12
 8003d1e:	4770      	bx	lr
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	ffff0208 	.word	0xffff0208

08003d28 <__ssputs_r>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	688e      	ldr	r6, [r1, #8]
 8003d2e:	429e      	cmp	r6, r3
 8003d30:	4682      	mov	sl, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	4690      	mov	r8, r2
 8003d36:	461f      	mov	r7, r3
 8003d38:	d838      	bhi.n	8003dac <__ssputs_r+0x84>
 8003d3a:	898a      	ldrh	r2, [r1, #12]
 8003d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d40:	d032      	beq.n	8003da8 <__ssputs_r+0x80>
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	6909      	ldr	r1, [r1, #16]
 8003d46:	eba5 0901 	sub.w	r9, r5, r1
 8003d4a:	6965      	ldr	r5, [r4, #20]
 8003d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d54:	3301      	adds	r3, #1
 8003d56:	444b      	add	r3, r9
 8003d58:	106d      	asrs	r5, r5, #1
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	bf38      	it	cc
 8003d5e:	461d      	movcc	r5, r3
 8003d60:	0553      	lsls	r3, r2, #21
 8003d62:	d531      	bpl.n	8003dc8 <__ssputs_r+0xa0>
 8003d64:	4629      	mov	r1, r5
 8003d66:	f000 fb63 	bl	8004430 <_malloc_r>
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	b950      	cbnz	r0, 8003d84 <__ssputs_r+0x5c>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	f8ca 3000 	str.w	r3, [sl]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d84:	6921      	ldr	r1, [r4, #16]
 8003d86:	464a      	mov	r2, r9
 8003d88:	f000 fabe 	bl	8004308 <memcpy>
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	6126      	str	r6, [r4, #16]
 8003d9a:	6165      	str	r5, [r4, #20]
 8003d9c:	444e      	add	r6, r9
 8003d9e:	eba5 0509 	sub.w	r5, r5, r9
 8003da2:	6026      	str	r6, [r4, #0]
 8003da4:	60a5      	str	r5, [r4, #8]
 8003da6:	463e      	mov	r6, r7
 8003da8:	42be      	cmp	r6, r7
 8003daa:	d900      	bls.n	8003dae <__ssputs_r+0x86>
 8003dac:	463e      	mov	r6, r7
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	4632      	mov	r2, r6
 8003db2:	4641      	mov	r1, r8
 8003db4:	f000 fab6 	bl	8004324 <memmove>
 8003db8:	68a3      	ldr	r3, [r4, #8]
 8003dba:	1b9b      	subs	r3, r3, r6
 8003dbc:	60a3      	str	r3, [r4, #8]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4433      	add	r3, r6
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e7db      	b.n	8003d80 <__ssputs_r+0x58>
 8003dc8:	462a      	mov	r2, r5
 8003dca:	f000 fba5 	bl	8004518 <_realloc_r>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d1e1      	bne.n	8003d98 <__ssputs_r+0x70>
 8003dd4:	6921      	ldr	r1, [r4, #16]
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	f000 fabe 	bl	8004358 <_free_r>
 8003ddc:	e7c7      	b.n	8003d6e <__ssputs_r+0x46>
	...

08003de0 <_svfiprintf_r>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	4698      	mov	r8, r3
 8003de6:	898b      	ldrh	r3, [r1, #12]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	b09d      	sub	sp, #116	; 0x74
 8003dec:	4607      	mov	r7, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	d50e      	bpl.n	8003e12 <_svfiprintf_r+0x32>
 8003df4:	690b      	ldr	r3, [r1, #16]
 8003df6:	b963      	cbnz	r3, 8003e12 <_svfiprintf_r+0x32>
 8003df8:	2140      	movs	r1, #64	; 0x40
 8003dfa:	f000 fb19 	bl	8004430 <_malloc_r>
 8003dfe:	6028      	str	r0, [r5, #0]
 8003e00:	6128      	str	r0, [r5, #16]
 8003e02:	b920      	cbnz	r0, 8003e0e <_svfiprintf_r+0x2e>
 8003e04:	230c      	movs	r3, #12
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	e0d1      	b.n	8003fb2 <_svfiprintf_r+0x1d2>
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	616b      	str	r3, [r5, #20]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9309      	str	r3, [sp, #36]	; 0x24
 8003e16:	2320      	movs	r3, #32
 8003e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e20:	2330      	movs	r3, #48	; 0x30
 8003e22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fcc <_svfiprintf_r+0x1ec>
 8003e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e2a:	f04f 0901 	mov.w	r9, #1
 8003e2e:	4623      	mov	r3, r4
 8003e30:	469a      	mov	sl, r3
 8003e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e36:	b10a      	cbz	r2, 8003e3c <_svfiprintf_r+0x5c>
 8003e38:	2a25      	cmp	r2, #37	; 0x25
 8003e3a:	d1f9      	bne.n	8003e30 <_svfiprintf_r+0x50>
 8003e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e40:	d00b      	beq.n	8003e5a <_svfiprintf_r+0x7a>
 8003e42:	465b      	mov	r3, fp
 8003e44:	4622      	mov	r2, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f7ff ff6d 	bl	8003d28 <__ssputs_r>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f000 80aa 	beq.w	8003fa8 <_svfiprintf_r+0x1c8>
 8003e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e56:	445a      	add	r2, fp
 8003e58:	9209      	str	r2, [sp, #36]	; 0x24
 8003e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a2 	beq.w	8003fa8 <_svfiprintf_r+0x1c8>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6e:	f10a 0a01 	add.w	sl, sl, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	9307      	str	r3, [sp, #28]
 8003e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e7c:	4654      	mov	r4, sl
 8003e7e:	2205      	movs	r2, #5
 8003e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e84:	4851      	ldr	r0, [pc, #324]	; (8003fcc <_svfiprintf_r+0x1ec>)
 8003e86:	f7fc f9a3 	bl	80001d0 <memchr>
 8003e8a:	9a04      	ldr	r2, [sp, #16]
 8003e8c:	b9d8      	cbnz	r0, 8003ec6 <_svfiprintf_r+0xe6>
 8003e8e:	06d0      	lsls	r0, r2, #27
 8003e90:	bf44      	itt	mi
 8003e92:	2320      	movmi	r3, #32
 8003e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e98:	0711      	lsls	r1, r2, #28
 8003e9a:	bf44      	itt	mi
 8003e9c:	232b      	movmi	r3, #43	; 0x2b
 8003e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea8:	d015      	beq.n	8003ed6 <_svfiprintf_r+0xf6>
 8003eaa:	9a07      	ldr	r2, [sp, #28]
 8003eac:	4654      	mov	r4, sl
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f04f 0c0a 	mov.w	ip, #10
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eba:	3b30      	subs	r3, #48	; 0x30
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	d94e      	bls.n	8003f5e <_svfiprintf_r+0x17e>
 8003ec0:	b1b0      	cbz	r0, 8003ef0 <_svfiprintf_r+0x110>
 8003ec2:	9207      	str	r2, [sp, #28]
 8003ec4:	e014      	b.n	8003ef0 <_svfiprintf_r+0x110>
 8003ec6:	eba0 0308 	sub.w	r3, r0, r8
 8003eca:	fa09 f303 	lsl.w	r3, r9, r3
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	46a2      	mov	sl, r4
 8003ed4:	e7d2      	b.n	8003e7c <_svfiprintf_r+0x9c>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	1d19      	adds	r1, r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	9103      	str	r1, [sp, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfbb      	ittet	lt
 8003ee2:	425b      	neglt	r3, r3
 8003ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee8:	9307      	strge	r3, [sp, #28]
 8003eea:	9307      	strlt	r3, [sp, #28]
 8003eec:	bfb8      	it	lt
 8003eee:	9204      	strlt	r2, [sp, #16]
 8003ef0:	7823      	ldrb	r3, [r4, #0]
 8003ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef4:	d10c      	bne.n	8003f10 <_svfiprintf_r+0x130>
 8003ef6:	7863      	ldrb	r3, [r4, #1]
 8003ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8003efa:	d135      	bne.n	8003f68 <_svfiprintf_r+0x188>
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	9203      	str	r2, [sp, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bfb8      	it	lt
 8003f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f0c:	3402      	adds	r4, #2
 8003f0e:	9305      	str	r3, [sp, #20]
 8003f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fdc <_svfiprintf_r+0x1fc>
 8003f14:	7821      	ldrb	r1, [r4, #0]
 8003f16:	2203      	movs	r2, #3
 8003f18:	4650      	mov	r0, sl
 8003f1a:	f7fc f959 	bl	80001d0 <memchr>
 8003f1e:	b140      	cbz	r0, 8003f32 <_svfiprintf_r+0x152>
 8003f20:	2340      	movs	r3, #64	; 0x40
 8003f22:	eba0 000a 	sub.w	r0, r0, sl
 8003f26:	fa03 f000 	lsl.w	r0, r3, r0
 8003f2a:	9b04      	ldr	r3, [sp, #16]
 8003f2c:	4303      	orrs	r3, r0
 8003f2e:	3401      	adds	r4, #1
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f36:	4826      	ldr	r0, [pc, #152]	; (8003fd0 <_svfiprintf_r+0x1f0>)
 8003f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3c:	2206      	movs	r2, #6
 8003f3e:	f7fc f947 	bl	80001d0 <memchr>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d038      	beq.n	8003fb8 <_svfiprintf_r+0x1d8>
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <_svfiprintf_r+0x1f4>)
 8003f48:	bb1b      	cbnz	r3, 8003f92 <_svfiprintf_r+0x1b2>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	3307      	adds	r3, #7
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	3308      	adds	r3, #8
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f58:	4433      	add	r3, r6
 8003f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5c:	e767      	b.n	8003e2e <_svfiprintf_r+0x4e>
 8003f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f62:	460c      	mov	r4, r1
 8003f64:	2001      	movs	r0, #1
 8003f66:	e7a5      	b.n	8003eb4 <_svfiprintf_r+0xd4>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	3401      	adds	r4, #1
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f04f 0c0a 	mov.w	ip, #10
 8003f74:	4620      	mov	r0, r4
 8003f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f7a:	3a30      	subs	r2, #48	; 0x30
 8003f7c:	2a09      	cmp	r2, #9
 8003f7e:	d903      	bls.n	8003f88 <_svfiprintf_r+0x1a8>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0c5      	beq.n	8003f10 <_svfiprintf_r+0x130>
 8003f84:	9105      	str	r1, [sp, #20]
 8003f86:	e7c3      	b.n	8003f10 <_svfiprintf_r+0x130>
 8003f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e7f0      	b.n	8003f74 <_svfiprintf_r+0x194>
 8003f92:	ab03      	add	r3, sp, #12
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	462a      	mov	r2, r5
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <_svfiprintf_r+0x1f8>)
 8003f9a:	a904      	add	r1, sp, #16
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f3af 8000 	nop.w
 8003fa2:	1c42      	adds	r2, r0, #1
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	d1d6      	bne.n	8003f56 <_svfiprintf_r+0x176>
 8003fa8:	89ab      	ldrh	r3, [r5, #12]
 8003faa:	065b      	lsls	r3, r3, #25
 8003fac:	f53f af2c 	bmi.w	8003e08 <_svfiprintf_r+0x28>
 8003fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb2:	b01d      	add	sp, #116	; 0x74
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <_svfiprintf_r+0x1f8>)
 8003fc0:	a904      	add	r1, sp, #16
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f000 f87a 	bl	80040bc <_printf_i>
 8003fc8:	e7eb      	b.n	8003fa2 <_svfiprintf_r+0x1c2>
 8003fca:	bf00      	nop
 8003fcc:	0800461c 	.word	0x0800461c
 8003fd0:	08004626 	.word	0x08004626
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08003d29 	.word	0x08003d29
 8003fdc:	08004622 	.word	0x08004622

08003fe0 <_printf_common>:
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	688a      	ldr	r2, [r1, #8]
 8003fea:	690b      	ldr	r3, [r1, #16]
 8003fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bfb8      	it	lt
 8003ff4:	4613      	movlt	r3, r2
 8003ff6:	6033      	str	r3, [r6, #0]
 8003ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	b10a      	cbz	r2, 8004006 <_printf_common+0x26>
 8004002:	3301      	adds	r3, #1
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	0699      	lsls	r1, r3, #26
 800400a:	bf42      	ittt	mi
 800400c:	6833      	ldrmi	r3, [r6, #0]
 800400e:	3302      	addmi	r3, #2
 8004010:	6033      	strmi	r3, [r6, #0]
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	f015 0506 	ands.w	r5, r5, #6
 8004018:	d106      	bne.n	8004028 <_printf_common+0x48>
 800401a:	f104 0a19 	add.w	sl, r4, #25
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	6832      	ldr	r2, [r6, #0]
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	42ab      	cmp	r3, r5
 8004026:	dc26      	bgt.n	8004076 <_printf_common+0x96>
 8004028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800402c:	1e13      	subs	r3, r2, #0
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	bf18      	it	ne
 8004032:	2301      	movne	r3, #1
 8004034:	0692      	lsls	r2, r2, #26
 8004036:	d42b      	bmi.n	8004090 <_printf_common+0xb0>
 8004038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403c:	4649      	mov	r1, r9
 800403e:	4638      	mov	r0, r7
 8004040:	47c0      	blx	r8
 8004042:	3001      	adds	r0, #1
 8004044:	d01e      	beq.n	8004084 <_printf_common+0xa4>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	68e5      	ldr	r5, [r4, #12]
 800404a:	6832      	ldr	r2, [r6, #0]
 800404c:	f003 0306 	and.w	r3, r3, #6
 8004050:	2b04      	cmp	r3, #4
 8004052:	bf08      	it	eq
 8004054:	1aad      	subeq	r5, r5, r2
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	bf0c      	ite	eq
 800405c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004060:	2500      	movne	r5, #0
 8004062:	4293      	cmp	r3, r2
 8004064:	bfc4      	itt	gt
 8004066:	1a9b      	subgt	r3, r3, r2
 8004068:	18ed      	addgt	r5, r5, r3
 800406a:	2600      	movs	r6, #0
 800406c:	341a      	adds	r4, #26
 800406e:	42b5      	cmp	r5, r6
 8004070:	d11a      	bne.n	80040a8 <_printf_common+0xc8>
 8004072:	2000      	movs	r0, #0
 8004074:	e008      	b.n	8004088 <_printf_common+0xa8>
 8004076:	2301      	movs	r3, #1
 8004078:	4652      	mov	r2, sl
 800407a:	4649      	mov	r1, r9
 800407c:	4638      	mov	r0, r7
 800407e:	47c0      	blx	r8
 8004080:	3001      	adds	r0, #1
 8004082:	d103      	bne.n	800408c <_printf_common+0xac>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408c:	3501      	adds	r5, #1
 800408e:	e7c6      	b.n	800401e <_printf_common+0x3e>
 8004090:	18e1      	adds	r1, r4, r3
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	2030      	movs	r0, #48	; 0x30
 8004096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800409a:	4422      	add	r2, r4
 800409c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a4:	3302      	adds	r3, #2
 80040a6:	e7c7      	b.n	8004038 <_printf_common+0x58>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4622      	mov	r2, r4
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0e6      	beq.n	8004084 <_printf_common+0xa4>
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7d9      	b.n	800406e <_printf_common+0x8e>
	...

080040bc <_printf_i>:
 80040bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	7e0f      	ldrb	r7, [r1, #24]
 80040c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040c4:	2f78      	cmp	r7, #120	; 0x78
 80040c6:	4691      	mov	r9, r2
 80040c8:	4680      	mov	r8, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	469a      	mov	sl, r3
 80040ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040d2:	d807      	bhi.n	80040e4 <_printf_i+0x28>
 80040d4:	2f62      	cmp	r7, #98	; 0x62
 80040d6:	d80a      	bhi.n	80040ee <_printf_i+0x32>
 80040d8:	2f00      	cmp	r7, #0
 80040da:	f000 80d8 	beq.w	800428e <_printf_i+0x1d2>
 80040de:	2f58      	cmp	r7, #88	; 0x58
 80040e0:	f000 80a3 	beq.w	800422a <_printf_i+0x16e>
 80040e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040ec:	e03a      	b.n	8004164 <_printf_i+0xa8>
 80040ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f2:	2b15      	cmp	r3, #21
 80040f4:	d8f6      	bhi.n	80040e4 <_printf_i+0x28>
 80040f6:	a101      	add	r1, pc, #4	; (adr r1, 80040fc <_printf_i+0x40>)
 80040f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004169 	.word	0x08004169
 8004104:	080040e5 	.word	0x080040e5
 8004108:	080040e5 	.word	0x080040e5
 800410c:	080040e5 	.word	0x080040e5
 8004110:	080040e5 	.word	0x080040e5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040e5 	.word	0x080040e5
 800411c:	080040e5 	.word	0x080040e5
 8004120:	080040e5 	.word	0x080040e5
 8004124:	080040e5 	.word	0x080040e5
 8004128:	08004275 	.word	0x08004275
 800412c:	08004199 	.word	0x08004199
 8004130:	08004257 	.word	0x08004257
 8004134:	080040e5 	.word	0x080040e5
 8004138:	080040e5 	.word	0x080040e5
 800413c:	08004297 	.word	0x08004297
 8004140:	080040e5 	.word	0x080040e5
 8004144:	08004199 	.word	0x08004199
 8004148:	080040e5 	.word	0x080040e5
 800414c:	080040e5 	.word	0x080040e5
 8004150:	0800425f 	.word	0x0800425f
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	1d1a      	adds	r2, r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	602a      	str	r2, [r5, #0]
 800415c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004164:	2301      	movs	r3, #1
 8004166:	e0a3      	b.n	80042b0 <_printf_i+0x1f4>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	6829      	ldr	r1, [r5, #0]
 800416c:	0606      	lsls	r6, r0, #24
 800416e:	f101 0304 	add.w	r3, r1, #4
 8004172:	d50a      	bpl.n	800418a <_printf_i+0xce>
 8004174:	680e      	ldr	r6, [r1, #0]
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	2e00      	cmp	r6, #0
 800417a:	da03      	bge.n	8004184 <_printf_i+0xc8>
 800417c:	232d      	movs	r3, #45	; 0x2d
 800417e:	4276      	negs	r6, r6
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	485e      	ldr	r0, [pc, #376]	; (8004300 <_printf_i+0x244>)
 8004186:	230a      	movs	r3, #10
 8004188:	e019      	b.n	80041be <_printf_i+0x102>
 800418a:	680e      	ldr	r6, [r1, #0]
 800418c:	602b      	str	r3, [r5, #0]
 800418e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004192:	bf18      	it	ne
 8004194:	b236      	sxthne	r6, r6
 8004196:	e7ef      	b.n	8004178 <_printf_i+0xbc>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	6029      	str	r1, [r5, #0]
 80041a0:	0601      	lsls	r1, r0, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xec>
 80041a4:	681e      	ldr	r6, [r3, #0]
 80041a6:	e002      	b.n	80041ae <_printf_i+0xf2>
 80041a8:	0646      	lsls	r6, r0, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xe8>
 80041ac:	881e      	ldrh	r6, [r3, #0]
 80041ae:	4854      	ldr	r0, [pc, #336]	; (8004300 <_printf_i+0x244>)
 80041b0:	2f6f      	cmp	r7, #111	; 0x6f
 80041b2:	bf0c      	ite	eq
 80041b4:	2308      	moveq	r3, #8
 80041b6:	230a      	movne	r3, #10
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041be:	6865      	ldr	r5, [r4, #4]
 80041c0:	60a5      	str	r5, [r4, #8]
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	bfa2      	ittt	ge
 80041c6:	6821      	ldrge	r1, [r4, #0]
 80041c8:	f021 0104 	bicge.w	r1, r1, #4
 80041cc:	6021      	strge	r1, [r4, #0]
 80041ce:	b90e      	cbnz	r6, 80041d4 <_printf_i+0x118>
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	d04d      	beq.n	8004270 <_printf_i+0x1b4>
 80041d4:	4615      	mov	r5, r2
 80041d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041da:	fb03 6711 	mls	r7, r3, r1, r6
 80041de:	5dc7      	ldrb	r7, [r0, r7]
 80041e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041e4:	4637      	mov	r7, r6
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	460e      	mov	r6, r1
 80041ea:	d9f4      	bls.n	80041d6 <_printf_i+0x11a>
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <_printf_i+0x14c>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	07de      	lsls	r6, r3, #31
 80041f4:	d508      	bpl.n	8004208 <_printf_i+0x14c>
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6861      	ldr	r1, [r4, #4]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	bfde      	ittt	le
 80041fe:	2330      	movle	r3, #48	; 0x30
 8004200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004208:	1b52      	subs	r2, r2, r5
 800420a:	6122      	str	r2, [r4, #16]
 800420c:	f8cd a000 	str.w	sl, [sp]
 8004210:	464b      	mov	r3, r9
 8004212:	aa03      	add	r2, sp, #12
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fee2 	bl	8003fe0 <_printf_common>
 800421c:	3001      	adds	r0, #1
 800421e:	d14c      	bne.n	80042ba <_printf_i+0x1fe>
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	b004      	add	sp, #16
 8004226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422a:	4835      	ldr	r0, [pc, #212]	; (8004300 <_printf_i+0x244>)
 800422c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004230:	6829      	ldr	r1, [r5, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	f851 6b04 	ldr.w	r6, [r1], #4
 8004238:	6029      	str	r1, [r5, #0]
 800423a:	061d      	lsls	r5, r3, #24
 800423c:	d514      	bpl.n	8004268 <_printf_i+0x1ac>
 800423e:	07df      	lsls	r7, r3, #31
 8004240:	bf44      	itt	mi
 8004242:	f043 0320 	orrmi.w	r3, r3, #32
 8004246:	6023      	strmi	r3, [r4, #0]
 8004248:	b91e      	cbnz	r6, 8004252 <_printf_i+0x196>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f023 0320 	bic.w	r3, r3, #32
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	2310      	movs	r3, #16
 8004254:	e7b0      	b.n	80041b8 <_printf_i+0xfc>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f043 0320 	orr.w	r3, r3, #32
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	2378      	movs	r3, #120	; 0x78
 8004260:	4828      	ldr	r0, [pc, #160]	; (8004304 <_printf_i+0x248>)
 8004262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004266:	e7e3      	b.n	8004230 <_printf_i+0x174>
 8004268:	0659      	lsls	r1, r3, #25
 800426a:	bf48      	it	mi
 800426c:	b2b6      	uxthmi	r6, r6
 800426e:	e7e6      	b.n	800423e <_printf_i+0x182>
 8004270:	4615      	mov	r5, r2
 8004272:	e7bb      	b.n	80041ec <_printf_i+0x130>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	6826      	ldr	r6, [r4, #0]
 8004278:	6961      	ldr	r1, [r4, #20]
 800427a:	1d18      	adds	r0, r3, #4
 800427c:	6028      	str	r0, [r5, #0]
 800427e:	0635      	lsls	r5, r6, #24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	d501      	bpl.n	8004288 <_printf_i+0x1cc>
 8004284:	6019      	str	r1, [r3, #0]
 8004286:	e002      	b.n	800428e <_printf_i+0x1d2>
 8004288:	0670      	lsls	r0, r6, #25
 800428a:	d5fb      	bpl.n	8004284 <_printf_i+0x1c8>
 800428c:	8019      	strh	r1, [r3, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	4615      	mov	r5, r2
 8004294:	e7ba      	b.n	800420c <_printf_i+0x150>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	602a      	str	r2, [r5, #0]
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f7fb ff94 	bl	80001d0 <memchr>
 80042a8:	b108      	cbz	r0, 80042ae <_printf_i+0x1f2>
 80042aa:	1b40      	subs	r0, r0, r5
 80042ac:	6060      	str	r0, [r4, #4]
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	6123      	str	r3, [r4, #16]
 80042b2:	2300      	movs	r3, #0
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b8:	e7a8      	b.n	800420c <_printf_i+0x150>
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	462a      	mov	r2, r5
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	47d0      	blx	sl
 80042c4:	3001      	adds	r0, #1
 80042c6:	d0ab      	beq.n	8004220 <_printf_i+0x164>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	079b      	lsls	r3, r3, #30
 80042cc:	d413      	bmi.n	80042f6 <_printf_i+0x23a>
 80042ce:	68e0      	ldr	r0, [r4, #12]
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	4298      	cmp	r0, r3
 80042d4:	bfb8      	it	lt
 80042d6:	4618      	movlt	r0, r3
 80042d8:	e7a4      	b.n	8004224 <_printf_i+0x168>
 80042da:	2301      	movs	r3, #1
 80042dc:	4632      	mov	r2, r6
 80042de:	4649      	mov	r1, r9
 80042e0:	4640      	mov	r0, r8
 80042e2:	47d0      	blx	sl
 80042e4:	3001      	adds	r0, #1
 80042e6:	d09b      	beq.n	8004220 <_printf_i+0x164>
 80042e8:	3501      	adds	r5, #1
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	9903      	ldr	r1, [sp, #12]
 80042ee:	1a5b      	subs	r3, r3, r1
 80042f0:	42ab      	cmp	r3, r5
 80042f2:	dcf2      	bgt.n	80042da <_printf_i+0x21e>
 80042f4:	e7eb      	b.n	80042ce <_printf_i+0x212>
 80042f6:	2500      	movs	r5, #0
 80042f8:	f104 0619 	add.w	r6, r4, #25
 80042fc:	e7f5      	b.n	80042ea <_printf_i+0x22e>
 80042fe:	bf00      	nop
 8004300:	0800462d 	.word	0x0800462d
 8004304:	0800463e 	.word	0x0800463e

08004308 <memcpy>:
 8004308:	440a      	add	r2, r1
 800430a:	4291      	cmp	r1, r2
 800430c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004310:	d100      	bne.n	8004314 <memcpy+0xc>
 8004312:	4770      	bx	lr
 8004314:	b510      	push	{r4, lr}
 8004316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800431a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800431e:	4291      	cmp	r1, r2
 8004320:	d1f9      	bne.n	8004316 <memcpy+0xe>
 8004322:	bd10      	pop	{r4, pc}

08004324 <memmove>:
 8004324:	4288      	cmp	r0, r1
 8004326:	b510      	push	{r4, lr}
 8004328:	eb01 0402 	add.w	r4, r1, r2
 800432c:	d902      	bls.n	8004334 <memmove+0x10>
 800432e:	4284      	cmp	r4, r0
 8004330:	4623      	mov	r3, r4
 8004332:	d807      	bhi.n	8004344 <memmove+0x20>
 8004334:	1e43      	subs	r3, r0, #1
 8004336:	42a1      	cmp	r1, r4
 8004338:	d008      	beq.n	800434c <memmove+0x28>
 800433a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800433e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004342:	e7f8      	b.n	8004336 <memmove+0x12>
 8004344:	4402      	add	r2, r0
 8004346:	4601      	mov	r1, r0
 8004348:	428a      	cmp	r2, r1
 800434a:	d100      	bne.n	800434e <memmove+0x2a>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004356:	e7f7      	b.n	8004348 <memmove+0x24>

08004358 <_free_r>:
 8004358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800435a:	2900      	cmp	r1, #0
 800435c:	d044      	beq.n	80043e8 <_free_r+0x90>
 800435e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004362:	9001      	str	r0, [sp, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f1a1 0404 	sub.w	r4, r1, #4
 800436a:	bfb8      	it	lt
 800436c:	18e4      	addlt	r4, r4, r3
 800436e:	f000 f913 	bl	8004598 <__malloc_lock>
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <_free_r+0x94>)
 8004374:	9801      	ldr	r0, [sp, #4]
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	b933      	cbnz	r3, 8004388 <_free_r+0x30>
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	6014      	str	r4, [r2, #0]
 800437e:	b003      	add	sp, #12
 8004380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004384:	f000 b90e 	b.w	80045a4 <__malloc_unlock>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d908      	bls.n	800439e <_free_r+0x46>
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	1961      	adds	r1, r4, r5
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1949      	addeq	r1, r1, r5
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	e7ed      	b.n	800437a <_free_r+0x22>
 800439e:	461a      	mov	r2, r3
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b10b      	cbz	r3, 80043a8 <_free_r+0x50>
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d9fa      	bls.n	800439e <_free_r+0x46>
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	1855      	adds	r5, r2, r1
 80043ac:	42a5      	cmp	r5, r4
 80043ae:	d10b      	bne.n	80043c8 <_free_r+0x70>
 80043b0:	6824      	ldr	r4, [r4, #0]
 80043b2:	4421      	add	r1, r4
 80043b4:	1854      	adds	r4, r2, r1
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	d1e0      	bne.n	800437e <_free_r+0x26>
 80043bc:	681c      	ldr	r4, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6053      	str	r3, [r2, #4]
 80043c2:	4421      	add	r1, r4
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	e7da      	b.n	800437e <_free_r+0x26>
 80043c8:	d902      	bls.n	80043d0 <_free_r+0x78>
 80043ca:	230c      	movs	r3, #12
 80043cc:	6003      	str	r3, [r0, #0]
 80043ce:	e7d6      	b.n	800437e <_free_r+0x26>
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1961      	adds	r1, r4, r5
 80043d4:	428b      	cmp	r3, r1
 80043d6:	bf04      	itt	eq
 80043d8:	6819      	ldreq	r1, [r3, #0]
 80043da:	685b      	ldreq	r3, [r3, #4]
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	bf04      	itt	eq
 80043e0:	1949      	addeq	r1, r1, r5
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6054      	str	r4, [r2, #4]
 80043e6:	e7ca      	b.n	800437e <_free_r+0x26>
 80043e8:	b003      	add	sp, #12
 80043ea:	bd30      	pop	{r4, r5, pc}
 80043ec:	20000178 	.word	0x20000178

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0e      	ldr	r6, [pc, #56]	; (800442c <sbrk_aligned+0x3c>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 f8bc 	bl	8004578 <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 f8b7 	bl	8004578 <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d00a      	beq.n	8004424 <sbrk_aligned+0x34>
 800440e:	1cc4      	adds	r4, r0, #3
 8004410:	f024 0403 	bic.w	r4, r4, #3
 8004414:	42a0      	cmp	r0, r4
 8004416:	d007      	beq.n	8004428 <sbrk_aligned+0x38>
 8004418:	1a21      	subs	r1, r4, r0
 800441a:	4628      	mov	r0, r5
 800441c:	f000 f8ac 	bl	8004578 <_sbrk_r>
 8004420:	3001      	adds	r0, #1
 8004422:	d101      	bne.n	8004428 <sbrk_aligned+0x38>
 8004424:	f04f 34ff 	mov.w	r4, #4294967295
 8004428:	4620      	mov	r0, r4
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	2000017c 	.word	0x2000017c

08004430 <_malloc_r>:
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	1ccd      	adds	r5, r1, #3
 8004436:	f025 0503 	bic.w	r5, r5, #3
 800443a:	3508      	adds	r5, #8
 800443c:	2d0c      	cmp	r5, #12
 800443e:	bf38      	it	cc
 8004440:	250c      	movcc	r5, #12
 8004442:	2d00      	cmp	r5, #0
 8004444:	4607      	mov	r7, r0
 8004446:	db01      	blt.n	800444c <_malloc_r+0x1c>
 8004448:	42a9      	cmp	r1, r5
 800444a:	d905      	bls.n	8004458 <_malloc_r+0x28>
 800444c:	230c      	movs	r3, #12
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	2600      	movs	r6, #0
 8004452:	4630      	mov	r0, r6
 8004454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004458:	4e2e      	ldr	r6, [pc, #184]	; (8004514 <_malloc_r+0xe4>)
 800445a:	f000 f89d 	bl	8004598 <__malloc_lock>
 800445e:	6833      	ldr	r3, [r6, #0]
 8004460:	461c      	mov	r4, r3
 8004462:	bb34      	cbnz	r4, 80044b2 <_malloc_r+0x82>
 8004464:	4629      	mov	r1, r5
 8004466:	4638      	mov	r0, r7
 8004468:	f7ff ffc2 	bl	80043f0 <sbrk_aligned>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	4604      	mov	r4, r0
 8004470:	d14d      	bne.n	800450e <_malloc_r+0xde>
 8004472:	6834      	ldr	r4, [r6, #0]
 8004474:	4626      	mov	r6, r4
 8004476:	2e00      	cmp	r6, #0
 8004478:	d140      	bne.n	80044fc <_malloc_r+0xcc>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	4631      	mov	r1, r6
 800447e:	4638      	mov	r0, r7
 8004480:	eb04 0803 	add.w	r8, r4, r3
 8004484:	f000 f878 	bl	8004578 <_sbrk_r>
 8004488:	4580      	cmp	r8, r0
 800448a:	d13a      	bne.n	8004502 <_malloc_r+0xd2>
 800448c:	6821      	ldr	r1, [r4, #0]
 800448e:	3503      	adds	r5, #3
 8004490:	1a6d      	subs	r5, r5, r1
 8004492:	f025 0503 	bic.w	r5, r5, #3
 8004496:	3508      	adds	r5, #8
 8004498:	2d0c      	cmp	r5, #12
 800449a:	bf38      	it	cc
 800449c:	250c      	movcc	r5, #12
 800449e:	4629      	mov	r1, r5
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff ffa5 	bl	80043f0 <sbrk_aligned>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d02b      	beq.n	8004502 <_malloc_r+0xd2>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	442b      	add	r3, r5
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	e00e      	b.n	80044d0 <_malloc_r+0xa0>
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	1b52      	subs	r2, r2, r5
 80044b6:	d41e      	bmi.n	80044f6 <_malloc_r+0xc6>
 80044b8:	2a0b      	cmp	r2, #11
 80044ba:	d916      	bls.n	80044ea <_malloc_r+0xba>
 80044bc:	1961      	adds	r1, r4, r5
 80044be:	42a3      	cmp	r3, r4
 80044c0:	6025      	str	r5, [r4, #0]
 80044c2:	bf18      	it	ne
 80044c4:	6059      	strne	r1, [r3, #4]
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	bf08      	it	eq
 80044ca:	6031      	streq	r1, [r6, #0]
 80044cc:	5162      	str	r2, [r4, r5]
 80044ce:	604b      	str	r3, [r1, #4]
 80044d0:	4638      	mov	r0, r7
 80044d2:	f104 060b 	add.w	r6, r4, #11
 80044d6:	f000 f865 	bl	80045a4 <__malloc_unlock>
 80044da:	f026 0607 	bic.w	r6, r6, #7
 80044de:	1d23      	adds	r3, r4, #4
 80044e0:	1af2      	subs	r2, r6, r3
 80044e2:	d0b6      	beq.n	8004452 <_malloc_r+0x22>
 80044e4:	1b9b      	subs	r3, r3, r6
 80044e6:	50a3      	str	r3, [r4, r2]
 80044e8:	e7b3      	b.n	8004452 <_malloc_r+0x22>
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	42a3      	cmp	r3, r4
 80044ee:	bf0c      	ite	eq
 80044f0:	6032      	streq	r2, [r6, #0]
 80044f2:	605a      	strne	r2, [r3, #4]
 80044f4:	e7ec      	b.n	80044d0 <_malloc_r+0xa0>
 80044f6:	4623      	mov	r3, r4
 80044f8:	6864      	ldr	r4, [r4, #4]
 80044fa:	e7b2      	b.n	8004462 <_malloc_r+0x32>
 80044fc:	4634      	mov	r4, r6
 80044fe:	6876      	ldr	r6, [r6, #4]
 8004500:	e7b9      	b.n	8004476 <_malloc_r+0x46>
 8004502:	230c      	movs	r3, #12
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4638      	mov	r0, r7
 8004508:	f000 f84c 	bl	80045a4 <__malloc_unlock>
 800450c:	e7a1      	b.n	8004452 <_malloc_r+0x22>
 800450e:	6025      	str	r5, [r4, #0]
 8004510:	e7de      	b.n	80044d0 <_malloc_r+0xa0>
 8004512:	bf00      	nop
 8004514:	20000178 	.word	0x20000178

08004518 <_realloc_r>:
 8004518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451c:	4680      	mov	r8, r0
 800451e:	4614      	mov	r4, r2
 8004520:	460e      	mov	r6, r1
 8004522:	b921      	cbnz	r1, 800452e <_realloc_r+0x16>
 8004524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004528:	4611      	mov	r1, r2
 800452a:	f7ff bf81 	b.w	8004430 <_malloc_r>
 800452e:	b92a      	cbnz	r2, 800453c <_realloc_r+0x24>
 8004530:	f7ff ff12 	bl	8004358 <_free_r>
 8004534:	4625      	mov	r5, r4
 8004536:	4628      	mov	r0, r5
 8004538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800453c:	f000 f838 	bl	80045b0 <_malloc_usable_size_r>
 8004540:	4284      	cmp	r4, r0
 8004542:	4607      	mov	r7, r0
 8004544:	d802      	bhi.n	800454c <_realloc_r+0x34>
 8004546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800454a:	d812      	bhi.n	8004572 <_realloc_r+0x5a>
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff ff6e 	bl	8004430 <_malloc_r>
 8004554:	4605      	mov	r5, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d0ed      	beq.n	8004536 <_realloc_r+0x1e>
 800455a:	42bc      	cmp	r4, r7
 800455c:	4622      	mov	r2, r4
 800455e:	4631      	mov	r1, r6
 8004560:	bf28      	it	cs
 8004562:	463a      	movcs	r2, r7
 8004564:	f7ff fed0 	bl	8004308 <memcpy>
 8004568:	4631      	mov	r1, r6
 800456a:	4640      	mov	r0, r8
 800456c:	f7ff fef4 	bl	8004358 <_free_r>
 8004570:	e7e1      	b.n	8004536 <_realloc_r+0x1e>
 8004572:	4635      	mov	r5, r6
 8004574:	e7df      	b.n	8004536 <_realloc_r+0x1e>
	...

08004578 <_sbrk_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4d06      	ldr	r5, [pc, #24]	; (8004594 <_sbrk_r+0x1c>)
 800457c:	2300      	movs	r3, #0
 800457e:	4604      	mov	r4, r0
 8004580:	4608      	mov	r0, r1
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	f7fc fb54 	bl	8000c30 <_sbrk>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_sbrk_r+0x1a>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_sbrk_r+0x1a>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	20000180 	.word	0x20000180

08004598 <__malloc_lock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_lock+0x8>)
 800459a:	f000 b811 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 800459e:	bf00      	nop
 80045a0:	20000184 	.word	0x20000184

080045a4 <__malloc_unlock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__malloc_unlock+0x8>)
 80045a6:	f000 b80c 	b.w	80045c2 <__retarget_lock_release_recursive>
 80045aa:	bf00      	nop
 80045ac:	20000184 	.word	0x20000184

080045b0 <_malloc_usable_size_r>:
 80045b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b4:	1f18      	subs	r0, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfbc      	itt	lt
 80045ba:	580b      	ldrlt	r3, [r1, r0]
 80045bc:	18c0      	addlt	r0, r0, r3
 80045be:	4770      	bx	lr

080045c0 <__retarget_lock_acquire_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_release_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
